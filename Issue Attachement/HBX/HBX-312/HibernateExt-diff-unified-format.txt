? HibernateExt/org.hibernate.eclipse/.settings
? HibernateExt/org.hibernate.eclipse.console/.settings
? HibernateExt/org.hibernate.eclipse.help/.settings
? HibernateExt/org.hibernate.eclipse.mapper/.settings
Index: HibernateExt/build.bat
===================================================================
RCS file: /cvsroot/hibernate/HibernateExt/build.bat,v
retrieving revision 1.3
diff -u -r1.3 build.bat
--- HibernateExt/build.bat	12 May 2005 14:39:40 -0000	1.3
+++ HibernateExt/build.bat	3 Jul 2005 00:47:43 -0000
@@ -1,2 +1,2 @@
-set HIBERNATECORE=%~dp0..\hibernate-3.0
+set HIBERNATECORE=%~dp0..\hibernate-3.1
 java -cp "%HIBERNATECORE%\lib\ant-launcher-1.6.3.jar" org.apache.tools.ant.launch.Launcher -lib %HIBERNATECORE%/lib %1 %2 %3 %4 %5
Index: HibernateExt/build.xml
===================================================================
RCS file: /cvsroot/hibernate/HibernateExt/build.xml,v
retrieving revision 1.9
diff -u -r1.9 build.xml
--- HibernateExt/build.xml	1 Dec 2004 12:22:12 -0000	1.9
+++ HibernateExt/build.xml	3 Jul 2005 00:47:43 -0000
@@ -17,7 +17,7 @@
   <!-- Name of project and version, used to create filenames -->
   <property name="Name" value="Hibernate Extensions"/>
   <property name="name" value="hibernate-extensions"/>
-  <property name="version" value="3.0"/>
+  <property name="version" value="3.1"/>
 
   <import file="common/common-build.xml"/>
 
@@ -26,6 +26,12 @@
       <fileset dir="." includes="*/build.xml" excludes="avalon/build.xml,*eclipse*/build.xml"/>
 	</subant>
   </target>
+  
+  <target name="tools" depends="" description="Build just tools">
+	<subant inheritall="false">
+      <fileset dir="." includes="tools/build.xml"/>
+	</subant>
+  </target>  
 
   <target name="clean">
 	<subant target="clean" inheritall="false">
Index: HibernateExt/org.hibernate.eclipse/.classpath
===================================================================
RCS file: /cvsroot/hibernate/HibernateExt/org.hibernate.eclipse/.classpath,v
retrieving revision 1.9
diff -u -r1.9 .classpath
--- HibernateExt/org.hibernate.eclipse/.classpath	7 Jun 2005 11:17:01 -0000	1.9
+++ HibernateExt/org.hibernate.eclipse/.classpath	3 Jul 2005 00:47:45 -0000
@@ -1,11 +1,10 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <classpath>
-	<classpathentry kind="src" path="src/"/>
+	<classpathentry kind="src" path="src"/>
 	<classpathentry exported="true" kind="lib" path="lib/antlr-2.7.5H3.jar"/>
 	<classpathentry exported="true" kind="lib" path="lib/asm.jar"/>
 	<classpathentry exported="true" kind="lib" path="lib/asm-attrs.jar"/>
 	<classpathentry exported="true" kind="lib" path="lib/c3p0-0.8.5.2.jar"/>
-	<classpathentry exported="true" kind="lib" path="lib/cglib-2.1.jar"/>
 	<classpathentry exported="true" kind="lib" path="lib/commons-collections-2.1.1.jar"/>
 	<classpathentry exported="true" kind="lib" path="lib/commons-logging-1.0.4.jar"/>
 	<classpathentry exported="true" kind="lib" path="lib/concurrent-1.3.2.jar"/>
@@ -14,7 +13,7 @@
 	<classpathentry exported="true" kind="lib" path="lib/ehcache-1.1.jar"/>
 	<classpathentry exported="true" kind="lib" path="lib/hibernate3.jar"/>
 	<classpathentry exported="true" kind="lib" path="lib/hibernateconsole.jar"/>
-	<classpathentry exported="true" kind="lib" path="lib/hibernate-tools.jar"/>
+	<classpathentry exported="true" sourcepath="C:/work/hibernate-3/HibernateExt/tools/src/java" kind="lib" path="lib/hibernate-tools.jar"/>
 	<classpathentry exported="true" kind="lib" path="lib/jboss-cache.jar"/>
 	<classpathentry exported="true" kind="lib" path="lib/jboss-common.jar"/>
 	<classpathentry exported="true" kind="lib" path="lib/jboss-jmx.jar"/>
@@ -33,5 +32,6 @@
 	<classpathentry exported="true" kind="lib" path="lib/velocity-tools-generic-1.1.jar"/>
 	<classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>
 	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"/>
+	<classpathentry kind="lib" path="lib/cglib-2.1.1.jar"/>
 	<classpathentry kind="output" path="build/eclipse"/>
 </classpath>
Index: HibernateExt/org.hibernate.eclipse.console/src/org/hibernate/eclipse/console/wizards/ArtifactGeneratorWizard.java
===================================================================
RCS file: /cvsroot/hibernate/HibernateExt/org.hibernate.eclipse.console/src/org/hibernate/eclipse/console/wizards/ArtifactGeneratorWizard.java,v
retrieving revision 1.19
diff -u -r1.19 ArtifactGeneratorWizard.java
--- HibernateExt/org.hibernate.eclipse.console/src/org/hibernate/eclipse/console/wizards/ArtifactGeneratorWizard.java	18 Jun 2005 23:37:43 -0000	1.19
+++ HibernateExt/org.hibernate.eclipse.console/src/org/hibernate/eclipse/console/wizards/ArtifactGeneratorWizard.java	3 Jul 2005 00:47:45 -0000
@@ -29,6 +29,7 @@
 import org.hibernate.eclipse.console.HibernateConsolePlugin;
 import org.hibernate.eclipse.console.utils.EclipseImages;
 import org.hibernate.tool.hbm2x.ConfigurationNavigator;
+import org.hibernate.tool.hbm2x.DAOExporter;
 import org.hibernate.tool.hbm2x.DocExporter;
 import org.hibernate.tool.hbm2x.Exporter;
 import org.hibernate.tool.hbm2x.HibernateConfigurationExporter;
@@ -85,6 +86,7 @@
         final String configurationName = page.getConfigurationName();
 		final boolean reveng = page.isReverseEngineerEnabled();
 		final boolean genjava = page.isGenerateJava();
+        final boolean gendao = page.isGenerateDao();
 		final boolean genhbm = page.isGenerateMappings();
 		final boolean gencfg = page.isGenerateCfg();
         final boolean preferRaw = page.isPreferRawCompositeIds();
@@ -95,7 +97,7 @@
 		IRunnableWithProgress op = new IRunnableWithProgress() {
 			public void run(IProgressMonitor monitor) throws InvocationTargetException {
 				try {
-					doFinish(configurationName, output, outputPackage, revengsettings, reveng, genjava, genhbm, gencfg, monitor, preferRaw, templatedir, ejb3, gendoc);
+					doFinish(configurationName, output, outputPackage, revengsettings, reveng, genjava, gendao, genhbm, gencfg, monitor, preferRaw, templatedir, ejb3, gendoc);
 				} catch (CoreException e) {
 					throw new InvocationTargetException(e);
 				} finally {
@@ -131,7 +133,7 @@
 
 	private void doFinish(
 		String configName, IPath output,
-		String outputPackage, IPath revengsettings, boolean reveng, final boolean genjava, final boolean genhbm, final boolean gencfg, final IProgressMonitor monitor, boolean preferRawCompositeids, IPath templateDir, final boolean ejb3, final boolean gendoc)
+		String outputPackage, IPath revengsettings, boolean reveng, final boolean genjava, final boolean gendao, final boolean genhbm, final boolean gencfg, final IProgressMonitor monitor, boolean preferRawCompositeids, IPath templateDir, final boolean ejb3, final boolean gendoc)
 		throws CoreException {
 		// create a sample file
 		monitor.beginTask("Generating artifacts for " + configName, 10);
@@ -180,6 +182,9 @@
 				javaExporter.setEjb3(ejb3);
 				javaExporter.setGenerics(ejb3);
 				javaExporter.setTemplatePaths(templatePaths);
+                // Add support for DAO generation
+                final DAOExporter daoExporter = new DAOExporter(cfg,outputdir);
+                daoExporter.setTemplatePaths(templatePaths);
 				final Exporter cfgExporter = new HibernateConfigurationExporter(cfg, outputdir); 
 				
 				if(genhbm) {
@@ -193,17 +198,23 @@
 					javaExporter.start();
 					monitor.worked(6);
 				}
+                
+                if(gendao) {
+                    monitor.subTask("DAO code");
+                    daoExporter.start();
+                    monitor.worked(7);
+                }
 				
 				if(gencfg) {
 					monitor.subTask("hibernate configuration");
 					cfgExporter.start();
-					monitor.worked(7);
+					monitor.worked(8);
 				}
 				
 				if(gendoc) {
 					monitor.subTask("hibernate doc");
 					new DocExporter(cfg, outputdir).start();
-					monitor.worked(8);
+					monitor.worked(9);
 				}
                 try {
                     resource.refreshLocal(IResource.DEPTH_INFINITE, monitor);
Index: HibernateExt/org.hibernate.eclipse.console/src/org/hibernate/eclipse/console/wizards/BasicGeneratorSettingsPage.java
===================================================================
RCS file: /cvsroot/hibernate/HibernateExt/org.hibernate.eclipse.console/src/org/hibernate/eclipse/console/wizards/BasicGeneratorSettingsPage.java,v
retrieving revision 1.8
diff -u -r1.8 BasicGeneratorSettingsPage.java
--- HibernateExt/org.hibernate.eclipse.console/src/org/hibernate/eclipse/console/wizards/BasicGeneratorSettingsPage.java	18 Jun 2005 23:37:43 -0000	1.8
+++ HibernateExt/org.hibernate.eclipse.console/src/org/hibernate/eclipse/console/wizards/BasicGeneratorSettingsPage.java	3 Jul 2005 00:47:45 -0000
@@ -51,6 +51,8 @@
 	private SelectionButtonDialogField generatejava;
 	private SelectionButtonDialogField enableEJB3annotations;
     
+    private SelectionButtonDialogField generatedao;
+    
 	private SelectionButtonDialogField generatemappings;
 
 	private SelectionButtonDialogField generatedocs;
@@ -90,7 +92,7 @@
 		
 		container.setLayout(layout);
 		layout.numColumns = 3;
-		layout.verticalSpacing = 9;
+		layout.verticalSpacing = 10;
 		
 		consoleConfigurationName = new ComboDialogField(SWT.READ_ONLY);
 		consoleConfigurationName.setLabelText("Console &configuration:");
@@ -124,7 +126,7 @@
 		
         templatedir = new StringButtonDialogField(new IStringButtonAdapter() {
             public void changeControlPressed(DialogField field) {
-                IPath[] paths = DialogSelectionHelper.chooseFileEntries(getShell(),  getTemplateDirectory(), new IPath[0], "Select output directory", "Choose directory in which the generated files will be stored", new String[0], false, true, false);
+                IPath[] paths = DialogSelectionHelper.chooseFileEntries(getShell(),  getTemplateDirectory(), new IPath[0], "Select template directory", "Choose directory containing custom templates", new String[0], false, true, false);
                 if(paths!=null && paths.length==1) {
                     templatedir.setText( ( (paths[0]).toOSString() ) );
                 }                   
@@ -160,6 +162,9 @@
         
         generatejava.attachDialogField(enableEJB3annotations);
         
+        generatedao = new SelectionButtonDialogField(SWT.CHECK);
+        generatedao.setLabelText("Generate DAO code (.java)");
+        
         useOwnTemplates = new SelectionButtonDialogField(SWT.CHECK);
         useOwnTemplates.setDialogFieldListener(fieldlistener);
         useOwnTemplates.setLabelText("Use custom templates");
@@ -191,6 +196,7 @@
 		generatejava.doFillIntoGrid(container, 3);
         fillLabel(container);
         enableEJB3annotations.doFillIntoGrid(container, 2);
+        generatedao.doFillIntoGrid(container, 3);
 		generatemappings.doFillIntoGrid(container, 3);
 		generatecfgfile.doFillIntoGrid(container, 3);
 		generatedocs.doFillIntoGrid(container, 3);
@@ -343,6 +349,13 @@
 	public boolean isGenerateJava() {
 		return generatejava.isSelected();
 	}
+    
+    /**
+     * @return
+     */
+    public boolean isGenerateDao() {
+        return generatedao.isSelected();
+    }   
 
 
 	/**
Index: HibernateExt/tools/src/java/org/hibernate/tool/hbm2x/DAOExporter.java
===================================================================
RCS file: /cvsroot/hibernate/HibernateExt/tools/src/java/org/hibernate/tool/hbm2x/DAOExporter.java,v
retrieving revision 1.2
diff -u -r1.2 DAOExporter.java
--- HibernateExt/tools/src/java/org/hibernate/tool/hbm2x/DAOExporter.java	11 May 2005 21:51:07 -0000	1.2
+++ HibernateExt/tools/src/java/org/hibernate/tool/hbm2x/DAOExporter.java	3 Jul 2005 00:47:46 -0000
@@ -6,19 +6,51 @@
 import org.hibernate.mapping.Component;
 import org.hibernate.mapping.PersistentClass;
 
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+
 public class DAOExporter extends POJOExporter {
 
-	public DAOExporter(Configuration cfg, File outputdir) {
-		super(cfg, outputdir);
-	}
-
-	public boolean startComponent(Component component) throws ExporterException {
-		// we ignore
-		return false;
-	}
-	
-	protected String getNameForClass(PersistentClass clazz) {	
-		return super.getNameForClass(clazz) + "Home";
-	}
+    private static final String DAO_DAOHOME_VM = "dao/daohome.vm";
+
+    private static final Log log = LogFactory.getLog(DAOExporter.class);
+
+    String templateName = DAO_DAOHOME_VM;
+
+    public DAOExporter(Configuration cfg, File outputdir) {
+        super(cfg, outputdir);
+        log.info("Starting ...");
+    }
+
+    public boolean startComponent(Component component) throws ExporterException {
+        // we ignore
+        return false;
+    }
+
+    protected String getNameForClass(PersistentClass clazz) {
+        String className = super.getNameForClass(clazz) + "DAO";
+        log.info("DAO class: " + className);
+        return className;
+    }
+
+    public void exportPersistentClass(PersistentClass clazz) {
+        runVelocity(clazz, getNameForClass(clazz), templateName);
+    }
+
+    public void start() {
+        // TODO Auto-generated method stub
+        super.start();
+    }
+
+    public void exportComponent(Component component) throws ExporterException {
+        return;
+    }
+
+    protected void runVelocity(Object clazz, String qualifiedDeclarationName,
+            String templateName) {
+        log.info("Generating " + qualifiedDeclarationName + " with "
+                + templateName);
+        super.runVelocity(clazz, qualifiedDeclarationName, templateName);
+    }
 
 }
Index: HibernateExt/tools/src/velocity/dao/daohome.vm
===================================================================
RCS file: /cvsroot/hibernate/HibernateExt/tools/src/velocity/dao/daohome.vm,v
retrieving revision 1.2
diff -u -r1.2 daohome.vm
--- HibernateExt/tools/src/velocity/dao/daohome.vm	11 May 2005 12:51:49 -0000	1.2
+++ HibernateExt/tools/src/velocity/dao/daohome.vm	3 Jul 2005 00:47:46 -0000
@@ -1,82 +1,24 @@
 $c2j.getPackageDeclaration($clazz)
 
-#if($ejb3) 
-import javax.ejb.*;	
-import javax.persistence.*;
-#else
+
 import org.hibernate.*;
-#end
+import org.hibernate.criterion.Example;
 import java.util.*;
 import org.apache.commons.logging.*;
+import javax.naming.InitialContext;
 
-/**
-$c2j.toJavaDoc($render.eval("@see $c2j.getQualifiedDeclarationName($clazz)"),0)
- */
-#if($ejb3) 
-@Stateless
-#end
-public class $c2j.getDeclarationName($clazz)Home {
+#set($cls = ".class")
 
-    private static final Log log = LogFactory.getLog($c2j.getDeclarationName($clazz).class);
+public class $c2j.getDeclarationName($clazz)DAO {
+
+    private static final Log log = LogFactory.getLog($c2j.getDeclarationName($clazz)DAO\$cls);
 
-#if($ejb3) 
-    @Inject private EntityManager entityManager;
-    
-    public void persist($c2j.getDeclarationName($clazz) transientInstance) {
-        log.debug("persisting $c2j.getDeclarationName($clazz) instance");
-        try {
-            entityManager.persist(transientInstance);
-            log.debug("persist successful");
-        }
-        catch (RuntimeException re) {
-            log.error("persist failed", re);
-            throw re;
-        }
-    }
-    
-    public void remove($c2j.getDeclarationName($clazz) persistentInstance) {
-        log.debug("removing $c2j.getDeclarationName($clazz) instance");
-        try {
-            entityManager.remove(persistentInstance);
-            log.debug("remove successful");
-        }
-        catch (RuntimeException re) {
-            log.error("remove failed", re);
-            throw re;
-        }
-    }
-    
-    public $c2j.getDeclarationName($clazz) merge($c2j.getDeclarationName($clazz) detachedInstance) {
-        log.debug("merging $c2j.getDeclarationName($clazz) instance");
-        try {
-            $c2j.getDeclarationName($clazz) result = entityManager.merge(detachedInstance);
-            log.debug("merge successful");
-            return result;
-        }
-        catch (RuntimeException re) {
-            log.error("merge failed", re);
-            throw re;
-        }
-    }
-    
-    public $c2j.getDeclarationName($clazz) findById(($c2j.stripPackage( $c2j.getJavaTypeName($clazz.identifierProperty), $clazz ) id) {
-        log.debug("getting $c2j.getDeclarationName($clazz) instance with id: " + id);
-        try {
-            ($c2j.getDeclarationName($clazz)) instance = entityManager.find($c2j.getDeclarationName($clazz).class, id);
-            log.debug("get successful");
-            return instance;
-        }
-        catch (RuntimeException re) {
-            log.error("get failed", re);
-            throw re;
-        }
-    }
-#else
     private final SessionFactory sessionFactory = getSessionFactory();
     
     private static SessionFactory getSessionFactory() {
         try {
-            return (SessionFactory) new InitialContext.lookup("SessionFactory");
+        	InitialContext ctx = new InitialContext();
+            return (SessionFactory) ctx.lookup("SessionFactory");
         }
         catch (Exception e) {
             log.error("Could not locate SessionFactory in JNDI", e);
@@ -146,10 +88,10 @@
         }
     }
     
-    public $c2j.getDeclarationName($clazz) findById(($c2j.stripPackage( $c2j.getJavaTypeName($clazz.identifierProperty), $clazz ) id) {
+    public $c2j.getDeclarationName($clazz) findById($c2j.stripPackage( $c2j.getJavaTypeName($clazz.identifierProperty), $clazz ) id) {
         log.debug("getting $c2j.getDeclarationName($clazz) instance with id: " + id);
         try {
-            ($c2j.getDeclarationName($clazz)) instance = ($c2j.getDeclarationName($clazz)) sessionFactory.getCurrentSession()
+            $c2j.getDeclarationName($clazz) instance = ($c2j.getDeclarationName($clazz)) sessionFactory.getCurrentSession()
                     .get("$clazz.entityName", id);
             if (instance==null) {
                 log.debug("get successful, no instance found");
@@ -166,9 +108,9 @@
     }
     
     public List findByExample($c2j.getDeclarationName($clazz) instance) {
-        log.debug("finding $c2j.getDeclarationName($clazz) instance by example);
+        log.debug("finding $c2j.getDeclarationName($clazz) instance by example");
         try {
-            List results = ($c2j.getDeclarationName($clazz)) sessionFactory.getCurrentSession()
+            List results = sessionFactory.getCurrentSession()
                     .createCriteria("$clazz.entityName")
                     .add( Example.create(instance) )
                     .list();
@@ -182,6 +124,6 @@
         
     }
         
-#end
+
 
 }
\ No newline at end of file
