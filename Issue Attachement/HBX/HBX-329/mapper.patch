diff -X /u2/radni/excl -urN /u2/Hibernate-2.2/HibernateExt/org.hibernate.eclipse.mapper/plugin.xml org.hibernate.eclipse.mapper/plugin.xml
--- /u2/Hibernate-2.2/HibernateExt/org.hibernate.eclipse.mapper/plugin.xml	2005-06-07 19:48:55.000000000 +0000
+++ org.hibernate.eclipse.mapper/plugin.xml	2005-07-06 05:11:52.000000000 +0000
@@ -110,7 +110,7 @@
             id="org.hibernate.eclipse.mapper.editors.ReverseEngineeringMultiPageEditor"
             name="Hibernate reverse engineering editor"/>
    </extension>
-    <extension point = "org.eclipse.wst.xml.uriresolver.catalogContributor">
+    <extension point = "org.eclipse.wst.xml.core.catalogContributor">
      <catalogContributor catalogId="default">
                <mappingInfo
                key="-//Hibernate/Hibernate Mapping DTD 3.0//EN"
diff -X /u2/radni/excl -urN /u2/Hibernate-2.2/HibernateExt/org.hibernate.eclipse.mapper/src/org/hibernate/eclipse/mapper/editors/ReverseEngineeringMultiPageEditor.java org.hibernate.eclipse.mapper/src/org/hibernate/eclipse/mapper/editors/ReverseEngineeringMultiPageEditor.java
--- /u2/Hibernate-2.2/HibernateExt/org.hibernate.eclipse.mapper/src/org/hibernate/eclipse/mapper/editors/ReverseEngineeringMultiPageEditor.java	2005-06-19 14:03:15.000000000 +0000
+++ org.hibernate.eclipse.mapper/src/org/hibernate/eclipse/mapper/editors/ReverseEngineeringMultiPageEditor.java	2005-07-06 05:19:28.000000000 +0000
@@ -12,6 +12,7 @@
 import org.eclipse.core.runtime.NullProgressMonitor;
 import org.eclipse.core.runtime.Status;
 import org.eclipse.jface.preference.IPreferenceStore;
+import org.eclipse.jface.text.BadLocationException;
 import org.eclipse.jface.text.IDocument;
 import org.eclipse.swt.events.ShellAdapter;
 import org.eclipse.swt.events.ShellEvent;
@@ -32,7 +33,9 @@
 import org.eclipse.wst.sse.core.internal.provisional.IStructuredModel;
 import org.eclipse.wst.sse.core.internal.provisional.exceptions.SourceEditingRuntimeException;
 import org.eclipse.wst.sse.ui.internal.StructuredTextEditor;
+import org.eclipse.wst.sse.ui.internal.provisional.extensions.ISourceEditingTextTools;
 import org.eclipse.wst.xml.core.internal.provisional.IXMLPreferenceNames;
+import org.eclipse.wst.xml.ui.internal.provisional.IDOMSourceEditingTextTools;
 import org.eclipse.wst.xml.ui.internal.provisional.StructuredTextEditorXML;
 import org.hibernate.eclipse.mapper.MapperPlugin;
 import org.hibernate.eclipse.mapper.editors.reveng.OverrideFormPage;
@@ -336,40 +339,68 @@
 	 * IExtendedMarkupEditor method
 	 */
 	public Node getCaretNode() {
-		if (getTextEditor() == null)
-			return null;
+		//if (getTextEditor() == null)
+		//	return null;
 
-		return getTextEditor().getCaretNode();
+		// return getTextEditor().getCaretNode();
+
+		try {
+			IDOMSourceEditingTextTools dom = (IDOMSourceEditingTextTools) getAdapter(IDOMSourceEditingTextTools.class);
+			if (dom == null)
+				return null;
+
+			// return getTextEditor().getCaretNode();
+			return dom.getNode(dom.getCaretOffset());
+		} catch (BadLocationException e) {
+			return null;
+		}
 	}
 
 	/**
 	 * IExtendedSimpleEditor method
 	 */
 	public int getCaretPosition() {
-		if (getTextEditor() == null)
+		// if (getTextEditor() == null)
+		// return -1;
+
+		// return getTextEditor().getCaretPosition();
+		ISourceEditingTextTools sse = (ISourceEditingTextTools) getAdapter(ISourceEditingTextTools.class);
+		if (sse == null)
 			return -1;
 
-		return getTextEditor().getCaretPosition();
+		return sse.getCaretOffset();
 	}
 
 	/**
 	 * IExtendedSimpleEditor method
 	 */
 	public IDocument getDocument() {
-		if (getTextEditor() == null)
+		/*
+		 * if (getTextEditor() == null) return null;
+		 * 
+		 * return getTextEditor().getDocument();
+		 */
+		ISourceEditingTextTools sse = (ISourceEditingTextTools) getAdapter(ISourceEditingTextTools.class);
+		if (sse == null)
 			return null;
 
-		return getTextEditor().getDocument();
+		return sse.getDocument();
 	}
 
 	/**
 	 * IExtendedMarkupEditor method
 	 */
 	public Document getDOMDocument() {
-		if (getTextEditor() == null)
+		/*
+		 * if (getTextEditor() == null) return null;
+		 * 
+		 * return getTextEditor().getDOMDocument();
+		 */
+		IDOMSourceEditingTextTools dom = (IDOMSourceEditingTextTools) getAdapter(IDOMSourceEditingTextTools.class);
+		if (dom == null)
 			return null;
 
-		return getTextEditor().getDOMDocument();
+		return dom.getDOMDocument();
 	}
 
 	/**
