Index: D:/jdk/hibernate_src/trunk/HibernateExt/tools/src/java/org/hibernate/tool/hbm2x/pojo/BasicPOJOClass.java
===================================================================
--- D:/jdk/hibernate_src/trunk/HibernateExt/tools/src/java/org/hibernate/tool/hbm2x/pojo/BasicPOJOClass.java	(revision 9841)
+++ D:/jdk/hibernate_src/trunk/HibernateExt/tools/src/java/org/hibernate/tool/hbm2x/pojo/BasicPOJOClass.java	(working copy)
@@ -251,10 +251,13 @@
 		else {
 			if(useCompareTo( typeName )) {
 				return "( (" + lh + "==" + rh + ") || ( " + lh + "!=null && " + rh + "!=null && " + lh + ".compareTo(" + rh + ")==0 ) )";
-			} else if ( c2j.isArray( typeName ) ) {
-				return "( java.util.Arrays.equals(" + lh + "," + rh + ") )";
 			} else {
-				return "( (" + lh + "==" + rh + ") || ( " + lh + "!=null && " + rh + "!=null && " + lh + ".equals(" + rh + ") ) )";
+				if(typeName.endsWith("[]")) {
+					importType("java.util.Arrays");
+					return "( (" + lh + "==" + rh + ") || ( " + lh + "!=null && " + rh + "!=null && Arrays.equals(" + lh + ", " + rh + ") ) )";
+				} else {
+					return "( (" + lh + "==" + rh + ") || ( " + lh + "!=null && " + rh + "!=null && " + lh + ".equals(" + rh + ") ) )";
+				}
 			}
 
 		}
@@ -573,21 +576,25 @@
 		if ( c2j.getMetaAsBool( property, "use-in-equals" ) ) {
 			String javaTypeName = c2j.getJavaTypeName( property, useGenerics, this );
 			boolean isPrimitive = c2j.isPrimitive( javaTypeName );
-			if ( !isPrimitive ) {				
-				buf.append( result )
-				.append( " = 37 * " )
-				.append( result )
-				.append( " + " );
-				buf.append( "( " )
-				.append( getGetterSignature( property ) )
-				.append( "() == null ? 0 : " )
-				.append( thisName )
-				.append( "." )
-				.append( getGetterSignature( property ) )
-				.append( "()" )
-				.append( ".hashCode()" )
-				.append( " )" )
-				.append(";");
+			if ( !isPrimitive ) {
+				if(javaTypeName.endsWith("[]")) {
+					buf.append(internalGenerateArrayHashcode(property, javaTypeName, result, thisName));
+				} else {
+					buf.append( result )
+					.append( " = 37 * " )
+					.append( result )
+					.append( " + " );
+					buf.append( "( " )
+					.append( getGetterSignature( property ) )
+					.append( "() == null ? 0 : " )
+					.append( thisName )
+					.append( "." )
+					.append( getGetterSignature( property ) )
+					.append( "()" )
+					.append( ".hashCode()" )
+					.append( " )" )
+					.append(";");
+				}
 			}
 			else {
 				buf.append( result )
@@ -609,6 +616,129 @@
 		return buf.toString();
 	}
 
+	
+	private String internalGenerateArrayHashcode(Property property, String javaTypeName, String result, String thisName)
+	{
+		StringBuffer buf = new StringBuffer();
+		
+		String propertyHashVarName = property.getName() + "Hashcode";
+		String propertyArrayName = property.getName() + "Property";
+		
+		// int propertyHash = 0;
+		buf.append( "int ")
+		.append( propertyHashVarName )
+		.append( " = 0;\n" );
+
+		// type[] proterty = getProperty();
+		buf.append( "         " )
+		.append( javaTypeName )
+		.append( " " )
+		.append( propertyArrayName )
+		.append( " = " )
+		.append( thisName )
+		.append( "." )
+		.append( getGetterSignature( property ) )
+		.append( "();\n");
+		
+		// if(property != null) {
+		buf.append( "         if(" )
+		.append( propertyArrayName )
+		.append( " != null) {\n" );
+		
+		// propertyHash = 1;
+		buf.append( "             " )
+		.append( propertyHashVarName )
+		.append( " = 1;\n" );
+		
+		//    for (int i=0; i<property.length; i++)
+		String elementType = javaTypeName.replaceAll("\\[\\]", "");
+		buf.append( "             for (int i=0; i<" )
+		.append( propertyArrayName )
+		.append( ".length; i++) {\n" );
+
+		if(javaTypeName.startsWith("long")) {
+			// int elementHash = (int)(propertyArray[i] ^ (propertyArray[i] >>> 32));
+			buf.append( "                 int elementHash = (int)(" )
+			.append( propertyArrayName )
+			.append( "[i] ^ (" )
+			.append( propertyArrayName )
+			.append( "[i] >>> 32));\n" );
+			
+			// propertyHash = 37 * propertyHash + elementHash;
+			buf.append( "                 " )
+			.append( propertyHashVarName )
+			.append( " = 37 * " )
+			.append( propertyHashVarName )
+			.append( " + elementHash;\n" );
+		} else if(javaTypeName.startsWith("boolean")) {
+			// propertyHash = 37 * propertyHash + (propertyArray[i] ? 1231 : 1237);
+			buf.append( "                 " )
+			.append( propertyHashVarName )
+			.append( " = 37 * " )
+			.append( propertyHashVarName )
+			.append( " + (" )
+			.append( propertyArrayName )
+			.append( "[i] ? 1231 : 1237);\n" );
+		} else if(javaTypeName.startsWith("float")) {
+			// propertyHash = 37 * propertyHash + Float.floatToIntBits(propertyArray[i]);
+			buf.append( "                 " )
+			.append( propertyHashVarName )
+			.append( " = 37 * " )
+			.append( propertyHashVarName )
+			.append( " + Float.floatToIntBits(" )
+			.append( propertyArrayName )
+			.append( "[i]);\n" );
+		} else if(javaTypeName.startsWith("double")) {
+			// long bits = Double.doubleToLongBits(propertyArray[i]);
+			buf.append( "                 long bits = Double.doubleToLongBits(" )
+			.append( propertyArrayName )
+			.append( "[i]);\n" );
+
+			// propertyHash = 37 * propertyHash + (int)(bits ^ (bits >>> 32));
+			buf.append( "                 " )
+			.append( propertyHashVarName )
+			.append( " = 37 * " )
+			.append( propertyHashVarName )
+			.append( " + (int)(bits ^ (bits >>> 32));\n" );
+		} else if(javaTypeName.startsWith("int")
+				|| javaTypeName.startsWith("short")
+				|| javaTypeName.startsWith("char")
+				|| javaTypeName.startsWith("byte")) {
+			// propertyHash = 37 * propertyHash + propertyArray[i];
+			buf.append( "                 " )
+			.append( propertyHashVarName )
+			.append( " = 37 * " )
+			.append( propertyHashVarName )
+			.append( " + " )
+			.append( propertyArrayName )
+			.append( "[i];\n" );
+		} else {	// Object[]
+			// propertyHash = 37 * propertyHash + propertyArray[i].hashCode();
+			buf.append( "                 " )
+			.append( propertyHashVarName )
+			.append( " = 37 * " )
+			.append( propertyHashVarName )
+			.append( " + " )
+			.append( propertyArrayName )
+			.append( "[i].hashCode();\n" );
+		}
+
+		buf.append( "             }\n" );
+		buf.append( "         }\n\n" );
+		
+		// result = 37 * result + arrayHashcode;
+		buf.append( "         " )
+		.append( result )
+		.append( " = 37 * " )
+		.append( result )
+		.append( " + " )
+		.append( propertyHashVarName )
+		.append( ";\n" );
+		
+		return buf.toString();
+	}
+
+	
 	public String getFieldModifiers(Property property) {
 		return getModifiers( property, "scope-field", "private" );
 	}
