Index: src/java/org/hibernate/tool/ant/Hbm2SpringDAOExporterTask.java
===================================================================
--- src/java/org/hibernate/tool/ant/Hbm2SpringDAOExporterTask.java	(revision 0)
+++ src/java/org/hibernate/tool/ant/Hbm2SpringDAOExporterTask.java	(revision 0)
@@ -0,0 +1,29 @@
+package org.hibernate.tool.ant;
+
+import org.hibernate.tool.hbm2x.Exporter;
+import org.hibernate.tool.hbm2x.SpringDAOExporter;
+
+/**
+ * @author Dennis Byrne, Peter Harrison
+ */
+public class Hbm2SpringDAOExporterTask extends Hbm2JavaExporterTask {
+
+	public Hbm2SpringDAOExporterTask(HibernateToolTask parent) {
+		super(parent);
+	}
+	
+	protected Exporter configureExporter(Exporter exp) {
+		SpringDAOExporter exporter = (SpringDAOExporter)exp;
+		super.configureExporter(exp);
+		return exporter;
+	}
+	
+	protected Exporter createExporter() {
+		return new SpringDAOExporter(parent.getConfiguration(), parent.getDestDir()) ;
+	}
+
+	public String getName() {
+		return "hbm2springdao (Generates a set of Spring Based DAOs)";
+	}
+
+}
Index: src/java/org/hibernate/tool/ant/HibernateToolTask.java
===================================================================
--- src/java/org/hibernate/tool/ant/HibernateToolTask.java	(revision 16136)
+++ src/java/org/hibernate/tool/ant/HibernateToolTask.java	(working copy)
@@ -125,7 +125,12 @@
         addGenerator( generator );
         return generator;
 	}
-	
+
+	public ExporterTask createHbm2SpringDAO(){
+        ExporterTask generator= new Hbm2SpringDAOExporterTask(this);
+        addGenerator( generator );
+        return generator;
+	}
 	
 	public QueryExporterTask createQuery() {
 		QueryExporterTask generator = new QueryExporterTask(this);
Index: src/java/org/hibernate/tool/hbm2x/SpringDAOExporter.java
===================================================================
--- src/java/org/hibernate/tool/hbm2x/SpringDAOExporter.java	(revision 0)
+++ src/java/org/hibernate/tool/hbm2x/SpringDAOExporter.java	(revision 0)
@@ -0,0 +1,50 @@
+package org.hibernate.tool.hbm2x;
+
+import java.io.File;
+import java.util.Map;
+
+import org.hibernate.cfg.Configuration;
+import org.hibernate.tool.hbm2x.pojo.POJOClass;
+
+public class SpringDAOExporter extends POJOExporter {
+
+    private static final String DAO_TEMPLATE = "dao/springdao.ftl";
+
+    private String sessionFactoryName = "SessionFactory";
+
+    public SpringDAOExporter() {
+    }
+    
+    public SpringDAOExporter(Configuration cfg, File outputdir) {
+        super(cfg, outputdir);        
+    }
+
+    protected void init() {
+    	super.init();
+    	setTemplateName(DAO_TEMPLATE);
+    	setFilePattern("{package-name}/{class-name}SpringDAO.java");    	    	
+    }
+    
+    protected void exportComponent(Map additionalContext, POJOClass element) {
+    	// noop - we dont want components
+    }
+
+	public String getSessionFactoryName() {
+		return sessionFactoryName;
+	}
+
+	public void setSessionFactoryName(String sessionFactoryName) {
+		this.sessionFactoryName = sessionFactoryName;
+	}
+
+	protected void setupContext() {
+		getProperties().put("sessionFactoryName", getSessionFactoryName());
+		super.setupContext();		
+	}
+	
+	public String getName() {
+		return "hbm2springdao";
+	}
+
+	
+}
Index: src/templates/dao/springdao.ftl
===================================================================
--- src/templates/dao/springdao.ftl	(revision 0)
+++ src/templates/dao/springdao.ftl	(revision 0)
@@ -0,0 +1,192 @@
+${pojo.getPackageDeclaration()}
+// Generated ${date} by Hibernate Tools ${version}
+
+import org.springframework.orm.hibernate3.support.HibernateDaoSupport;
+
+<#assign classbody>
+<#assign declarationName = pojo.importType(pojo.getDeclarationName())>
+/**
+ * Spring Data Access Object for domain model class ${declarationName}.
+ * @see ${pojo.getQualifiedDeclarationName()}
+ * @author Hibernate Tools
+ */
+public class ${declarationName}SpringDAO extends HibernateDaoSupport {
+
+    private static final ${pojo.importType("org.apache.commons.logging.Log")} log = ${pojo.importType("org.apache.commons.logging.LogFactory")}.getLog(${pojo.getDeclarationName()}SpringDAO.class);
+            
+    public void persist(${declarationName} transientInstance) {
+        log.debug("persisting ${declarationName} instance");
+        try {
+            getSession().persist(transientInstance);
+            log.debug("persist successful");
+        }
+        catch (RuntimeException re) {
+            log.error("persist failed", re);
+            throw re;
+        }
+    }
+    
+    public void attachDirty(${declarationName} instance) {
+        log.debug("attaching dirty ${declarationName} instance");
+        try {
+            getSession().saveOrUpdate(instance);
+            log.debug("attach successful");
+        }
+        catch (RuntimeException re) {
+            log.error("attach failed", re);
+            throw re;
+        }
+    }
+    
+    public void attachClean(${declarationName} instance) {
+        log.debug("attaching clean ${declarationName} instance");
+        try {
+            getSession().lock(instance, ${pojo.importType("org.hibernate.LockMode")}.NONE);
+            log.debug("attach successful");
+        }
+        catch (RuntimeException re) {
+            log.error("attach failed", re);
+            throw re;
+        }
+    }
+    
+    public void delete(${declarationName} persistentInstance) {
+        log.debug("deleting ${declarationName} instance");
+        try {
+            getSession().delete(persistentInstance);
+            log.debug("delete successful");
+        }
+        catch (RuntimeException re) {
+            log.error("delete failed", re);
+            throw re;
+        }
+    }
+    
+    public ${declarationName} merge(${declarationName} detachedInstance) {
+        log.debug("merging ${declarationName} instance");
+        try {
+            ${declarationName} result = (${declarationName}) getSession().merge(detachedInstance);
+            log.debug("merge successful");
+            return result;
+        }
+        catch (RuntimeException re) {
+            log.error("merge failed", re);
+            throw re;
+        }
+    }
+    
+<#if clazz.identifierProperty?has_content>
+    public ${declarationName} findById( ${c2j.getJavaTypeName(clazz.identifierProperty, jdk5)} id) {
+        log.debug("getting ${declarationName} instance with id: " + id);
+        try {
+            ${declarationName} instance = (${declarationName}) getSession().get("${clazz.entityName}", id);
+            if (instance==null) {
+                log.debug("get successful, no instance found");
+            }
+            else {
+                log.debug("get successful, instance found");
+            }
+            return instance;
+        }
+        catch (RuntimeException re) {
+            log.error("get failed", re);
+            throw re;
+        }
+    }
+</#if>
+    
+<#if clazz.hasNaturalId()>
+    public ${declarationName} findByNaturalId(${c2j.asNaturalIdParameterList(clazz)}) {
+        log.debug("getting ${declarationName} instance by natural id");
+        try {
+            ${declarationName} instance = (${declarationName}) getSession().createCriteria("${clazz.entityName}")
+<#if jdk5>
+                    .add( ${pojo.staticImport("org.hibernate.criterion.Restrictions", "naturalId")}()
+<#else>
+                   .add( ${pojo.importType("org.hibernate.criterion.Restrictions")}.naturalId()
+</#if>                    
+<#foreach property in pojo.getAllPropertiesIterator()>
+<#if property.isNaturalIdentifier()>
+                            .set("${property.name}", ${property.name})
+</#if>
+</#foreach>
+                        )
+                    .uniqueResult();
+            if (instance==null) {
+                log.debug("get successful, no instance found");
+            }
+            else {
+                log.debug("get successful, instance found");
+            }
+            return instance;
+        }
+        catch (RuntimeException re) {
+            log.error("query failed", re);
+            throw re;
+        }
+    }
+</#if>    
+<#if jdk5>
+    public ${pojo.importType("java.util.List")}<${declarationName}> findByExample(${declarationName} instance) {
+<#else>
+    public ${pojo.importType("java.util.List")} findByExample(${declarationName} instance) {
+</#if>
+        log.debug("finding ${declarationName} instance by example");
+        try {
+<#if jdk5>
+            ${pojo.importType("java.util.List")}<${declarationName}> results = (List<${declarationName}>) getSession()
+<#else>
+            ${pojo.importType("java.util.List")} results = getSession()
+</#if>
+                    .createCriteria("${clazz.entityName}")
+<#if jdk5>
+                    .add( ${pojo.staticImport("org.hibernate.criterion.Example", "create")}(instance) )
+<#else>
+                    .add(${pojo.importType("org.hibernate.criterion.Example")}.create(instance))
+</#if>
+            .list();
+            log.debug("find by example successful, result size: " + results.size());
+            return results;
+        }
+        catch (RuntimeException re) {
+            log.error("find by example failed", re);
+            throw re;
+        }
+    } 
+<#foreach queryName in cfg.namedQueries.keySet()>
+<#if queryName.startsWith(clazz.entityName + ".")>
+<#assign methname = c2j.unqualify(queryName)>
+<#assign params = cfg.namedQueries.get(queryName).parameterTypes><#assign argList = c2j.asFinderArgumentList(params, pojo)>
+<#if jdk5 && methname.startsWith("find")>
+    public ${pojo.importType("java.util.List")}<${declarationName}> ${methname}(${argList}) {
+<#elseif methname.startsWith("count")>
+    public int ${methname}(${argList}) {
+<#else>
+    public ${pojo.importType("java.util.List")} ${methname}(${argList}) {
+</#if>
+        ${pojo.importType("org.hibernate.Query")} query = getSession()
+                .getNamedQuery("${queryName}");
+<#foreach param in params.keySet()>
+<#if param.equals("maxResults")>
+		query.setMaxResults(maxResults);
+<#elseif param.equals("firstResult")>
+        query.setFirstResult(firstResult);
+<#else>
+        query.setParameter("${param}", ${param});
+</#if>
+</#foreach>
+<#if jdk5 && methname.startsWith("find")>
+        return (List<${declarationName}>) query.list();
+<#elseif methname.startsWith("count")>
+        return ( (Integer) query.uniqueResult() ).intValue();
+<#else>
+        return query.list();
+</#if>
+    }
+</#if>
+</#foreach>
+}
+</#assign>
+
+${pojo.generateImports()}
+${classbody}

