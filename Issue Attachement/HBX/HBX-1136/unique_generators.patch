Index: tools/src/java/org/hibernate/tool/hbm2x/pojo/EntityPOJOClass.java
===================================================================
--- tools/src/java/org/hibernate/tool/hbm2x/pojo/EntityPOJOClass.java	(revision 17230)
+++ tools/src/java/org/hibernate/tool/hbm2x/pojo/EntityPOJOClass.java	(working copy)
@@ -233,6 +233,7 @@
 			idResult.append(" ");
 
 			boolean isGenericGenerator = false; //TODO: how to handle generic now??
+			String generatorName = getDeclarationName();
 			if ( !"assigned".equals( strategy ) ) {
 
 				if ( !"native".equals( strategy ) ) {
@@ -244,26 +245,29 @@
 					else if ( "sequence".equals( strategy ) ) {
 						builder.resetAnnotation( importType("javax.persistence.GeneratedValue") )
 							.addAttribute( "strategy", staticImport("javax.persistence.GenerationType", "SEQUENCE" ) )
-						    .addQuotedAttribute( "generator", "generator" );
+						    .addQuotedAttribute( "generator", generatorName );
 						idResult.append(builder.getResult());
 
 						builder.resetAnnotation( importType("javax.persistence.SequenceGenerator") )
-							.addQuotedAttribute( "name", "generator" ) // TODO: shouldn't this be unique, e.g. entityName + sequenceName (or just sequencename) ?
+							.addQuotedAttribute( "name", generatorName )
 							.addQuotedAttribute( "sequenceName", properties.getProperty( org.hibernate.id.SequenceGenerator.SEQUENCE, null ) );
 							//	TODO HA does not support initialValue and allocationSize
 						wholeString.append( builder.getResult() );
 					}
 					else if ( MultipleHiLoPerTableGenerator.class.getName().equals( strategy ) ) {
 						builder.resetAnnotation( importType("javax.persistence.GeneratedValue") )
-						.addAttribute( "strategy", staticImport("javax.persistence.GenerationType", "TABLE" ) )
-					    .addQuotedAttribute( "generator", "generator" );
-						idResult.append(builder.getResult());
-						buildAnnTableGenerator( wholeString, properties );
+							.addAttribute( "strategy", staticImport("javax.persistence.GenerationType", "TABLE" ) )
+							.addQuotedAttribute( "generator", generatorName );
+						idResult.append(builder.getResult());				
+						builder.resetAnnotation( importType("javax.persistence.TableGenerator") )
+							.addQuotedAttribute( "name", generatorName );
+						buildAnnTableGenerator( builder, properties );
+						wholeString.append( builder.getResult() ).append("\n    ");
 					}
 					else {
 						isGenericGenerator = true;
 						builder.resetAnnotation( importType("javax.persistence.GeneratedValue") );
-						builder.addQuotedAttribute( "generator", "generator" );
+						builder.addQuotedAttribute( "generator", generatorName );
 						idResult.append(builder.getResult());
 					}
 				} else {
@@ -273,7 +277,7 @@
 			}
 			if ( isGenericGenerator ) {
 				builder.resetAnnotation( importType("org.hibernate.annotations.GenericGenerator") )
-					.addQuotedAttribute( "name", "generator" )
+					.addQuotedAttribute( "name", generatorName )
 					.addQuotedAttribute( "strategy", strategy);
 
 				List params = new ArrayList();
@@ -297,10 +301,8 @@
 		return wholeString.toString();
 	}
 
-	private void buildAnnTableGenerator(StringBuffer wholeString, Properties properties) {
+	private void buildAnnTableGenerator(AnnotationBuilder builder, Properties properties) {
 
-		AnnotationBuilder builder = AnnotationBuilder.createAnnotation( importType("javax.persistence.TableGenerator") );
-		builder.addQuotedAttribute( "name", "generator" );
 		builder.addQuotedAttribute( "table", properties.getProperty( "generatorTableName", "hibernate_sequences" ) );
 		if ( ! isPropertyDefault( PersistentIdentifierGenerator.CATALOG, properties ) ) {
 			builder.addQuotedAttribute( "catalog", properties.getProperty( PersistentIdentifierGenerator.CATALOG, "") );
@@ -320,7 +322,6 @@
 		if (! isPropertyDefault( MultipleHiLoPerTableGenerator.VALUE_COLUMN_NAME, properties ) ) {
 			builder.addQuotedAttribute( "valueColumnName", properties.getProperty( MultipleHiLoPerTableGenerator.VALUE_COLUMN_NAME, "") );
 		}
-		wholeString.append( builder.getResult() + "\n    " );
 	}
 
 	private boolean isPropertyDefault(String property, Properties properties) {
    