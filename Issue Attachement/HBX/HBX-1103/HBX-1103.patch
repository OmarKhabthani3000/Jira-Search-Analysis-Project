Index: java/org/hibernate/cfg/reveng/DefaultReverseEngineeringStrategy.java
===================================================================
--- java/org/hibernate/cfg/reveng/DefaultReverseEngineeringStrategy.java	(revision 15789)
+++ java/org/hibernate/cfg/reveng/DefaultReverseEngineeringStrategy.java	(working copy)
@@ -14,6 +14,7 @@
 import org.apache.commons.logging.LogFactory;
 import org.hibernate.mapping.Column;
 import org.hibernate.mapping.ForeignKey;
+import org.hibernate.mapping.PrimaryKey;
 import org.hibernate.mapping.Table;
 import org.hibernate.util.StringHelper;
 
@@ -258,6 +259,9 @@
 		if(settings.getDetectManyToMany()) {
 			Iterator foreignKeyIterator = table.getForeignKeyIterator();
 			List foreignKeys = new ArrayList();
+			
+			// if we have more than 2 fk, means we have more than 2 table implied
+			// in this table --> cannot be a simple many-to-many
 			while ( foreignKeyIterator.hasNext() ) {
 				ForeignKey fkey = (ForeignKey) foreignKeyIterator.next();
 				foreignKeys.add( fkey );
@@ -269,20 +273,31 @@
 				return false;
 			}
 			
+			// tests that all columns are implied in the fks
 			Set columns = new HashSet();
 			Iterator columnIterator = table.getColumnIterator();
 			while ( columnIterator.hasNext() ) {
 				Column column = (Column) columnIterator.next();
 				columns.add(column);
 			}
-		
+			
+			PrimaryKey pk = table.getPrimaryKey();
+			if ( pk.getColumns().size() != columns.size() )
+				return false;
+			
 			foreignKeyIterator = table.getForeignKeyIterator();
 			while ( !columns.isEmpty() && foreignKeyIterator.hasNext() ) {
 				ForeignKey element = (ForeignKey) foreignKeyIterator.next();				
 				columns.removeAll( element.getColumns() );				
 			}
 			// what if one of the columns is not the primary key?
+			
 			return columns.isEmpty();
+			
+
+			
+			
+			
 		} else {
 			return false;
 		}
Index: test/org/hibernate/tool/test/jdbc2cfg/OneToOneTest.java
===================================================================
--- test/org/hibernate/tool/test/jdbc2cfg/OneToOneTest.java	(revision 15789)
+++ test/org/hibernate/tool/test/jdbc2cfg/OneToOneTest.java	(working copy)
@@ -186,8 +186,11 @@
 		assertFileAndExists( new File(getOutputDir(), "AddressPerson.hbm.xml") );
 		assertFileAndExists( new File(getOutputDir(), "AddressMultiPerson.hbm.xml") );
 		assertFileAndExists( new File(getOutputDir(), "MultiPerson.hbm.xml") );
+		assertFileAndExists( new File(getOutputDir(), "Middle.hbm.xml") );
+		assertFileAndExists( new File(getOutputDir(), "Left.hbm.xml") );
+		assertFileAndExists( new File(getOutputDir(), "Right.hbm.xml") );
 		
-		assertEquals(4, getOutputDir().listFiles().length);
+		assertEquals(7, getOutputDir().listFiles().length);
 	
 		POJOExporter exporter = new POJOExporter(cfg, getOutputDir() );
 		exporter.setTemplatePath(new String[0]);
@@ -213,7 +216,10 @@
 		    .addFile( new File(getOutputDir(), "Person.hbm.xml") )
 		    .addFile( new File(getOutputDir(), "AddressPerson.hbm.xml") )
 			.addFile( new File(getOutputDir(), "AddressMultiPerson.hbm.xml"))
-			.addFile( new File(getOutputDir(), "MultiPerson.hbm.xml"));
+			.addFile( new File(getOutputDir(), "MultiPerson.hbm.xml"))
+			.addFile( new File(getOutputDir(), "Middle.hbm.xml"))
+			.addFile( new File(getOutputDir(), "Left.hbm.xml"))
+			.addFile( new File(getOutputDir(), "Right.hbm.xml"));
 		
 		configuration.buildMappings();
 
@@ -239,7 +245,7 @@
 		assertFileAndExists( new File(getOutputDir(), "AddressMultiPersonId.java") );
 		assertFileAndExists( new File(getOutputDir(), "MultiPerson.java") );
 		
-		assertEquals(6, getOutputDir().listFiles().length);
+		assertEquals(9, getOutputDir().listFiles().length);
 		ArrayList list = new ArrayList();
 		List jars = new ArrayList();
 		addAnnotationJars(jars);
@@ -256,6 +262,9 @@
         Class addressMultiPersonId = ucl.loadClass("AddressMultiPersonId");
         Class addressPerson = ucl.loadClass("AddressPerson");
         Class multiPersonIdClass = ucl.loadClass("MultiPersonId");
+        Class middleClass = ucl.loadClass("Middle");
+        Class rightClass = ucl.loadClass("Left");
+        Class leftClass = ucl.loadClass("Right");
         try {
         Thread.currentThread().setContextClassLoader(ucl);
 		AnnotationConfiguration configuration = new AnnotationConfiguration();
@@ -264,7 +273,10 @@
 			.addAnnotatedClass(addressMultiPerson)
 			.addAnnotatedClass(addressMultiPersonId)
 			.addAnnotatedClass(addressPerson)
-			.addAnnotatedClass(multiPersonIdClass);
+			.addAnnotatedClass(multiPersonIdClass)
+			.addAnnotatedClass(middleClass)
+			.addAnnotatedClass(rightClass)
+			.addAnnotatedClass(leftClass);
 		
 		configuration.buildMappings();
 		new SchemaValidator(configuration).validate();
@@ -295,6 +307,10 @@
 	
 	protected String[] getCreateSQL() {
 		return new String[] {
+			// middle left and right are used to test a false association table isn't detected.
+			"create table LEFT ( id integer not null, primary key (id) )",
+			"create table RIGHT ( id integer not null, primary key (id) )",
+			"create table MIDDLE ( left_id integer not null, right_id integer not null, primary key (left_id), constraint FK_MIDDLE_LEFT foreign key (left_id) references LEFT, constraint FK_MIDDLE_RIGHT foreign key (right_id) references RIGHT)",
 			"create table PERSON ( person_id integer not null, name varchar(50), primary key (person_id) )",
 			"create table ADDRESS_PERSON ( address_id integer not null, name varchar(50), primary key (address_id), constraint address_person foreign key (address_id) references PERSON)",			
 			"create table MULTI_PERSON ( person_id integer not null, person_compid integer not null, name varchar(50), primary key (person_id, person_compid) )",
@@ -305,6 +321,9 @@
 
 	protected String[] getDropSQL() {
 		return new String[] {
+				"drop table MIDDLE",
+				"drop table LEFT",
+				"drop table RIGHT",
 				"drop table ADDRESS_PERSON",
 				"drop table PERSON",
 				"drop table ADDRESS_MULTI_PERSON",
