/*
 * Created on 14-Feb-2005
 *
 */
package org.hibernate.tool.ant;

import org.hibernate.tool.hbm2x.Exporter;
import org.hibernate.tool.hbm2x.GenericExporter;
import org.apache.tools.ant.BuildException;
import org.hibernate.util.ReflectHelper;

/**
 * Defines HibernateTool subtask  
 * @author max
 * @see HibernateToolTask
 */
public class GenericExporterTask extends ExporterTask {

	public GenericExporterTask(HibernateToolTask parent) {
		super(parent);
	}

	String templateName;
	String exporterClass;
	String filePattern;
	
	/**
	 * The FilePattern defines the file(s) to be generated by exporter.
	 * @param filePattern
	 */
	public void setFilePattern(String filePattern) {
		this.filePattern = filePattern;
	}
	
	/**
	 * Defines the template file to be used by exporter
	 * @param templateName
	 */
	public void setTemplate(String templateName) {
		this.templateName = templateName;
	}
	
	/**
	 * Specifies the exporter to use. Defaults to
	 * org.hibernate.tool.hbm2x.GenericExporter .
	 * 
	 * @param exporterClass
	 *            the fqcn of the exporter. Must implement the
	 *            org.hibernate.tool.hbm2x.Exporter interface
	 * @see Exporter
	 * @see GenericExporter
	 */
	public void setExporterClass(String exporterClass) {
		this.exporterClass = exporterClass;
	}
	
	/**
     * Instanciates the real tool to do the job.
     * @throws BuildException if the exporterClass is supplied 
     * but is not implementing the <c>Exporter</c> interface.
     * @see Exporter
	 */
	protected Exporter createExporter() {		
		if (exporterClass == null) {
			return new GenericExporter();
		} else {
			try {
				Class theClass = ReflectHelper.classForName(exporterClass);
				return (Exporter) theClass.newInstance();
			} catch (ClassNotFoundException e) {
				throw new BuildException("Could not find custom exporter", e);
			} catch (InstantiationException e) {
				throw new BuildException("Could not create custom exporter", e);
			} catch (IllegalAccessException e) {
				throw new BuildException("Could not access custom exporter", e);
			}
		}
	}
	
	/**
	 * Configures the exporter according to task attributes specified in build file
	 */
	protected Exporter configureExporter(Exporter exp) {
		super.configureExporter(exp);
		// TODO: always require a GenericExporter, otherwise task attributes will be SILENTLY IGNORED 
		if(exp instanceof GenericExporter) {
			GenericExporter exporter = (GenericExporter) exp;
			exporter.setFilePattern(filePattern);
			exporter.setTemplateName(templateName);
			//exporter.setExporterClassName(exporterClass);
		}
		
		return exp;
	}

	/**
	 * The tool name to be shown in ant log.
	 */
	public String getName() {
		return "generic exporter " + ((exporterClass==null) ? "" : exporterClass);
	}
}
/*
 * changes on 2006-08-25 (Michelle Baert):
 *  - createExporter() now creates the custom exporter when specified
 *  - suppressed usage of GenericExporter.exporterClass property
 *  - getName(): added a space before exporterClass
 *  - started some javadoc ...  
 */