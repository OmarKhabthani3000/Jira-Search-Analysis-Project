Index: D:/workspaces/hibernate/org.hibernate.eclipse.console/src/org/hibernate/eclipse/hqleditor/HQLLexerRule.java
===================================================================
--- D:/workspaces/hibernate/org.hibernate.eclipse.console/src/org/hibernate/eclipse/hqleditor/HQLLexerRule.java	(revision 7708)
+++ D:/workspaces/hibernate/org.hibernate.eclipse.console/src/org/hibernate/eclipse/hqleditor/HQLLexerRule.java	(working copy)
@@ -22,11 +22,15 @@
 package org.hibernate.eclipse.hqleditor;
 
 import java.io.IOException;
+import java.io.InputStream;
 import java.io.Reader;
 
+import org.eclipse.jface.text.TextAttribute;
 import org.eclipse.jface.text.rules.ICharacterScanner;
 import org.eclipse.jface.text.rules.IRule;
 import org.eclipse.jface.text.rules.IToken;
+import org.eclipse.swt.SWT;
+import org.hibernate.eclipse.hqleditor.preferences.HQLPreferenceConstants;
 import org.hibernate.hql.antlr.HqlBaseLexer;
 import org.hibernate.hql.antlr.HqlSqlTokenTypes;
 
@@ -42,7 +46,7 @@
 	}
 
 	public IToken evaluate(final ICharacterScanner scanner) {
-		HqlBaseLexer lexer = new HqlBaseLexer(new Reader() {
+		/*HqlBaseLexer lexer = new HqlBaseLexer(new Reader() {
 
 			public void close() throws IOException {
 				// noop				
@@ -67,17 +71,26 @@
 				}				
 			}
 			
-		});
+		});*/
+		HqlBaseLexer lexer = new HqlBaseLexer(new InputStream(){
+
+			@Override
+			public int read() throws IOException {
+				return scanner.read();
+			}});
 		try {
 			Token token = lexer.nextToken();
 			if(token.getType()==HqlSqlTokenTypes.IDENT) {
 				return hqlToken;
-			} 
+			} else {
+				if (token.getText() != null)
+					for (int i= token.getText().length(); i >= 0; i--)
+						scanner.unread();
+			}
 		}
 		catch (TokenStreamException e) {
 			// undefined
 		}
-		
 		return org.eclipse.jface.text.rules.Token.UNDEFINED;		
 	}
 
