Index: D:/workspaces/hibernate/org.hibernate.eclipse.console/src/org/hibernate/eclipse/hqleditor/HQLCodeScanner.java
===================================================================
--- D:/workspaces/hibernate/org.hibernate.eclipse.console/src/org/hibernate/eclipse/hqleditor/HQLCodeScanner.java	(revision 7708)
+++ D:/workspaces/hibernate/org.hibernate.eclipse.console/src/org/hibernate/eclipse/hqleditor/HQLCodeScanner.java	(working copy)
@@ -224,12 +224,8 @@
     public HQLCodeScanner( HQLColors colorProvider ) {
         final IToken commentToken    = new Token( new TextAttribute( colorProvider.getColor( HQLPreferenceConstants.HQL_COMMENT_COLOR )));
         final IToken stringToken     = new Token( new TextAttribute( colorProvider.getColor( HQLPreferenceConstants.HQL_QUOTED_LITERAL_COLOR )));
-        final IToken keywordToken    = new Token( new TextAttribute( colorProvider.getColor( HQLPreferenceConstants.HQL_KEYWORD_COLOR ), null, SWT.BOLD)) {
-        	public Object getData() {
-        		// TODO Auto-generated method stub
-        		return super.getData();
-        	}
-        };
+        final IToken keywordToken    = new Token( new TextAttribute( colorProvider.getColor( HQLPreferenceConstants.HQL_KEYWORD_COLOR ), null, SWT.BOLD));
+        final IToken hqlToken    	 = new Token( new TextAttribute( colorProvider.getColor( HQLPreferenceConstants.HQL_KEYWORD_COLOR ), null, SWT.BOLD));
         final IToken functionToken   = new Token( new TextAttribute( colorProvider.getColor( HQLPreferenceConstants.HQL_KEYWORD_COLOR )));
         final IToken otherToken      = new Token( new TextAttribute( colorProvider.getColor( HQLPreferenceConstants.HQL_DEFAULT_COLOR )));        
         
@@ -241,7 +237,7 @@
         rules.add( new SingleLineRule( "'", "'", stringToken, '\\' )); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
         rules.add( new WhitespaceRule( new HQLWhiteSpaceDetector() ));
 
-        //rules.add( new HQLLexerRule( hqlToken )); // TODO: need to categorize tokens into types.
+        rules.add( new HQLLexerRule( hqlToken )); // TODO: need to categorize tokens into types.
         WordRule wordRule = new WordRule( new HQLWordDetector(), otherToken );
         addWordRules( keywordToken, wordRule, getHQLKeywords() );
         addWordRules( functionToken, wordRule, getHQLFunctionNames() );
