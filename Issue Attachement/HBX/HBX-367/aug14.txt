Index: tools/src/java/org/hibernate/tool/ant/HibernateToolTask.java
===================================================================
RCS file: /cvsroot/hibernate/HibernateExt/tools/src/java/org/hibernate/tool/ant/HibernateToolTask.java,v
retrieving revision 1.8
diff -u -r1.8 HibernateToolTask.java
--- tools/src/java/org/hibernate/tool/ant/HibernateToolTask.java	15 Jul 2005 21:07:29 -0000	1.8
+++ tools/src/java/org/hibernate/tool/ant/HibernateToolTask.java	15 Aug 2005 06:08:57 -0000
@@ -84,6 +84,18 @@
         return generator;
     }
 	
+	public GeneratorTask createHbm2Jsf(){
+        GeneratorTask generator= new Hbm2JsfGeneratorTask(this);
+        generators.add(generator);
+        return generator;
+	}
+	
+	public GeneratorTask createHbm2DAO(){
+        GeneratorTask generator= new Hbm2DAOGeneratorTask(this);
+        generators.add(generator);
+        return generator;
+	}
+	
 	/**
      * Set the classpath to be used when running the Java class
      *
Index: tools/src/java/org/hibernate/tool/hbm2x/Cfg2JavaTool.java
===================================================================
RCS file: /cvsroot/hibernate/HibernateExt/tools/src/java/org/hibernate/tool/hbm2x/Cfg2JavaTool.java,v
retrieving revision 1.31
diff -u -r1.31 Cfg2JavaTool.java
--- tools/src/java/org/hibernate/tool/hbm2x/Cfg2JavaTool.java	29 Jul 2005 09:16:08 -0000	1.31
+++ tools/src/java/org/hibernate/tool/hbm2x/Cfg2JavaTool.java	15 Aug 2005 06:09:01 -0000
@@ -20,6 +20,7 @@
 import org.apache.commons.logging.LogFactory;
 import org.apache.velocity.context.Context;
 import org.hibernate.Hibernate;
+import org.hibernate.cfg.Configuration;
 import org.hibernate.mapping.Array;
 import org.hibernate.mapping.Collection;
 import org.hibernate.mapping.Component;
@@ -28,10 +29,12 @@
 import org.hibernate.mapping.OneToMany;
 import org.hibernate.mapping.PersistentClass;
 import org.hibernate.mapping.Property;
+import org.hibernate.mapping.RootClass;
 import org.hibernate.mapping.SimpleValue;
 import org.hibernate.mapping.ToOne;
 import org.hibernate.mapping.Value;
 import org.hibernate.type.PrimitiveType;
+import org.hibernate.type.SetType;
 import org.hibernate.type.Type;
 import org.hibernate.util.JoinedIterator;
 import org.hibernate.util.StringHelper;
@@ -80,6 +83,10 @@
 		}
 	}
     
+	public String stripPackage(String qualifiedName){
+		return StringHelper.unqualify(qualifiedName);
+	}
+	
 	/** 
 	 * Returns "package packagename;" where packagename is either the declared packagename,
 	 * or the one provide via meta attribute "generated-class".
@@ -1046,4 +1053,47 @@
 		return buf.toString();
 	}
     
+	public boolean isDate(Property property){ 
+		return "java.util.Date".equals(getJavaTypeName(property));
+	}
+	 
+	public boolean isSet(Property property){
+		return "java.util.Set".equals(getJavaTypeName(property));
+	}
+	
+	public boolean isBoolean(Property property){
+		String typeName = getJavaTypeName(property);
+		return "java.lang.Boolean".equals(typeName) || "boolean".equals(typeName);
+	}
+	
+	public boolean isSimpleCrudField(Property property){
+		String type;
+		Map simpleTypes ;
+		int c = 0;
+		
+		type = getJavaTypeName(property).trim();
+		simpleTypes = new HashMap();
+		simpleTypes.put("java.math.BigDecimal", c + 1 + "");
+		simpleTypes.put("java.math.Integer", c + 1 + "");
+		simpleTypes.put("java.lang.Byte", c + 1 + "");
+		simpleTypes.put("java.lang.Double", c + 1 + "");
+		simpleTypes.put("java.lang.Float", c + 1 + "");
+		simpleTypes.put("java.lang.Integer", c + 1 + "");
+		simpleTypes.put("java.lang.Long", c + 1 + "");
+		simpleTypes.put("java.lang.Short", c + 1 + "");
+		simpleTypes.put("java.lang.String", c + 1 + "");
+		simpleTypes.put("int", c + 1 + "");
+		simpleTypes.put("double", c + 1 + "");
+		simpleTypes.put("long", c + 1 + "");
+		simpleTypes.put("short", c + 1 + "");
+		simpleTypes.put("byte", c + 1 + "");
+		simpleTypes.put("char", c + 1 + "");
+		
+		return simpleTypes.containsKey(type);
+	}
+	
+	public String propertyCapitalize(Property property){
+		return StringUtils.capitalise(property.getName());
+	}
+	
 }
Index: tools/src/java/org/hibernate/tool/ant/Hbm2DAOGeneratorTask.java
===================================================================
RCS file: tools/src/java/org/hibernate/tool/ant/Hbm2DAOGeneratorTask.java
diff -N tools/src/java/org/hibernate/tool/ant/Hbm2DAOGeneratorTask.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ tools/src/java/org/hibernate/tool/ant/Hbm2DAOGeneratorTask.java	1 Jan 1970 00:00:00 -0000
@@ -0,0 +1,32 @@
+package org.hibernate.tool.ant;
+
+
+import org.hibernate.tool.hbm2x.DAOExporter;
+import org.hibernate.tool.hbm2x.Exporter;
+
+/*
+ * @author Dennis Byrne
+ * 
+ */
+
+public class Hbm2DAOGeneratorTask extends GeneratorTask {
+
+	public Hbm2DAOGeneratorTask(HibernateToolTask parent) {
+		super(parent);
+	}
+	
+	protected Exporter configureExporter(Exporter exp) {
+		DAOExporter exporter = (DAOExporter)exp;
+		super.configureExporter(exp);
+		return exporter;
+	}
+	
+	protected Exporter createExporter() {
+		return new DAOExporter(parent.getConfiguration(), parent.getDestDir()) ;
+	}
+
+	public String getName() {
+		return "hbm2dao (Generates a set of DAOs)";
+	}
+
+}
Index: tools/src/java/org/hibernate/tool/ant/Hbm2JsfGeneratorTask.java
===================================================================
RCS file: tools/src/java/org/hibernate/tool/ant/Hbm2JsfGeneratorTask.java
diff -N tools/src/java/org/hibernate/tool/ant/Hbm2JsfGeneratorTask.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ tools/src/java/org/hibernate/tool/ant/Hbm2JsfGeneratorTask.java	1 Jan 1970 00:00:00 -0000
@@ -0,0 +1,33 @@
+package org.hibernate.tool.ant;
+
+
+import org.hibernate.tool.hbm2x.Exporter;
+import org.hibernate.tool.hbm2x.JsfExporter;
+import org.hibernate.tool.hbm2x.POJOExporter;
+
+/*
+ * @author Dennis Byrne
+ * 
+ */
+
+public class Hbm2JsfGeneratorTask extends GeneratorTask {
+
+	public Hbm2JsfGeneratorTask(HibernateToolTask parent) {
+		super(parent);
+	}
+
+	protected Exporter configureExporter(Exporter exp) {
+		JsfExporter exporter = (JsfExporter) exp;
+		super.configureExporter(exp);
+		return exporter;
+	}
+	
+	protected Exporter createExporter() {
+		return new JsfExporter();
+	}
+
+	public String getName() {
+		return "hbm2jsf (Generates a web application)";
+	}
+
+}
Index: tools/src/java/org/hibernate/tool/hbm2x/JsfExporter.java
===================================================================
RCS file: tools/src/java/org/hibernate/tool/hbm2x/JsfExporter.java
diff -N tools/src/java/org/hibernate/tool/hbm2x/JsfExporter.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ tools/src/java/org/hibernate/tool/hbm2x/JsfExporter.java	1 Jan 1970 00:00:00 -0000
@@ -0,0 +1,183 @@
+package org.hibernate.tool.hbm2x;
+
+import java.io.File;
+
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.hibernate.cfg.Configuration;
+
+/**
+ * @author Dennis Byrne
+ * 
+ * This class generates a JSF web application from meta data.
+ * 
+ */
+
+public class JsfExporter extends WebExporter {
+	public static final String ROOT_DIR         = "/hbm2jsf";
+	public static final String CRUD_BEAN_DIR    = "/managed/crud/";
+	public static final String LISTER_BEAN_DIR  = "/managed/lister/";
+	public static final String CRUD_CONVERTER_DIR = "/converter/";
+	
+	public static final String DD               = "jsf/web.vm";
+	public static final String INDEX            = "jsf/index.vm";
+	public static final String HOME             = "jsf/home.vm";
+	public static final String FACES_CONFIG     = "jsf/facesConfig.vm";
+	public static final String READ_ME          = "jsf/readme.vm";
+	
+	public static final String CRUD_INDEX       = "jsf/crudIndex.vm";
+	public static final String CRUD_UTIL        = "jsf/crudUtil.vm";
+	public static final String CRUD_STATE_IMPL  = "jsf/crudStateImpl.vm";
+	public static final String CRUD_STATE_INTF  = "jsf/crudStateIntf.vm";
+	public static final String CRUD_INTF        = "jsf/crudIntf.vm";
+	public static final String CRUD_FORM        = "jsf/crudForm.vm";
+	public static final String CRUD_BEAN        = "jsf/crudBean.vm";
+	public static final String CRUD_CONVERTER   = "jsf/crudConverter.vm";
+	public static final String LISTER_FORM      = "jsf/listerForm.vm";
+	public static final String LISTER_INTF      = "jsf/listerIntf.vm";
+	public static final String LISTER_BEAN      = "jsf/listerBean.vm";
+	
+	public static final String FACES_CONFIG_FILE= "faces-config.xml";
+	public static final String NAME             = "Hbm2Jsf";
+	public static final String CRUD_UTIL_NAME   = "CrudUtil";
+	public static final String CRUD_INTF_NAME   = "BackendCrudBean";
+	public static final String LISTER_INTF_NAME = "Lister";
+	public static final String CRUD_STATE_INTF_NAME  = "Stateful" + CRUD_INTF_NAME;
+	
+	private static final Log log = LogFactory.getLog(JsfExporter.class);
+    
+    public JsfExporter(Configuration cfg, File outputdir) {
+    	super(cfg, outputdir);
+    	init();
+    }
+    
+	public JsfExporter() { 
+		init();
+	}
+	
+	private void init(){
+		setRootDir(ROOT_DIR);
+		setReadMe(READ_ME);		
+		setName(NAME);
+		setDeployDescripVm(DD);
+	}
+	
+	public void start()  {
+		setupTemplates();
+        setupContext();
+        
+        getTemplateHelper().putInContext("CRUD_STATE_INTF_NAME",  CRUD_STATE_INTF_NAME);
+		getTemplateHelper().putInContext("LISTER_INTF_NAME",  LISTER_INTF_NAME);
+		getTemplateHelper().putInContext("CRUD_INTF_NAME",  CRUD_INTF_NAME);
+        
+        super.start();
+        
+        runVelocityCrud();
+        
+        runVelocityReporting(); 
+        
+        // export an index file that will redirect requests to the FC	
+        runVelocity(INDEX, ROOT_DIR, INDEX_FILE);
+
+        // export a home page that will orient first-timers
+        runVelocity(HOME, ROOT_DIR, HOME_FILE);
+        
+        // All managed beans, nevigations and converters are configured 
+        runVelocity(FACES_CONFIG, ROOT_DIR + DD_DIR, FACES_CONFIG_FILE);
+        
+        copyLib();
+        
+        moveClasses(); 
+        
+        // clean up the context
+        getTemplateHelper().removeFromContext("CRUD_STATE_INTF_NAME",  CRUD_STATE_INTF_NAME);
+		getTemplateHelper().removeFromContext("LISTER_INTF_NAME", LISTER_INTF_NAME );
+		getTemplateHelper().removeFromContext("CRUD_INTF_NAME",  CRUD_INTF_NAME);
+        
+        setTemplateHelper(null);
+	}
+	
+	/*
+	 * This method is responsible for coordinating the generation of the 
+	 * CRUD index, CRUD listing JSPs, CRUD form JSPs, Lister managed beans and
+	 * CRUD managed Beans.
+	 */
+	protected void runVelocityCrud(){
+		VelocityCommand command;
+		
+		// export the adam of backend crud beans
+		runVelocity(CRUD_STATE_IMPL, CRUD_SUPPORT_DIR, CRUD_STATE_INTF_NAME + "Impl.java");
+		
+		// export adam's interface
+		runVelocity(CRUD_STATE_INTF, CRUD_SUPPORT_DIR, CRUD_STATE_INTF_NAME + ".java");		
+		
+		// create the CRUD index file that will list all classes
+		runVelocity(CRUD_INDEX, ROOT_DIR + CRUD_DIR, INDEX_FILE);
+		
+		// export a crud interface
+		runVelocity(CRUD_INTF, CRUD_SUPPORT_DIR, CRUD_INTF_NAME + ".java");
+		
+		// export a crud lister interface
+		runVelocity(LISTER_INTF, CRUD_SUPPORT_DIR, LISTER_INTF_NAME + ".java");
+		
+		// export a crud util
+		runVelocity(CRUD_UTIL, CRUD_SUPPORT_DIR, CRUD_UTIL_NAME + ".java");		
+		
+		// done generating single crud files
+		
+		command = new VelocityCommand(CRUD_CONVERTER);
+		command.setDirs(CRUD_CONVERTER_DIR);
+		command.setFileEnd("Converter.java");
+		// for each class, make a JSF converter
+		runVelocityIteratively(command, true);
+		
+		command = new VelocityCommand(CRUD_FORM);
+		command.setDirs(ROOT_DIR + CRUD_DIR);
+		command.setFileEnd(".jsp");
+		// make the actual crud form
+		runVelocityIteratively(command);
+		
+		command = new VelocityCommand(CRUD_BEAN);
+		command.setDirs(CRUD_BEAN_DIR);
+		// all crud implementations will end w/ the int. name
+		command.setFileEnd(CRUD_INTF_NAME + ".java");
+		runVelocityIteratively(command, true);
+		
+		command = new VelocityCommand(LISTER_BEAN);
+		command.setDirs(LISTER_BEAN_DIR);
+		// all lister implementations will end w/ the int. name
+		command.setFileEnd(LISTER_INTF_NAME + ".java");
+		runVelocityIteratively(command, true);
+		
+		command = new VelocityCommand(LISTER_FORM);
+		command.setDirs(ROOT_DIR + CRUD_DIR);
+		// even the lister JSPs will reflect the java interface
+		command.setFileEnd(LISTER_INTF_NAME + ".jsp");
+		runVelocityIteratively(command);
+		
+	}
+
+	/*
+	 * Currently this only creates /WEB-INF/lib .  In the future, it might copy deps to it.
+	 */
+	protected void copyLib(){
+		File dir;
+		dir = new File(getOutputDirectory().getPath() + ROOT_DIR + LIB_DIR);
+		if(!dir.exists() && ! dir.mkdir()){
+			throw new ExporterException("Could not create the dir:" + dir.getAbsolutePath());
+		}
+	}
+	
+	/*
+	 * Currently this procedure only creates /WEB-INF/classes, in the future it might
+	 * copy generated/compiled POJOS and/or HBM files to the /WEB-INF/classes dir.
+	 */	
+	protected void moveClasses(){
+		File dir;
+		dir = new File(getOutputDirectory().getPath() + ROOT_DIR +  CLASSES_DIR);
+		if(!dir.exists() && ! dir.mkdir()){
+			throw new ExporterException("Could not create the dir:" + dir.getAbsolutePath());
+		}
+	}
+	
+}
Index: tools/src/java/org/hibernate/tool/hbm2x/VelocityCommand.java
===================================================================
RCS file: tools/src/java/org/hibernate/tool/hbm2x/VelocityCommand.java
diff -N tools/src/java/org/hibernate/tool/hbm2x/VelocityCommand.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ tools/src/java/org/hibernate/tool/hbm2x/VelocityCommand.java	1 Jan 1970 00:00:00 -0000
@@ -0,0 +1,55 @@
+package org.hibernate.tool.hbm2x;
+
+/*
+ * @author Dennis Byrne
+ * 
+ * This class can be used to simplify the interfaces of an exporter.
+ * 
+ */
+
+public class VelocityCommand {
+
+	private Object object;
+	private String templateName;
+	private String dirs;
+	private String fileStart;
+	private String fileEnd;
+	
+	public VelocityCommand(String templateName){
+		this.templateName = templateName;
+	}
+	public String getFileEnd() {
+		return fileEnd;
+	}
+	public void setFileEnd(String fileEnd) {
+		this.fileEnd = fileEnd;
+	}
+	public String getDirs() {
+		return dirs;
+	}
+	public void setDirs(String dirs) {
+		this.dirs = dirs;
+	}
+	public String getFileStart() {
+		return fileStart;
+	}
+	public void setFileStart(String fileStart) {
+		this.fileStart = fileStart;
+	}
+	public Object getObject() {
+		return object;
+	}
+	public void setObject(Object object) {
+		this.object = object;
+	}
+	public String getTemplateName() {
+		return templateName;
+	}
+	public void setTemplateName(String templateName) {
+		this.templateName = templateName;
+	}
+	public String getFileName(){
+		return this.fileStart + this.fileEnd;
+	}
+	
+}
Index: tools/src/java/org/hibernate/tool/hbm2x/WebExporter.java
===================================================================
RCS file: tools/src/java/org/hibernate/tool/hbm2x/WebExporter.java
diff -N tools/src/java/org/hibernate/tool/hbm2x/WebExporter.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ tools/src/java/org/hibernate/tool/hbm2x/WebExporter.java	1 Jan 1970 00:00:00 -0000
@@ -0,0 +1,198 @@
+package org.hibernate.tool.hbm2x;
+
+import java.io.File;
+import java.io.FileWriter;
+import java.io.IOException;
+import java.io.StringWriter;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.Map;
+
+import org.hibernate.cfg.Configuration;
+import org.hibernate.mapping.PersistentClass;
+import org.hibernate.util.StringHelper;
+
+/*
+ * @author Dennis Byrne
+ * 
+ * This class provides the common features of all web based exporters.  
+ * It is meant to not only facilitate the development of more web app
+ * exporters, but also provide a structure for them all.  For example, 
+ * all generated web apps should put the reporting section under a dir
+ * called 'reporting'.  Currently, this class only has one child .  
+ * 
+ */
+
+public abstract class WebExporter extends AbstractExporter {
+
+	public static final String REPORTING_DIR = "/reporting";
+	public static final String CRUD_DIR      = "/crud";
+	public static final String LAYOUT        = "web/Layout.vm";
+	
+    public static final String HIB_UTIL = "web/hibernateUtil.vm";
+	 
+	public static final String REPORTING_INDEX   = "web/reportingIndex.vm";
+	public static final String REPORTING_FORM    = "web/reportingForm.vm";
+	public static final String CRUD_SUPPORT_DIR  = "/org/hibernate/tool/crud";
+	
+	public static final String DD_DIR      = "/WEB-INF/";
+	public static final String LIB_DIR     = DD_DIR + "lib/";
+	public static final String CLASSES_DIR = DD_DIR + "classes/";
+	public static final String INDEX_FILE  = "index.jsp";
+	public static final String HOME_FILE   = "home.jsp";
+	public static final String DD_FILE     = "web.xml";
+	
+	protected String readMe;
+	protected String deployDescripVm;
+	protected String rootDir;
+	protected String name;
+	
+	protected StringWriter tempWriter;
+	
+	public WebExporter(){}
+	
+	public WebExporter(Configuration cfg, File outputdir){
+		super(cfg, outputdir);
+	}
+	
+	public String getDeployDescripVm() {
+		return deployDescripVm;
+	}
+
+	public void setDeployDescripVm(String deployDescripVm) {
+		this.deployDescripVm = deployDescripVm;
+	}
+
+	public String getName() {
+		return name;
+	}
+
+	public void setName(String name) {
+		this.name = name;
+	}
+
+	public String getReadMe() {
+		return readMe;
+	}
+
+	public void setReadMe(String readMe) {
+		this.readMe = readMe;
+	}
+
+	public String getRootDir() {
+		return rootDir;
+	}
+
+	public void setRootDir(String rootDir) {
+		this.rootDir = rootDir;
+	}
+
+	protected String getNameForClass(PersistentClass clazz) {
+		return getTemplateHelper().getCfg2JavaTool().getQualifiedDeclarationName(clazz);
+	}
+	
+	protected void runVelocityReporting(){
+		// root->crud->index.jsf
+		runVelocity(REPORTING_INDEX, rootDir + REPORTING_DIR + "/", "index.jsp");
+		
+        VelocityCommand command = new VelocityCommand(REPORTING_FORM);
+        command.setDirs(rootDir + REPORTING_DIR + "/" );
+        command.setFileEnd(".jsp");
+        runVelocityIteratively(command);
+	}
+	
+	/*
+	 * All velocity subtasks boil down to this one method. This method will create
+	 * any needed dir structures.
+	 */
+	protected void runVelocity(String templateName, String dirs, String fileName){
+		tempWriter = new StringWriter();
+		File dir = new File(getOutputDirectory().getAbsolutePath() + dirs);
+		
+		if(! dir.exists() && ! dir.mkdirs()){
+			throw new ExporterException("Could not create dir " + dir + " when processing template " + templateName);
+		}else{
+			File file = new File(dir, fileName);
+			try {
+				getTemplateHelper().processTemplate(templateName, tempWriter);
+				FileWriter fileWriter = new FileWriter(file);
+				getTemplateHelper().processString(tempWriter.toString(), fileWriter);
+				fileWriter.flush();
+				fileWriter.close();
+			} catch (IOException e) {
+				e.printStackTrace();
+				throw new ExporterException("Error while processing template " + templateName, e);
+			}
+		}
+	}
+	
+	protected void runVelocityIteratively(VelocityCommand command){
+		runVelocityIteratively(command, false);
+	}
+	
+	/*
+	 * The second parameter of this method tells the engine whether or not to 
+	 * prepend a package based directory to the destination of the files to be generated.
+	 */
+	
+	protected void runVelocityIteratively(VelocityCommand command, boolean prependPackage){
+        Map components = new HashMap();
+        String fullClassName ;
+        String nameForClass;
+        String packageName;
+        String packageBasedDir;
+        String dirs ;
+        
+        for (Iterator classes = getConfiguration().getClassMappings(); classes.hasNext(); ) {
+	        PersistentClass clazz = (PersistentClass) classes.next();
+	        ConfigurationNavigator.collectComponents(components, clazz);
+	        fullClassName = getNameForClass(clazz);
+	        packageName = fullClassName.substring(0, fullClassName.lastIndexOf("."));
+	        nameForClass = StringHelper.unqualify(fullClassName);
+	        packageBasedDir = "/" + packageName.replace(".", "/");
+	        
+	        command.setFileStart(nameForClass);
+	        command.setObject(clazz);
+	        
+	        if(! prependPackage){ packageBasedDir = "";}
+	        getTemplateHelper().putInContext("clazz", clazz);
+	        runVelocity(command.getTemplateName(), packageBasedDir + command.getDirs(), command.getFileName());
+	        getTemplateHelper().removeFromContext("clazz", clazz);
+        }
+        
+        //for(Iterator comps = components.values().iterator(); comps.hasNext(); ) {
+        //	Component component = (Component)comps.next();
+        //	exportComponent(component);
+        //}
+	}
+	
+	public void start()  {
+		getTemplateHelper().putInContext("rootDir", rootDir );
+		getTemplateHelper().putInContext("name", name);
+		
+		// export the readme file.
+		runVelocity(readMe, "", "readme.txt");
+		// export the layout
+		runVelocity(LAYOUT, rootDir + "/WEB-INF/tags", "Layout.tag");
+		// export CSS
+			// on this line, make a command that exports CSS
+		// export the deployment desc.
+		runVelocity(deployDescripVm, rootDir + DD_DIR, DD_FILE);
+		
+		// export HibernateUtil
+		PersistentClass clazz = (PersistentClass) getConfiguration().getClassMappings().next();
+		String fullClassName = getNameForClass(clazz);
+		String packageName = fullClassName.substring(0, fullClassName.lastIndexOf("."));
+		
+		getTemplateHelper().putInContext("packageName", packageName);
+		runVelocity(HIB_UTIL, packageName.replace(".", "/"), "HibernateUtil.java");
+		getTemplateHelper().removeFromContext("packageName", packageName);
+		
+		getTemplateHelper().removeFromContext("rootDir", rootDir );
+		getTemplateHelper().removeFromContext("name", name);
+	}
+	
+	protected void setupContext() {
+		getTemplateHelper().putInContext("cfg", getConfiguration() );
+	}
+}
Index: tools/src/velocity/jsf/crudBean.vm
===================================================================
RCS file: tools/src/velocity/jsf/crudBean.vm
diff -N tools/src/velocity/jsf/crudBean.vm
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ tools/src/velocity/jsf/crudBean.vm	1 Jan 1970 00:00:00 -0000
@@ -0,0 +1,200 @@
+package ${c2j.getPackageName($clazz)}.managed.crud;
+
+import ${clazz.getClassName()};
+import org.hibernate.tool.crud.*;
+import java.util.List;
+import java.util.ArrayList;
+import javax.faces.context.FacesContext;
+import javax.faces.model.DataModel;
+import javax.faces.model.SelectItem;
+import ${c2j.getPackageName($clazz)}.*;
+import org.apache.commons.logging.*;
+import ${c2j.getPackageName($clazz)}.managed.lister.${c2j.getDeclarationName($clazz)}${LISTER_INTF_NAME};
+
+public class ${c2j.getDeclarationName($clazz)}${CRUD_INTF_NAME}
+	extends Stateful${CRUD_INTF_NAME}Impl implements ${CRUD_INTF_NAME}{
+	
+	private ${c2j.getDeclarationName($clazz)} unit = new ${c2j.getDeclarationName($clazz)}();
+	private static final Log log = LogFactory.getLog(${c2j.getDeclarationName($clazz)}${CRUD_INTF_NAME}.class);
+	private ${c2j.getDeclarationName($clazz)}${LISTER_INTF_NAME} lister ;
+	private ${c2j.getDeclarationName($clazz)}Home dao ; 
+	
+	/*
+	* In order to avoid concurrency problems, each managed crud bean is placed
+	* in request scope.  This means that each managed crud bean is created and
+	* and destroyed for each request - the instace being created, retrieved,
+	* updated or deleted must be reconstructed also.  This has to happen early in the 
+	* JSF request processing lifecycle because we want to avoid NPEs that would
+	* occur if the JSF infrastructure tries to apply request values from the 
+	* client to a model that has not been reconstructed.  We therefore do this 
+	* in the constructor, but only after we determine which state we are in 
+	* ( CREATE, RETRIEVE, UPDATE or DELETE ).
+	*/
+	
+	public ${c2j.getDeclarationName($clazz)}${CRUD_INTF_NAME}(){
+		super(); // this restores state( create, update or retrieve )
+		FacesContext ctx ;
+		
+		ctx = FacesContext.getCurrentInstance();
+		lister = (${c2j.getDeclarationName($clazz)}${LISTER_INTF_NAME}) ctx.getApplication().createValueBinding("#{${c2j.getDeclarationName($clazz)}${LISTER_INTF_NAME}}").getValue(ctx);
+		dao = lister.getDao(); // can't use this yet
+		log.info(" created w/ state " + getState());
+	}
+
+	public Object getUnit(){
+		return unit;
+	}
+	
+	// this method is wired to a browser event
+	public String create(){
+		String outcome;
+		
+		outcome = CrudUtil.CREATE_FAILURE;
+		if(unit != null){
+			DataModel dataModel = lister.getList();
+			List list = (List)dataModel.getWrappedData();
+			// there should be a DAO call here as well
+			list.add(unit);
+			log.info("created a " + unit.getClass().getSimpleName());
+		}
+		outcome = CrudUtil.CREATE_SUCCESS;
+		setRetrieveState(true);
+		log.info(" returning " + outcome);
+		return outcome;
+	}
+
+	// this method is wired to a browser event
+	public String retrieve(){
+		String outcome;		
+		Object object;
+		${c2j.getDeclarationName($clazz)} item;
+
+		outcome = CrudUtil.RETRIEVE_FAILURE;		
+		object = lister.getList().getRowData();
+		
+		if(object == null){
+			log.error("null object received from getRowData()");
+		}else if(object instanceof ${c2j.getDeclarationName($clazz)}){
+			item = (${c2j.getDeclarationName($clazz)}) object;
+			outcome = CrudUtil.RETRIEVE_SUCCESS;
+			setRetrieveState(true);	
+			log.info("from getRowData(), received a " + item.getClass().getSimpleName() + " with an ID of " + item.get${c2j.propertyCapitalize($clazz.getIdentifierProperty())}());
+			// unit should be set to the graph returned by a DAO
+			//unit = dao.findById(item.get${c2j.propertyCapitalize($clazz.getIdentifierProperty())}());
+			unit = item;
+		}else{
+			log.error("received object from getRowData is not a ${c2j.getDeclarationName($clazz)}");
+		}
+		log.info(" returning " + outcome);
+		return outcome;		
+	}
+	
+	// this method is wired to a browser event
+	public String update(){
+		String outcome;		
+		Object object;
+		${c2j.getDeclarationName($clazz)} item ;
+		
+		outcome = CrudUtil.UPDATE_FAILURE;
+		
+		if(unit != null){
+			log.info("must update a " + unit.getClass().getSimpleName() + " w/ an id of " + unit.get${c2j.propertyCapitalize($clazz.getIdentifierProperty())}());
+			DataModel dataModel = lister.getList();
+			List list = (List)dataModel.getWrappedData();
+			for(int i = 0 ; i < list.size(); i++){
+				item = (${c2j.getDeclarationName($clazz)})list.get(i); 
+				// there needs to be a call to a DAO in here as well
+				if(item.get${c2j.propertyCapitalize($clazz.getIdentifierProperty())}().equals(unit.get${c2j.propertyCapitalize($clazz.getIdentifierProperty())}())){
+					list.set(i, unit);
+				}
+			}
+			setUpdateState(true);
+			outcome = CrudUtil.UPDATE_SUCCESS;
+		}else{
+			log.info(" unit is null ");
+		}
+		
+		log.info(" returning " + outcome);
+		return outcome;
+	}
+	
+	// this method is wired to a browser event
+	public String delete(){
+		String outcome;
+		Object object;
+		${c2j.getDeclarationName($clazz)} item ;
+		
+		outcome = CrudUtil.DELETE_FAILURE;
+		if(CrudUtil.RETRIEVE_SUCCESS.equals(retrieve())){
+			// there needs to be a call to a DAO in here
+			DataModel dataModel = lister.getList();
+			List list = (List)dataModel.getWrappedData();
+			for(int i = 0; i < list.size();i++){
+				item = (${c2j.getDeclarationName($clazz)})list.get(i);
+				if(item.get${c2j.propertyCapitalize($clazz.getIdentifierProperty())}().equals(unit.get${c2j.propertyCapitalize($clazz.getIdentifierProperty())}())){
+					list.remove(i);
+				}
+			}
+			outcome = CrudUtil.DELETE_SUCCESS;
+		}
+		
+		log.info(" returning " + outcome);
+		return outcome;
+	}	
+	
+	public String cancelUpdate(){
+		log.info(" returning " + CrudUtil.CANCEL_UPDATE);
+		setRetrieveState(true);
+		return CrudUtil.CANCEL_UPDATE;
+	}
+
+	public String cancelCreate(){
+		log.info(" returning " + CrudUtil.CANCEL_CREATE);
+		return CrudUtil.CANCEL_CREATE;
+	}
+	
+	public String createPrepare(){
+		setCreateState(true);
+		log.info(" returning " + CrudUtil.CREATE);
+		return CrudUtil.CREATE;
+	}
+	
+	public String updatePrepare(){
+		String outcome;
+		
+		outcome = null;
+		if(CrudUtil.RETRIEVE_SUCCESS.equals(retrieve())){
+			setUpdateState(true);
+			outcome = CrudUtil.UPDATE; 
+		}
+		
+		log.info(" returning " + CrudUtil.UPDATE);
+		return outcome;
+	}
+	
+	/*
+	* We provide a method so that the CRUD form can get instances for pick lists.
+	*
+	*/
+	
+#foreach( $field in $c2j.getAllPropertiesIterator($clazz) )
+#if($c2h.isManyToOne($field))
+	public List get${c2j.propertyCapitalize($field)}(){
+		List list = new ArrayList();
+		SelectItem selectOneItem ;
+		
+		// later we need to make this hit a DAO
+		for(int i = 0; i < 5; i++){
+			##${c2j.stripPackage(${field.getValue().getElement().getAssociatedClass().getClassName()})} item = new ${c2j.stripPackage(${field.getValue().getElement().getAssociatedClass().getClassName()})}(new Integer(i));
+			${c2j.propertyCapitalize($field)} item = new ${c2j.propertyCapitalize($field)}(new Integer(i));
+			selectOneItem = new SelectItem(item, item.toString());
+			list.add(selectOneItem);
+		}
+		
+		log.info(" returning list of size " + list.size());
+		return list;
+	}
+#end
+#end
+	
+} 
Index: tools/src/velocity/jsf/crudConverter.vm
===================================================================
RCS file: tools/src/velocity/jsf/crudConverter.vm
diff -N tools/src/velocity/jsf/crudConverter.vm
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ tools/src/velocity/jsf/crudConverter.vm	1 Jan 1970 00:00:00 -0000
@@ -0,0 +1,72 @@
+package ${c2j.getPackageName($clazz)}.converter;
+
+import javax.faces.component.UIComponent;
+import javax.faces.convert.ConverterException;
+import javax.faces.context.FacesContext;
+import javax.faces.convert.Converter;
+import javax.faces.convert.ConverterException;
+import javax.faces.model.DataModel;
+import org.apache.commons.logging.*;
+import java.util.List;
+import ${c2j.getPackageName($clazz)}.managed.lister.${c2j.getDeclarationName($clazz)}${LISTER_INTF_NAME};
+
+import ${clazz.getClassName()};
+
+public class ${c2j.getDeclarationName($clazz)}Converter implements Converter {
+
+	private static final Log log = LogFactory.getLog(${c2j.getDeclarationName($clazz)}Converter.class);
+	private ${c2j.getDeclarationName($clazz)}${LISTER_INTF_NAME} lister ;
+	
+	public ${c2j.getDeclarationName($clazz)}Converter(){
+		FacesContext ctx ;
+		
+		ctx = FacesContext.getCurrentInstance();
+		lister = (${c2j.getDeclarationName($clazz)}${LISTER_INTF_NAME}) ctx.getApplication().createValueBinding("#{${c2j.getDeclarationName($clazz)}${LISTER_INTF_NAME}}").getValue(ctx);
+	}
+	
+	public Object getAsObject(FacesContext ctx, UIComponent ui, String id)
+			throws ConverterException {
+		${c2j.getDeclarationName($clazz)} item ;
+		
+		if(id == null || "".equals(id)){
+			log.info(" null or empty id received from client ");
+			return null;
+		}
+		
+		DataModel dataModel = lister.getList();
+		List list = (List)dataModel.getWrappedData();
+		for(int i = 0; i < list.size();i++){
+			item = (${c2j.getDeclarationName($clazz)})list.get(i);	
+			if(item.get${c2j.propertyCapitalize($clazz.getIdentifierProperty())}().equals(new Integer(id))){
+				log.info(" returning object w/ lister w " + id);				
+				return item;
+			}
+		}
+		
+		log.info(" returning new object, could not find one w/ lister " + id);
+		return new ${c2j.getDeclarationName($clazz)}(new Integer(id));
+	}
+
+	public String getAsString(FacesContext ctx, UIComponent ui, Object object)
+			throws ConverterException {
+		String string ;
+		${c2j.getDeclarationName($clazz)} item;
+		
+		if(object == null){
+			return "";
+		}
+		
+		if(object instanceof ${c2j.getDeclarationName($clazz)}){
+		    item = (${c2j.getDeclarationName($clazz)})object;
+		    string = item.get${c2j.propertyCapitalize(${clazz.getIdentifierProperty()})}() + "";
+		}else{
+			log.error(" Received object, " + object.getClass().getName() + ", not an instance of ${c2j.getDeclarationName($clazz)}");
+			throw new ConverterException();
+		}
+		//log.info(" returning " + string + " from a " + object.getClass().getName());
+		return string;
+	}
+
+}
+
+
Index: tools/src/velocity/jsf/crudForm.vm
===================================================================
RCS file: tools/src/velocity/jsf/crudForm.vm
diff -N tools/src/velocity/jsf/crudForm.vm
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ tools/src/velocity/jsf/crudForm.vm	1 Jan 1970 00:00:00 -0000
@@ -0,0 +1,196 @@
+<%@taglib prefix="h" uri="http://java.sun.com/jsf/html" %>
+<%@taglib prefix="f" uri="http://java.sun.com/jsf/core" %>
+<%@taglib prefix="tools" tagdir="/WEB-INF/tags" %>
+
+<tools:Layout>
+
+CRUD form for the selected $c2j.getDeclarationName($clazz) .<br/><br/>
+
+<f:view>
+ <h:form styleClass="crudForm">
+ <h:outputText escape="false" value="<input type='hidden' name='STATE' value='#{${c2j.getDeclarationName($clazz)}.state}' />"/>
+ 
+#foreach( $field in $c2j.getAllPropertiesIterator($clazz) )
+#if($c2j.isSimpleCrudField($field))
+   
+   <h:panelGrid columns="3">
+	 <h:outputText 
+		styleClass="outputLabel"
+		value="$field.getName()"
+		 />
+     <h:panelGroup styleClass="panelGroup">
+	 	<h:inputText
+	 		styleClass="inputText"
+	 		value="#{${c2j.getDeclarationName($clazz)}.unit.${field.getName()}}"
+	 		id="$field.getName()"
+	 		rendered="#{not ${c2j.getDeclarationName($clazz)}.retrieveState}">
+	 	</h:inputText>
+	 	<h:outputText
+	 		styleClass="outputText"
+	 		value="#{${c2j.getDeclarationName($clazz)}.unit.${field.getName()}}"
+	 		rendered="#{${c2j.getDeclarationName($clazz)}.retrieveState}">
+	 	</h:outputText>		 
+	 </h:panelGroup>
+	 <h:message 
+	 	styleClass="message"
+	 	for="$field.getName()" />
+   </h:panelGrid>
+   
+#elseif($c2j.isBoolean($field))	 	
+	
+	<h:panelGrid columns="3">
+	 <h:outputText 
+		styleClass="outputLabel"
+		value="$field.getName()"
+		 />
+	  <h:panelGroup styleClass="panelGroup">
+	  	<h:selectBooleanCheckbox
+			styleClass="selectBooleanCheckbox"
+			value="#{${c2j.getDeclarationName($clazz)}.unit.${field.getName()}}}"
+			id="$field.getName()"
+			rendered="#{not ${c2j.getDeclarationName($clazz)}.retrieveState}"/>
+	  	<h:outputText
+	  		styleClass="outputText"
+	  		value="#{${c2j.getDeclarationName($clazz)}.unit.${field.getName()}}}"
+	  		id="$field.getName()"
+	  		rendered="#{${c2j.getDeclarationName($clazz)}.retrieveState}"/>
+	  </h:panelGroup>	
+	 <h:message 
+	 	styleClass="message"
+	 	for="$field.getName()" />			  
+	</h:panelGrid>
+	
+#elseif($c2j.isDate($field))	 	
+  	<h:panelGrid columns="3"> 
+	  <h:outputText 
+		styleClass="outputLabel"
+		value="$field.getName()"
+		 />
+	  <h:panelGroup>
+	  	<h:outputText
+	  		styleClass="outputText"
+	  		value="PUT CALENDAR CONTROL HERE"
+	  		id="$field.getName()"
+	  		rendered="true"/>
+	  </h:panelGroup>
+	 <h:message 
+	 	styleClass="message"
+	 	for="$field.getName()" />
+	</h:panelGrid>
+
+#elseif($c2j.isSet($field))	 	
+  	<h:panelGrid columns="3"> 
+	  <h:outputText 
+		styleClass="outputLabel"
+		value="$field.getName()"
+		 />
+	  <h:panelGroup>
+	  	<h:outputText
+	  		styleClass="outputText"
+	  		value="$field.getName() skipped, type $c2j.getJavaTypeName($field) not supported"
+	  		id="$field.getName()"
+	  		rendered="true"/>
+	  </h:panelGroup>
+	 <h:message 
+	 	styleClass="message"
+	 	for="$field.getName()" />
+	</h:panelGrid>
+
+#elseif($c2h.isManyToOne($field))
+    <h:panelGrid columns="3">
+	 <h:outputText 
+		styleClass="outputLabel"
+		value="$field.getName()"
+		 />
+     <h:panelGroup styleClass="panelGroup">
+	   <h:selectOneMenu 
+	  	  styleClass="selectOneInput"
+	  	  value="#{${c2j.getDeclarationName($clazz)}.unit.${field.getName()}}"
+	 	  id="$field.getName()"
+	 	  rendered="#{not ${c2j.getDeclarationName($clazz)}.retrieveState}"
+	 	  converter="${c2j.propertyCapitalize($field)}Converter" >
+	 	  <f:selectItems value="#{$c2j.getDeclarationName($clazz).$field.getName()}" />
+	   </h:selectOneMenu>
+	 <h:outputText 
+		styleClass="outputText"
+		value="#{${c2j.getDeclarationName($clazz)}.unit.${field.getName()}}" 
+		converter="${c2j.propertyCapitalize($field)}Converter" />	 
+	 </h:panelGroup>
+	 <h:message 
+	 	styleClass="message"
+	 	for="$field.getName()" />	
+	</h:panelGrid>
+	
+#else
+
+  	<h:panelGrid columns="3"> 
+	  <h:outputText 
+		styleClass="outputLabel"
+		value="$field.getName()"
+		 />
+	  <h:panelGroup>
+	  	<h:outputText
+	  		styleClass="outputText"
+	  		value="$field.getName() skipped, type $c2j.getJavaTypeName($field) not supported"
+	  		id="$field.getName()"
+	  		rendered="true"/>
+	  </h:panelGroup>
+	 <h:message 
+	 	styleClass="message"
+	 	for="$field.getName()" />
+	</h:panelGrid>
+
+#end
+#end
+
+     <br/>
+     <div id="commandButtons">
+	  <h:commandButton 
+		styleClass="commandButton" 
+		value="Back" 
+		action="BACK" 
+		immediate="true" />  
+	  <h:commandButton 
+		styleClass="commandButton" 
+		value="Create"    
+		action="#{${c2j.getDeclarationName($clazz)}.create}"   
+		disabled="#{not ${c2j.getDeclarationName($clazz)}.createState}" />
+	  <h:commandButton 
+		styleClass="commandButton" 
+		value="Update" 
+		action="#{${c2j.getDeclarationName($clazz)}.update}"   
+		disabled="#{not ${c2j.getDeclarationName($clazz)}.updateState}" />    	
+	  <h:commandButton 
+		styleClass="commandButton" 
+		value="Edit" 
+		rendered="false"
+		action="#{${c2j.getDeclarationName($clazz)}.updatePrepare}" 
+		disabled="#{not ${c2j.getDeclarationName($clazz)}.retrieveState}"
+		immediate="true" />
+	  <h:commandButton 
+		styleClass="commandButton" 
+		value="Cancel"  
+		action="#{${c2j.getDeclarationName($clazz)}.cancelUpdate}"    
+		rendered="false" 
+		disabled="#{not ${c2j.getDeclarationName($clazz)}.updateState}"
+		immediate="true" />
+	  <h:commandButton 
+		styleClass="commandButton" 
+		value="Cancel" 
+		action="#{${c2j.getDeclarationName($clazz)}.cancelCreate}"    
+		rendered="false" 
+		disabled="#{not ${c2j.getDeclarationName($clazz)}.createState}" 
+		immediate="true" />
+	  <h:commandButton 
+		styleClass="commandButton" 
+		value="Delete" 
+		action="#{${c2j.getDeclarationName($clazz)}.delete}"    
+		rendered="false"
+		disabled="#{not ${c2j.getDeclarationName($clazz)}.retrieveState}" 
+		immediate="true" />
+     </div>
+     <br/>
+     
+ </h:form>
+</f:view>
+</tools:Layout>
Index: tools/src/velocity/jsf/crudIndex.vm
===================================================================
RCS file: tools/src/velocity/jsf/crudIndex.vm
diff -N tools/src/velocity/jsf/crudIndex.vm
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ tools/src/velocity/jsf/crudIndex.vm	1 Jan 1970 00:00:00 -0000
@@ -0,0 +1,23 @@
+<%@taglib prefix="tools" tagdir="/WEB-INF/tags" %>
+<%@taglib prefix="h" uri="http://java.sun.com/jsf/html" %>
+<%@taglib prefix="f" uri="http://java.sun.com/jsf/core" %>
+
+<tools:Layout>
+
+	<h2>CRUD</h2>
+	
+	Each link below points to a form that will display a 
+	listing of all instances of a particular POJO .  These objects are generated 
+	each time the user comes to this page via the CRUD index.  Later, they will 
+	be pulled through a DAO layer.
+	<br/><br/>
+
+<f:view>
+#foreach( $mapping in $cfg.getClassMappings() )
+
+	<h:commandLink action="#{${c2j.getDeclarationName($mapping)}${LISTER_INTF_NAME}.load}" value="$mapping.getClassName()" /><br/> 
+
+#end
+</f:view>
+
+</tools:Layout>
Index: tools/src/velocity/jsf/crudIntf.vm
===================================================================
RCS file: tools/src/velocity/jsf/crudIntf.vm
diff -N tools/src/velocity/jsf/crudIntf.vm
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ tools/src/velocity/jsf/crudIntf.vm	1 Jan 1970 00:00:00 -0000
@@ -0,0 +1,11 @@
+package org.hibernate.tool.crud;
+
+public interface ${CRUD_INTF_NAME} extends ${CRUD_STATE_INTF_NAME} {
+
+	public Object getUnit();
+	
+	public String create();
+	public String retrieve();
+	public String update();
+	public String delete();
+}
Index: tools/src/velocity/jsf/crudStateImpl.vm
===================================================================
RCS file: tools/src/velocity/jsf/crudStateImpl.vm
diff -N tools/src/velocity/jsf/crudStateImpl.vm
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ tools/src/velocity/jsf/crudStateImpl.vm	1 Jan 1970 00:00:00 -0000
@@ -0,0 +1,63 @@
+package org.hibernate.tool.crud;
+
+public abstract class ${CRUD_STATE_INTF_NAME}Impl implements ${CRUD_STATE_INTF_NAME} {
+
+	boolean createState;
+	boolean updateState;
+	
+	public ${CRUD_STATE_INTF_NAME}Impl(){
+		CrudUtil.restoreState(this);
+	}
+	
+	public boolean isCreateState() {
+		return createState;
+	}
+
+	public void setCreateState(boolean createState) {
+		this.createState = createState;
+		if(createState){
+			updateState = false;
+		}
+	}
+
+	public boolean isRetrieveState() {
+		return (! updateState && ! createState);
+	}
+
+	public void setRetrieveState(boolean retrieveState) {
+		if(retrieveState){
+			createState = false;
+			updateState = false;
+		}
+	}
+
+	public boolean isUpdateState() {
+		return updateState;
+	}
+
+	public void setUpdateState(boolean updateState) {
+		this.updateState = updateState;
+		if(updateState){
+			createState = false;
+		}
+	}
+	
+	public void setState(String state){
+		if(CrudUtil.UPDATE.equals(state)){
+			setUpdateState(true);
+		}else if(CrudUtil.CREATE.equals(state)){
+			setCreateState(true);
+		}
+	}
+	
+	public String getState(){
+		String state = "";
+		if(updateState){
+			state = CrudUtil.UPDATE;
+		}else if(createState){
+			state = CrudUtil.CREATE;
+		}
+		return state;
+	}
+	
+}
Index: tools/src/velocity/jsf/crudStateIntf.vm
===================================================================
RCS file: tools/src/velocity/jsf/crudStateIntf.vm
diff -N tools/src/velocity/jsf/crudStateIntf.vm
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ tools/src/velocity/jsf/crudStateIntf.vm	1 Jan 1970 00:00:00 -0000
@@ -0,0 +1,16 @@
+package org.hibernate.tool.crud;
+
+public interface ${CRUD_STATE_INTF_NAME} {
+	
+	public abstract boolean isCreateState();
+	public abstract void setCreateState(boolean createState);
+
+	public abstract boolean isRetrieveState();
+	public abstract void setRetrieveState(boolean retrieveState);
+
+	public abstract boolean isUpdateState();
+	public abstract void setUpdateState(boolean updateState);
+	
+	public String getState();
+	
+}
Index: tools/src/velocity/jsf/crudUtil.vm
===================================================================
RCS file: tools/src/velocity/jsf/crudUtil.vm
diff -N tools/src/velocity/jsf/crudUtil.vm
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ tools/src/velocity/jsf/crudUtil.vm	1 Jan 1970 00:00:00 -0000
@@ -0,0 +1,49 @@
+package org.hibernate.tool.crud;
+
+import javax.faces.context.FacesContext;
+import javax.servlet.http.HttpServletRequest;
+
+/*
+* This class needs to be renamed to Constant , and the restoreState 
+* method needs to be moved to the only class that uses it.
+*
+*/
+
+public class CrudUtil{
+
+	public static final String CREATE_SUCCESS = "CREATE_SUCCESS";
+	public static final String CREATE_FAILURE = "CREATE_FAILURE";
+	
+	public static final String RETRIEVE_SUCCESS = "RETRIEVE_SUCCESS";
+	public static final String RETRIEVE_FAILURE = "RETRIEVE_FAILURE";
+	
+	public static final String UPDATE_SUCCESS = "UPDATE_SUCCESS";
+	public static final String UPDATE_FAILURE = "UPDATE_FAILURE";
+
+	public static final String DELETE_SUCCESS = "DELETE_SUCCESS";
+	public static final String DELETE_FAILURE = "DELETE_FAILURE";
+
+	public static final String UPDATE = "UPDATE";
+	public static final String CREATE = "CREATE";
+	
+	public static final String CANCEL_UPDATE = "CANCEL_UPDATE";
+	public static final String CANCEL_CREATE = "CANCEL_CREATE";	
+	
+    public static void restoreState(${CRUD_STATE_INTF_NAME} bean){
+    	FacesContext ctx;
+    	HttpServletRequest request ;
+    	String state ;
+    	
+    	ctx = FacesContext.getCurrentInstance();
+    	request = (HttpServletRequest) ctx.getExternalContext().getRequest();
+    	state = request.getParameter("STATE");
+    	if(state != null){
+    		if(UPDATE.equals(state)){
+    			bean.setUpdateState(true);
+    		}else if(CREATE.equals(state)){
+    			bean.setCreateState(true);
+    		}
+    	}
+    }
+
+}
Index: tools/src/velocity/jsf/facesConfig.vm
===================================================================
RCS file: tools/src/velocity/jsf/facesConfig.vm
diff -N tools/src/velocity/jsf/facesConfig.vm
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ tools/src/velocity/jsf/facesConfig.vm	1 Jan 1970 00:00:00 -0000
@@ -0,0 +1,89 @@
+<?xml version='1.0' encoding='UTF-8'?>
+
+<!DOCTYPE faces-config PUBLIC
+  "-//Sun Microsystems, Inc.//DTD JavaServer Faces Config 1.1//EN"
+  "http://java.sun.com/dtd/web-facesconfig_1_1.dtd">
+
+<faces-config>
+
+#foreach( $mapping in $cfg.getClassMappings() )
+  <converter>
+   <converter-id>${c2j.getDeclarationName(${mapping})}Converter</converter-id>
+   <converter-class>${c2j.getPackageName($mapping)}.converter.${c2j.getDeclarationName(${mapping})}Converter</converter-class>
+  </converter>
+#end
+
+	<navigation-rule>
+		<from-view-id>/crud/index.jsp</from-view-id>
+#foreach( $mapping in $cfg.getClassMappings() )
+		<navigation-case>
+			<from-outcome>${c2j.getDeclarationName(${mapping})}</from-outcome>
+			<to-view-id>/crud/${c2j.getDeclarationName(${mapping})}${LISTER_INTF_NAME}.jsp</to-view-id>
+		</navigation-case>		
+#end
+	</navigation-rule>
+
+#foreach( $mapping in $cfg.getClassMappings() )
+	<navigation-rule>
+		<from-view-id>/crud/${c2j.getDeclarationName(${mapping})}${LISTER_INTF_NAME}.jsp</from-view-id>
+		<navigation-case>
+			<from-outcome>RETRIEVE_SUCCESS</from-outcome>
+			<to-view-id>/crud/${c2j.getDeclarationName(${mapping})}.jsp</to-view-id>
+		</navigation-case>
+		<navigation-case>
+			<from-outcome>CREATE</from-outcome>
+			<to-view-id>/crud/${c2j.getDeclarationName(${mapping})}.jsp</to-view-id>
+		</navigation-case>
+		<navigation-case>
+			<from-outcome>DELETE_SUCCESS</from-outcome>
+			<to-view-id>/crud/${c2j.getDeclarationName(${mapping})}${LISTER_INTF_NAME}.jsp</to-view-id>
+		</navigation-case>
+		<navigation-case>
+			<from-outcome>UPDATE</from-outcome>
+			<to-view-id>/crud/${c2j.getDeclarationName(${mapping})}.jsp</to-view-id>
+		</navigation-case>
+	</navigation-rule>
+	<navigation-rule>
+		<from-view-id>/crud/${c2j.getDeclarationName(${mapping})}.jsp</from-view-id>
+		<navigation-case>
+			<from-outcome>BACK</from-outcome>
+			<to-view-id>/crud/${c2j.getDeclarationName(${mapping})}${LISTER_INTF_NAME}.jsp</to-view-id>
+		</navigation-case>
+		<navigation-case>
+			<from-outcome>CANCEL_CREATE</from-outcome>
+			<to-view-id>/crud/${c2j.getDeclarationName(${mapping})}${LISTER_INTF_NAME}.jsp</to-view-id>
+		</navigation-case>
+		<navigation-case>
+			<from-outcome>CANCEL_UPDATE</from-outcome>
+			<to-view-id>/crud/${c2j.getDeclarationName(${mapping})}.jsp</to-view-id>
+		</navigation-case>
+		<navigation-case>
+			<from-outcome>DELETE_SUCCESS</from-outcome>
+			<to-view-id>/crud/${c2j.getDeclarationName(${mapping})}${LISTER_INTF_NAME}.jsp</to-view-id>
+		</navigation-case>		
+		<navigation-case>
+			<from-outcome>UPDATE_SUCCESS</from-outcome>
+			<to-view-id>/crud/${c2j.getDeclarationName(${mapping})}.jsp</to-view-id>
+		</navigation-case>	
+		<navigation-case>
+			<from-outcome>CREATE_SUCCESS</from-outcome>
+			<to-view-id>/crud/${c2j.getDeclarationName(${mapping})}.jsp</to-view-id>
+		</navigation-case>
+	</navigation-rule>
+	
+#end
+
+#foreach( $mapping in $cfg.getClassMappings() )
+    <managed-bean>
+        <managed-bean-name>$c2j.getDeclarationName($mapping)</managed-bean-name>
+        <managed-bean-class>${c2j.getPackageName($mapping)}.managed.crud.$c2j.getDeclarationName($mapping)${CRUD_INTF_NAME}</managed-bean-class>
+        <managed-bean-scope>request</managed-bean-scope>
+    </managed-bean>
+    <managed-bean>
+        <managed-bean-name>$c2j.getDeclarationName($mapping)${LISTER_INTF_NAME}</managed-bean-name>
+        <managed-bean-class>${c2j.getPackageName($mapping)}.managed.lister.$c2j.getDeclarationName($mapping)${LISTER_INTF_NAME}</managed-bean-class>
+        <managed-bean-scope>session</managed-bean-scope>
+    </managed-bean>
+#end
+
+</faces-config>
Index: tools/src/velocity/jsf/home.vm
===================================================================
RCS file: tools/src/velocity/jsf/home.vm
diff -N tools/src/velocity/jsf/home.vm
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ tools/src/velocity/jsf/home.vm	1 Jan 1970 00:00:00 -0000
@@ -0,0 +1,24 @@
+<%@taglib prefix="tools" tagdir="/WEB-INF/tags" %>
+
+<tools:Layout>
+	
+	<p>
+	You have generated a web application using hbm2jsf.
+	This application is an extension of my 
+	<a href="http://hbm2jsf.dbyrne.net/">pilot project</a>.
+	I am currently working on <a href="crud/index.jsf">CRUD</a> features.
+	When finished with CRUD, I'll start <a href="reporting/index.jsf">reporting</a>.  
+	Later, we'll doll things up with CSS and tune it for performance.  
+	Constructive criticism is welcome at the 
+	<a href="http://forum.hibernate.org/viewtopic.php?p=2253369#2253369">forum</a>.
+	I am very interested in ideas for the CRUD model itself.
+	</p>
+	
+	<p>
+		The implementation is AbstractExporter -> WebExporter -> JsfExporter .
+		My goal is not just to create a generator for JSF.  There
+		is no reason why others cannot extend WebExporter with TapestryExporter or
+		ShaleExporter.
+	</p>
+	
+</tools:Layout>
Index: tools/src/velocity/jsf/index.vm
===================================================================
RCS file: tools/src/velocity/jsf/index.vm
diff -N tools/src/velocity/jsf/index.vm
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ tools/src/velocity/jsf/index.vm	1 Jan 1970 00:00:00 -0000
@@ -0,0 +1,3 @@
+<jsp:forward page="home.jsf" /> 
+
+<!-- this is here merely to redirect them to a URL pattern that the FC will see -->
Index: tools/src/velocity/jsf/listerBean.vm
===================================================================
RCS file: tools/src/velocity/jsf/listerBean.vm
diff -N tools/src/velocity/jsf/listerBean.vm
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ tools/src/velocity/jsf/listerBean.vm	1 Jan 1970 00:00:00 -0000
@@ -0,0 +1,44 @@
+package ${c2j.getPackageName($clazz)}.managed.lister;
+
+import ${clazz.getClassName()}Home;
+import ${clazz.getClassName()};
+import java.util.List;
+import java.util.ArrayList;
+import org.hibernate.tool.crud.*;
+import org.apache.commons.logging.*;
+import javax.faces.model.DataModel;
+import javax.faces.model.ListDataModel;
+
+public class ${c2j.getDeclarationName($clazz)}${LISTER_INTF_NAME} implements ${LISTER_INTF_NAME}{
+	
+   	private DataModel list = new ListDataModel();
+   	private static final Log log = LogFactory.getLog(${c2j.getDeclarationName($clazz)}${LISTER_INTF_NAME}.class);
+	private ${c2j.getDeclarationName($clazz)}Home dao ; //= new ${c2j.getDeclarationName($clazz)}Home();
+	
+	public ${c2j.getDeclarationName($clazz)}Home getDao(){
+		return dao;
+	}
+		
+	public DataModel getList() {
+		return list;
+	}
+	
+	public void setList(DataModel dataModel) {
+		this.list = dataModel;
+	}	
+	
+	public boolean isEmpty(){
+		return (list == null || list.isRowAvailable());
+	}
+	
+	public String load(){
+		List list = new ArrayList();
+		// later, this will query a DAO
+		for(int i = 0; i < 20; i++){
+			${c2j.getDeclarationName($clazz)} item = new ${c2j.getDeclarationName($clazz)}(new Integer(i));
+			list.add(item);
+		}
+		this.list.setWrappedData(list);
+		return "${c2j.getDeclarationName($clazz)}";	
+	}
+}
Index: tools/src/velocity/jsf/listerForm.vm
===================================================================
RCS file: tools/src/velocity/jsf/listerForm.vm
diff -N tools/src/velocity/jsf/listerForm.vm
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ tools/src/velocity/jsf/listerForm.vm	1 Jan 1970 00:00:00 -0000
@@ -0,0 +1,36 @@
+<%@taglib prefix="h" uri="http://java.sun.com/jsf/html" %>
+<%@taglib prefix="f" uri="http://java.sun.com/jsf/core" %>
+<%@taglib prefix="tools" tagdir="/WEB-INF/tags" %>
+
+<tools:Layout>
+
+<f:view>
+ 
+ <h:outputText value="This form provides a listing of all instances of $c2j.getDeclarationName($clazz) .  Click" />
+ <h:form>
+   <h:commandLink value="here" action="#{${c2j.getDeclarationName($clazz)}.createPrepare}" >
+		<f:param name="STATE" value="INSERT" /> 
+   </h:commandLink>
+ </h:form>
+ <h:outputText value=" to create a new $c2j.getDeclarationName($clazz) .  Later this list will be paginated to improve performance." /><br/><br/>
+ 
+ <h:panelGroup>
+ <h:dataTable styleClass="dataTable" var="item" value="#{${c2j.getDeclarationName($clazz)}Lister.list}" >
+   <h:column>
+    <h:commandLink value="Edit" action="#{${c2j.getDeclarationName($clazz)}.updatePrepare}" >
+    	<f:param name="id" value="#{item.${clazz.getIdentifierProperty().getName()}}" />
+    </h:commandLink>
+   </h:column>
+   <h:column>
+    <h:commandLink value="Delete" action="#{${c2j.getDeclarationName($clazz)}.delete}">
+    </h:commandLink>
+   </h:column>   
+   <h:column>
+	<h:commandLink value="#{item}" action="#{${c2j.getDeclarationName($clazz)}.retrieve}" />
+   </h:column> 
+ </h:dataTable>
+ </h:panelGroup>
+ 
+</f:view>
+
+</tools:Layout>
Index: tools/src/velocity/jsf/listerIntf.vm
===================================================================
RCS file: tools/src/velocity/jsf/listerIntf.vm
diff -N tools/src/velocity/jsf/listerIntf.vm
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ tools/src/velocity/jsf/listerIntf.vm	1 Jan 1970 00:00:00 -0000
@@ -0,0 +1,10 @@
+package org.hibernate.tool.crud;
+import javax.faces.model.DataModel;
+
+public interface ${LISTER_INTF_NAME} {
+
+	public DataModel getList();
+	public String load();
+	public boolean isEmpty();
+	
+}
Index: tools/src/velocity/jsf/readme.vm
===================================================================
RCS file: tools/src/velocity/jsf/readme.vm
diff -N tools/src/velocity/jsf/readme.vm
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ tools/src/velocity/jsf/readme.vm	1 Jan 1970 00:00:00 -0000
@@ -0,0 +1,4 @@
+The application you have generated depends on a JSF implementation.  I suggest 
+getting the Apache MyFaces 1.0.9 release from http://myfaces.apache.org/binary.cgi .
+You will also need Hibernate 3.  If you did not generate this web application in 
+concert w/ hbm2java , it is suggested you do so.
Index: tools/src/velocity/jsf/web.vm
===================================================================
RCS file: tools/src/velocity/jsf/web.vm
diff -N tools/src/velocity/jsf/web.vm
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ tools/src/velocity/jsf/web.vm	1 Jan 1970 00:00:00 -0000
@@ -0,0 +1,85 @@
+<?xml version="1.0" encoding="UTF-8"?> 
+<web-app version="2.4" xmlns="http://java.sun.com/xml/ns/j2ee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd">
+
+  <display-name>${name}</display-name>
+  <welcome-file-list>  
+	    <welcome-file>index.jsf</welcome-file>
+		<welcome-file>index.jsp</welcome-file>
+  </welcome-file-list>
+
+  <!-- parameters related to jsf -->
+    <context-param>
+        <param-name>javax.faces.CONFIG_FILES</param-name>
+        <param-value>/WEB-INF/faces-config.xml</param-value>
+    </context-param>  
+   	<context-param>
+        <param-name>javax.faces.STATE_SAVING_METHOD</param-name>
+        <param-value>server</param-value>
+   	</context-param>
+   	<context-param>
+        <param-name>org.apache.myfaces.ALLOW_JAVASCRIPT</param-name>
+        <param-value>true</param-value>
+   	</context-param>
+	<context-param>
+        <param-name>org.apache.myfaces.DETECT_JAVASCRIPT</param-name>
+        <param-value>false</param-value>
+	</context-param>
+    <context-param>
+        <param-name>org.apache.myfaces.PRETTY_HTML</param-name>
+        <param-value>true</param-value>
+    </context-param>  
+    <context-param>
+        <param-name>org.apache.myfaces.AUTO_SCROLL</param-name>
+        <param-value>true</param-value>
+    </context-param>  
+     
+    <filter>
+        <filter-name>extensionsFilter</filter-name>
+        <filter-class>org.apache.myfaces.component.html.util.ExtensionsFilter</filter-class>
+        <init-param>
+            <param-name>uploadMaxFileSize</param-name>
+            <param-value>100m</param-value>
+        </init-param>
+        <init-param>
+            <param-name>uploadThresholdSize</param-name>
+            <param-value>100k</param-value>
+        </init-param>
+    </filter>
+
+	<filter-mapping>
+  		<filter-name>extensionsFilter</filter-name> 
+  		<url-pattern>*.jsf</url-pattern> 
+  	</filter-mapping>
+ 	<filter-mapping>
+  		<filter-name>extensionsFilter</filter-name> 
+  		<url-pattern>/faces/*</url-pattern> 
+  	</filter-mapping>
+
+  	<listener>
+  		<listener-class>org.apache.myfaces.webapp.StartupServletContextListener</listener-class>
+	</listener>
+
+    <servlet>
+        <servlet-name>Faces Servlet</servlet-name>
+        <servlet-class>javax.faces.webapp.FacesServlet</servlet-class>
+        <load-on-startup>1</load-on-startup>
+    </servlet> 
+  
+    <servlet-mapping>
+        <servlet-name>Faces Servlet</servlet-name>
+        <url-pattern>*.jsf</url-pattern>
+    </servlet-mapping>
+    <servlet-mapping>
+        <servlet-name>Faces Servlet</servlet-name>
+        <url-pattern>/faces/*</url-pattern>
+    </servlet-mapping>
+  
+  <!-- currently not used -->
+  <resource-ref>
+  	<description>hbm2jsf</description> 
+  	<res-ref-name>jdbc/hbm2jsf</res-ref-name> 
+  	<res-type>javax.sql.DataSource</res-type> 
+  	<res-auth>Application</res-auth> 
+  </resource-ref>
+ 
+</web-app>
Index: tools/src/velocity/web/Layout.vm
===================================================================
RCS file: tools/src/velocity/web/Layout.vm
diff -N tools/src/velocity/web/Layout.vm
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ tools/src/velocity/web/Layout.vm	1 Jan 1970 00:00:00 -0000
@@ -0,0 +1,35 @@
+<html>
+ <head>
+ 	<style>
+ 		.commandButton{ width: 70 }
+ 		#commandButtons{ float:right }
+ 		.dataTable td{ padding: 0 10 0 0 }
+ 		.outputLabel{ width: 150; font: bold 11pt verdana; }
+ 		FORM { display:inline }
+ 	</style>
+ </head>
+ <body>
+ 
+  <table width="780" border="1">
+   <tr>
+   	<td colspan="3" align="center"><h1>Welcome to ${name}</h1></td>
+   </tr>
+   <tr>
+   	<td width="150" valign="top">
+   		<a href="${rootDir}">Home</a><br/>
+   		<a href="${rootDir}/crud/index.jsf">CRUD</a><br/>
+   		<a href="${rootDir}/reporting">Reporting</a><br/> 
+   	</td>		
+   	<td valign="top"><jsp:doBody/></td>
+   	<td width="150" valign="top">
+   		<a href="http://hibernate.org/">Hibernate Tools</a><br/>
+   		<a href="http://sourceforge.net/project/showfiles.php?group_id=92325">HibTags</a><br/>
+   		<a href="http://www.hibernate.org/255.html">Hibernate</a><br/>   		
+   		<a href="http://myfaces.apache.org/">MyFaces</a><br/>
+   		<a href="http://www.jboss.com/">JBoss</a><br/>
+   		<a href="http://forum.hibernate.org/viewtopic.php?p=2253369#2253369">Discussion</a><br/>
+   	</td>
+    </tr>
+  </table>
+ </body>
+</html>
Index: tools/src/velocity/web/hibernateUtil.vm
===================================================================
RCS file: tools/src/velocity/web/hibernateUtil.vm
diff -N tools/src/velocity/web/hibernateUtil.vm
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ tools/src/velocity/web/hibernateUtil.vm	1 Jan 1970 00:00:00 -0000
@@ -0,0 +1,141 @@
+package ${packageName};
+
+import org.hibernate.*;
+import org.hibernate.cfg.*;
+import org.apache.commons.logging.*;
+
+import javax.naming.*;
+
+/**
+ * Basic Hibernate helper class, handles SessionFactory, Session and Transaction.
+ * <p>
+ * Uses a static initializer for the initial SessionFactory creation
+ * and holds Session and Transactions in thread local variables.
+ *
+ * @author christian@hibernate.org
+ */
+public class HibernateUtil {
+
+    private static Log log = LogFactory.getLog(HibernateUtil.class);
+
+    private static Configuration configuration;
+    private static SessionFactory sessionFactory;
+    private static final ThreadLocal threadSession = new ThreadLocal();
+    private static final ThreadLocal threadTransaction = new ThreadLocal();
+
+    // Create the initial SessionFactory from the default configuration files
+    static {
+        try {
+              configuration = new Configuration();
+            sessionFactory = configuration.configure().buildSessionFactory();
+            // We could also let Hibernate bind it to JNDI:
+            // configuration.configure().buildSessionFactory()
+        } catch (Throwable ex) {
+            // We have to catch Throwable, otherwise we will miss
+            // NoClassDefFoundError and other subclasses of Error
+            log.error("Building SessionFactory failed.", ex);
+            throw new ExceptionInInitializerError(ex);
+        }
+    }
+
+    /**
+     * Returns the SessionFactory used for this static class.
+     *
+     * @return SessionFactory
+     */
+    public static SessionFactory getSessionFactory() {
+        /* Instead of a static variable, use JNDI:
+        SessionFactory sessions = null;
+        try {
+            Context ctx = new InitialContext();
+            String jndiName = "java:hibernate/HibernateFactory";
+            sessions = (SessionFactory)ctx.lookup(jndiName);
+        } catch (NamingException ex) {
+            throw new RuntimeException(ex);
+        }
+        return sessions;
+        */
+        return sessionFactory;
+    }
+
+    /**
+     * Retrieves the current Session local to the thread.
+     * <p/>
+     * If no Session is open, opens a new Session for the running thread.
+     *
+     * @return Session
+     */
+    public static Session getSession() {
+         // With CMT, this should return getSessionFactory().getCurrentSession() and do nothing else
+        Session s = (Session) threadSession.get();
+        if (s == null) {
+            log.debug("Opening new Session for this thread.");
+            s = getSessionFactory().openSession();
+            threadSession.set(s);
+        }
+        return s;
+    }
+
+    /**
+     * Closes the Session local to the thread.
+     */
+    public static void closeSession() {
+              // Would be written as a no-op in an EJB container with CMT
+            Session s = (Session) threadSession.get();
+            threadSession.set(null);
+            if (s != null && s.isOpen()) {
+                log.debug("Closing Session of this thread.");
+                s.close();
+            }
+    }
+
+    /**
+     * Start a new database transaction.
+     */
+    public static void beginTransaction() {
+          // Would be written as a no-op in an EJB container with CMT
+        Transaction tx = (Transaction) threadTransaction.get();
+            if (tx == null) {
+                log.debug("Starting new database transaction in this thread.");
+                tx = getSession().beginTransaction();
+                threadTransaction.set(tx);
+            }
+    }
+
+    /**
+     * Commit the database transaction.
+     */
+    public static void commitTransaction() {
+          // Would be written as a no-op in an EJB container with CMT
+        Transaction tx = (Transaction) threadTransaction.get();
+        try {
+            if ( tx != null && !tx.wasCommitted()
+                            && !tx.wasRolledBack() ) {
+                log.debug("Committing database transaction of this thread.");
+                tx.commit();
+            }
+            threadTransaction.set(null);
+        } catch (HibernateException ex) {
+            rollbackTransaction();
+            throw ex;
+        }
+    }
+
+    /**
+     * Rollback the database transaction.
+     */
+    public static void rollbackTransaction() {
+          // Would be written as a no-op in an EJB container with CMT (maybe setRollBackOnly...)
+        Transaction tx = (Transaction) threadTransaction.get();
+        try {
+            threadTransaction.set(null);
+            if ( tx != null && !tx.wasCommitted() && !tx.wasRolledBack() ) {
+                log.debug("Tyring to rollback database transaction of this thread.");
+                tx.rollback();
+            }
+        } finally {
+            closeSession();
+        }
+    }
+
+}
Index: tools/src/velocity/web/reportingForm.vm
===================================================================
RCS file: tools/src/velocity/web/reportingForm.vm
diff -N tools/src/velocity/web/reportingForm.vm
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ tools/src/velocity/web/reportingForm.vm	1 Jan 1970 00:00:00 -0000
@@ -0,0 +1,8 @@
+<%@taglib prefix="tools" tagdir="/WEB-INF/tags" %>
+
+<tools:Layout>
+
+This should be a report related to $c2j.getDeclarationName($clazz)
+
+
+</tools:Layout>
Index: tools/src/velocity/web/reportingIndex.vm
===================================================================
RCS file: tools/src/velocity/web/reportingIndex.vm
diff -N tools/src/velocity/web/reportingIndex.vm
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ tools/src/velocity/web/reportingIndex.vm	1 Jan 1970 00:00:00 -0000
@@ -0,0 +1,18 @@
+<%@taglib prefix="tools" tagdir="/WEB-INF/tags" %>
+
+<tools:Layout>
+
+	<h2>Reporting</h2>
+	
+	Each link below points should point to a report page.  Depending upon how far this 
+	project is, you may need to acquire the jars for 
+	<a href="http://sourceforge.net/project/showfiles.php?group_id=92325">hibtags</a>. 
+	<br/><br/>
+
+#foreach( $mapping in $cfg.getClassMappings() )
+
+	<a href="${c2j.getDeclarationName($mapping)}.jsf">$mapping.getClassName()</a><br/>
+
+#end
+
+</tools:Layout>
