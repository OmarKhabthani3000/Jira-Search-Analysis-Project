Index: C:/DAL2.1/workspace/HibernateExt/tools/src/java/org/hibernate/cfg/reveng/ReverseEngineeringStrategy.java
===================================================================
--- C:/DAL2.1/workspace/HibernateExt/tools/src/java/org/hibernate/cfg/reveng/ReverseEngineeringStrategy.java	(revision 9668)
+++ C:/DAL2.1/workspace/HibernateExt/tools/src/java/org/hibernate/cfg/reveng/ReverseEngineeringStrategy.java	(working copy)
@@ -8,6 +8,8 @@
 
 public interface ReverseEngineeringStrategy {
 
+    public boolean ignoreForeignKeys();
+    
 	/**
 	 * 
 	 * @return a fully-qualified class name (must be aligned with tableToPackageName and tableToSimpleClassName) 
Index: C:/DAL2.1/workspace/HibernateExt/tools/src/java/org/hibernate/cfg/reveng/DefaultReverseEngineeringStrategy.java
===================================================================
--- C:/DAL2.1/workspace/HibernateExt/tools/src/java/org/hibernate/cfg/reveng/DefaultReverseEngineeringStrategy.java	(revision 9668)
+++ C:/DAL2.1/workspace/HibernateExt/tools/src/java/org/hibernate/cfg/reveng/DefaultReverseEngineeringStrategy.java	(working copy)
@@ -32,6 +32,10 @@
 		super();
 	}
 		
+    public boolean ignoreForeignKeys() {
+        return false;
+    }
+
 	public String columnToPropertyName(TableIdentifier table, String columnName) {
 		String decapitalize = Introspector.decapitalize( toUpperCamelCase(columnName) );
 		
Index: C:/DAL2.1/workspace/HibernateExt/tools/src/java/org/hibernate/cfg/reveng/JDBCReader.java
===================================================================
--- C:/DAL2.1/workspace/HibernateExt/tools/src/java/org/hibernate/cfg/reveng/JDBCReader.java	(revision 9668)
+++ C:/DAL2.1/workspace/HibernateExt/tools/src/java/org/hibernate/cfg/reveng/JDBCReader.java	(working copy)
@@ -106,6 +106,11 @@
 	
 	
 	protected Map processForeignKeys(DatabaseCollector dbs, Table referencedTable, ProgressListener progress) throws JDBCBinderException {
+        
+        if (revengStrategy.ignoreForeignKeys()) {
+            return new HashMap();
+        }
+        
 		// foreign key name to list of columns
 		Map dependentColumns = new HashMap();
 		// foreign key name to Table
Index: C:/DAL2.1/workspace/HibernateExt/tools/src/java/org/hibernate/cfg/reveng/DelegatingReverseEngineeringStrategy.java
===================================================================
--- C:/DAL2.1/workspace/HibernateExt/tools/src/java/org/hibernate/cfg/reveng/DelegatingReverseEngineeringStrategy.java	(revision 9668)
+++ C:/DAL2.1/workspace/HibernateExt/tools/src/java/org/hibernate/cfg/reveng/DelegatingReverseEngineeringStrategy.java	(working copy)
@@ -10,6 +10,10 @@
 
 	ReverseEngineeringStrategy delegate;
 
+    public boolean ignoreForeignKeys() {
+        return delegate==null?false:delegate.ignoreForeignKeys();
+    }
+
 	public List getForeignKeys(TableIdentifier referencedTable) {
 		return delegate==null?null:delegate.getForeignKeys(referencedTable);
 	}
Index: C:/DAL2.1/workspace/HibernateExt/tools/src/testsupport/NoopReverseEngineeringStrategy.java
===================================================================
--- C:/DAL2.1/workspace/HibernateExt/tools/src/testsupport/NoopReverseEngineeringStrategy.java	(revision 9668)
+++ C:/DAL2.1/workspace/HibernateExt/tools/src/testsupport/NoopReverseEngineeringStrategy.java	(working copy)
@@ -13,7 +13,11 @@
  */
 public class NoopReverseEngineeringStrategy implements ReverseEngineeringStrategy {
 
-	public String tableToClassName(TableIdentifier tableIdentifier) {
+    public boolean ignoreForeignKeys() {
+        return false;
+    }
+
+    public String tableToClassName(TableIdentifier tableIdentifier) {
 		// TODO Auto-generated method stub
 		return null;
 	}
