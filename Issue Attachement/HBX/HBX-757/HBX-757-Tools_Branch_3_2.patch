Index: java/org/hibernate/tool/hbm2x/Hbm2DDLExporter.java
===================================================================
--- java/org/hibernate/tool/hbm2x/Hbm2DDLExporter.java	(revision 14689)
+++ java/org/hibernate/tool/hbm2x/Hbm2DDLExporter.java	(working copy)
@@ -11,11 +11,16 @@
 package org.hibernate.tool.hbm2x;
 
 import java.io.File;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
 import java.util.Iterator;
 
+import org.hibernate.HibernateException;
+import org.hibernate.JDBCException;
 import org.hibernate.cfg.Configuration;
 import org.hibernate.tool.hbm2ddl.SchemaExport;
 import org.hibernate.tool.hbm2ddl.SchemaUpdate;
+import org.hibernate.util.ReflectHelper;
 
 /**
  * Schema Export (.ddl) code generation. 
@@ -73,7 +78,77 @@
 		final Configuration configuration = getConfiguration();
 		if (schemaUpdate) {
 			SchemaUpdate update = new SchemaUpdate(configuration);
-			update.execute(scriptToConsole, exportToDatabase);
+			
+			// classic schemaupdate execution, will work with all releases
+			if(outputFileName == null && delimiter == null && haltOnError && format) 
+				update.execute(scriptToConsole, exportToDatabase);
+
+			// at least one of the parameter unmanaged by 
+			// hibernate core prior versions is set 
+			else {
+				
+				/* working with reflection as no idea what hibernate core version is used */
+				try {
+					Class schemaUpdateClass = SchemaUpdate.class;
+					
+					if (null != outputFileName) {
+						Method setOutputFile = schemaUpdateClass.getMethod("setOutputFile", 
+								new Class[] {String.class});
+						setOutputFile.invoke(update, new Object[] {new File(getOutputDirectory(),
+								outputFileName).toString()});
+										
+						log.debug("delimiter ='"+ delimiter + "'");
+						Method setDelimiter = schemaUpdateClass.getMethod("setDelimiter", 
+								new Class[] {String.class});
+						setDelimiter.invoke(update, new Object[] {delimiter});
+						
+						Method setFormat = schemaUpdateClass.getMethod("setFormat", 
+								new Class[] {boolean.class});
+						setFormat.invoke(update, new Object[] {Boolean.valueOf(format)});
+						
+					}
+					
+					if (haltOnError) {
+						Method setHaltOnError = schemaUpdateClass.getMethod("setHaltOnError", 
+								new Class[] {boolean.class});
+						setHaltOnError.invoke(update, new Object[] {Boolean.valueOf(haltOnError)});
+					}
+					
+					update.execute(scriptToConsole, exportToDatabase);
+					if (!update.getExceptions().isEmpty()) {
+						int i = 1;
+						for (Iterator iterator = update.getExceptions().iterator(); iterator
+								.hasNext(); i++) {
+							Throwable element = (Throwable) iterator.next();
+							log.warn("Error #" + i + ": ", element);
+
+						}
+						log.error(i - 1 + " errors occurred while performing Hbm2DDLExporter.");
+						if (haltOnError) {
+							throw new ExporterException(
+									"Errors while performing Hbm2DDLExporter");
+						}
+					}
+					
+				} catch (NoSuchMethodException e) {
+					log.error( "Error during DDL export, this version of hibernate doesn't support following " +
+							"SchemaUpdate parameters: haltonerror = true, format= true, delimiter and outputfilename" + 
+							" either update hibernate3.jar or don't used the involved parameters", e );
+				} catch (IllegalArgumentException e) {
+					log.error( "Error during DDL export, this version of hibernate doesn't support following " +
+							"SchemaUpdate parameters: haltonerror = true, format= true, delimiter and outputfilename" + 
+							" either update hibernate3.jar or don't used the involved parameters", e );
+				} catch (InvocationTargetException e) {
+					log.error( "Error during DDL export, this version of hibernate doesn't support following " +
+							"SchemaUpdate parameters: haltonerror = true, format= true, delimiter and outputfilename" + 
+							" either update hibernate3.jar or don't used the involved parameters", e );
+				} catch (IllegalAccessException e) {
+					log.error( "Error during DDL export, this version of hibernate doesn't support following " +
+							"SchemaUpdate parameters: haltonerror = true, format= true, delimiter and outputfilename" + 
+							" either update hibernate3.jar or don't used the involved parameters", e );
+				}
+			}
+
 		} else {
 			SchemaExport export = new SchemaExport(configuration);
 			if (null != outputFileName) {
@@ -90,22 +165,8 @@
 			} else {
 				export.execute(scriptToConsole, exportToDatabase, drop, create);
 			}
-
-			if (!export.getExceptions().isEmpty()) {
-				int i = 1;
-				for (Iterator iterator = export.getExceptions().iterator(); iterator
-						.hasNext(); i++) {
-					Throwable element = (Throwable) iterator.next();
-					log.warn("Error #" + i + ": ", element);
-
-				}
-				log.error(i - 1 + " errors occurred while performing Hbm2DDLExporter.");
-				if (haltOnError) {
-					throw new ExporterException(
-							"Errors while performing Hbm2DDLExporter");
-				}
-			}
 		}
+		
 	}
 
 	public void setExport(boolean export) {
