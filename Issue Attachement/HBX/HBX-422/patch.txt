Index: src/java/org/hibernate/tool/ant/Hbm2JavaGeneratorTask.java
===================================================================
RCS file: /cvsroot/hibernate/HibernateExt/tools/src/java/org/hibernate/tool/ant/Hbm2JavaGeneratorTask.java,v
retrieving revision 1.6
diff -r1.6 Hbm2JavaGeneratorTask.java
18a19,20
> 	
> 	boolean interfaces = true;
39a42
> 		exporter.setInterfaces(interfaces);
48a52,55
> 
> 	public void setInterfaces(boolean interfaces) {
> 		this.interfaces = interfaces;
> 	}
Index: src/java/org/hibernate/tool/hbm2x/POJOExporter.java
===================================================================
RCS file: /cvsroot/hibernate/HibernateExt/tools/src/java/org/hibernate/tool/hbm2x/POJOExporter.java,v
retrieving revision 1.22
diff -r1.22 POJOExporter.java
28a29,30
> 	private static final String POJO_JAVAINTERFACE_VM = "IPojo";
> 	
32c34
<     
---
> 	
34a37
>     private boolean interfaces;
60a64,66
> 		if(useInterfaces()){
> 			runVelocity(entityPOJOClass, POJO_JAVAINTERFACE_VM, getFileForInterfaceName(getOutputDirectory(), getNameForClass( entityPOJOClass ), ".java"));			
> 		}
69a76,78
> 			if(useInterfaces()){
> 				runVelocity(componentPOJOClass, POJO_JAVAINTERFACE_VM, getFileForInterfaceName(getOutputDirectory(), getNameForClass( componentPOJOClass ), ".java"));			
> 			}
126a136,154
> 
> 	public boolean useInterfaces() {
> 		return interfaces;
> 	}
> 
> 	public void setInterfaces(boolean interfaces) {
> 		this.interfaces = interfaces;
> 	}
> 	
> 	protected File getFileForInterfaceName(File baseDir, String className, String extension){
> 		int lastPointPos = className.lastIndexOf(".");
> 		if(lastPointPos < 0)
> 			return getFileForClassName(baseDir, "I"+className, extension);
> 			
> 		String packageName = className.substring(0, lastPointPos);
> 		String interfaceName = className.substring(lastPointPos+1);
> 		//System.out.println(packageName + ".I" +interfaceName);
> 		return getFileForClassName(baseDir, packageName + ".I" + interfaceName, extension);
> 	}
Index: src/java/org/hibernate/tool/hbm2x/TemplateHelper.java
===================================================================
RCS file: /cvsroot/hibernate/HibernateExt/tools/src/java/org/hibernate/tool/hbm2x/TemplateHelper.java,v
retrieving revision 1.13
diff -r1.13 TemplateHelper.java
123,124c123,125
<         try {            
<             getEngine().mergeTemplate(getTemplateName(templateName), getContext(), output);
---
>         try {    
>         	String realTemplateName = getTemplateName(templateName);
>             getEngine().mergeTemplate(realTemplateName, getContext(), output);
Index: src/test/org/hibernate/tool/ant/HibernateToolTest.java
===================================================================
RCS file: /cvsroot/hibernate/HibernateExt/tools/src/test/org/hibernate/tool/ant/HibernateToolTest.java,v
retrieving revision 1.13
diff -r1.13 HibernateToolTest.java
43,45c43,45
< 	/*public void testHbm2JavaConfiguration() {
< 		executeTarget("testanthbm2java");
< 	}*/
---
> 	public void testHbm2JavaConfiguration() {
> 		executeTarget("testanthbm2java1");
> 	}
Index: src/test/org/hibernate/tool/test/jdbc2cfg/TestHelper.java
===================================================================
RCS file: /cvsroot/hibernate/HibernateExt/tools/src/test/org/hibernate/tool/test/jdbc2cfg/TestHelper.java,v
retrieving revision 1.8
diff -r1.8 TestHelper.java
108a109
> /*	
119a121
> */	
Index: src/testoutputdependent/HelloWorld.java
===================================================================
RCS file: /cvsroot/hibernate/HibernateExt/tools/src/testoutputdependent/HelloWorld.java,v
retrieving revision 1.1
diff -r1.1 HelloWorld.java
10c10
< public interface HelloWorld extends generated.BaseHelloWorld {
---
> public interface HelloWorld extends BaseHelloWorld {
Index: src/testsupport/anttest-build.xml
===================================================================
RCS file: /cvsroot/hibernate/HibernateExt/tools/src/testsupport/anttest-build.xml,v
retrieving revision 1.18
diff -r1.18 anttest-build.xml
81c81,82
<   <configuration propertyfile="../../etc/hibernate.properties">
---
>   <mkdir dir="${build.dir}/bottomup"/>
>  	<configuration propertyfile="../../etc/hibernate.properties">
91,118c92,136
<     <property name="hbm2java.ejb3" value="weird"/>
<     <property name="hbm2java.anothervalue" value="weirdo"/>
<     
<     <target name="testproperties">
<      <taskdef name="hibernatetool" classname="org.hibernate.tool.ant.HibernateToolTask" classpathref="tasks.classpath"/>
< 
<      <property name="org.hibernate.tool.hbm2x.weirdAl" value="weirdAl"/>
<         
<         <hibernatetool destdir="${build.dir}/bottomup">
<       <configuration propertyfile="../../etc/hibernate.properties">
<        <fileset dir=".">
<            <include name="SomeClasses.hbm.xml"/>
<         </fileset> 
<       </configuration>
< 
<       <hbm2java generics="true">
<          <propertyset>
<             <propertyref builtin="all"/>  
<             <propertyref name="hbm2java.ejb3"/>  
<             <propertyref prefix="hbm2java"/>
<          </propertyset> 
<          <property key="mykey" file="c"/>
<         <property key="mykey" value="c"/> 
<        </hbm2java> 
<      </hibernatetool>
<     </target>   
< 
<     <target name="testgeneric">
---
> 	<property name="hbm2java.ejb3" value="weird"/>
> 		<property name="hbm2java.anothervalue" value="weirdo"/>
> 	    	
> 	   <target name="testproperties">
> 	     <taskdef name="hibernatetool" classname="org.hibernate.tool.ant.HibernateToolTask" classpathref="tasks.classpath"/>
> 
> 	     <property name="org.hibernate.tool.hbm2x.weirdAl" value="weirdAl"/>
> 	        
> 	        <hibernatetool destdir="${build.dir}/bottomup">
> 	      <configuration propertyfile="../../etc/hibernate.properties">
> 	       <fileset dir=".">
> 	           <include name="SomeClasses.hbm.xml"/>
> 	        </fileset> 
> 	      </configuration>
> 
> 	      <hbm2java generics="true">
> 	         <propertyset>
> 	            <propertyref builtin="all"/>  
> 	            <propertyref name="hbm2java.ejb3"/>  
> 	            <propertyref prefix="hbm2java"/>
> 	         </propertyset> 
> 	      	
> 	      	<property key="mykey" file="c"/>
> 	        <property key="mykey" value="c"/> 
> 	       </hbm2java> 
> 	     </hibernatetool>
> 	    </target>   
> 
> 	
> 	<target name="testanthbm2java1">
> 	 <taskdef name="hibernatetool" classname="org.hibernate.tool.ant.HibernateToolTask" classpathref="tasks.classpath"/>
> 
> 	<hibernatetool destdir="../test/output">
> 	 <configuration propertyfile="../../etc/hibernate.properties">
> 	  <fileset dir="../test/input">
> 	   <include name="**/*.hbm.xml"/>
> 	  </fileset>
> 	 </configuration>
> 	  <hbm2java templatepath="../velocity/pojo"  interfaces="true" ejb3="false" generics="false"/>
> 	</hibernatetool>
> 
> 	</target>
> 	
> 	
> 	<target name="testgeneric">
Index: src/testsupport/templates/pojo/Pojo.vm
===================================================================
RCS file: /cvsroot/hibernate/HibernateExt/tools/src/testsupport/templates/pojo/Pojo.vm,v
retrieving revision 1.1
diff -r1.1 Pojo.vm
1c1,27
< /** Made by a template in your neighborhood */
\ No newline at end of file
---
> $pojo.getPackageDeclaration()
> 
> $secondpassclassimports
> 
> $templates.PojoTypeDeclaration {
> 
> #if(!$pojo.isInterface())
> 
> $templates.PojoFields
> 
> $templates.PojoConstructors
>    
> $templates.PojoPropertyAccessors   
> 
> $templates.PojoToString
> 
> $templates.PojoEqualsHashcode
> 
> #else 
> 
> $templates.PojoInterfacePropertyAccessors
> 
> #end
> 
> $templates.PojoExtraClassCode
> 
> }
\ No newline at end of file
Index: src/test/input/SomeClasses.hbm.xml
===================================================================
RCS file: src/test/input/SomeClasses.hbm.xml
diff -N src/test/input/SomeClasses.hbm.xml
0a1,14
> <?xml version="1.0" encoding="UTF-8"?>
> <!DOCTYPE hibernate-mapping PUBLIC 
> 	"-//Hibernate/Hibernate Mapping DTD 3.0//EN"
> 	"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
> <hibernate-mapping>
> 
> 	<class name="org.hibernate.tool.hbm2x.ant.SomeClass">
> 		<id type="long">
> 			<generator class="assigned"></generator>
> 		</id>
> 		<property name="name" type="java.lang.String"></property>
> 	</class>
> 
> </hibernate-mapping>
Index: src/velocity/pojo/IPojo.vm
===================================================================
RCS file: src/velocity/pojo/IPojo.vm
diff -N src/velocity/pojo/IPojo.vm
0a1,16
> $pojo.getPackageDeclaration()
> 
> $pojo.getClassModifiers() interface I$pojo.getDeclarationName() { 
>    /** table name*/
>    public static final String TABLE_NAME = "$clazz.getTable().getName()";
>    
>    /**
>      Constants containing column names
>    */
> #foreach($field in $pojo.getAllPropertiesIterator())
> 	#foreach($column in $field.getColumnIterator())
> public static final String $column.getName().toUpperCase() = "${clazz.getTable().getName()}.$column.getName()";
> 	#end	
> #end
> 
> }
