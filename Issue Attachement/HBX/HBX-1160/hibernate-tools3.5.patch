Index: src/java/org/hibernate/tool/hbmlint/detector/SchemaByMetaDataDetector.java
===================================================================
--- src/java/org/hibernate/tool/hbmlint/detector/SchemaByMetaDataDetector.java	(revision 18689)
+++ src/java/org/hibernate/tool/hbmlint/detector/SchemaByMetaDataDetector.java	(working copy)
@@ -226,6 +226,7 @@
 
 				IdentifierGenerator ig = pc.getIdentifier()
 						.createIdentifierGenerator(
+								cfg.getIdentifierGeneratorFactory(),
 								dialect,
 								defaultCatalog,
 								defaultSchema,
@@ -247,6 +248,7 @@
 
 				IdentifierGenerator ig = ( (IdentifierCollection) collection ).getIdentifier()
 						.createIdentifierGenerator(
+								cfg.getIdentifierGeneratorFactory(),
 								dialect,
 								defaultCatalog,
 								defaultSchema,
Index: src/java/org/hibernate/tool/hbm2x/QueryExporter.java
===================================================================
--- src/java/org/hibernate/tool/hbm2x/QueryExporter.java	(revision 18689)
+++ src/java/org/hibernate/tool/hbm2x/QueryExporter.java	(working copy)
@@ -62,10 +62,11 @@
 			transaction.commit();
 		} catch(HibernateException he) {
 			if(transaction!=null) transaction.rollback();
-		} finally {			
-			session.close();
-			session.getSessionFactory().close();
-			
+		} finally {
+			if(session != null) {
+				session.close();
+				session.getSessionFactory().close();
+			}
 		}
 	}
 
Index: src/java/org/hibernate/cfg/JDBCMetaDataConfiguration.java
===================================================================
--- src/java/org/hibernate/cfg/JDBCMetaDataConfiguration.java	(revision 18689)
+++ src/java/org/hibernate/cfg/JDBCMetaDataConfiguration.java	(working copy)
@@ -13,6 +13,7 @@
 import org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy;
 import org.hibernate.cfg.reveng.ReverseEngineeringStrategy;
 import org.hibernate.engine.Mapping;
+import org.hibernate.id.factory.IdentifierGeneratorFactory;
 import org.hibernate.mapping.PersistentClass;
 import org.hibernate.mapping.Property;
 import org.hibernate.mapping.Table;
@@ -66,6 +67,11 @@
 				if (prop==null)  throw new MappingException("property not known: " + persistentClass + '.' + propertyName);
 				return prop.getType();
 			}
+
+			@Override
+			public IdentifierGeneratorFactory getIdentifierGeneratorFactory() {
+				return cfg.getIdentifierGeneratorFactory();
+			}
 		};
 	}
 
Index: src/test/org/hibernate/tool/test/jdbc2cfg/PerformanceTest.java
===================================================================
--- src/test/org/hibernate/tool/test/jdbc2cfg/PerformanceTest.java	(revision 18689)
+++ src/test/org/hibernate/tool/test/jdbc2cfg/PerformanceTest.java	(working copy)
@@ -14,6 +14,7 @@
 import org.hibernate.MappingException;
 import org.hibernate.dialect.Dialect;
 import org.hibernate.engine.Mapping;
+import org.hibernate.id.factory.IdentifierGeneratorFactory;
 import org.hibernate.mapping.Column;
 import org.hibernate.mapping.ForeignKey;
 import org.hibernate.mapping.PrimaryKey;
@@ -62,6 +63,11 @@
 			public Type getReferencedPropertyType(String className, String propertyName) throws MappingException {
 				return null;
 			}
+
+			@Override
+			public IdentifierGeneratorFactory getIdentifierGeneratorFactory() {
+				return null;
+			}
 		
 		};
 		
