Index: src/java/org/hibernate/tool/hbmlint/detector/SchemaByMetaDataDetector.java
===================================================================
--- src/java/org/hibernate/tool/hbmlint/detector/SchemaByMetaDataDetector.java	(revision 18689)
+++ src/java/org/hibernate/tool/hbmlint/detector/SchemaByMetaDataDetector.java	(working copy)
@@ -226,6 +226,7 @@
 
 				IdentifierGenerator ig = pc.getIdentifier()
 						.createIdentifierGenerator(
+								cfg.getIdentifierGeneratorFactory(),
 								dialect,
 								defaultCatalog,
 								defaultSchema,
@@ -247,6 +248,7 @@
 
 				IdentifierGenerator ig = ( (IdentifierCollection) collection ).getIdentifier()
 						.createIdentifierGenerator(
+								cfg.getIdentifierGeneratorFactory(),
 								dialect,
 								defaultCatalog,
 								defaultSchema,
Index: src/java/org/hibernate/tool/hbmlint/detector/InstrumentationDetector.java
===================================================================
--- src/java/org/hibernate/tool/hbmlint/detector/InstrumentationDetector.java	(revision 18689)
+++ src/java/org/hibernate/tool/hbmlint/detector/InstrumentationDetector.java	(working copy)
@@ -25,7 +25,7 @@
 		
 		if(Environment.getBytecodeProvider() instanceof BytecodeProviderImpl) {
 			cglibEnabled = true;
-		} else if(Environment.getBytecodeProvider() instanceof BytecodeProviderImpl) {
+		} else if(Environment.getBytecodeProvider() instanceof org.hibernate.bytecode.javassist.BytecodeProviderImpl) {
 			javassistEnabled = true;
 		}		
 	}
@@ -33,37 +33,32 @@
 	public void visit(Configuration cfg, PersistentClass clazz, IssueCollector collector) {
 		Class mappedClass;
 
-		
 		try {
 			mappedClass = clazz.getMappedClass();
 		} catch(MappingException me) {
 			// ignore
 			return;
 		}
-
 		if(clazz.isLazy()) {
 			try {
 				mappedClass.getConstructor( new Class[0] );
-			}
-			catch (SecurityException e) {
+			} catch (SecurityException e) {
 				// ignore
-			}
-			catch (NoSuchMethodException e) {
+			} catch (NoSuchMethodException e) {
 				collector.reportIssue(new Issue("LAZY_NO_DEFAULT_CONSTRUCTOR",Issue.NORMAL_PRIORITY, "lazy='true' set for '" + clazz.getEntityName() +"', but class has no default constructor." ));
 				return;
 			}
-
 		} else if(cglibEnabled || javassistEnabled){
 			Class[] interfaces = mappedClass.getInterfaces();
 			boolean cglib = false;
 			boolean javaassist = false;
 			for (int i = 0; i < interfaces.length; i++) {
-				Class intface = interfaces[i];				
+				Class intface = interfaces[i];
 				if(intface.getName().equals( "net.sf.cglib.transform.impl.InterceptFieldEnabled" )) {
 					cglib = true;
-				} else if(javassistEnabled && !intface.getName().equals( "org.hibernate.bytecode.javassist.FieldHandled" )) {
+				} else if(javassistEnabled && intface.getName().equals( "org.hibernate.bytecode.javassist.FieldHandled" )) {
 					javaassist = true;
-				} 							
+				}
 			}
 			
 			if(cglibEnabled && !cglib) {
Index: src/java/org/hibernate/tool/hbm2x/QueryExporter.java
===================================================================
--- src/java/org/hibernate/tool/hbm2x/QueryExporter.java	(revision 18689)
+++ src/java/org/hibernate/tool/hbm2x/QueryExporter.java	(working copy)
@@ -62,10 +62,11 @@
 			transaction.commit();
 		} catch(HibernateException he) {
 			if(transaction!=null) transaction.rollback();
-		} finally {			
-			session.close();
-			session.getSessionFactory().close();
-			
+		} finally {
+			if(session != null) {
+				session.close();
+				session.getSessionFactory().close();
+			}
 		}
 	}
 
Index: src/java/org/hibernate/tool/hbm2x/DocExporter.java
===================================================================
--- src/java/org/hibernate/tool/hbm2x/DocExporter.java	(revision 18689)
+++ src/java/org/hibernate/tool/hbm2x/DocExporter.java	(working copy)
@@ -239,9 +239,9 @@
 			" -o " + 
 			escape(outFileName);			
 	
-		Process p = Runtime.getRuntime().exec(exeCmd);
-		//p.getErrorStream().
 		try {
+			Process p = Runtime.getRuntime().exec(exeCmd);
+			//p.getErrorStream().
 			log.debug( "Executing: " + exeCmd );
 //			 Get the input stream and read from it
 	        InputStream in = p.getErrorStream();
Index: src/java/org/hibernate/cfg/reveng/OverrideBinder.java
===================================================================
--- src/java/org/hibernate/cfg/reveng/OverrideBinder.java	(revision 18689)
+++ src/java/org/hibernate/cfg/reveng/OverrideBinder.java	(working copy)
@@ -218,18 +218,18 @@
 			MultiMap map = MetaAttributeBinder.loadAndMergeMetaMap( element, new MultiHashMap());
 			if(map!=null && !map.isEmpty()) {
 				repository.addMetaAttributeInfo( tableIdentifier, column.getName(), map);
-			} 
+			}
 			
+			boolean excluded = booleanValue( element.attributeValue("exclude") );
+			if(excluded) {
+				repository.setExcludedColumn(tableIdentifier, column.getName());
+			}
 			table.addColumn(column);
 			columnNames.add(column.getName());
+			
 			repository.setTypeNameForColumn(tableIdentifier, column.getName(), element.attributeValue("type"));
 			repository.setPropertyNameForColumn(tableIdentifier, column.getName(), element.attributeValue("property"));
 			
-			boolean excluded = booleanValue( element.attributeValue("exclude") );
-			if(excluded) {
-				repository.setExcludedColumn(tableIdentifier, column.getName());
-			}
-			
 			String foreignTableName = element.attributeValue("foreign-table");
 			if(foreignTableName!=null) {
 				List localColumns = new ArrayList();
Index: src/java/org/hibernate/cfg/reveng/dialect/JDBCMetaDataDialect.java
===================================================================
--- src/java/org/hibernate/cfg/reveng/dialect/JDBCMetaDataDialect.java	(revision 18689)
+++ src/java/org/hibernate/cfg/reveng/dialect/JDBCMetaDataDialect.java	(working copy)
@@ -21,7 +21,7 @@
 		try {			
 			final String catalog = caseForSearch( xcatalog );
 			final String schema = caseForSearch( xschema );
-			final String table = caseForSearch( xtable );
+			final String table = caseForSearch( xtable);
 			
 			log.debug("getTables(" + catalog + "." + schema + "." + table + ")");
 			
@@ -113,12 +113,12 @@
 		element.put("TABLE_CAT", tableRs.getString("TABLE_CAT"));
 	}
 
-	public Iterator getColumns(final String xcatalog, final String xschema, final String xtable, String xcolumn) {
+	public Iterator getColumns(final String xcatalog, final String xschema, final String xtable, String xcolumn, boolean isQuoted) {
 		try {			  
-			final String catalog = caseForSearch( xcatalog );
-			final String schema = caseForSearch( xschema );
-			final String table = caseForSearch( xtable );
-			final String column = caseForSearch( xcolumn );
+			final String catalog = caseForSearch(xcatalog);
+			final String schema = caseForSearch(xschema);
+			final String table = caseForSearch(xtable, isQuoted);
+			final String column = caseForSearch(xcolumn);
 			
 			log.debug("getColumns(" + catalog + "." + schema + "." + table + "." + column + ")");
 			ResultSet tableRs = getMetaData().getColumns(catalog, schema, table, column);
Index: src/java/org/hibernate/cfg/reveng/dialect/AbstractMetaDataDialect.java
===================================================================
--- src/java/org/hibernate/cfg/reveng/dialect/AbstractMetaDataDialect.java	(revision 18689)
+++ src/java/org/hibernate/cfg/reveng/dialect/AbstractMetaDataDialect.java	(working copy)
@@ -141,7 +141,13 @@
 	}
 	
 	protected String caseForSearch(String value) throws SQLException  {
-		// TODO: handle quoted requests (just strip it ?)
+		return caseForSearch(value, false);	
+	}
+	
+	protected String caseForSearch(String value, boolean isQuoted) throws SQLException  {
+		if(isQuoted) {
+			return value;
+		}
 		if ( getMetaData().storesUpperCaseIdentifiers() ) { 
 			return StringHelper.toUpperCase( value ); 
 		} else if( getMetaData().storesUpperCaseIdentifiers() ) {
Index: src/java/org/hibernate/cfg/reveng/dialect/OracleMetaDataDialect.java
===================================================================
--- src/java/org/hibernate/cfg/reveng/dialect/OracleMetaDataDialect.java	(revision 18689)
+++ src/java/org/hibernate/cfg/reveng/dialect/OracleMetaDataDialect.java	(working copy)
@@ -132,7 +132,7 @@
 		} 		
 	}
 
-	public Iterator getColumns(final String catalog, final String schema, final String table, String column) {
+	public Iterator getColumns(final String catalog, final String schema, final String table, String column, boolean isQuoted) {
 		try {			  
 			log.debug("getColumns(" + catalog + "." + schema + "." + table + "." + column + ")");
 			// Collect Columns from the 'ALL' data dicitonary table.
Index: src/java/org/hibernate/cfg/reveng/dialect/MetaDataDialect.java
===================================================================
--- src/java/org/hibernate/cfg/reveng/dialect/MetaDataDialect.java	(revision 18689)
+++ src/java/org/hibernate/cfg/reveng/dialect/MetaDataDialect.java	(working copy)
@@ -58,9 +58,10 @@
 	 * @param schema name or null
 	 * @param table name or null
 	 * @param column name or null
+	 * @param isQuoted table name is quoted
 	 * @return iterator with map elements that has "TABLE_NAME", "TABLE_SCHEMA", "TABLE_CAT", "DATA_TYPE", "TYPE_NAME", "COLUMN_NAME", "NULLABLE", "COLUMN_SIZE", "DECIMAL_DIGITS"
 	 */
-	Iterator getColumns(String catalog, String schema, String table, String column);
+	Iterator getColumns(String catalog, String schema, String table, String column, boolean isQuoted);
 
 	/**
 	 * Return iterator over the columns that mathces catalog, schema and table
Index: src/java/org/hibernate/cfg/reveng/JDBCReader.java
===================================================================
--- src/java/org/hibernate/cfg/reveng/JDBCReader.java	(revision 18689)
+++ src/java/org/hibernate/cfg/reveng/JDBCReader.java	(working copy)
@@ -77,10 +77,17 @@
 					foundTables.addAll( processTables(dbs, selection, hasIndices, progress) );
 				}
 			}
-			
+			boolean isMultiSchema = false;
+			String currentSchema = null;
 			Iterator tables = foundTables.iterator(); // not dbs.iterateTables() to avoid "double-read" of columns etc.
 			while ( tables.hasNext() ) {
 				Table table = (Table) tables.next();
+				if(currentSchema == null && table.getSchema() != null) {
+					currentSchema = qualifySchema(table);
+				}
+				if(currentSchema != null && !currentSchema.equals(qualifySchema(table))) {
+					isMultiSchema = true;
+				}
 				processBasicColumns(table, progress);
 				processPrimaryKey(table);
 				if(hasIndices.contains(table)) {
@@ -88,6 +95,16 @@
 				}
 			}
 			
+			if(!isMultiSchema) {
+				//if not multischema, clear catalog/schema info in table
+				tables = foundTables.iterator();
+				while(tables.hasNext()) {
+					Table table = (Table) tables.next();
+					table.setCatalog(null);
+					table.setSchema(null);
+				}
+			}
+			
 			tables = foundTables.iterator(); //dbs.iterateTables();
 			Map oneToManyCandidates = resolveForeignKeys( dbs, tables, progress );
 			
@@ -100,6 +117,10 @@
 		}
 	}
 
+	private String qualifySchema(Table table) {
+		return (table.getCatalog() != null ? table.getCatalog() + "." : ".") + table.getSchema();
+	}
+
 	/**
 	 * Iterates the tables and find all the foreignkeys that refers to something that is available inside the DatabaseCollector.
 	 * @param dbs
@@ -543,7 +564,7 @@
 			Map columnRs = null;
 			log.debug("Finding columns for " + qualify );
 			progress.startSubTask("Finding columns for " + qualify);
-			columnIterator = getMetaDataDialect().getColumns(getCatalogForDBLookup(table.getCatalog()), getSchemaForDBLookup(table.getSchema()), table.getName(), null);
+			columnIterator = getMetaDataDialect().getColumns(getCatalogForDBLookup(table.getCatalog()), getSchemaForDBLookup(table.getSchema()), table.getName(), null, table.isQuoted());
 			//dumpHeader(columnRs);
 			while (columnIterator.hasNext() ) {
 				//dumpRow(columnRs);
Index: src/java/org/hibernate/cfg/JDBCMetaDataConfiguration.java
===================================================================
--- src/java/org/hibernate/cfg/JDBCMetaDataConfiguration.java	(revision 18689)
+++ src/java/org/hibernate/cfg/JDBCMetaDataConfiguration.java	(working copy)
@@ -13,6 +13,7 @@
 import org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy;
 import org.hibernate.cfg.reveng.ReverseEngineeringStrategy;
 import org.hibernate.engine.Mapping;
+import org.hibernate.id.factory.IdentifierGeneratorFactory;
 import org.hibernate.mapping.PersistentClass;
 import org.hibernate.mapping.Property;
 import org.hibernate.mapping.Table;
@@ -66,6 +67,10 @@
 				if (prop==null)  throw new MappingException("property not known: " + persistentClass + '.' + propertyName);
 				return prop.getType();
 			}
+
+			public IdentifierGeneratorFactory getIdentifierGeneratorFactory() {
+				return cfg.getIdentifierGeneratorFactory();
+			}
 		};
 	}
 
Index: src/java/org/hibernate/cfg/JDBCBinder.java
===================================================================
--- src/java/org/hibernate/cfg/JDBCBinder.java	(revision 18689)
+++ src/java/org/hibernate/cfg/JDBCBinder.java	(working copy)
@@ -722,7 +722,6 @@
 			else {
 				throw new JDBCBinderException("unknown thing");
 			}
-			
             markAsUseInEquals(property);
             pkc.addProperty(property);
 			
@@ -739,7 +738,7 @@
         MetaAttribute ma = new MetaAttribute("use-in-equals");
         ma.addValue("true");
         m.put(ma.getName(),ma);
-        property.setMetaAttributes(m);
+        property.addMetaAttribute(m);
     }
 
     /**
Index: src/test/org/hibernate/tool/BaseTestCase.java
===================================================================
--- src/test/org/hibernate/tool/BaseTestCase.java	(revision 18703)
+++ src/test/org/hibernate/tool/BaseTestCase.java	(working copy)
@@ -1,8 +1,12 @@
 package org.hibernate.tool;
 
 import java.io.File;
+import java.lang.reflect.Method;
 import java.sql.Connection;
 import java.sql.SQLException;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collections;
 import java.util.Iterator;
 
 import junit.framework.ComparisonFailure;
@@ -32,6 +36,29 @@
 		this.outputdir = new File("toolstestoutput", out);
 	}
 
+	protected String firstTest() {
+		Method[] meths = this.getClass().getMethods();
+		for (int i = 0; i < meths.length; i++) {
+			if(meths[i].getName().startsWith("test")) {
+				return meths[i].getName();
+			}
+		}
+		return null;
+	}
+	
+	protected String lastTest() {
+		Method[] meths = this.getClass().getMethods();
+		ArrayList methods = new ArrayList(Arrays.asList(meths));
+		Collections.reverse(methods);
+		for (Iterator iterator = methods.iterator(); iterator.hasNext();) {
+			Method method = (Method) iterator.next();
+			if(method.getName().startsWith("test")) {
+				return method.getName();
+			}
+		}
+		return null;
+	}
+
 	protected void setUp() throws Exception {
 		super.setUp();
 		if(getOutputDir()!=null) {
@@ -41,10 +68,10 @@
 	}
 	
 	protected void tearDown() throws Exception {
-		
-		if (getOutputDir()!=null) TestHelper.deleteDir(getOutputDir());
-		
-		assertNoTables();
+		super.tearDown();
+		if (getOutputDir()!=null) {
+			TestHelper.deleteDir(getOutputDir());
+		}
 	}
 
 	
Index: src/test/org/hibernate/tool/NonReflectiveTestCase.java
===================================================================
--- src/test/org/hibernate/tool/NonReflectiveTestCase.java	(revision 18689)
+++ src/test/org/hibernate/tool/NonReflectiveTestCase.java	(working copy)
@@ -17,7 +17,6 @@
 	private static SessionFactory sessions;
 	private static Configuration cfg;
 	private static Dialect dialect;
-	private static Class lastTestClass;
 	private org.hibernate.classic.Session session;
 
 	
@@ -90,57 +89,38 @@
 	}
 
 	protected void setUp() throws Exception {
-		if ( getSessions()==null || lastTestClass!=getClass() ) {
+		if (getName().equals(firstTest())) {
 			//buildSessionFactory( getMappings() );
 			buildConfiguration( getMappings() );
-			lastTestClass = getClass();
 			prepareTestData();
 		}
-		
 		super.setUp();
+		final boolean stats = sessions!=null?( (SessionFactoryImplementor) sessions ).getStatistics().isStatisticsEnabled():false;
+		if (stats) sessions.getStatistics().clear();
 	}
 	
-	protected void prepareTestData() {
-		// by default, nothing to do.  Let subclasses override to
-		// run data initialization once per test run...
-	}
+	protected void tearDown() throws Exception {
+		final boolean stats = sessions != null ? ((SessionFactoryImplementor) sessions).getStatistics()
+				.isStatisticsEnabled() : false;
+		if (stats)
+			sessions.getStatistics().logSummary();
 
-	protected void runTest() throws Throwable {
-		final boolean stats = sessions!=null?( (SessionFactoryImplementor) sessions ).getStatistics().isStatisticsEnabled():false;
-		try {
-			if (stats) sessions.getStatistics().clear();
-			
-			super.runTest();
-			
-			if (stats) sessions.getStatistics().logSummary();
-			
-			if ( session!=null && session.isOpen() ) {
-				if ( session.isConnected() ) session.connection().rollback();
-				session.close();
-				session = null;
-				fail("unclosed session");
+		if (session != null) {
+			if (session.isConnected()) {
+				session.connection().rollback();
 			}
-			else {
-				session=null;
-			}
+			session.close();
+			session = null;
+			fail("unclosed session");
+		} else {
+			session = null;
 		}
-		catch (Throwable e) {
-			try {
-				if ( session!=null && session.isOpen() ) {
-					if ( session.isConnected() ) session.connection().rollback();
-					session.close();
-				}
-			}
-			catch (Exception ignore) {}
-			try {
-				if (sessions!=null) {
-					sessions.close();
-					sessions=null;
-				}
-			}
-			catch (Exception ignore) {}
-			throw e;
-		}
+		super.tearDown();
+	}
+	
+	protected void prepareTestData() {
+		// by default, nothing to do.  Let subclasses override to
+		// run data initialization once per test run...
 	}
 
 	public org.hibernate.classic.Session openSession() throws HibernateException {
Index: src/test/org/hibernate/tool/hbmlint/HbmLintTest.java
===================================================================
--- src/test/org/hibernate/tool/hbmlint/HbmLintTest.java	(revision 18689)
+++ src/test/org/hibernate/tool/hbmlint/HbmLintTest.java	(working copy)
@@ -16,72 +16,74 @@
 	}
 
 	protected String[] getMappings() {
-		return new String[] { "hbmlint/CachingSettings.hbm.xml", "hbmlint/IdentifierIssues.hbm.xml", "hbmlint/BrokenLazy.hbm.xml" };
+		return new String[] { "hbmlint/CachingSettings.hbm.xml", "hbmlint/IdentifierIssues.hbm.xml",
+				"hbmlint/BrokenLazy.hbm.xml" };
 	}
-	
+
 	public void testExporter() {
-	
+
 		Configuration cfg = new Configuration();
-		addMappings( getMappings(), cfg );
+		addMappings(getMappings(), cfg);
 		cfg.buildMappings();
-	
+
 		new HbmLintExporter(cfg, getOutputDir()).start();
-		
+
 	}
+
 	public void testValidateCache() {
-		
+
 		Configuration cfg = new Configuration();
-		addMappings( getMappings(), cfg );
+		addMappings(getMappings(), cfg);
 		cfg.buildMappings();
-		
+
 		HbmLint analyzer = new HbmLint(new Detector[] { new BadCachingDetector() });
-		
+
 		analyzer.analyze(cfg);
-		
+
 		List result = analyzer.getResults();
-		
-		assertEquals(1,result.size());
+
+		assertEquals(1, result.size());
 
 		System.out.println(result);
-		
+
 	}
 
 	public void testValidateIdentifier() {
-		
+
 		Configuration cfg = new Configuration();
-		addMappings( getMappings(), cfg );
+		addMappings(getMappings(), cfg);
 		cfg.buildMappings();
-		
+
 		HbmLint analyzer = new HbmLint(new Detector[] { new ShadowedIdentifierDetector() });
-		
+
 		analyzer.analyze(cfg);
-		
+
 		List result = analyzer.getResults();
-		
-		assertEquals(1,result.size());
+
+		assertEquals(1, result.size());
 
 		System.out.println(result);
-		
+
 	}
-	
+
 	public void testBytecodeRestrictions() {
-		
+
 		Configuration cfg = new Configuration();
-		addMappings( getMappings(), cfg );
+		addMappings(getMappings(), cfg);
 		cfg.buildMappings();
-		
+
 		HbmLint analyzer = new HbmLint(new Detector[] { new InstrumentationDetector() });
-		
+
 		analyzer.analyze(cfg);
-		
+
 		List result = analyzer.getResults();
-		
-		assertEquals(2,result.size());
+
+		assertEquals(2, result.size());
 
 		System.out.println(result);
-		
+
 	}
-	
+
 	protected String[] getCreateSQL() {
 		return new String[0];// { "create table Category (id numeric(5), parent_id numeric(5))" };
 	}
@@ -89,6 +91,4 @@
 	protected String[] getDropSQL() {
 		return new String[0];// { "drop table Category" };
 	}
-	
-	
 }
Index: src/test/org/hibernate/tool/hbmlint/SchemaAnalyzerTest.java
===================================================================
--- src/test/org/hibernate/tool/hbmlint/SchemaAnalyzerTest.java	(revision 18689)
+++ src/test/org/hibernate/tool/hbmlint/SchemaAnalyzerTest.java	(working copy)
@@ -22,69 +22,66 @@
 
 	static class MockCollector implements IssueCollector {
 		List problems = new ArrayList();
-		
+
 		public void reportIssue(Issue analyze) {
-			
+
 			problems.add(analyze);
-		}		
+		}
 	}
-	
+
 	public void testSchemaAnalyzer() {
 		Configuration cfg = new Configuration();
-		addMappings( getMappings(), cfg );
+		addMappings(getMappings(), cfg);
 		cfg.buildMappings();
-	
+
 		SchemaByMetaDataDetector analyzer = new SchemaByMetaDataDetector();
-		analyzer.initialize( cfg, cfg.buildSettings() );
-		
+		analyzer.initialize(cfg, cfg.buildSettings());
+
 		Iterator tableMappings = cfg.getTableMappings();
-		
-		
-		while ( tableMappings.hasNext() ) {
+
+		while (tableMappings.hasNext()) {
 			Table table = (Table) tableMappings.next();
-		
+
 			MockCollector mc = new MockCollector();
-			
-			if(table.getName().equalsIgnoreCase( "missingtable" )) {
-				analyzer.visit( cfg, table, mc );				
-				assertEquals(mc.problems.size(),1);
-				Issue ap = (Issue) mc.problems.get( 0 );
-				assertTrue(ap.getDescription().indexOf( "Missing table" ) >=0);
-			} else if(table.getName().equalsIgnoreCase( "category" )) {
-				analyzer.visit( cfg, table, mc );
-				assertEquals(mc.problems.size(),1);
-				Issue ap = (Issue) mc.problems.get( 0 );
-				assertTrue(ap.getDescription().indexOf( "missing column: name" ) >=0);							
-			} else if(table.getName().equalsIgnoreCase( "badtype" )) {
-				analyzer.visit( cfg, table, mc );
-				assertEquals(mc.problems.size(),1);
-				Issue ap = (Issue) mc.problems.get( 0 );
-				assertTrue(ap.getDescription().indexOf( "wrong column type for name" ) >=0);
+
+			if (table.getName().equalsIgnoreCase("missingtable")) {
+				analyzer.visit(cfg, table, mc);
+				assertEquals(mc.problems.size(), 1);
+				Issue ap = (Issue) mc.problems.get(0);
+				assertTrue(ap.getDescription().indexOf("Missing table") >= 0);
+			} else if (table.getName().equalsIgnoreCase("category")) {
+				analyzer.visit(cfg, table, mc);
+				assertEquals(mc.problems.size(), 1);
+				Issue ap = (Issue) mc.problems.get(0);
+				assertTrue(ap.getDescription().indexOf("missing column: name") >= 0);
+			} else if (table.getName().equalsIgnoreCase("badtype")) {
+				analyzer.visit(cfg, table, mc);
+				assertEquals(mc.problems.size(), 1);
+				Issue ap = (Issue) mc.problems.get(0);
+				assertTrue(ap.getDescription().indexOf("wrong column type for name") >= 0);
 			} else {
 				fail("Unkown table " + table);
 			}
 		}
-		
+
 		MockCollector mc = new MockCollector();
-		analyzer.visitGenerators( cfg, mc );
-		assertEquals(1,mc.problems.size());
-		Issue issue = (Issue) mc.problems.get( 0 );
-		assertTrue(issue.getDescription().indexOf( "hibernate_unique_key" ) >=0);
-		
+		analyzer.visitGenerators(cfg, mc);
+		assertEquals(1, mc.problems.size());
+		Issue issue = (Issue) mc.problems.get(0);
+		assertTrue(issue.getDescription().indexOf("hibernate_unique_key") >= 0);
+
 	}
-	
-	
-		
-		public void testExporter() {
-			
-			Configuration cfg = new Configuration();
-			addMappings( getMappings(), cfg );
-			cfg.buildMappings();
-		
-			new HbmLintExporter(cfg, getOutputDir()).start();
-			
-		}
-		
+
+	public void testExporter() {
+
+		Configuration cfg = new Configuration();
+		addMappings(getMappings(), cfg);
+		cfg.buildMappings();
+
+		new HbmLintExporter(cfg, getOutputDir()).start();
+
+	}
+
 	protected String[] getCreateSQL() {
 		return new String[] { "create table Category (id int, parent_id numeric(5))",
 				"create table BadType (id int, name varchar(100))",
@@ -95,6 +92,4 @@
 	protected String[] getDropSQL() {
 		return new String[] { "drop table Category", "drop table BadType", "drop sequence should_be_there", "drop table hilo_table" };
 	}
-	
-	
 }
Index: src/test/org/hibernate/tool/test/jdbc2cfg/PerformanceTest.java
===================================================================
--- src/test/org/hibernate/tool/test/jdbc2cfg/PerformanceTest.java	(revision 18689)
+++ src/test/org/hibernate/tool/test/jdbc2cfg/PerformanceTest.java	(working copy)
@@ -14,6 +14,7 @@
 import org.hibernate.MappingException;
 import org.hibernate.dialect.Dialect;
 import org.hibernate.engine.Mapping;
+import org.hibernate.id.factory.IdentifierGeneratorFactory;
 import org.hibernate.mapping.Column;
 import org.hibernate.mapping.ForeignKey;
 import org.hibernate.mapping.PrimaryKey;
@@ -24,13 +25,13 @@
 
 /**
  * @author max
- *
+ * 
  */
 public class PerformanceTest extends JDBCMetaDataBinderTestCase {
 
 	static final int TABLECOUNT = 200;
 	static final int COLCOUNT = 10;
-	
+
 	List createSQL = new ArrayList();
 	List dropSQL = new ArrayList();
 
@@ -45,16 +46,15 @@
 	 * @return
 	 */
 	protected String[] getCreateSQL() {
-		
+
 		Dialect dia = cfg.buildSettings().getDialect();
-		
+
 		Mapping map = new Mapping() {
-		
-			public String getIdentifierPropertyName(String className)
-					throws MappingException {
+
+			public String getIdentifierPropertyName(String className) throws MappingException {
 				return null;
 			}
-		
+
 			public Type getIdentifierType(String className) throws MappingException {
 				return null;
 			}
@@ -62,74 +62,66 @@
 			public Type getReferencedPropertyType(String className, String propertyName) throws MappingException {
 				return null;
 			}
-		
+
+			public IdentifierGeneratorFactory getIdentifierGeneratorFactory() {
+				return null;
+			}
+
 		};
-		
-		
+
 		dropSQL = new ArrayList(TABLECOUNT);
 		createSQL = new ArrayList(TABLECOUNT);
 		Table lastTable = null;
-		for(int tablecount=0;tablecount<TABLECOUNT;tablecount++) {
+		for (int tablecount = 0; tablecount < TABLECOUNT; tablecount++) {
 			Table table = new Table("perftest" + tablecount);
 			Column col = new Column("id");
 			SimpleValue sv = new SimpleValue(table);
 			sv.setTypeName("string");
-			col.setValue(sv);			
+			col.setValue(sv);
 			table.addColumn(col);
 			PrimaryKey pk = new PrimaryKey();
 			pk.addColumn(col);
 			table.setPrimaryKey(pk);
-			
-			for(int colcount=0;colcount<COLCOUNT;colcount++) {
-				col = new Column("col"+tablecount+"_"+colcount);
+
+			for (int colcount = 0; colcount < COLCOUNT; colcount++) {
+				col = new Column("col" + tablecount + "_" + colcount);
 				sv = new SimpleValue(table);
 				sv.setTypeName("string");
-				col.setValue(sv);				
+				col.setValue(sv);
 				table.addColumn(col);
-			
+
 			}
-			
-			
-			createSQL.add(table.sqlCreateString(dia, map, null, null) );
-			dropSQL.add(table.sqlDropString(dia, null, null) );
-			
-			if(lastTable!=null) {
+
+			createSQL.add(table.sqlCreateString(dia, map, null, null));
+			dropSQL.add(table.sqlDropString(dia, null, null));
+
+			if (lastTable != null) {
 				ForeignKey fk = new ForeignKey();
-				fk.setName(col.getName() + lastTable.getName() + table.getName() );
+				fk.setName(col.getName() + lastTable.getName() + table.getName());
 				fk.addColumn(col);
 				fk.setTable(table);
 				fk.setReferencedTable(lastTable);
-				createSQL.add(fk.sqlCreateString( dia, map, null,null) );							
-				dropSQL.add(0,fk.sqlDropString( dia, null,null) );
+				createSQL.add(fk.sqlCreateString(dia, map, null, null));
+				dropSQL.add(0, fk.sqlDropString(dia, null, null));
 			}
-			
+
 			lastTable = table;
-			
-			
+
 		}
-		
-		
-		
+
 		return (String[]) createSQL.toArray(new String[createSQL.size()]);
 	}
 
-	
 	public void testBasic() throws SQLException {
-				
-		assertHasNext("There should be three tables!",TABLECOUNT, cfg.getTableMappings() );
-		
+
+		assertHasNext("There should be two tousands tables!", TABLECOUNT, cfg.getTableMappings());
+
 		Table tab = (Table) cfg.getTableMappings().next();
-		assertEquals(tab.getColumnSpan(), COLCOUNT+1);
-		
-		
+		assertEquals(tab.getColumnSpan(), COLCOUNT + 1);
 	}
 	
-    
- 
-	
-
 	public static Test suite() {
 		return new TestSuite(PerformanceTest.class);
 	}
-    
+
 }
Index: src/test/org/hibernate/tool/test/jdbc2cfg/PersistentClassesTest.java
===================================================================
--- src/test/org/hibernate/tool/test/jdbc2cfg/PersistentClassesTest.java	(revision 18689)
+++ src/test/org/hibernate/tool/test/jdbc2cfg/PersistentClassesTest.java	(working copy)
@@ -29,164 +29,156 @@
 import persistentclasses.Item;
 import persistentclasses.Orders;
 
-
 /**
  * @author max
- *
+ * 
  */
 public class PersistentClassesTest extends JDBCMetaDataBinderTestCase {
 
 	protected String[] getCreateSQL() {
-		
+
 		return new String[] {
-                "create table orders ( id numeric(10,0) not null, name varchar(20), primary key (id) )",
+				"create table orders ( id numeric(10,0) not null, name varchar(20), primary key (id) )",
 				"create table item  ( child_id numeric(10,0) not null, name varchar(50), order_id numeric(10,0), related_order_id numeric(10,0), primary key (child_id), foreign key (order_id) references orders(id), foreign key (related_order_id) references orders(id) )"
-				// todo - link where pk is fk to something
-				
+		// todo - link where pk is fk to something
+
 		};
 	}
 
-    protected void configure(JDBCMetaDataConfiguration cfgToConfigure) {        
-        DefaultReverseEngineeringStrategy c = new DefaultReverseEngineeringStrategy();
-        c.setSettings(new ReverseEngineeringSettings().setDefaultPackageName("persistentclasses"));
-        cfgToConfigure.setReverseEngineeringStrategy(c);
-    }
+	protected void configure(JDBCMetaDataConfiguration cfgToConfigure) {
+		DefaultReverseEngineeringStrategy c = new DefaultReverseEngineeringStrategy();
+		c.setSettings(new ReverseEngineeringSettings().setDefaultPackageName("persistentclasses"));
+		cfgToConfigure.setReverseEngineeringStrategy(c);
+	}
+
 	protected String[] getDropSQL() {
-		
-		return new String[]  {
-				"drop table item",
-				"drop table orders",				
-		};
+
+		return new String[] { "drop table item", "drop table orders", };
 	}
 
 	public void testCreatePersistentClasses() {
 		cfg.buildMappings();
-		PersistentClass classMapping = cfg.getClassMapping(toClassName("orders") );
-		
-		assertNotNull("class not found", classMapping);		
-		
+		PersistentClass classMapping = cfg.getClassMapping(toClassName("orders"));
+
+		assertNotNull("class not found", classMapping);
+
 		KeyValue identifier = classMapping.getIdentifier();
-		
+
 		assertNotNull(identifier);
-		
+
 	}
-	
+
 	public void testCreateManyToOne() {
 		cfg.buildMappings();
-		PersistentClass classMapping = cfg.getClassMapping(toClassName("item") );
-		
-		assertNotNull(classMapping);		
-		
+		PersistentClass classMapping = cfg.getClassMapping(toClassName("item"));
+
+		assertNotNull(classMapping);
+
 		KeyValue identifier = classMapping.getIdentifier();
-		
-		assertNotNull(identifier);	
-		
-		assertEquals(3,classMapping.getPropertyClosureSpan() );
-		
-		Property property = classMapping.getProperty("ordersByRelatedOrderId");		
+
+		assertNotNull(identifier);
+
+		assertEquals(3, classMapping.getPropertyClosureSpan());
+
+		Property property = classMapping.getProperty("ordersByRelatedOrderId");
 		assertNotNull(property);
-		
-		property = classMapping.getProperty("ordersByOrderId");		
+
+		property = classMapping.getProperty("ordersByOrderId");
 		assertNotNull(property);
-		
-		
-		
+
 	}
-	
+
 	public void testCreateOneToMany() {
 		cfg.buildMappings();
-        
-		PersistentClass orders = cfg.getClassMapping(toClassName("orders") );
-		
+
+		PersistentClass orders = cfg.getClassMapping(toClassName("orders"));
+
 		Property itemset = orders.getProperty("itemsForRelatedOrderId");
-		
+
 		Collection col = (Collection) itemset.getValue();
-         
+
 		OneToMany otm = (OneToMany) col.getElement();
-        assertEquals(otm.getReferencedEntityName(), toClassName("item") );
-        assertEquals(otm.getAssociatedClass().getClassName(), toClassName("item") );
-        assertEquals(otm.getTable().getName(), identifier("orders") );
-        
+		assertEquals(otm.getReferencedEntityName(), toClassName("item"));
+		assertEquals(otm.getAssociatedClass().getClassName(), toClassName("item"));
+		assertEquals(otm.getTable().getName(), identifier("orders"));
+
 		assertNotNull(itemset);
-		
+
 		assertTrue(itemset.getValue() instanceof Set);
-		
 	}
-	
+
 	public void testBinding() throws HibernateException, SQLException {
-		
+
 		SessionFactory sf = cfg.buildSessionFactory();
-		
-		
-		
+
 		Session session = sf.openSession();
-        Transaction t = session.beginTransaction();
-	
-        Orders order = new Orders();
-		order.setId(new Long(1) );
+		Transaction t = session.beginTransaction();
+
+		Orders order = new Orders();
+		order.setId(new Long(1));
 		order.setName("Mickey");
-		
+
 		session.save(order);
-		
+
 		Item item = addItem(order, 42, "item 42");
-        session.save(item);
-		session.save(addItem(order, 43, "x") );
-        session.save(addItem(order, 44, "y") );
-        session.save(addItem(order, 45, "z") );
-        session.save(addItem(order, 46, "w") );
-        
+		session.save(item);
+		session.save(addItem(order, 43, "x"));
+		session.save(addItem(order, 44, "y"));
+		session.save(addItem(order, 45, "z"));
+		session.save(addItem(order, 46, "w"));
+
 		t.commit();
 		session.close();
-		
-		new StatisticsBrowser().showStatistics( sf.getStatistics(), true );
+
+		StatisticsBrowser statisticsBrowser = new StatisticsBrowser();
+		statisticsBrowser.showStatistics(sf.getStatistics(), false);
 		session = sf.openSession();
 		t = session.beginTransaction();
-		
-		Item loadeditem = (Item) session.get(toClassName("item"),new Long(42) );
-		
-		assertEquals(item.getName(),loadeditem.getName() );
-        assertEquals(item.getChildId(),loadeditem.getChildId() );
-        assertEquals(item.getOrderId().getId(),loadeditem.getOrderId().getId() );
-		
-        assertTrue(loadeditem.getOrderId().getItemsForOrderId().contains(loadeditem) );
-        assertTrue(item.getOrderId().getItemsForOrderId().contains(item) );
-        
-        assertEquals(5,item.getOrderId().getItemsForOrderId().size() );
-        assertEquals(5,loadeditem.getOrderId().getItemsForOrderId().size() );
-		
+
+		Item loadeditem = (Item) session.get(toClassName("item"), new Long(42));
+
+		assertEquals(item.getName(), loadeditem.getName());
+		assertEquals(item.getChildId(), loadeditem.getChildId());
+		assertEquals(item.getOrderId().getId(), loadeditem.getOrderId().getId());
+
+		assertTrue(loadeditem.getOrderId().getItemsForOrderId().contains(loadeditem));
+		assertTrue(item.getOrderId().getItemsForOrderId().contains(item));
+
+		assertEquals(5, item.getOrderId().getItemsForOrderId().size());
+		assertEquals(5, loadeditem.getOrderId().getItemsForOrderId().size());
+
 		t.commit();
-        session.close();
-		
-        session = sf.openSession();
+		session.close();
+
+		session = sf.openSession();
 		t = session.beginTransaction();
-        
-		order = (Orders) session.load(Orders.class, new Long(1) );
-        assertFalse(Hibernate.isInitialized(order) );
-        assertFalse(Hibernate.isInitialized(order.getItemsForOrderId() ) );
-        
-        order = (Orders) session.createQuery("from persistentclasses.Orders").uniqueResult();
-        
-        assertFalse(Hibernate.isInitialized(order.getItemsForOrderId() ) );
+
+		order = (Orders) session.load(Orders.class, new Long(1));
+		assertFalse(Hibernate.isInitialized(order));
+		assertFalse(Hibernate.isInitialized(order.getItemsForOrderId()));
+
+		order = (Orders) session.createQuery("from persistentclasses.Orders").uniqueResult();
+
+		assertFalse(Hibernate.isInitialized(order.getItemsForOrderId()));
 		t.commit();
-        session.close();
-        sf.close();
+		session.close();
+		sf.close();
 	}
 
-    /**
-     * @param m
-     * @param itemid TODO
-     * @return
-     */
-    private Item addItem(Orders m, int itemid, String name) {
-        Item item = new Item();
-        item.setChildId(new Long(itemid) );
-        item.setOrderId(m);
-        item.setName(name);
-        m.getItemsForOrderId().add(item);
-        return item;
-    }
-	
-	
+	/**
+	 * @param m
+	 * @param itemid
+	 *            TODO
+	 * @return
+	 */
+	private Item addItem(Orders m, int itemid, String name) {
+		Item item = new Item();
+		item.setChildId(new Long(itemid));
+		item.setOrderId(m);
+		item.setName(name);
+		m.getItemsForOrderId().add(item);
+		return item;
+	}
 	
 	public static Test suite() {
 		return new TestSuite(PersistentClassesTest.class);
Index: src/test/org/hibernate/tool/test/jdbc2cfg/ForeignKeysTest.java
===================================================================
--- src/test/org/hibernate/tool/test/jdbc2cfg/ForeignKeysTest.java	(revision 18689)
+++ src/test/org/hibernate/tool/test/jdbc2cfg/ForeignKeysTest.java	(working copy)
@@ -17,80 +17,70 @@
 
 /**
  * @author max
- *
+ * 
  */
 public class ForeignKeysTest extends JDBCMetaDataBinderTestCase {
 
 	protected String[] getCreateSQL() {
-		
+
 		return new String[] {
 				"create table master ( id char not null, name varchar(20), primary key (id) )",
-				
+
 				"create table child  ( childid character not null, masterref character, primary key (childid), foreign key (masterref) references master(id) )",
-				
-				"create table connection  ( conid int, name varchar(50), masterref character, childref1 character, childref2 character, primary key(conid), " +
-				"constraint con2master foreign key (masterref) references master(id)," +
-				"constraint childref1 foreign key  (childref1) references child(childid), " +
-				"constraint childref2 foreign key  (childref2) references child(childid) " +
-				")",
-				// todo - link where pk is fk to something
-						
+
+				"create table connection  ( conid int, name varchar(50), masterref character, childref1 character, childref2 character, primary key(conid), "
+						+ "constraint con2master foreign key (masterref) references master(id),"
+						+ "constraint childref1 foreign key  (childref1) references child(childid), "
+						+ "constraint childref2 foreign key  (childref2) references child(childid) " + ")",
+		// todo - link where pk is fk to something
+
 		};
 	}
 
 	protected String[] getDropSQL() {
-		
-		return new String[]  {				
-				"drop table connection",				
-				"drop table child",
-				"drop table master",					
-		};
+
+		return new String[] { "drop table connection", "drop table child", "drop table master", };
 	}
-	
+
 	public void testMultiRefs() {
-		
-		Table table = getTable(identifier("connection") );
-		
-		ForeignKey foreignKey = getForeignKey(table, identifier("con2master") );		
+
+		Table table = getTable(identifier("connection"));
+
+		ForeignKey foreignKey = getForeignKey(table, identifier("con2master"));
 		assertNotNull(foreignKey);
-				
-		assertEquals(toClassName("master"), foreignKey.getReferencedEntityName() );
-        assertEquals(identifier("connection"), foreignKey.getTable().getName() );
-		
-		assertEquals(getTable(identifier("master") ), foreignKey.getReferencedTable() );
-		assertNotNull(getForeignKey(table, identifier("childref1") ) );
-		assertNotNull(getForeignKey(table, identifier("childref2") ) );
-		assertNull(getForeignKey(table, identifier("dummy") ) );
-		assertHasNext(3, table.getForeignKeyIterator() );
-		
+
+		assertEquals(toClassName("master"), foreignKey.getReferencedEntityName());
+		assertEquals(identifier("connection"), foreignKey.getTable().getName());
+
+		assertEquals(getTable(identifier("master")), foreignKey.getReferencedTable());
+		assertNotNull(getForeignKey(table, identifier("childref1")));
+		assertNotNull(getForeignKey(table, identifier("childref2")));
+		assertNull(getForeignKey(table, identifier("dummy")));
+		assertHasNext(3, table.getForeignKeyIterator());
+
 	}
+
 	public void testMasterChild() {
-		
-		Table master = getTable(identifier("master") );
-		Table child = getTable(identifier("child") );
-		
+
+		Table master = getTable(identifier("master"));
+		Table child = getTable(identifier("child"));
+
 		Iterator iterator = child.getForeignKeyIterator();
-		
+
 		ForeignKey fk = (ForeignKey) iterator.next();
-		
-		assertFalse("should only be one fk", iterator.hasNext() );
-		
-		assertEquals(1, fk.getColumnSpan() );
-		
-		assertSame(fk.getColumn(0), child.getColumn(new Column(identifier("masterref") ) ) );
-		
-		
+
+		assertFalse("should only be one fk", iterator.hasNext());
+
+		assertEquals(1, fk.getColumnSpan());
+
+		assertSame(fk.getColumn(0), child.getColumn(new Column(identifier("masterref"))));
+
 	}
 
-	
-	
-	
 	public void testExport() {
-		
 		new SchemaExport(cfg).create(true, false);
-		
 	}
-	
+
 	public static Test suite() {
 		return new TestSuite(ForeignKeysTest.class);
 	}
Index: src/test/org/hibernate/tool/test/jdbc2cfg/OracleCompositeIdOrderTest.java
===================================================================
--- src/test/org/hibernate/tool/test/jdbc2cfg/OracleCompositeIdOrderTest.java	(revision 18689)
+++ src/test/org/hibernate/tool/test/jdbc2cfg/OracleCompositeIdOrderTest.java	(working copy)
@@ -21,136 +21,100 @@
 
 /**
  * @author max
- *
+ * 
  */
 public class OracleCompositeIdOrderTest extends JDBCMetaDataBinderTestCase {
 
 	protected void configure(JDBCMetaDataConfiguration cfg) {
 		cfg.setPreferBasicCompositeIds(false);
-		super.configure( cfg );		
+		super.configure(cfg);
 	}
-	
-	
-    protected String[] getCreateSQL() {
-        
-        return new String[] {
-                "CREATE TABLE REQUEST" + 
-                "(" + 
-                "  REQUEST_KEY             NUMBER(11)            NOT NULL," + 
-                "  TIMEFRAME_KEY           NUMBER(11)" + 
-                ")", 
-                "CREATE UNIQUE INDEX PK_REQUEST ON REQUEST" + 
-                "(REQUEST_KEY)",
-                "ALTER TABLE REQUEST ADD (" + 
-                "  CONSTRAINT PK_REQUEST PRIMARY KEY (REQUEST_KEY))",
-                "CREATE TABLE SCHEDULE" + 
-                "(" + 
-                "  SCHEDULE_KEY           NUMBER(11)             NOT NULL," + 
-                "  TITLE                  VARCHAR2(255)     NOT NULL" + 
-                ")", 
-                "CREATE UNIQUE INDEX PK_SCHEDULE ON SCHEDULE" + 
-                "(SCHEDULE_KEY)",
-                "ALTER TABLE SCHEDULE ADD (" + 
-                "  CONSTRAINT PK_SCHEDULE PRIMARY KEY (SCHEDULE_KEY))", 
-                "CREATE TABLE COURSE" + 
-                "(" + 
-                "  SCHEDULE_KEY                 NUMBER(11)       NOT NULL," + 
-                "  REQUEST_KEY                  NUMBER(11)       NOT NULL," + 
-                "  TIMEFRAME_KEY                NUMBER(11)" + 
-                ")", 
-                "CREATE UNIQUE INDEX PK_COURSE ON COURSE" + 
-                "(SCHEDULE_KEY, REQUEST_KEY)",
-                "ALTER TABLE COURSE ADD (" + 
-                "  CONSTRAINT PK_COURSE PRIMARY KEY (SCHEDULE_KEY, REQUEST_KEY))", 
-                "ALTER TABLE COURSE ADD (" + 
-                "  CONSTRAINT FK_COURSE__REQUEST FOREIGN KEY (REQUEST_KEY) " + 
-                "    REFERENCES REQUEST (REQUEST_KEY)" + 
-                "    ON DELETE CASCADE)", 
-                "ALTER TABLE COURSE ADD (" + 
-                "  CONSTRAINT FK_COURSE__SCHEDULE FOREIGN KEY (SCHEDULE_KEY) " + 
-                "    REFERENCES SCHEDULE (SCHEDULE_KEY)" + 
-                "    ON DELETE CASCADE)", 
-                "CREATE TABLE COURSE_TOPIC" + 
-                "(" + 
-                "  SCHEDULE_KEY        NUMBER(11)                NOT NULL," + 
-                "  REQUEST_KEY         NUMBER(11)                NOT NULL," + 
-                "  TOPIC_KEY           NUMBER(11)" + 
-                ")",
-                "ALTER TABLE COURSE_TOPIC ADD (" + 
-                "  CONSTRAINT FK_COURSE_TOPIC__COURSE FOREIGN KEY (SCHEDULE_KEY, REQUEST_KEY) " + 
-                "    REFERENCES COURSE (SCHEDULE_KEY,REQUEST_KEY)" + 
-                "    ON DELETE CASCADE)",
-        
-                "ALTER TABLE COURSE_TOPIC ADD (" + 
-                "  CONSTRAINT PK_COURSE_TOPIC PRIMARY KEY (TOPIC_KEY))", 
-                
-        };
-    }
-    
-    protected String[] getGenDataSQL() {
-        return new String[] {
-                "insert into PRODUCT (productId, extraId, description, price, numberAvailable) values('PC', '0', 'My PC', 100.0, 23)",
-                "insert into PRODUCT (productId, extraId, description, price, numberAvailable) values('MS', '1', 'My Mouse', 101.0, 23)",
-                "insert into CUSTOMER (customerId, name, address) values('MAX', 'Max Rydahl Andersen', 'Neuchatel')",
-                "insert into CUSTOMERORDER (customerId, orderNumber, orderDate) values ('MAX', 1, '11-11-2005')", 
-                "insert into LINEITEM (customerIdref, orderNumber, productId, extraProdId, quantity) values ('MAX', 1, 'PC', '0', 10)",
-                "insert into LINEITEM (customerIdref, orderNumber, productId, extraProdId, quantity) values ('MAX', 1, 'MS', '1', 12)",
-        };
-    }
 
-     protected String[] getDropSQL() {
-        return new String[] {
-        		"drop TABLE SCHEDULE cascade constraints",                                                                                         
-        		 "drop TABLE REQUEST cascade constraints",                                                                                           
-        		 "drop TABLE COURSE cascade constraints",                                                                                      
-        		 "drop TABLE COURSE_TOPIC cascade constraints"
-        		 };
-    }
-     
-     public boolean appliesTo(Dialect dialect) {
- 		return dialect instanceof Oracle9Dialect;
- 	}
- 	
-     
-     public void testMultiColumnForeignKeys() {
-        Table table = getTable(identifier("Course") );
-        assertNotNull(table);
-        ForeignKey foreignKey = getForeignKey(table, identifier("FK_COURSE__SCHEDULE") );     
-        assertNotNull(foreignKey);
-                
-        assertEquals(toClassName(identifier("Schedule") ), foreignKey.getReferencedEntityName() );
-        assertEquals(identifier("Course"), foreignKey.getTable().getName() );
-        
-        assertEquals(1,foreignKey.getColumnSpan() );
-        assertEquals(foreignKey.getColumn(0).getName(), "SCHEDULE_KEY");
-        
-        Table tab = getTable(identifier("COURSE"));
-        assertEquals(tab.getPrimaryKey().getColumn(0).getName(), "SCHEDULE_KEY");
-        assertEquals(tab.getPrimaryKey().getColumn(1).getName(), "REQUEST_KEY");
-        
-        cfg.buildMappings();
-        
-        PersistentClass course = cfg.getClassMapping(toClassName(identifier("Course") ) );
-        
-        assertEquals(2,course.getIdentifier().getColumnSpan() );
-        Iterator columnIterator = course.getIdentifier().getColumnIterator();
-        assertEquals(((Column)(columnIterator.next())).getName(), "SCHEDULE_KEY");
-        assertEquals(((Column)(columnIterator.next())).getName(), "REQUEST_KEY");
-        
-        course = cfg.getClassMapping(toClassName(identifier("COURSE_TOPIC") ) );
-        
-        Property property = course.getProperty(toPropertyName(identifier("course")));
-        columnIterator = property.getValue().getColumnIterator();
-        assertEquals(((Column)(columnIterator.next())).getName(), "SCHEDULE_KEY");
-        assertEquals(((Column)(columnIterator.next())).getName(), "REQUEST_KEY");
-                
-        
-     }
-     
-     
-	 public static Test suite() {
-			return new TestSuite(OracleCompositeIdOrderTest.class);
-		}
-}
-     
+	protected String[] getCreateSQL() {
+
+		return new String[] {
+				"CREATE TABLE REQUEST" + "(" + "  REQUEST_KEY             NUMBER(11)            NOT NULL,"
+						+ "  TIMEFRAME_KEY           NUMBER(11)" + ")",
+				"CREATE UNIQUE INDEX PK_REQUEST ON REQUEST" + "(REQUEST_KEY)",
+				"ALTER TABLE REQUEST ADD (" + "  CONSTRAINT PK_REQUEST PRIMARY KEY (REQUEST_KEY))",
+				"CREATE TABLE SCHEDULE" + "(" + "  SCHEDULE_KEY           NUMBER(11)             NOT NULL,"
+						+ "  TITLE                  VARCHAR2(255)     NOT NULL" + ")",
+				"CREATE UNIQUE INDEX PK_SCHEDULE ON SCHEDULE" + "(SCHEDULE_KEY)",
+				"ALTER TABLE SCHEDULE ADD (" + "  CONSTRAINT PK_SCHEDULE PRIMARY KEY (SCHEDULE_KEY))",
+				"CREATE TABLE COURSE" + "(" + "  SCHEDULE_KEY                 NUMBER(11)       NOT NULL,"
+						+ "  REQUEST_KEY                  NUMBER(11)       NOT NULL,"
+						+ "  TIMEFRAME_KEY                NUMBER(11)" + ")",
+				"CREATE UNIQUE INDEX PK_COURSE ON COURSE" + "(SCHEDULE_KEY, REQUEST_KEY)",
+				"ALTER TABLE COURSE ADD (" + "  CONSTRAINT PK_COURSE PRIMARY KEY (SCHEDULE_KEY, REQUEST_KEY))",
+				"ALTER TABLE COURSE ADD (" + "  CONSTRAINT FK_COURSE__REQUEST FOREIGN KEY (REQUEST_KEY) "
+						+ "    REFERENCES REQUEST (REQUEST_KEY)" + "    ON DELETE CASCADE)",
+				"ALTER TABLE COURSE ADD (" + "  CONSTRAINT FK_COURSE__SCHEDULE FOREIGN KEY (SCHEDULE_KEY) "
+						+ "    REFERENCES SCHEDULE (SCHEDULE_KEY)" + "    ON DELETE CASCADE)",
+				"CREATE TABLE COURSE_TOPIC" + "(" + "  SCHEDULE_KEY        NUMBER(11)                NOT NULL,"
+						+ "  REQUEST_KEY         NUMBER(11)                NOT NULL,"
+						+ "  TOPIC_KEY           NUMBER(11)" + ")",
+				"ALTER TABLE COURSE_TOPIC ADD ("
+						+ "  CONSTRAINT FK_COURSE_TOPIC__COURSE FOREIGN KEY (SCHEDULE_KEY, REQUEST_KEY) "
+						+ "    REFERENCES COURSE (SCHEDULE_KEY,REQUEST_KEY)" + "    ON DELETE CASCADE)",
+
+				"ALTER TABLE COURSE_TOPIC ADD (" + "  CONSTRAINT PK_COURSE_TOPIC PRIMARY KEY (TOPIC_KEY))",
+
+		};
+	}
+
+	protected String[] getGenDataSQL() {
+		return new String[] {
+				"insert into PRODUCT (productId, extraId, description, price, numberAvailable) values('PC', '0', 'My PC', 100.0, 23)",
+				"insert into PRODUCT (productId, extraId, description, price, numberAvailable) values('MS', '1', 'My Mouse', 101.0, 23)",
+				"insert into CUSTOMER (customerId, name, address) values('MAX', 'Max Rydahl Andersen', 'Neuchatel')",
+				"insert into CUSTOMERORDER (customerId, orderNumber, orderDate) values ('MAX', 1, '11-11-2005')",
+				"insert into LINEITEM (customerIdref, orderNumber, productId, extraProdId, quantity) values ('MAX', 1, 'PC', '0', 10)",
+				"insert into LINEITEM (customerIdref, orderNumber, productId, extraProdId, quantity) values ('MAX', 1, 'MS', '1', 12)", };
+	}
+
+	protected String[] getDropSQL() {
+		return new String[] { "drop TABLE SCHEDULE cascade constraints", "drop TABLE REQUEST cascade constraints",
+				"drop TABLE COURSE cascade constraints", "drop TABLE COURSE_TOPIC cascade constraints" };
+	}
+
+	public boolean appliesTo(Dialect dialect) {
+		return dialect instanceof Oracle9Dialect;
+	}
+
+	public void testMultiColumnForeignKeys() {
+		Table table = getTable(identifier("Course"));
+		assertNotNull(table);
+		ForeignKey foreignKey = getForeignKey(table, identifier("FK_COURSE__SCHEDULE"));
+		assertNotNull(foreignKey);
+
+		assertEquals(toClassName(identifier("Schedule")), foreignKey.getReferencedEntityName());
+		assertEquals(identifier("Course"), foreignKey.getTable().getName());
+
+		assertEquals(1, foreignKey.getColumnSpan());
+		assertEquals(foreignKey.getColumn(0).getName(), "SCHEDULE_KEY");
+
+		Table tab = getTable(identifier("COURSE"));
+		assertEquals(tab.getPrimaryKey().getColumn(0).getName(), "SCHEDULE_KEY");
+		assertEquals(tab.getPrimaryKey().getColumn(1).getName(), "REQUEST_KEY");
+
+		cfg.buildMappings();
+
+		PersistentClass course = cfg.getClassMapping(toClassName(identifier("Course")));
+
+		assertEquals(2, course.getIdentifier().getColumnSpan());
+		Iterator columnIterator = course.getIdentifier().getColumnIterator();
+		assertEquals(((Column) (columnIterator.next())).getName(), "SCHEDULE_KEY");
+		assertEquals(((Column) (columnIterator.next())).getName(), "REQUEST_KEY");
+
+		course = cfg.getClassMapping(toClassName(identifier("COURSE_TOPIC")));
+
+		Property property = course.getProperty(toPropertyName(identifier("course")));
+		columnIterator = property.getValue().getColumnIterator();
+		assertEquals(((Column) (columnIterator.next())).getName(), "SCHEDULE_KEY");
+		assertEquals(((Column) (columnIterator.next())).getName(), "REQUEST_KEY");
+	}
 
+	public static Test suite() {
+		return new TestSuite(OracleCompositeIdOrderTest.class);
+	}
+}
Index: src/test/org/hibernate/tool/test/jdbc2cfg/Jdbc2CfgAllTests.java
===================================================================
--- src/test/org/hibernate/tool/test/jdbc2cfg/Jdbc2CfgAllTests.java	(revision 18701)
+++ src/test/org/hibernate/tool/test/jdbc2cfg/Jdbc2CfgAllTests.java	(working copy)
@@ -14,7 +14,7 @@
 		suite.addTest( NoPrimaryKeyTest.suite() );
 		suite.addTest( SearchEscapeStringTest.suite() );
 		suite.addTest( ManyToManyTest.suite() );
-		suite.addTest( OverrideBinderTest.suite() );
+		suite.addTest( BinderTest.suite() );
 		suite.addTest( VersioningTest.suite() );
 		suite.addTest( MetaDataTest.suite() );
 		suite.addTest( CompositeIdTest.suite() );
Index: src/test/org/hibernate/tool/test/jdbc2cfg/binder/BasicBinderTest.java
===================================================================
--- src/test/org/hibernate/tool/test/jdbc2cfg/binder/BasicBinderTest.java	(revision 0)
+++ src/test/org/hibernate/tool/test/jdbc2cfg/binder/BasicBinderTest.java	(revision 0)
@@ -0,0 +1,93 @@
+package org.hibernate.tool.test.jdbc2cfg.binder;
+
+import java.util.Iterator;
+
+import org.hibernate.cfg.reveng.TableFilter;
+import org.hibernate.cfg.reveng.TableIdentifier;
+import org.hibernate.mapping.ForeignKey;
+import org.hibernate.mapping.MetaAttribute;
+import org.hibernate.mapping.PersistentClass;
+import org.hibernate.mapping.Property;
+import org.hibernate.mapping.Table;
+import org.hibernate.tool.test.jdbc2cfg.BinderTest;
+
+public class BasicBinderTest extends BinderTest {
+
+	public void testRevEngExclude() {
+		assertNull(findTable(identifier("defunct_table") ) );
+		Table foundTable = findTable(identifier("inthemiddle") );
+		assertNotNull(foundTable);
+		Iterator fkiter = foundTable.getForeignKeyIterator();
+		ForeignKey fk1 = (ForeignKey) fkiter.next();
+		assertFalse(fkiter.hasNext() );
+	}
+	
+	public void testMetaAttributeMappings() {
+		PersistentClass classMapping = cfg.getClassMapping( "Orders" );
+		MetaAttribute classMeta = classMapping.getMetaAttribute( "order-meta" );
+		assertNotNull(classMeta);
+		assertEquals("order table value", classMeta.getValue());
+		
+		Property property = classMapping.getProperty("orderName");
+		MetaAttribute propertyMeta = property.getMetaAttribute( "order-meta" );
+		assertNotNull(propertyMeta);
+		assertEquals("order column value", propertyMeta.getValue());
+		//TODO: test sequence of meta
+	}
+	
+	public void testTableExclude() {
+		TableFilter tf = new TableFilter();
+		tf.setMatchName("max");
+		tf.setExclude(Boolean.TRUE);
+		assertTrue(tf.exclude(new TableIdentifier("max") ).booleanValue() );
+		assertNull(tf.exclude(new TableIdentifier("maxnotexact") ) );
+		tf.setMatchName(".*max");
+		assertTrue(tf.exclude(new TableIdentifier("max") ).booleanValue() );
+		assertNull(tf.exclude(new TableIdentifier("maxnotending") ) );
+		assertTrue(tf.exclude(new TableIdentifier("endingWithmax") ).booleanValue() );
+		tf.setMatchName("max.*");
+		assertTrue(tf.exclude(new TableIdentifier("max") ).booleanValue() );
+		tf.setMatchName(".*max.*");
+		assertTrue(tf.exclude(new TableIdentifier("max") ).booleanValue() );
+		assertNull(tf.exclude(new TableIdentifier("notxam") ) );
+		assertTrue(tf.exclude(new TableIdentifier("heremaxsub") ).booleanValue() );
+	}
+	
+	public void testSimpleUserDefinedForeignKeys() {
+		Table table = findTable(identifier("Orders") );
+		
+		Iterator foreignKeyIterator = table.getForeignKeyIterator();
+		assertTrue(foreignKeyIterator.hasNext());
+		ForeignKey fk = (ForeignKey) foreignKeyIterator.next();
+		assertEquals(fk.getReferencedTable().getName(), identifier("Customer") );
+		
+		PersistentClass classMapping = cfg.getClassMapping("Orders");
+		classMapping.getProperty("customer");
+		
+		classMapping = cfg.getClassMapping("Customer");
+		classMapping.getProperty("orderses");
+	}
+	
+	public void testCompositeUserDefinedForeignKeys() {
+		Table table = findTable(identifier("Children") );
+		
+		Iterator foreignKeyIterator = table.getForeignKeyIterator();
+		assertTrue(foreignKeyIterator.hasNext());
+		ForeignKey fk = (ForeignKey) foreignKeyIterator.next();
+		assertEquals(fk.getReferencedTable().getName(), identifier("Parent") );
+		assertEquals(2, fk.getReferencedColumns().size());
+		assertEquals("child_to_parent", fk.getName());
+		
+		PersistentClass classMapping = cfg.getClassMapping("Children");
+		Property property = classMapping.getProperty("propertyParent");
+		assertEquals(2,property.getColumnSpan());
+		
+		classMapping = cfg.getClassMapping("Parent");
+		property = classMapping.getProperty("propertyChildren");	
+	}
+	
+	public String revengFilePath() {
+		return OverrideBinderTest.OVERRIDETEST_REVENG_XML;
+	}
+
+}
Index: src/test/org/hibernate/tool/test/jdbc2cfg/binder/DocBinderTest.java
===================================================================
--- src/test/org/hibernate/tool/test/jdbc2cfg/binder/DocBinderTest.java	(revision 0)
+++ src/test/org/hibernate/tool/test/jdbc2cfg/binder/DocBinderTest.java	(revision 0)
@@ -0,0 +1,29 @@
+package org.hibernate.tool.test.jdbc2cfg.binder;
+
+import java.sql.Types;
+
+import org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy;
+import org.hibernate.cfg.reveng.OverrideRepository;
+import org.hibernate.cfg.reveng.ReverseEngineeringStrategy;
+import org.hibernate.cfg.reveng.SQLTypeMapping;
+import org.hibernate.tool.test.jdbc2cfg.BinderTest;
+
+public class DocBinderTest extends BinderTest {
+
+	private static final String DOC_REVENG_XML = "org/hibernate/tool/test/jdbc2cfg/docexample.reveng.xml";
+	
+	public void testDocExample() {
+		ReverseEngineeringStrategy repository = getRepository().getReverseEngineeringStrategy(new DefaultReverseEngineeringStrategy());
+
+		assertEquals("int", repository.columnToHibernateTypeName(null, "ID", Types.INTEGER, SQLTypeMapping.UNKNOWN_LENGTH, 10, SQLTypeMapping.UNKNOWN_SCALE, false, false) );
+		assertEquals("your.package.TrimStringUserType", repository.columnToHibernateTypeName(null, "NAME", Types.VARCHAR, 30, SQLTypeMapping.UNKNOWN_PRECISION, SQLTypeMapping.UNKNOWN_SCALE, true, false) );
+		assertEquals("char", repository.columnToHibernateTypeName(null, "INITIAL", Types.VARCHAR, 1, SQLTypeMapping.UNKNOWN_PRECISION, SQLTypeMapping.UNKNOWN_SCALE, true, false) );
+		assertEquals("java.lang.Character", repository.columnToHibernateTypeName(null, "CODE", Types.VARCHAR, 1, SQLTypeMapping.UNKNOWN_PRECISION, SQLTypeMapping.UNKNOWN_SCALE, false, false) );
+		assertEquals("big_decimal", repository.columnToHibernateTypeName(null, "SALARY", Types.NUMERIC, SQLTypeMapping.UNKNOWN_LENGTH, 15, SQLTypeMapping.UNKNOWN_SCALE, true, false) );
+		assertEquals("java.lang.Long", repository.columnToHibernateTypeName(null, "AGE", Types.NUMERIC, SQLTypeMapping.UNKNOWN_LENGTH, 3, SQLTypeMapping.UNKNOWN_SCALE, true, false) );
+	}
+
+	public String revengFilePath() {
+		return DOC_REVENG_XML;
+	}
+}
Index: src/test/org/hibernate/tool/test/jdbc2cfg/binder/OverrideBinderTest.java
===================================================================
--- src/test/org/hibernate/tool/test/jdbc2cfg/binder/OverrideBinderTest.java	(revision 0)
+++ src/test/org/hibernate/tool/test/jdbc2cfg/binder/OverrideBinderTest.java	(revision 0)
@@ -0,0 +1,213 @@
+package org.hibernate.tool.test.jdbc2cfg.binder;
+
+import java.util.List;
+import java.util.Map;
+
+import org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy;
+import org.hibernate.cfg.reveng.OverrideRepository;
+import org.hibernate.cfg.reveng.ReverseEngineeringStrategy;
+import org.hibernate.cfg.reveng.TableIdentifier;
+import org.hibernate.mapping.Column;
+import org.hibernate.mapping.Component;
+import org.hibernate.mapping.MetaAttribute;
+import org.hibernate.mapping.PersistentClass;
+import org.hibernate.mapping.Property;
+import org.hibernate.mapping.SimpleValue;
+import org.hibernate.mapping.Table;
+
+public class OverrideBinderTest extends org.hibernate.tool.test.jdbc2cfg.BinderTest {
+
+	static final String OVERRIDETEST_REVENG_XML = "org/hibernate/tool/test/jdbc2cfg/overridetest.reveng.xml";
+
+	public void testColumnTypeMappings() {
+		ReverseEngineeringStrategy repository = getRepository().getReverseEngineeringStrategy(null);
+
+		assertNull(repository.columnToHibernateTypeName(new TableIdentifier("blah"), "bogus", 0, 0, 0, 0, false, false));
+		assertNull(repository.columnToHibernateTypeName(new TableIdentifier("ORDERS"), "CUSTID", 0, 0, 0, 0, false,
+				false));
+		assertEquals("string", repository.columnToHibernateTypeName(new TableIdentifier(null, null, "ORDERS"), "NAME",
+				0, 0, 0, 0, false, false));
+
+		PersistentClass classMapping = cfg.getClassMapping("Orders");
+
+		Property property = classMapping.getProperty("completed");
+		assertEquals("boolean because of not null", "boolean", ((SimpleValue) property.getValue()).getTypeName());
+
+		property = classMapping.getProperty("verified");
+		assertEquals("java.lang.Boolean because of null", "java.lang.Boolean", ((SimpleValue) property.getValue())
+				.getTypeName());
+
+		classMapping = cfg.getClassMapping("MiscTypes");
+
+		property = classMapping.getIdentifierProperty();
+
+		assertFalse(((SimpleValue) property.getValue()).isNullable());
+		assertEquals("java.lang.Long because of primary key", "java.lang.Long", ((SimpleValue) property.getValue())
+				.getTypeName());
+	}
+
+	public void testColumnPropertyNameMappings() {
+		ReverseEngineeringStrategy repository = getRepository().getReverseEngineeringStrategy(null);
+
+		assertNull(repository.columnToPropertyName(new TableIdentifier("blah"), "bogus"));
+		assertNull(repository.columnToPropertyName(new TableIdentifier("ORDERS"), "cust_id"));
+		assertEquals("orderName", repository.columnToPropertyName(new TableIdentifier(null, null, "ORDERS"), "NAME"));
+	}
+
+	public void testIdGenerator() {
+		ReverseEngineeringStrategy repository = getRepository().getReverseEngineeringStrategy(null);
+
+		TableIdentifier miscTable = new TableIdentifier(null, null, "MISC_TYPES");
+		assertEquals("sequence", repository.getTableIdentifierStrategyName(miscTable));
+		Map props = repository.getTableIdentifierProperties(miscTable);
+		assertEquals("seq_table", props.get("table"));
+
+		assertNull(repository.getTableIdentifierStrategyName(new TableIdentifier("blah")));
+		assertNull(repository.getTableIdentifierProperties(new TableIdentifier("blah")));
+		TableIdentifier ordersTable = new TableIdentifier(null, null, "ORDERS");
+
+		assertEquals("customOrderId", repository.tableToIdentifierPropertyName(ordersTable));
+		assertEquals(null, repository.tableToIdentifierPropertyName(new TableIdentifier("blah")));
+
+		assertEquals("CustomOID", repository.tableToCompositeIdName(ordersTable));
+		assertEquals(null, repository.tableToCompositeIdName(new TableIdentifier("blah")));
+
+		List primaryKeyColumnNames = repository.getPrimaryKeyColumnNames(new TableIdentifier("blah"));
+		assertNull(primaryKeyColumnNames);
+
+		primaryKeyColumnNames = repository.getPrimaryKeyColumnNames(ordersTable);
+		assertNotNull(primaryKeyColumnNames);
+		assertEquals(2, primaryKeyColumnNames.size());
+		assertEquals("ORDERID", primaryKeyColumnNames.get(0));
+		assertEquals("CUSTID", primaryKeyColumnNames.get(1));
+		assertFalse(repository.excludeColumn(ordersTable, "CUSTID"));
+
+		// applied
+		PersistentClass classMapping = cfg.getClassMapping("Orders");
+		SimpleValue sv = (SimpleValue) classMapping.getIdentifier();
+		assertEquals("CustomOID", ((Component) sv).getComponentClassName());
+
+		assertEquals(2, classMapping.getIdentifierProperty().getColumnSpan());
+
+		Property identifierProperty = classMapping.getIdentifierProperty();
+		assertEquals("customOrderId", identifierProperty.getName());
+
+		classMapping = cfg.getClassMapping("MiscTypes");
+		sv = (SimpleValue) classMapping.getIdentifier();
+		assertEquals("sequence", sv.getIdentifierGeneratorStrategy()); // will fail if default
+																		// schema is not set since
+																		// then there is no match in
+																		// the override binder
+
+		assertNotNull(sv.getIdentifierGeneratorProperties());
+		assertEquals("seq_table", sv.getIdentifierGeneratorProperties().getProperty("table"));
+	}
+
+	public void testReadExcludeTables() {
+		ReverseEngineeringStrategy repository = getRepository().getReverseEngineeringStrategy(null);
+
+		assertTrue(repository.excludeTable(new TableIdentifier(null, null, "DoNotWantIt")));
+		assertFalse(repository.excludeTable(new TableIdentifier(null, null, "NotListedThere")));
+		assertFalse(repository.excludeTable(new TableIdentifier("cat", "sch", "WantedTable")));
+		assertFalse(repository.excludeTable(new TableIdentifier("BAD", "SCHEMA", "WantedTable")));
+		assertTrue(repository.excludeTable(new TableIdentifier("BAD", "SCHEMA", "SomethingElse")));
+	}
+
+	public void testReadPackageName() {
+		ReverseEngineeringStrategy repository = getRepository()
+				.getReverseEngineeringStrategy(new DefaultReverseEngineeringStrategy());
+
+		assertEquals("org.werd.Q", repository.tableToClassName(new TableIdentifier("q", "Werd", "Q")));
+		assertEquals("Notknown", repository.tableToClassName(new TableIdentifier(null, null, "notknown")));
+
+		assertEquals("org.werd.MyWorld", repository.tableToClassName(new TableIdentifier(null, "Werd", "TBL_PKG")));
+		assertEquals("other.MyWorld", repository.tableToClassName(new TableIdentifier(null, "Werd", "TBL_OTHER")));
+	}
+
+	public void testColumnExclude() {
+		ReverseEngineeringStrategy reverseEngineeringStrategy = getRepository().getReverseEngineeringStrategy();
+
+		assertFalse(reverseEngineeringStrategy.excludeColumn(new TableIdentifier("EXCOLUMNS"), "blah"));
+		assertFalse(reverseEngineeringStrategy.excludeColumn(new TableIdentifier("EXCOLUMNS"), "NAME"));
+		assertTrue(reverseEngineeringStrategy.excludeColumn(new TableIdentifier("EXCOLUMNS"), "EXCOLUMN"));
+
+		Table table = findTable(identifier("excolumns"));
+		assertNotNull(table);
+
+		assertNotNull(table.getColumn(new Column("name")));
+		assertNull(table.getColumn(new Column("excolumn")));
+	}
+
+	public void testTableToClass() {
+		ReverseEngineeringStrategy res = getRepository()
+				.getReverseEngineeringStrategy(new DefaultReverseEngineeringStrategy());
+
+		TableIdentifier tableIdentifier = new TableIdentifier(null, null, "TblTest");
+		assertEquals("org.test.Test", res.tableToClassName(tableIdentifier));
+
+		tableIdentifier = new TableIdentifier(getSettings().getDefaultCatalogName(), "Werd", "Testy");
+		assertEquals("org.werd.Testy", res.tableToClassName(tableIdentifier));
+
+		tableIdentifier = new TableIdentifier(null, null, "Nothing");
+		assertEquals("Nothing", res.tableToClassName(tableIdentifier));
+	}
+
+	public void testMetaAttributes() {
+		ReverseEngineeringStrategy res = getRepository()
+				.getReverseEngineeringStrategy(new DefaultReverseEngineeringStrategy());
+
+		TableIdentifier tableIdentifier = new TableIdentifier(null, null, "TblTest");
+		Map attributes = res.tableToMetaAttributes(tableIdentifier);
+		assertNotNull(attributes);
+		assertEquals(attributes.size(), 1);
+		MetaAttribute ma = (MetaAttribute) attributes.get("use-in-test");
+		assertEquals(ma.getName(), "use-in-test");
+		assertEquals(ma.getValue(), "true");
+
+		tableIdentifier = new TableIdentifier(getSettings().getDefaultCatalogName(), "Werd", "Testy");
+		attributes = res.tableToMetaAttributes(tableIdentifier);
+		assertNotNull(attributes);
+		ma = (MetaAttribute) attributes.get("werd-meta");
+		assertEquals(ma.getName(), "werd-meta");
+		assertEquals(ma.getValues().size(), 2);
+
+		tableIdentifier = new TableIdentifier(null, "Werd", "MetaTable");
+		attributes = res.tableToMetaAttributes(tableIdentifier);
+		assertNotNull(attributes);
+		assertEquals(2, attributes.size());
+		ma = (MetaAttribute) attributes.get("specific-werd");
+		assertEquals(ma.getName(), "specific-werd");
+		assertEquals(ma.getValue(), "a one");
+
+		ma = (MetaAttribute) attributes.get("werd-meta");
+		assertEquals(ma.getName(), "werd-meta");
+		assertEquals(1, ma.getValues().size()); // as long as no inherit this should be one
+		assertEquals("value three", ma.getValue());
+
+		tableIdentifier = new TableIdentifier(null, null, "Nothing");
+		assertEquals(null, res.tableToMetaAttributes(tableIdentifier));
+
+		assertNull(res.columnToMetaAttributes(new TableIdentifier("Nothing"), "bogus"));
+		assertNull(res.columnToMetaAttributes(new TableIdentifier(null, "Werd", "MetaTable"), "bogusColumn"));
+		attributes = res.columnToMetaAttributes(new TableIdentifier(null, "Werd", "MetaTable"), "MetaColumn");
+		assertEquals(1, attributes.size());
+		ma = (MetaAttribute) attributes.get("specific-column");
+		assertEquals("specific-column", ma.getName());
+		assertEquals("yes a column with meta", ma.getValue());
+	}
+	
+	public void testTypes() {
+		PersistentClass classMapping = cfg.getClassMapping("MiscTypes");
+		assertEquals("SomeUserType", getPropertyTypeName(classMapping.getProperty("name") ) );
+		assertEquals("string", getPropertyTypeName(classMapping.getProperty("shortname") ) );
+		assertEquals("yes_no", getPropertyTypeName(classMapping.getProperty("flag") ) );
+	}
+
+	private String getPropertyTypeName(Property property) {
+		return ( (SimpleValue)property.getValue() ).getTypeName();
+	}
+
+	public String revengFilePath() {
+		return OVERRIDETEST_REVENG_XML;
+	}
+}
Index: src/test/org/hibernate/tool/test/jdbc2cfg/binder/SchemaOverrideBinderTest.java
===================================================================
--- src/test/org/hibernate/tool/test/jdbc2cfg/binder/SchemaOverrideBinderTest.java	(revision 0)
+++ src/test/org/hibernate/tool/test/jdbc2cfg/binder/SchemaOverrideBinderTest.java	(revision 0)
@@ -0,0 +1,48 @@
+package org.hibernate.tool.test.jdbc2cfg.binder;
+
+import java.util.List;
+
+import org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy;
+import org.hibernate.cfg.reveng.OverrideRepository;
+import org.hibernate.cfg.reveng.ReverseEngineeringStrategy;
+import org.hibernate.cfg.reveng.SchemaSelection;
+import org.hibernate.tool.test.jdbc2cfg.BinderTest;
+
+public class SchemaOverrideBinderTest extends BinderTest {
+
+	private static final String SCHEMA_REVENG_XML = "org/hibernate/tool/test/jdbc2cfg/schemaselection.reveng.xml";
+	
+	public void testSchemaSelection() {
+		ReverseEngineeringStrategy repository = getRepository().getReverseEngineeringStrategy(new DefaultReverseEngineeringStrategy());
+
+		List schemaSelectors = repository.getSchemaSelections();
+		
+		assertNotNull(schemaSelectors);
+		assertEquals(4,schemaSelectors.size());
+		
+		SchemaSelection ss;
+		ss = (SchemaSelection) schemaSelectors.get(0);
+		assertEquals(null,ss.getMatchCatalog());
+		assertEquals(null,ss.getMatchSchema());
+		assertEquals(null,ss.getMatchTable());
+		
+		ss = (SchemaSelection) schemaSelectors.get(1);
+		assertEquals(null,ss.getMatchCatalog());
+		assertEquals("OVRTEST",ss.getMatchSchema());
+		assertEquals(null,ss.getMatchTable());
+		
+		ss = (SchemaSelection) schemaSelectors.get(2);
+		assertEquals("UBERCATALOG",ss.getMatchCatalog());
+		assertEquals("OVRTEST",ss.getMatchSchema());
+		assertEquals(null,ss.getMatchTable());
+		
+		ss = (SchemaSelection) schemaSelectors.get(3);
+		assertEquals("PUBLIC.*",ss.getMatchCatalog());
+		assertEquals("OVRTEST",ss.getMatchSchema());
+		assertEquals(".*",ss.getMatchTable());
+	}
+	
+	public String revengFilePath() {
+		return SCHEMA_REVENG_XML;
+	}
+}
Index: src/test/org/hibernate/tool/test/jdbc2cfg/binder/TypeMappingBinderTest.java
===================================================================
--- src/test/org/hibernate/tool/test/jdbc2cfg/binder/TypeMappingBinderTest.java	(revision 0)
+++ src/test/org/hibernate/tool/test/jdbc2cfg/binder/TypeMappingBinderTest.java	(revision 0)
@@ -0,0 +1,90 @@
+package org.hibernate.tool.test.jdbc2cfg.binder;
+
+import java.sql.Types;
+
+import org.hibernate.cfg.reveng.OverrideRepository;
+import org.hibernate.cfg.reveng.ReverseEngineeringStrategy;
+import org.hibernate.cfg.reveng.SQLTypeMapping;
+import org.hibernate.mapping.PersistentClass;
+import org.hibernate.mapping.Property;
+import org.hibernate.mapping.SimpleValue;
+import org.hibernate.tool.test.jdbc2cfg.BinderTest;
+
+public class TypeMappingBinderTest extends BinderTest {
+
+	private static final String TEST_REVENG_XML = "org/hibernate/tool/test/jdbc2cfg/test.reveng.xml";
+
+	public void testReadTypeMappings() {
+		ReverseEngineeringStrategy repository = getRepository().getReverseEngineeringStrategy(null);
+
+		assertEquals("int", repository.columnToHibernateTypeName(null, null, Types.INTEGER, 5, SQLTypeMapping.UNKNOWN_PRECISION, SQLTypeMapping.UNKNOWN_SCALE, false, false) );
+		assertEquals("long", repository.columnToHibernateTypeName(null, null, Types.INTEGER, SQLTypeMapping.UNKNOWN_LENGTH, SQLTypeMapping.UNKNOWN_PRECISION, SQLTypeMapping.UNKNOWN_SCALE, false, false) );
+		assertEquals("byte[]", repository.columnToHibernateTypeName(null, null, Types.BIGINT, SQLTypeMapping.UNKNOWN_LENGTH, 5, SQLTypeMapping.UNKNOWN_SCALE, false, false) );
+		assertEquals("java.math.BigInteger", repository.columnToHibernateTypeName(null, null, Types.BIGINT, SQLTypeMapping.UNKNOWN_LENGTH, 2, 3, false, false) );
+		assertEquals("string", repository.columnToHibernateTypeName(null, null, Types.CHAR, 1, 10, SQLTypeMapping.UNKNOWN_SCALE, false, false) );
+		//assertEquals("string", repository.jdbcToHibernateType(Types.CHAR, 1, SQLTypeMapping.UNKNOWN_PRECISION, SQLTypeMapping.UNKNOWN_SCALE) );
+		
+		assertEquals("Long", repository.columnToHibernateTypeName(null, null, Types.NUMERIC, 1, 10, 0, false, false) );
+		assertEquals("java.lang.Long", repository.columnToHibernateTypeName(null, null, Types.NUMERIC, 1, 10, SQLTypeMapping.UNKNOWN_SCALE, false, false) );
+		assertEquals("java.lang.Long", repository.columnToHibernateTypeName(null, null, Types.NUMERIC, 1, 10, 43, false, false) );
+		
+		// nullability
+		assertEquals("nonnull-float", repository.columnToHibernateTypeName(null, null, Types.FLOAT, SQLTypeMapping.UNKNOWN_LENGTH, SQLTypeMapping.UNKNOWN_PRECISION,17,false, false) );
+		assertEquals("null-float", repository.columnToHibernateTypeName(null, null, Types.FLOAT, SQLTypeMapping.UNKNOWN_LENGTH, SQLTypeMapping.UNKNOWN_PRECISION,17,true, false) );
+		
+		assertEquals("onlynotnull", repository.columnToHibernateTypeName(null, null, Types.FLOAT, SQLTypeMapping.UNKNOWN_LENGTH, SQLTypeMapping.UNKNOWN_PRECISION,SQLTypeMapping.UNKNOWN_SCALE,false, false) );
+		assertEquals("donotcare", repository.columnToHibernateTypeName(null, null, Types.FLOAT, SQLTypeMapping.UNKNOWN_LENGTH, SQLTypeMapping.UNKNOWN_PRECISION,SQLTypeMapping.UNKNOWN_SCALE,true, false) );
+	}
+
+	public void testSQLTypeMappingComparisons() {
+		SQLTypeMapping one = new SQLTypeMapping(Types.BIGINT, 5, SQLTypeMapping.UNKNOWN_PRECISION, SQLTypeMapping.UNKNOWN_SCALE,SQLTypeMapping.UNKNOWN_NULLABLE);
+		SQLTypeMapping two = new SQLTypeMapping(Types.BIGINT, SQLTypeMapping.UNKNOWN_LENGTH, 3, SQLTypeMapping.UNKNOWN_SCALE, SQLTypeMapping.UNKNOWN_NULLABLE);
+		SQLTypeMapping generic = new SQLTypeMapping(Types.BIGINT, SQLTypeMapping.UNKNOWN_LENGTH, SQLTypeMapping.UNKNOWN_PRECISION, SQLTypeMapping.UNKNOWN_SCALE, SQLTypeMapping.UNKNOWN_NULLABLE);
+		SQLTypeMapping specific = new SQLTypeMapping(Types.BIGINT, 2, 3, 4, SQLTypeMapping.UNKNOWN_NULLABLE);
+		SQLTypeMapping morespecific = new SQLTypeMapping(Types.BIGINT, 2, 3, 4, Boolean.TRUE);
+		SQLTypeMapping equalmorespecific = new SQLTypeMapping(Types.BIGINT, 2, 3, 4, Boolean.TRUE);
+		
+		assertFalse(one.equals(two) );
+		assertFalse(two.equals(one) );
+		assertTrue(two.equals(two) );
+		assertTrue(one.equals(one) );
+		assertTrue(morespecific.equals(equalmorespecific));
+		
+		assertEquals(-1, one.compareTo(two) );
+		assertEquals(1, two.compareTo(one) );
+		
+		assertEquals(1, generic.compareTo(one) );
+		assertEquals(1, generic.compareTo(two) );
+		assertEquals(1, generic.compareTo(specific) );
+		
+		assertEquals(-1, specific.compareTo(one) );
+		assertEquals(-1, specific.compareTo(two) );
+		assertEquals(-1, specific.compareTo(generic) );
+		assertEquals(1, specific.compareTo(morespecific) );
+		assertEquals(-1, morespecific.compareTo(specific) );
+	}
+
+	public void testSqlTypeOverride() {
+		OverrideRepository or = buildOverrideRepository(); 
+		
+		SQLTypeMapping sqltype = new SQLTypeMapping(Types.BINARY);
+		
+		sqltype.setLength(1);
+		sqltype.setHibernateType("boolean");
+		or.addTypeMapping(sqltype);
+		
+		sqltype = new SQLTypeMapping(Types.BIT);
+		
+		sqltype.setHibernateType("yes_no");
+		or.addTypeMapping(sqltype);
+		
+		ReverseEngineeringStrategy res = or.getReverseEngineeringStrategy(null);
+		assertEquals("boolean",res.columnToHibernateTypeName(null,null, Types.BINARY, 1, SQLTypeMapping.UNKNOWN_PRECISION, SQLTypeMapping.UNKNOWN_SCALE, false, false) );
+		assertEquals(null,res.columnToHibernateTypeName(null,null, Types.LONGVARCHAR, 1, SQLTypeMapping.UNKNOWN_PRECISION, SQLTypeMapping.UNKNOWN_SCALE, false, false) );
+		assertEquals("yes_no",res.columnToHibernateTypeName(null,null, Types.BIT, SQLTypeMapping.UNKNOWN_LENGTH, SQLTypeMapping.UNKNOWN_PRECISION, SQLTypeMapping.UNKNOWN_SCALE, false, false) );
+	}
+
+	public String revengFilePath() {
+		return TEST_REVENG_XML;
+	}
+}
Index: src/test/org/hibernate/tool/test/jdbc2cfg/RevEngForeignKeyTests.java
===================================================================
--- src/test/org/hibernate/tool/test/jdbc2cfg/RevEngForeignKeyTests.java	(revision 18689)
+++ src/test/org/hibernate/tool/test/jdbc2cfg/RevEngForeignKeyTests.java	(working copy)
@@ -22,13 +22,13 @@
 
 /**
  * @author max
- *
+ * 
  */
 public class RevEngForeignKeyTests extends JDBCMetaDataBinderTestCase {
-	
+
 	private static final String OVERRIDETEST_FOREIGNKEY_XML = "org/hibernate/tool/test/jdbc2cfg/foreignkeytest.reveng.xml";
 	private static final String BAD_FOREIGNKEY_XML = "org/hibernate/tool/test/jdbc2cfg/badforeignkeytest.reveng.xml";;
-	
+
 	public static Test suite() {
 		return new TestSuite(RevEngForeignKeyTests.class);
 	}
@@ -36,126 +36,134 @@
 	private Settings settings;
 
 	public void testDefaultBiDirectional() {
-		
+
 		PersistentClass project = cfg.getClassMapping("Project");
-		
+
 		assertNotNull(project.getProperty("worksOns"));
 		assertNotNull(project.getProperty("employee"));
-		assertEquals(3, project.getPropertyClosureSpan());		
+		assertEquals(3, project.getPropertyClosureSpan());
 		assertEquals("projectId", project.getIdentifierProperty().getName());
-		
+
 		PersistentClass employee = cfg.getClassMapping("Employee");
-		
+
 		assertNotNull(employee.getProperty("worksOns"));
 		assertNotNull(employee.getProperty("employees"));
 		assertNotNull(employee.getProperty("employee"));
 		assertNotNull(employee.getProperty("projects"));
 		assertEquals(5, employee.getPropertyClosureSpan());
 		assertEquals("id", employee.getIdentifierProperty().getName());
-		
+
 		PersistentClass worksOn = cfg.getClassMapping("WorksOn");
-		
+
 		assertNotNull(worksOn.getProperty("project"));
 		assertNotNull(worksOn.getProperty("employee"));
 		assertEquals(4, worksOn.getPropertyClosureSpan());
 		assertEquals("id", worksOn.getIdentifierProperty().getName());
-		
+
 	}
 
 	public void testSetAndManyToOne() {
-		
+
 		OverrideRepository or = buildOverrideRepository();
-		
+
 		or.addResource(OVERRIDETEST_FOREIGNKEY_XML);
-		ReverseEngineeringStrategy repository = or.getReverseEngineeringStrategy(new DefaultReverseEngineeringStrategy());
+		ReverseEngineeringStrategy repository = or
+				.getReverseEngineeringStrategy(new DefaultReverseEngineeringStrategy());
 
 		JDBCMetaDataConfiguration localCfg = new JDBCMetaDataConfiguration();
 		localCfg.setReverseEngineeringStrategy(repository);
-		localCfg.readFromJDBC();			
-		
+		localCfg.readFromJDBC();
+
 		PersistentClass project = localCfg.getClassMapping("Project");
-		
+
 		assertNotNull(project.getProperty("worksOns"));
 		assertPropertyNotExists(project, "employee", "should be removed by reveng.xml");
 		Property property = project.getProperty("teamLead");
 		assertNotNull(property);
 		assertTrue(property.getValue() instanceof SimpleValue);
-		assertEquals(3, project.getPropertyClosureSpan());		
+		assertEquals(3, project.getPropertyClosureSpan());
 		assertEquals("projectId", project.getIdentifierProperty().getName());
-		
+
 		PersistentClass employee = localCfg.getClassMapping("Employee");
-		
+
 		assertNotNull(employee.getProperty("worksOns"));
-		assertNotNull("property should be renamed by reveng.xml", employee.getProperty("manager"));		
-		assertPropertyNotExists( employee, "employees", "set should be excluded by reveng.xml" );
+		assertNotNull("property should be renamed by reveng.xml", employee.getProperty("manager"));
+		assertPropertyNotExists(employee, "employees", "set should be excluded by reveng.xml");
 		assertNotNull("should be renamed by reveng.xml", employee.getProperty("managedProjects"));
-		
+
 		assertEquals(4, employee.getPropertyClosureSpan());
 		assertEquals("id", employee.getIdentifierProperty().getName());
-		
+
 		PersistentClass worksOn = localCfg.getClassMapping("WorksOn");
-		
+
 		assertNotNull(worksOn.getProperty("project"));
 		assertNotNull(worksOn.getProperty("employee"));
 		assertEquals(4, worksOn.getPropertyClosureSpan());
 		assertEquals("id", worksOn.getIdentifierProperty().getName());
-	
+
 	}
-	
+
 	public void testDuplicateForeignKeyDefinition() {
-		
+
 		OverrideRepository or = buildOverrideRepository();
-		
+
 		or.addResource(BAD_FOREIGNKEY_XML);
-		ReverseEngineeringStrategy repository = or.getReverseEngineeringStrategy(new DefaultReverseEngineeringStrategy());
+		ReverseEngineeringStrategy repository = or
+				.getReverseEngineeringStrategy(new DefaultReverseEngineeringStrategy());
 
 		JDBCMetaDataConfiguration localCfg = new JDBCMetaDataConfiguration();
 		localCfg.setReverseEngineeringStrategy(repository);
-		
+
 		try {
 			localCfg.readFromJDBC();
-			fail("Should fail because foreign key is already defined in the database"); // maybe we should ignore the definition and only listen to what is overwritten ? For now we error. 
-		} catch(MappingException me) {
-			assertTrue(me.getMessage().indexOf("already defined")>=0);			
+			fail("Should fail because foreign key is already defined in the database"); // maybe we
+																						// should
+																						// ignore
+																						// the
+																						// definition
+																						// and only
+																						// listen to
+																						// what is
+																						// overwritten
+																						// ? For now
+																						// we error.
+		} catch (MappingException me) {
+			assertTrue(me.getMessage().indexOf("already defined") >= 0);
 		}
-		
+
 	}
-
+	
 	private void assertPropertyNotExists(PersistentClass employee, String name, String msg) {
 		try {
 			employee.getProperty(name);
 			fail(msg);
-		} catch(MappingException me) {
+		} catch (MappingException me) {
 			// excpected
 		}
 	}
 
 	private OverrideRepository buildOverrideRepository() {
-		if(settings==null) {
+		if (settings == null) {
 			settings = new SettingsFactory() {
 				// trick to get hibernate.properties settings for defaultschema/catalog in here
 			}.buildSettings(Environment.getProperties());
 		}
-		//return new OverrideRepository(settings.getDefaultCatalogName(),settings.getDefaultSchemaName());
+		// return new
+		// OverrideRepository(settings.getDefaultCatalogName(),settings.getDefaultSchemaName());
 		return new OverrideRepository();
 	}
-	
+
 	protected String[] getCreateSQL() {
 		return new String[] {
-			"create table PROJECT ( project_id integer not null, name varchar(50), team_lead integer, primary key (project_id) )",
-			"create table EMPLOYEE ( id integer not null, name varchar(50), manager_id integer, primary key (id), constraint employee_manager foreign key (manager_id) references EMPLOYEE)",
-			"create table WORKS_ON ( project_id integer not null, employee_id integer not null, start_date date, end_date date, primary key (project_id, employee_id), constraint workson_employee foreign key (employee_id) references EMPLOYEE, foreign key (project_id) references PROJECT )",
-			"alter  table PROJECT add constraint project_manager foreign key (team_lead) references EMPLOYEE"
-		};
+				"create table PROJECT ( project_id integer not null, name varchar(50), team_lead integer, primary key (project_id) )",
+				"create table EMPLOYEE ( id integer not null, name varchar(50), manager_id integer, primary key (id), constraint employee_manager foreign key (manager_id) references EMPLOYEE)",
+				"create table WORKS_ON ( project_id integer not null, employee_id integer not null, start_date date, end_date date, primary key (project_id, employee_id), constraint workson_employee foreign key (employee_id) references EMPLOYEE, foreign key (project_id) references PROJECT )",
+				"alter  table PROJECT add constraint project_manager foreign key (team_lead) references EMPLOYEE" };
 	}
 
 	protected String[] getDropSQL() {
-		return new String[] {
-				"alter table PROJECT drop constraint project_manager",
-				"drop table WORKS_ON",
-				"drop table EMPLOYEE",
-				"drop table PROJECT",											
-			};
+		return new String[] { "alter table PROJECT drop constraint project_manager", "drop table WORKS_ON",
+				"drop table EMPLOYEE", "drop table PROJECT", };
 	}
 
 }
Index: src/test/org/hibernate/tool/test/jdbc2cfg/OverrideBinderTest.java
===================================================================
--- src/test/org/hibernate/tool/test/jdbc2cfg/OverrideBinderTest.java	(revision 18703)
+++ src/test/org/hibernate/tool/test/jdbc2cfg/OverrideBinderTest.java	(working copy)
@@ -1,532 +0,0 @@
-/*
- * Created on 2004-12-01
- *
- */
-package org.hibernate.tool.test.jdbc2cfg;
-
-import java.io.File;
-import java.sql.Types;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-
-import junit.framework.Test;
-import junit.framework.TestSuite;
-
-import org.hibernate.cfg.Configuration;
-import org.hibernate.cfg.Environment;
-import org.hibernate.cfg.JDBCMetaDataConfiguration;
-import org.hibernate.cfg.Settings;
-import org.hibernate.cfg.SettingsFactory;
-import org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy;
-import org.hibernate.cfg.reveng.OverrideRepository;
-import org.hibernate.cfg.reveng.ReverseEngineeringStrategy;
-import org.hibernate.cfg.reveng.SQLTypeMapping;
-import org.hibernate.cfg.reveng.SchemaSelection;
-import org.hibernate.cfg.reveng.TableFilter;
-import org.hibernate.cfg.reveng.TableIdentifier;
-import org.hibernate.mapping.Column;
-import org.hibernate.mapping.Component;
-import org.hibernate.mapping.ForeignKey;
-import org.hibernate.mapping.MetaAttribute;
-import org.hibernate.mapping.PersistentClass;
-import org.hibernate.mapping.Property;
-import org.hibernate.mapping.SimpleValue;
-import org.hibernate.mapping.Table;
-import org.hibernate.tool.JDBCMetaDataBinderTestCase;
-import org.hibernate.tool.hbm2x.HibernateMappingExporter;
-
-/**
- * @author max
- *
- */
-public class OverrideBinderTest extends JDBCMetaDataBinderTestCase {
-	
-	private static final String OVERRIDETEST_REVENG_XML = "org/hibernate/tool/test/jdbc2cfg/overridetest.reveng.xml";
-	private static final String TEST_REVENG_XML = "org/hibernate/tool/test/jdbc2cfg/test.reveng.xml";
-	private static final String DOC_REVENG_XML = "org/hibernate/tool/test/jdbc2cfg/docexample.reveng.xml";
-	private static final String SCHEMA_REVENG_XML = "org/hibernate/tool/test/jdbc2cfg/schemaselection.reveng.xml";
-
-	public void testReadTypeMappings() {
-		OverrideRepository or = buildOverrideRepository();
-				
-		or.addResource(TEST_REVENG_XML);
-		ReverseEngineeringStrategy repository = or.getReverseEngineeringStrategy(null);
-
-		assertEquals("int", repository.columnToHibernateTypeName(null, null, Types.INTEGER, 5, SQLTypeMapping.UNKNOWN_PRECISION, SQLTypeMapping.UNKNOWN_SCALE, false, false) );
-		assertEquals("long", repository.columnToHibernateTypeName(null, null, Types.INTEGER, SQLTypeMapping.UNKNOWN_LENGTH, SQLTypeMapping.UNKNOWN_PRECISION, SQLTypeMapping.UNKNOWN_SCALE, false, false) );
-		assertEquals("byte[]", repository.columnToHibernateTypeName(null, null, Types.BIGINT, SQLTypeMapping.UNKNOWN_LENGTH, 5, SQLTypeMapping.UNKNOWN_SCALE, false, false) );
-		assertEquals("java.math.BigInteger", repository.columnToHibernateTypeName(null, null, Types.BIGINT, SQLTypeMapping.UNKNOWN_LENGTH, 2, 3, false, false) );
-		assertEquals("string", repository.columnToHibernateTypeName(null, null, Types.CHAR, 1, 10, SQLTypeMapping.UNKNOWN_SCALE, false, false) );
-		//assertEquals("string", repository.jdbcToHibernateType(Types.CHAR, 1, SQLTypeMapping.UNKNOWN_PRECISION, SQLTypeMapping.UNKNOWN_SCALE) );
-		
-		assertEquals("Long", repository.columnToHibernateTypeName(null, null, Types.NUMERIC, 1, 10, 0, false, false) );
-		assertEquals("java.lang.Long", repository.columnToHibernateTypeName(null, null, Types.NUMERIC, 1, 10, SQLTypeMapping.UNKNOWN_SCALE, false, false) );
-		assertEquals("java.lang.Long", repository.columnToHibernateTypeName(null, null, Types.NUMERIC, 1, 10, 43, false, false) );
-		
-		// nullability
-		assertEquals("nonnull-float", repository.columnToHibernateTypeName(null, null, Types.FLOAT, SQLTypeMapping.UNKNOWN_LENGTH, SQLTypeMapping.UNKNOWN_PRECISION,17,false, false) );
-		assertEquals("null-float", repository.columnToHibernateTypeName(null, null, Types.FLOAT, SQLTypeMapping.UNKNOWN_LENGTH, SQLTypeMapping.UNKNOWN_PRECISION,17,true, false) );
-		
-		assertEquals("onlynotnull", repository.columnToHibernateTypeName(null, null, Types.FLOAT, SQLTypeMapping.UNKNOWN_LENGTH, SQLTypeMapping.UNKNOWN_PRECISION,SQLTypeMapping.UNKNOWN_SCALE,false, false) );
-		assertEquals("donotcare", repository.columnToHibernateTypeName(null, null, Types.FLOAT, SQLTypeMapping.UNKNOWN_LENGTH, SQLTypeMapping.UNKNOWN_PRECISION,SQLTypeMapping.UNKNOWN_SCALE,true, false) );
-		
-		
-	}
-	
-	public void testDocExample() {
-		OverrideRepository or = buildOverrideRepository();
-		
-		or.addResource(DOC_REVENG_XML);
-		ReverseEngineeringStrategy repository = or.getReverseEngineeringStrategy(new DefaultReverseEngineeringStrategy());
-
-		assertEquals("int", repository.columnToHibernateTypeName(null, "ID", Types.INTEGER, SQLTypeMapping.UNKNOWN_LENGTH, 10, SQLTypeMapping.UNKNOWN_SCALE, false, false) );
-		assertEquals("your.package.TrimStringUserType", repository.columnToHibernateTypeName(null, "NAME", Types.VARCHAR, 30, SQLTypeMapping.UNKNOWN_PRECISION, SQLTypeMapping.UNKNOWN_SCALE, true, false) );
-		assertEquals("char", repository.columnToHibernateTypeName(null, "INITIAL", Types.VARCHAR, 1, SQLTypeMapping.UNKNOWN_PRECISION, SQLTypeMapping.UNKNOWN_SCALE, true, false) );
-		assertEquals("java.lang.Character", repository.columnToHibernateTypeName(null, "CODE", Types.VARCHAR, 1, SQLTypeMapping.UNKNOWN_PRECISION, SQLTypeMapping.UNKNOWN_SCALE, false, false) );
-		assertEquals("big_decimal", repository.columnToHibernateTypeName(null, "SALARY", Types.NUMERIC, SQLTypeMapping.UNKNOWN_LENGTH, 15, SQLTypeMapping.UNKNOWN_SCALE, true, false) );
-		assertEquals("java.lang.Long", repository.columnToHibernateTypeName(null, "AGE", Types.NUMERIC, SQLTypeMapping.UNKNOWN_LENGTH, 3, SQLTypeMapping.UNKNOWN_SCALE, true, false) );
-		
-	}
-	
-	public void testSchemaSelection() {
-		OverrideRepository or = buildOverrideRepository();
-		
-		or.addResource(SCHEMA_REVENG_XML);
-		ReverseEngineeringStrategy repository = or.getReverseEngineeringStrategy(new DefaultReverseEngineeringStrategy());
-
-		List schemaSelectors = repository.getSchemaSelections();
-		
-		assertNotNull(schemaSelectors);
-		assertEquals(4,schemaSelectors.size());
-		
-		SchemaSelection ss;
-		ss = (SchemaSelection) schemaSelectors.get(0);
-		assertEquals(null,ss.getMatchCatalog());
-		assertEquals(null,ss.getMatchSchema());
-		assertEquals(null,ss.getMatchTable());
-		
-		ss = (SchemaSelection) schemaSelectors.get(1);
-		assertEquals(null,ss.getMatchCatalog());
-		assertEquals("OVRTEST",ss.getMatchSchema());
-		assertEquals(null,ss.getMatchTable());
-		
-		ss = (SchemaSelection) schemaSelectors.get(2);
-		assertEquals("UBERCATALOG",ss.getMatchCatalog());
-		assertEquals("OVRTEST",ss.getMatchSchema());
-		assertEquals(null,ss.getMatchTable());
-		
-		ss = (SchemaSelection) schemaSelectors.get(3);
-		assertEquals("PUBLIC.*",ss.getMatchCatalog());
-		assertEquals("OVRTEST",ss.getMatchSchema());
-		assertEquals(".*",ss.getMatchTable());
-		
-	}
-
-
-	static Settings settings;
-	
-	private OverrideRepository buildOverrideRepository() {
-		if(settings==null) {
-			settings = new SettingsFactory() {
-				// trick to get hibernate.properties settings for defaultschema/catalog in here
-			}.buildSettings(Environment.getProperties());
-		}
-		//return new OverrideRepository(settings.getDefaultCatalogName(),settings.getDefaultSchemaName());
-		return new OverrideRepository();
-	}
-	
-	public void testColumnTypeMappings() {
-		OverrideRepository or = buildOverrideRepository();
-		
-		or.addResource(OVERRIDETEST_REVENG_XML);
-		ReverseEngineeringStrategy repository = or.getReverseEngineeringStrategy(null);
-
-		assertNull(repository.columnToHibernateTypeName(new TableIdentifier("blah"), "bogus",0,0,0,0, false, false));
-		assertNull(repository.columnToHibernateTypeName(new TableIdentifier("ORDERS"), "CUSTID",0,0,0,0, false, false));
-		assertEquals("string", repository.columnToHibernateTypeName(new TableIdentifier(null, null, "ORDERS"), "NAME",0,0,0,0, false, false));
-		
-		PersistentClass classMapping = cfg.getClassMapping("Orders");
-		
-		Property property = classMapping.getProperty("completed");		
-		assertEquals("boolean because of not null", "boolean", ((SimpleValue)property.getValue()).getTypeName());
-		
-		property = classMapping.getProperty("verified");
-		assertEquals("java.lang.Boolean because of null","java.lang.Boolean", ((SimpleValue)property.getValue()).getTypeName());
-		
-		classMapping = cfg.getClassMapping("MiscTypes");
-		
-		property = classMapping.getIdentifierProperty();
-		
-		assertFalse(((SimpleValue)property.getValue()).isNullable());
-		assertEquals("java.lang.Long because of primary key", "java.lang.Long", ((SimpleValue)property.getValue()).getTypeName());
-	}
-
-	public void testColumnPropertyNameMappings() {
-		OverrideRepository or = buildOverrideRepository();
-		
-		or.addResource(OVERRIDETEST_REVENG_XML);
-		ReverseEngineeringStrategy repository = or.getReverseEngineeringStrategy(null);
-
-		assertNull(repository.columnToPropertyName(new TableIdentifier("blah"), "bogus"));
-		assertNull(repository.columnToPropertyName(new TableIdentifier("ORDERS"), "cust_id"));
-		assertEquals("orderName", repository.columnToPropertyName(new TableIdentifier(null, null, "ORDERS"), "NAME"));
-	}
-	
-	public void testMetaAttributeMappings() {
-		PersistentClass classMapping = cfg.getClassMapping( "Orders" );
-		assertEquals("order table value", classMapping.getMetaAttribute( "order-meta" ).getValue());
-		
-		Property property = classMapping.getProperty("orderName");
-		assertEquals("order column value", property.getMetaAttribute( "order-meta" ).getValue());
-		//TODO: test sequence of meta
-	}
-	
-	public void testIdGenerator() {
-		OverrideRepository or = buildOverrideRepository();
-		
-		or.addResource(OVERRIDETEST_REVENG_XML);
-		ReverseEngineeringStrategy repository = or.getReverseEngineeringStrategy(null);
-
-		TableIdentifier miscTable = new TableIdentifier(null,null, "MISC_TYPES");
-		assertEquals("sequence",repository.getTableIdentifierStrategyName(miscTable));
-		Map props = repository.getTableIdentifierProperties(miscTable);
-		assertEquals("seq_table", props.get("table"));
-		
-		assertNull(repository.getTableIdentifierStrategyName(new TableIdentifier("blah")));
-		assertNull(repository.getTableIdentifierProperties(new TableIdentifier("blah")));
-		TableIdentifier ordersTable = new TableIdentifier(null,null, "ORDERS");
-		
-		assertEquals("customOrderId", repository.tableToIdentifierPropertyName(ordersTable));
-		assertEquals(null, repository.tableToIdentifierPropertyName(new TableIdentifier("blah")));
-		
-		assertEquals("CustomOID", repository.tableToCompositeIdName(ordersTable));
-		assertEquals(null, repository.tableToCompositeIdName(new TableIdentifier("blah")));
-		
-		List primaryKeyColumnNames = repository.getPrimaryKeyColumnNames(new TableIdentifier("blah"));
-		assertNull(primaryKeyColumnNames);
-		
-		primaryKeyColumnNames = repository.getPrimaryKeyColumnNames(ordersTable);
-		assertNotNull(primaryKeyColumnNames);
-		assertEquals(2, primaryKeyColumnNames.size());
-		assertEquals("ORDERID", primaryKeyColumnNames.get(0));
-		assertEquals("CUSTID", primaryKeyColumnNames.get(1));
-		assertFalse(repository.excludeColumn(ordersTable, "CUSTID"));
-		
-		// applied
-		PersistentClass classMapping = cfg.getClassMapping("Orders");
-		SimpleValue sv = (SimpleValue) classMapping.getIdentifier();
-		assertEquals("CustomOID", ((Component)sv).getComponentClassName());
-		
-		assertEquals(2,classMapping.getIdentifierProperty().getColumnSpan());	
-		
-		Property identifierProperty = classMapping.getIdentifierProperty();
-		assertEquals("customOrderId", identifierProperty.getName());
-		
-		classMapping = cfg.getClassMapping("MiscTypes");
-		sv = (SimpleValue) classMapping.getIdentifier(); 
-		assertEquals("sequence", sv.getIdentifierGeneratorStrategy()); // will fail if default schema is not set since then there is no match in the override binder		
-		
-		assertNotNull(sv.getIdentifierGeneratorProperties());
-		assertEquals("seq_table", sv.getIdentifierGeneratorProperties().getProperty("table"));
-		
-	}
-	
-	
-	public void testReadExcludeTables() {
-		OverrideRepository or = buildOverrideRepository();
-		
-		or.addResource(OVERRIDETEST_REVENG_XML);
-		ReverseEngineeringStrategy repository = or.getReverseEngineeringStrategy(null);
-		
-		assertTrue(repository.excludeTable(new TableIdentifier(null,null, "DoNotWantIt") ) );
-		assertFalse(repository.excludeTable(new TableIdentifier(null,null, "NotListedThere") ) );
-		assertFalse(repository.excludeTable(new TableIdentifier("cat","sch", "WantedTable") ) );
-		assertFalse(repository.excludeTable(new TableIdentifier("BAD","SCHEMA", "WantedTable") ) ); 
-		assertTrue(repository.excludeTable(new TableIdentifier("BAD","SCHEMA", "SomethingElse") ) );
-		
-	}
-	
-	public void testReadPackageName() {
-		OverrideRepository or = buildOverrideRepository();
-		
-		or.addResource(OVERRIDETEST_REVENG_XML);
-		ReverseEngineeringStrategy repository = or.getReverseEngineeringStrategy(new DefaultReverseEngineeringStrategy());
-		
-		assertEquals("org.werd.Q", repository.tableToClassName(new TableIdentifier("q","Werd", "Q") ) );
-		assertEquals("Notknown", repository.tableToClassName(new TableIdentifier(null,null, "notknown") ) );
-		
-		assertEquals("org.werd.MyWorld", repository.tableToClassName(new TableIdentifier(null,"Werd", "TBL_PKG") ) );
-		assertEquals("other.MyWorld", repository.tableToClassName(new TableIdentifier(null,"Werd", "TBL_OTHER") ) );
-		
-	}
-	
-	public Table findTable(String name) {
-		Iterator tableIter = cfg.getTableMappings();
-		
-		Table table = null;
-		while(tableIter.hasNext() ) {
-			table = (Table) tableIter.next();
-			if(table.getName().equals(name) ) {
-				return table;
-			}
-		}
-		return null;
-	}
-	
-	public void testRevEngExclude() {
-		
-		assertNull(findTable(identifier("defunct_table") ) );
-		Table foundTable = findTable(identifier("inthemiddle") );
-		assertNotNull(foundTable);
-		Iterator fkiter = foundTable.getForeignKeyIterator();
-		ForeignKey fk1 = (ForeignKey) fkiter.next();
-		assertFalse(fkiter.hasNext() );
-		
-		
-	}
-	
-
-	public void testSQLTypeMappingComparisons() {
-		SQLTypeMapping one = new SQLTypeMapping(Types.BIGINT, 5, SQLTypeMapping.UNKNOWN_PRECISION, SQLTypeMapping.UNKNOWN_SCALE,SQLTypeMapping.UNKNOWN_NULLABLE);
-		SQLTypeMapping two = new SQLTypeMapping(Types.BIGINT, SQLTypeMapping.UNKNOWN_LENGTH, 3, SQLTypeMapping.UNKNOWN_SCALE, SQLTypeMapping.UNKNOWN_NULLABLE);
-		SQLTypeMapping generic = new SQLTypeMapping(Types.BIGINT, SQLTypeMapping.UNKNOWN_LENGTH, SQLTypeMapping.UNKNOWN_PRECISION, SQLTypeMapping.UNKNOWN_SCALE, SQLTypeMapping.UNKNOWN_NULLABLE);
-		SQLTypeMapping specific = new SQLTypeMapping(Types.BIGINT, 2, 3, 4, SQLTypeMapping.UNKNOWN_NULLABLE);
-		SQLTypeMapping morespecific = new SQLTypeMapping(Types.BIGINT, 2, 3, 4, Boolean.TRUE);
-		SQLTypeMapping equalmorespecific = new SQLTypeMapping(Types.BIGINT, 2, 3, 4, Boolean.TRUE);
-		
-		assertFalse(one.equals(two) );
-		assertFalse(two.equals(one) );
-		assertTrue(two.equals(two) );
-		assertTrue(one.equals(one) );
-		assertTrue(morespecific.equals(equalmorespecific));
-		
-		
-		assertEquals(-1, one.compareTo(two) );
-		assertEquals(1, two.compareTo(one) );
-		
-		assertEquals(1, generic.compareTo(one) );
-		assertEquals(1, generic.compareTo(two) );
-		assertEquals(1, generic.compareTo(specific) );
-		
-		assertEquals(-1, specific.compareTo(one) );
-		assertEquals(-1, specific.compareTo(two) );
-		assertEquals(-1, specific.compareTo(generic) );
-		assertEquals(1, specific.compareTo(morespecific) );
-		assertEquals(-1, morespecific.compareTo(specific) );
-		
-	}
-	public void testSqlTypeOverride() {
-		
-		OverrideRepository or = buildOverrideRepository(); 
-		
-		SQLTypeMapping sqltype = new SQLTypeMapping(Types.BINARY);
-		
-		sqltype.setLength(1);
-		sqltype.setHibernateType("boolean");
-		or.addTypeMapping(sqltype);
-		
-		sqltype = new SQLTypeMapping(Types.BIT);
-		
-		sqltype.setHibernateType("yes_no");
-		or.addTypeMapping(sqltype);
-		
-		ReverseEngineeringStrategy res = or.getReverseEngineeringStrategy(null);
-		assertEquals("boolean",res.columnToHibernateTypeName(null,null, Types.BINARY, 1, SQLTypeMapping.UNKNOWN_PRECISION, SQLTypeMapping.UNKNOWN_SCALE, false, false) );
-		assertEquals(null,res.columnToHibernateTypeName(null,null, Types.LONGVARCHAR, 1, SQLTypeMapping.UNKNOWN_PRECISION, SQLTypeMapping.UNKNOWN_SCALE, false, false) );
-		assertEquals("yes_no",res.columnToHibernateTypeName(null,null, Types.BIT, SQLTypeMapping.UNKNOWN_LENGTH, SQLTypeMapping.UNKNOWN_PRECISION, SQLTypeMapping.UNKNOWN_SCALE, false, false) );
-	}
-	
-	public void testTableExclude() {
-		TableFilter tf = new TableFilter();
-		tf.setMatchName("max");
-		tf.setExclude(Boolean.TRUE);
-		assertTrue(tf.exclude(new TableIdentifier("max") ).booleanValue() );
-		assertNull(tf.exclude(new TableIdentifier("maxnotexact") ) );
-		tf.setMatchName(".*max");
-		assertTrue(tf.exclude(new TableIdentifier("max") ).booleanValue() );
-		assertNull(tf.exclude(new TableIdentifier("maxnotending") ) );
-		assertTrue(tf.exclude(new TableIdentifier("endingWithmax") ).booleanValue() );
-		tf.setMatchName("max.*");
-		assertTrue(tf.exclude(new TableIdentifier("max") ).booleanValue() );
-		tf.setMatchName(".*max.*");
-		assertTrue(tf.exclude(new TableIdentifier("max") ).booleanValue() );
-		assertNull(tf.exclude(new TableIdentifier("notxam") ) );
-		assertTrue(tf.exclude(new TableIdentifier("heremaxsub") ).booleanValue() );
-	}
-	
-	public void testColumnExclude() {
-		
-		OverrideRepository or = buildOverrideRepository();
-		or.addResource(OVERRIDETEST_REVENG_XML);
-		
-		ReverseEngineeringStrategy reverseEngineeringStrategy = or.getReverseEngineeringStrategy();
-		
-		assertFalse(reverseEngineeringStrategy.excludeColumn(new TableIdentifier("EXCOLUMNS"), "blah"));
-		assertFalse(reverseEngineeringStrategy.excludeColumn(new TableIdentifier("EXCOLUMNS"), "NAME"));
-		assertTrue(reverseEngineeringStrategy.excludeColumn(new TableIdentifier("EXCOLUMNS"), "EXCOLUMN"));
-		
-		Table table = findTable(identifier("excolumns"));
-		assertNotNull(table);
-		
-		assertNotNull(table.getColumn(new Column("name")));
-		assertNull(table.getColumn(new Column("excolumn")));
-		
-	}
-	
-	public void testSimpleUserDefinedForeignKeys() {
-		
-		Table table = findTable(identifier("Orders") );
-		
-		Iterator foreignKeyIterator = table.getForeignKeyIterator();
-		ForeignKey fk = (ForeignKey) foreignKeyIterator.next();
-		assertEquals(fk.getReferencedTable().getName(), identifier("Customer") );
-		
-		PersistentClass classMapping = cfg.getClassMapping("Orders");
-		classMapping.getProperty("customer");
-		
-		classMapping = cfg.getClassMapping("Customer");
-		classMapping.getProperty("orderses");
-			
-	}
-	
-	public void testCompositeUserDefinedForeignKeys() {
-		
-		Table table = findTable(identifier("Children") );
-		
-		Iterator foreignKeyIterator = table.getForeignKeyIterator();
-		ForeignKey fk = (ForeignKey) foreignKeyIterator.next();
-		assertEquals(fk.getReferencedTable().getName(), identifier("Parent") );
-		assertEquals(2, fk.getReferencedColumns().size());
-		assertEquals("child_to_parent", fk.getName());
-		
-		PersistentClass classMapping = cfg.getClassMapping("Children");
-		Property property = classMapping.getProperty("propertyParent");
-		assertEquals(2,property.getColumnSpan());
-		
-		classMapping = cfg.getClassMapping("Parent");
-		property = classMapping.getProperty("propertyChildren");	
-			
-	}
-		
-	public void testTypes() {
-		
-		PersistentClass classMapping = cfg.getClassMapping("MiscTypes");
-		
-		
-		assertEquals("SomeUserType", getPropertyTypeName(classMapping.getProperty("name") ) );
-		assertEquals("string", getPropertyTypeName(classMapping.getProperty("shortname") ) );
-		assertEquals("yes_no", getPropertyTypeName(classMapping.getProperty("flag") ) );
-		
-	}
-	
-	public void testTableToClass() {
-		
-		ReverseEngineeringStrategy res = buildOverrideRepository().addResource(OVERRIDETEST_REVENG_XML).getReverseEngineeringStrategy(new DefaultReverseEngineeringStrategy());
-		
-		TableIdentifier tableIdentifier = new TableIdentifier(null, null, "TblTest");
-		assertEquals("org.test.Test", res.tableToClassName(tableIdentifier));		
-		
-		tableIdentifier = new TableIdentifier(settings.getDefaultCatalogName(), "Werd", "Testy");
-		assertEquals("org.werd.Testy", res.tableToClassName(tableIdentifier));
-		
-		tableIdentifier = new TableIdentifier(null, null, "Nothing");
-		assertEquals("Nothing", res.tableToClassName(tableIdentifier));
-		
-	}
-	
-	public void testMetaAttributes() {
-		
-		ReverseEngineeringStrategy res = buildOverrideRepository().addResource(OVERRIDETEST_REVENG_XML).getReverseEngineeringStrategy(new DefaultReverseEngineeringStrategy());
-		
-		TableIdentifier tableIdentifier = new TableIdentifier(null, null, "TblTest");
-		Map attributes = res.tableToMetaAttributes(tableIdentifier);
-		assertNotNull(attributes);
-		assertEquals(attributes.size(),1);
-		MetaAttribute ma = (MetaAttribute) attributes.get("use-in-test");
-		assertEquals(ma.getName(), "use-in-test");
-		assertEquals(ma.getValue(), "true");
-				
-		tableIdentifier = new TableIdentifier(settings.getDefaultCatalogName(), "Werd", "Testy");
-		attributes = res.tableToMetaAttributes( tableIdentifier );
-		assertNotNull(attributes);
-		ma = (MetaAttribute) attributes.get( "werd-meta" );
-		assertEquals(ma.getName(), "werd-meta");
-		assertEquals(ma.getValues().size(), 2);				
-	
-		tableIdentifier = new TableIdentifier(null, "Werd", "MetaTable");
-		attributes = res.tableToMetaAttributes( tableIdentifier );
-		assertNotNull(attributes);
-		assertEquals(2, attributes.size());
-		ma = (MetaAttribute) attributes.get("specific-werd");
-		assertEquals(ma.getName(), "specific-werd");
-		assertEquals(ma.getValue(), "a one");
-		
-		ma = (MetaAttribute) attributes.get( "werd-meta" );
-		assertEquals(ma.getName(), "werd-meta");
-		assertEquals(1, ma.getValues().size()); // as long as no inherit this should be one
-		assertEquals("value three", ma.getValue());
-	
-		tableIdentifier = new TableIdentifier(null, null, "Nothing");
-		assertEquals(null, res.tableToMetaAttributes(tableIdentifier));
-		
-		assertNull(res.columnToMetaAttributes(new TableIdentifier("Nothing"), "bogus"));
-		assertNull(res.columnToMetaAttributes( new TableIdentifier(null, "Werd", "MetaTable"), "bogusColumn" ));
-		attributes = res.columnToMetaAttributes( new TableIdentifier(null, "Werd", "MetaTable"), "MetaColumn" );
-		assertEquals(1, attributes.size());
-		ma = (MetaAttribute) attributes.get("specific-column");
-		assertEquals("specific-column",ma.getName());
-		assertEquals("yes a column with meta",ma.getValue());
-		
-	}
-	
-	protected void configure(JDBCMetaDataConfiguration cfg) {
-		super.configure(cfg);		
-		Settings s = cfg.buildSettings();
-		OverrideRepository or = new OverrideRepository();
-		or.addResource(OVERRIDETEST_REVENG_XML);
-		cfg.setReverseEngineeringStrategy(or.getReverseEngineeringStrategy(new DefaultReverseEngineeringStrategy() ) );
-	}
-
-	private String getPropertyTypeName(Property property) {
-		return ( (SimpleValue)property.getValue() ).getTypeName();
-	}
-
-
-	
-	
-	protected String[] getCreateSQL() {
-		
-		return new String[] {
-				"create table dummy (id numeric(10,0) not null, primary key (id) )",
-				"create table defunct_table ( id numeric(10,0) not null, name varchar(20), shortname varchar(5), flag varchar(1), dumid numeric(10,0), primary key (id), foreign key (dumid) references dummy)",                
-                "create table misc_types ( id numeric(10,0) not null, name varchar(20), shortname varchar(5), flag varchar(1), primary key (id) )",
-                "create table inthemiddle ( miscid numeric(10,0), defunctid numeric(10,0), foreign key (miscid) references misc_types, foreign key (defunctid) references defunct_table )",
-                "create table customer ( custid varchar(10), name varchar(20) )",
-                "create table orders ( orderid varchar(10), name varchar(20),  custid varchar(10), completed numeric(1) not null, verified numeric(1) )",
-                "create table parent ( id varchar(10), name varchar(20))",
-                "create table children ( id varchar(10), parentid varchar(10), name varchar(20) )",
-                "create table excolumns (id varchar(12), name varchar(20), excolumn numeric(10,0) )"
-		};
-	}
-
-	protected String[] getDropSQL() {
-		
-		return new String[]  {
-				"drop table excolumns",
-				"drop table parent",
-				"drop table children",
-				"drop table customer",
-				"drop table orders",
-				"drop table inthemiddle",
-				"drop table misc_types",
-				"drop table defunct_table",
-				"drop table dummy",
-				
-		};
-	}
-	public static Test suite() {
-		return new TestSuite(OverrideBinderTest.class);
-	}
-
-}
Index: src/test/org/hibernate/tool/test/jdbc2cfg/BasicMultiSchemaTest.java
===================================================================
--- src/test/org/hibernate/tool/test/jdbc2cfg/BasicMultiSchemaTest.java	(revision 18701)
+++ src/test/org/hibernate/tool/test/jdbc2cfg/BasicMultiSchemaTest.java	(working copy)
@@ -9,6 +9,11 @@
 import junit.framework.Test;
 import junit.framework.TestSuite;
 
+import org.hibernate.MultiSchemaEntityException;
+import org.hibernate.cfg.JDBCMetaDataConfiguration;
+import org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy;
+import org.hibernate.cfg.reveng.DelegatingReverseEngineeringStrategy;
+import org.hibernate.cfg.reveng.TableIdentifier;
 import org.hibernate.mapping.Column;
 import org.hibernate.mapping.PrimaryKey;
 import org.hibernate.mapping.Table;
@@ -48,7 +53,7 @@
 
 	public void testBasic() throws SQLException {
 
-		assertHasNext( "There should be three tables!", 3, cfg
+		assertHasNext( "There should be four tables!", 4, cfg
 				.getTableMappings() );
 
 		Table table = getTable( identifier( "basic" ) );
@@ -71,7 +76,17 @@
 		assertTrue( column.isUnique() );
 
 		assertSame( basicColumn, column );
-
+	}
+	
+	public void testMappingSameEntityInMultipleSchemas() throws Exception {
+		try {
+			this.cfg.getClassMapping("Basic");
+			fail();
+		} catch(MultiSchemaEntityException e) {
+			assertEquals("Multiple 'Basic' entities founded with a same name in follow schemas: 'null.OTHERSCHEMA', 'null.PUBLIC'", e.getMessage());
+			assertEquals("class/entity", e.getType());
+			assertEquals("Basic", e.getName());
+		}
 	}
 
 	public void testScalePrecisionLength() {
@@ -85,7 +100,7 @@
 	}
 
 	
-/*	public void testAutoDetectSingleSchema() {
+	public void testAutoDetectSingleSchema() {
 		
 		//read single schema without default schema: result = no schema info in tables.
 		JDBCMetaDataConfiguration mycfg = new JDBCMetaDataConfiguration();
@@ -95,7 +110,7 @@
 			}
 		});
 		mycfg.getProperties().remove(org.hibernate.cfg.Environment.DEFAULT_SCHEMA);
-		mycfg.readFromJDBC();			
+		mycfg.readFromJDBC();
 		
 		Table table = getTable(mycfg, identifier("otherschema"));
 		assertNull("rev.eng.strategy should have excluded this table",table);
@@ -109,7 +124,7 @@
 		
 		//read other single schema than default schema: result = schema info in tables.
 		
-	}*/
+	}
 	
 	/*
 	 * public void testGetTables() {
Index: src/test/org/hibernate/tool/test/jdbc2cfg/IndexTest.java
===================================================================
--- src/test/org/hibernate/tool/test/jdbc2cfg/IndexTest.java	(revision 18689)
+++ src/test/org/hibernate/tool/test/jdbc2cfg/IndexTest.java	(working copy)
@@ -17,84 +17,76 @@
 
 /**
  * @author max
- *
+ * 
  */
 public class IndexTest extends JDBCMetaDataBinderTestCase {
 
-	/* (non-Javadoc)
+	/*
+	 * (non-Javadoc)
+	 * 
 	 * @see org.hibernate.console.test.PopulatorTestCase#getCreateSQL()
 	 */
 	protected String[] getCreateSQL() {
-		
-		return new String[] {
-				"create table withIndex (first int, second int, third int)",
-				"create index myIndex on withIndex(first,third)",
-				"create unique index otherIdx on withIndex(third)",
-		};
+
+		return new String[] { "create table withIndex (first int, second int, third int)",
+				"create index myIndex on withIndex(first,third)", "create unique index otherIdx on withIndex(third)", };
 	}
 
 	protected String[] getDropSQL() {
-		return new String[] {
-				"drop index otherIdx",
-				"drop index myIndex",
-				"drop table withIndex",
-		};
+		return new String[] { "drop index otherIdx", "drop index myIndex", "drop table withIndex", };
 	}
 
 	public void testUniqueKey() {
-		
-		Table table = getTable(identifier("withIndex") );
-		
-		UniqueKey uniqueKey = table.getUniqueKey(identifier("otherIdx") );
+
+		Table table = getTable(identifier("withIndex"));
+
+		UniqueKey uniqueKey = table.getUniqueKey(identifier("otherIdx"));
 		assertNotNull(uniqueKey);
-		
-		assertEquals(1, uniqueKey.getColumnSpan() );
-		
+
+		assertEquals(1, uniqueKey.getColumnSpan());
+
 		Column keyCol = uniqueKey.getColumn(0);
-		assertTrue(keyCol.isUnique() );
-		
-		assertSame(keyCol, table.getColumn(keyCol) );
-		
+		assertTrue(keyCol.isUnique());
+
+		assertSame(keyCol, table.getColumn(keyCol));
+
 	}
-	
+
 	public void testWithIndex() {
-		
-		Table table = getTable(identifier("withIndex") );
-		
-		assertEqualIdentifiers("withIndex", table.getName() );
-		
-		assertNull("there should be no pk", table.getPrimaryKey() );
+		Table table = getTable(identifier("withIndex"));
+
+		assertEqualIdentifiers("withIndex", table.getName());
+
+		assertNull("there should be no pk", table.getPrimaryKey());
 		Iterator iterator = table.getIndexIterator();
-	
-		
-		int cnt=0;
-		while(iterator.hasNext() ) {
+
+		int cnt = 0;
+		while (iterator.hasNext()) {
 			iterator.next();
 			cnt++;
 		}
 		assertEquals(1, cnt);
-		
-		Index index = table.getIndex(identifier("myIndex") );
-		
+
+		Index index = table.getIndex(identifier("myIndex"));
+
 		assertNotNull("No index ?", index);
-		assertEqualIdentifiers("myIndex", index.getName() );
-		
-		assertEquals(2, index.getColumnSpan() );
-		
+		assertEqualIdentifiers("myIndex", index.getName());
+
+		assertEquals(2, index.getColumnSpan());
+
 		assertSame(index.getTable(), table);
 		Iterator cols = index.getColumnIterator();
 		Column col1 = (Column) cols.next();
 		Column col2 = (Column) cols.next();
-		
-		assertEqualIdentifiers("first", col1.getName() );
-		assertEqualIdentifiers("third", col2.getName() );
-		
+
+		assertEqualIdentifiers("first", col1.getName());
+		assertEqualIdentifiers("third", col2.getName());
+
 		Column example = new Column();
-		example.setName(col2.getName() );
-		assertSame("column with same name should be same instance!", table.getColumn(example), col2);			
+		example.setName(col2.getName());
+		assertSame("column with same name should be same instance!", table.getColumn(example), col2);
+	}
 
-	}
-	
 	public static Test suite() {
 		return new TestSuite(IndexTest.class);
 	}
Index: src/test/org/hibernate/tool/test/jdbc2cfg/AutoQuoteTest.java
===================================================================
--- src/test/org/hibernate/tool/test/jdbc2cfg/AutoQuoteTest.java	(revision 18703)
+++ src/test/org/hibernate/tool/test/jdbc2cfg/AutoQuoteTest.java	(working copy)
@@ -19,7 +19,6 @@
 public class AutoQuoteTest extends JDBCMetaDataBinderTestCase {
 
 	protected String[] getCreateSQL() {
-		
 		return new String[] {
 				"create table \"us-ers\" ( userid INTEGER NOT NULL, department VARCHAR(3), PRIMARY KEY (userid) )", 
 				"create table typ ( indexid INTEGER NOT NULL, text varchar(10) NOT NULL, korr INTEGER NOT NULL, PRIMARY KEY (indexid) )", 
@@ -28,7 +27,6 @@
 	}
 
 	protected String[] getDropSQL() {
-		
 		return new String[]  {
 				"drop table workLogs",
 				"drop table \"us-ers\"",
@@ -37,7 +35,6 @@
 	}
 	
 	public void testForQuotes() {
-
 		Table table = getTable("us-ers");
 		assertNotNull(table);
 		assertTrue(table.isQuoted());
@@ -46,9 +43,8 @@
 		
 		PersistentClass classMapping = cfg.getClassMapping("Worklogs");
 		assertNotNull(classMapping);
-		Property property = classMapping.getProperty("usErs");
+		Property property = classMapping.getProperty("userid");
 		assertNotNull(property);
-		
 	}
 	
 	public static Test suite() {
Index: src/test/org/hibernate/tool/test/jdbc2cfg/BinderTest.java
===================================================================
--- src/test/org/hibernate/tool/test/jdbc2cfg/BinderTest.java	(revision 18689)
+++ src/test/org/hibernate/tool/test/jdbc2cfg/BinderTest.java	(working copy)
@@ -4,16 +4,11 @@
  */
 package org.hibernate.tool.test.jdbc2cfg;
 
-import java.io.File;
-import java.sql.Types;
 import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
 
 import junit.framework.Test;
 import junit.framework.TestSuite;
 
-import org.hibernate.cfg.Configuration;
 import org.hibernate.cfg.Environment;
 import org.hibernate.cfg.JDBCMetaDataConfiguration;
 import org.hibernate.cfg.Settings;
@@ -21,112 +16,26 @@
 import org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy;
 import org.hibernate.cfg.reveng.OverrideRepository;
 import org.hibernate.cfg.reveng.ReverseEngineeringStrategy;
-import org.hibernate.cfg.reveng.SQLTypeMapping;
-import org.hibernate.cfg.reveng.SchemaSelection;
-import org.hibernate.cfg.reveng.TableFilter;
-import org.hibernate.cfg.reveng.TableIdentifier;
-import org.hibernate.mapping.Column;
-import org.hibernate.mapping.Component;
-import org.hibernate.mapping.ForeignKey;
-import org.hibernate.mapping.MetaAttribute;
-import org.hibernate.mapping.PersistentClass;
-import org.hibernate.mapping.Property;
-import org.hibernate.mapping.SimpleValue;
 import org.hibernate.mapping.Table;
 import org.hibernate.tool.JDBCMetaDataBinderTestCase;
-import org.hibernate.tool.hbm2x.HibernateMappingExporter;
+import org.hibernate.tool.test.jdbc2cfg.binder.BasicBinderTest;
+import org.hibernate.tool.test.jdbc2cfg.binder.DocBinderTest;
+import org.hibernate.tool.test.jdbc2cfg.binder.OverrideBinderTest;
+import org.hibernate.tool.test.jdbc2cfg.binder.SchemaOverrideBinderTest;
+import org.hibernate.tool.test.jdbc2cfg.binder.TypeMappingBinderTest;
 
 /**
  * @author max
  *
  */
-public class OverrideBinderTest extends JDBCMetaDataBinderTestCase {
+public abstract class BinderTest extends JDBCMetaDataBinderTestCase {
 	
-	private static final String OVERRIDETEST_REVENG_XML = "org/hibernate/tool/test/jdbc2cfg/overridetest.reveng.xml";
-	private static final String TEST_REVENG_XML = "org/hibernate/tool/test/jdbc2cfg/test.reveng.xml";
-	private static final String DOC_REVENG_XML = "org/hibernate/tool/test/jdbc2cfg/docexample.reveng.xml";
-	private static final String SCHEMA_REVENG_XML = "org/hibernate/tool/test/jdbc2cfg/schemaselection.reveng.xml";
-
-	public void testReadTypeMappings() {
-		OverrideRepository or = buildOverrideRepository();
-				
-		or.addResource(TEST_REVENG_XML);
-		ReverseEngineeringStrategy repository = or.getReverseEngineeringStrategy(null);
-
-		assertEquals("int", repository.columnToHibernateTypeName(null, null, Types.INTEGER, 5, SQLTypeMapping.UNKNOWN_PRECISION, SQLTypeMapping.UNKNOWN_SCALE, false, false) );
-		assertEquals("long", repository.columnToHibernateTypeName(null, null, Types.INTEGER, SQLTypeMapping.UNKNOWN_LENGTH, SQLTypeMapping.UNKNOWN_PRECISION, SQLTypeMapping.UNKNOWN_SCALE, false, false) );
-		assertEquals("byte[]", repository.columnToHibernateTypeName(null, null, Types.BIGINT, SQLTypeMapping.UNKNOWN_LENGTH, 5, SQLTypeMapping.UNKNOWN_SCALE, false, false) );
-		assertEquals("java.math.BigInteger", repository.columnToHibernateTypeName(null, null, Types.BIGINT, SQLTypeMapping.UNKNOWN_LENGTH, 2, 3, false, false) );
-		assertEquals("string", repository.columnToHibernateTypeName(null, null, Types.CHAR, 1, 10, SQLTypeMapping.UNKNOWN_SCALE, false, false) );
-		//assertEquals("string", repository.jdbcToHibernateType(Types.CHAR, 1, SQLTypeMapping.UNKNOWN_PRECISION, SQLTypeMapping.UNKNOWN_SCALE) );
-		
-		assertEquals("Long", repository.columnToHibernateTypeName(null, null, Types.NUMERIC, 1, 10, 0, false, false) );
-		assertEquals("java.lang.Long", repository.columnToHibernateTypeName(null, null, Types.NUMERIC, 1, 10, SQLTypeMapping.UNKNOWN_SCALE, false, false) );
-		assertEquals("java.lang.Long", repository.columnToHibernateTypeName(null, null, Types.NUMERIC, 1, 10, 43, false, false) );
-		
-		// nullability
-		assertEquals("nonnull-float", repository.columnToHibernateTypeName(null, null, Types.FLOAT, SQLTypeMapping.UNKNOWN_LENGTH, SQLTypeMapping.UNKNOWN_PRECISION,17,false, false) );
-		assertEquals("null-float", repository.columnToHibernateTypeName(null, null, Types.FLOAT, SQLTypeMapping.UNKNOWN_LENGTH, SQLTypeMapping.UNKNOWN_PRECISION,17,true, false) );
-		
-		assertEquals("onlynotnull", repository.columnToHibernateTypeName(null, null, Types.FLOAT, SQLTypeMapping.UNKNOWN_LENGTH, SQLTypeMapping.UNKNOWN_PRECISION,SQLTypeMapping.UNKNOWN_SCALE,false, false) );
-		assertEquals("donotcare", repository.columnToHibernateTypeName(null, null, Types.FLOAT, SQLTypeMapping.UNKNOWN_LENGTH, SQLTypeMapping.UNKNOWN_PRECISION,SQLTypeMapping.UNKNOWN_SCALE,true, false) );
-		
-		
-	}
+	static Settings settings;
+	private OverrideRepository repository;
 	
-	public void testDocExample() {
-		OverrideRepository or = buildOverrideRepository();
-		
-		or.addResource(DOC_REVENG_XML);
-		ReverseEngineeringStrategy repository = or.getReverseEngineeringStrategy(new DefaultReverseEngineeringStrategy());
-
-		assertEquals("int", repository.columnToHibernateTypeName(null, "ID", Types.INTEGER, SQLTypeMapping.UNKNOWN_LENGTH, 10, SQLTypeMapping.UNKNOWN_SCALE, false, false) );
-		assertEquals("your.package.TrimStringUserType", repository.columnToHibernateTypeName(null, "NAME", Types.VARCHAR, 30, SQLTypeMapping.UNKNOWN_PRECISION, SQLTypeMapping.UNKNOWN_SCALE, true, false) );
-		assertEquals("char", repository.columnToHibernateTypeName(null, "INITIAL", Types.VARCHAR, 1, SQLTypeMapping.UNKNOWN_PRECISION, SQLTypeMapping.UNKNOWN_SCALE, true, false) );
-		assertEquals("java.lang.Character", repository.columnToHibernateTypeName(null, "CODE", Types.VARCHAR, 1, SQLTypeMapping.UNKNOWN_PRECISION, SQLTypeMapping.UNKNOWN_SCALE, false, false) );
-		assertEquals("big_decimal", repository.columnToHibernateTypeName(null, "SALARY", Types.NUMERIC, SQLTypeMapping.UNKNOWN_LENGTH, 15, SQLTypeMapping.UNKNOWN_SCALE, true, false) );
-		assertEquals("java.lang.Long", repository.columnToHibernateTypeName(null, "AGE", Types.NUMERIC, SQLTypeMapping.UNKNOWN_LENGTH, 3, SQLTypeMapping.UNKNOWN_SCALE, true, false) );
-		
-	}
-	
-	public void testSchemaSelection() {
-		OverrideRepository or = buildOverrideRepository();
-		
-		or.addResource(SCHEMA_REVENG_XML);
-		ReverseEngineeringStrategy repository = or.getReverseEngineeringStrategy(new DefaultReverseEngineeringStrategy());
-
-		List schemaSelectors = repository.getSchemaSelections();
-		
-		assertNotNull(schemaSelectors);
-		assertEquals(4,schemaSelectors.size());
-		
-		SchemaSelection ss;
-		ss = (SchemaSelection) schemaSelectors.get(0);
-		assertEquals(null,ss.getMatchCatalog());
-		assertEquals(null,ss.getMatchSchema());
-		assertEquals(null,ss.getMatchTable());
-		
-		ss = (SchemaSelection) schemaSelectors.get(1);
-		assertEquals(null,ss.getMatchCatalog());
-		assertEquals("OVRTEST",ss.getMatchSchema());
-		assertEquals(null,ss.getMatchTable());
-		
-		ss = (SchemaSelection) schemaSelectors.get(2);
-		assertEquals("UBERCATALOG",ss.getMatchCatalog());
-		assertEquals("OVRTEST",ss.getMatchSchema());
-		assertEquals(null,ss.getMatchTable());
-		
-		ss = (SchemaSelection) schemaSelectors.get(3);
-		assertEquals("PUBLIC.*",ss.getMatchCatalog());
-		assertEquals("OVRTEST",ss.getMatchSchema());
-		assertEquals(".*",ss.getMatchTable());
-		
-	}
-
-
-	static Settings settings;
+	public abstract String revengFilePath();
 	
-	private OverrideRepository buildOverrideRepository() {
+	protected OverrideRepository buildOverrideRepository() {
 		if(settings==null) {
 			settings = new SettingsFactory() {
 				// trick to get hibernate.properties settings for defaultschema/catalog in here
@@ -136,129 +45,8 @@
 		return new OverrideRepository();
 	}
 	
-	public void testColumnTypeMappings() {
-		OverrideRepository or = buildOverrideRepository();
-		
-		or.addResource(OVERRIDETEST_REVENG_XML);
-		ReverseEngineeringStrategy repository = or.getReverseEngineeringStrategy(null);
-
-		assertNull(repository.columnToHibernateTypeName(new TableIdentifier("blah"), "bogus",0,0,0,0, false, false));
-		assertNull(repository.columnToHibernateTypeName(new TableIdentifier("ORDERS"), "CUSTID",0,0,0,0, false, false));
-		assertEquals("string", repository.columnToHibernateTypeName(new TableIdentifier(null, null, "ORDERS"), "NAME",0,0,0,0, false, false));
-		
-		PersistentClass classMapping = cfg.getClassMapping("Orders");
-		
-		Property property = classMapping.getProperty("completed");		
-		assertEquals("boolean because of not null", "boolean", ((SimpleValue)property.getValue()).getTypeName());
-		
-		property = classMapping.getProperty("verified");
-		assertEquals("java.lang.Boolean because of null","java.lang.Boolean", ((SimpleValue)property.getValue()).getTypeName());
-		
-		classMapping = cfg.getClassMapping("MiscTypes");
-		
-		property = classMapping.getIdentifierProperty();
-		
-		assertFalse(((SimpleValue)property.getValue()).isNullable());
-		assertEquals("java.lang.Long because of primary key", "java.lang.Long", ((SimpleValue)property.getValue()).getTypeName());
-	}
-
-	public void testColumnPropertyNameMappings() {
-		OverrideRepository or = buildOverrideRepository();
-		
-		or.addResource(OVERRIDETEST_REVENG_XML);
-		ReverseEngineeringStrategy repository = or.getReverseEngineeringStrategy(null);
-
-		assertNull(repository.columnToPropertyName(new TableIdentifier("blah"), "bogus"));
-		assertNull(repository.columnToPropertyName(new TableIdentifier("ORDERS"), "cust_id"));
-		assertEquals("orderName", repository.columnToPropertyName(new TableIdentifier(null, null, "ORDERS"), "NAME"));
-	}
-	
-	public void testMetaAttributeMappings() {
-		PersistentClass classMapping = cfg.getClassMapping( "Orders" );
-		assertEquals("order table value", classMapping.getMetaAttribute( "order-meta" ).getValue());
-		
-		Property property = classMapping.getProperty("orderName");
-		assertEquals("order column value", property.getMetaAttribute( "order-meta" ).getValue());
-		//TODO: test sequence of meta
-	}
-	
-	public void testIdGenerator() {
-		OverrideRepository or = buildOverrideRepository();
-		
-		or.addResource(OVERRIDETEST_REVENG_XML);
-		ReverseEngineeringStrategy repository = or.getReverseEngineeringStrategy(null);
-
-		TableIdentifier miscTable = new TableIdentifier(null,null, "MISC_TYPES");
-		assertEquals("sequence",repository.getTableIdentifierStrategyName(miscTable));
-		Map props = repository.getTableIdentifierProperties(miscTable);
-		assertEquals("seq_table", props.get("table"));
-		
-		assertNull(repository.getTableIdentifierStrategyName(new TableIdentifier("blah")));
-		assertNull(repository.getTableIdentifierProperties(new TableIdentifier("blah")));
-		TableIdentifier ordersTable = new TableIdentifier(null,null, "ORDERS");
-		
-		assertEquals("customOrderId", repository.tableToIdentifierPropertyName(ordersTable));
-		assertEquals(null, repository.tableToIdentifierPropertyName(new TableIdentifier("blah")));
-		
-		assertEquals("CustomOID", repository.tableToCompositeIdName(ordersTable));
-		assertEquals(null, repository.tableToCompositeIdName(new TableIdentifier("blah")));
-		
-		List primaryKeyColumnNames = repository.getPrimaryKeyColumnNames(new TableIdentifier("blah"));
-		assertNull(primaryKeyColumnNames);
-		
-		primaryKeyColumnNames = repository.getPrimaryKeyColumnNames(ordersTable);
-		assertNotNull(primaryKeyColumnNames);
-		assertEquals(2, primaryKeyColumnNames.size());
-		assertEquals("ORDERID", primaryKeyColumnNames.get(0));
-		assertEquals("CUSTID", primaryKeyColumnNames.get(1));
-		assertFalse(repository.excludeColumn(ordersTable, "CUSTID"));
-		
-		// applied
-		PersistentClass classMapping = cfg.getClassMapping("Orders");
-		SimpleValue sv = (SimpleValue) classMapping.getIdentifier();
-		assertEquals("CustomOID", ((Component)sv).getComponentClassName());
-		
-		assertEquals(2,classMapping.getIdentifierProperty().getColumnSpan());	
-		
-		Property identifierProperty = classMapping.getIdentifierProperty();
-		assertEquals("customOrderId", identifierProperty.getName());
-		
-		classMapping = cfg.getClassMapping("MiscTypes");
-		sv = (SimpleValue) classMapping.getIdentifier(); 
-		assertEquals("sequence", sv.getIdentifierGeneratorStrategy()); // will fail if default schema is not set since then there is no match in the override binder		
-		
-		assertNotNull(sv.getIdentifierGeneratorProperties());
-		assertEquals("seq_table", sv.getIdentifierGeneratorProperties().getProperty("table"));
-		
-	}
-	
-	
-	public void testReadExcludeTables() {
-		OverrideRepository or = buildOverrideRepository();
-		
-		or.addResource(OVERRIDETEST_REVENG_XML);
-		ReverseEngineeringStrategy repository = or.getReverseEngineeringStrategy(null);
-		
-		assertTrue(repository.excludeTable(new TableIdentifier(null,null, "DoNotWantIt") ) );
-		assertFalse(repository.excludeTable(new TableIdentifier(null,null, "NotListedThere") ) );
-		assertFalse(repository.excludeTable(new TableIdentifier("cat","sch", "WantedTable") ) );
-		assertFalse(repository.excludeTable(new TableIdentifier("BAD","SCHEMA", "WantedTable") ) ); 
-		assertTrue(repository.excludeTable(new TableIdentifier("BAD","SCHEMA", "SomethingElse") ) );
-		
-	}
-	
-	public void testReadPackageName() {
-		OverrideRepository or = buildOverrideRepository();
-		
-		or.addResource(OVERRIDETEST_REVENG_XML);
-		ReverseEngineeringStrategy repository = or.getReverseEngineeringStrategy(new DefaultReverseEngineeringStrategy());
-		
-		assertEquals("org.werd.Q", repository.tableToClassName(new TableIdentifier("q","Werd", "Q") ) );
-		assertEquals("Notknown", repository.tableToClassName(new TableIdentifier(null,null, "notknown") ) );
-		
-		assertEquals("org.werd.MyWorld", repository.tableToClassName(new TableIdentifier(null,"Werd", "TBL_PKG") ) );
-		assertEquals("other.MyWorld", repository.tableToClassName(new TableIdentifier(null,"Werd", "TBL_OTHER") ) );
-		
+	protected static Settings getSettings() {
+		return settings;
 	}
 	
 	public Table findTable(String name) {
@@ -273,230 +61,27 @@
 		}
 		return null;
 	}
-	
-	public void testRevEngExclude() {
-		
-		assertNull(findTable(identifier("defunct_table") ) );
-		Table foundTable = findTable(identifier("inthemiddle") );
-		assertNotNull(foundTable);
-		Iterator fkiter = foundTable.getForeignKeyIterator();
-		ForeignKey fk1 = (ForeignKey) fkiter.next();
-		assertFalse(fkiter.hasNext() );
-		
-		
-	}
-	
 
-	public void testSQLTypeMappingComparisons() {
-		SQLTypeMapping one = new SQLTypeMapping(Types.BIGINT, 5, SQLTypeMapping.UNKNOWN_PRECISION, SQLTypeMapping.UNKNOWN_SCALE,SQLTypeMapping.UNKNOWN_NULLABLE);
-		SQLTypeMapping two = new SQLTypeMapping(Types.BIGINT, SQLTypeMapping.UNKNOWN_LENGTH, 3, SQLTypeMapping.UNKNOWN_SCALE, SQLTypeMapping.UNKNOWN_NULLABLE);
-		SQLTypeMapping generic = new SQLTypeMapping(Types.BIGINT, SQLTypeMapping.UNKNOWN_LENGTH, SQLTypeMapping.UNKNOWN_PRECISION, SQLTypeMapping.UNKNOWN_SCALE, SQLTypeMapping.UNKNOWN_NULLABLE);
-		SQLTypeMapping specific = new SQLTypeMapping(Types.BIGINT, 2, 3, 4, SQLTypeMapping.UNKNOWN_NULLABLE);
-		SQLTypeMapping morespecific = new SQLTypeMapping(Types.BIGINT, 2, 3, 4, Boolean.TRUE);
-		SQLTypeMapping equalmorespecific = new SQLTypeMapping(Types.BIGINT, 2, 3, 4, Boolean.TRUE);
-		
-		assertFalse(one.equals(two) );
-		assertFalse(two.equals(one) );
-		assertTrue(two.equals(two) );
-		assertTrue(one.equals(one) );
-		assertTrue(morespecific.equals(equalmorespecific));
-		
-		
-		assertEquals(-1, one.compareTo(two) );
-		assertEquals(1, two.compareTo(one) );
-		
-		assertEquals(1, generic.compareTo(one) );
-		assertEquals(1, generic.compareTo(two) );
-		assertEquals(1, generic.compareTo(specific) );
-		
-		assertEquals(-1, specific.compareTo(one) );
-		assertEquals(-1, specific.compareTo(two) );
-		assertEquals(-1, specific.compareTo(generic) );
-		assertEquals(1, specific.compareTo(morespecific) );
-		assertEquals(-1, morespecific.compareTo(specific) );
-		
-	}
-	public void testSqlTypeOverride() {
-		
-		OverrideRepository or = buildOverrideRepository(); 
-		
-		SQLTypeMapping sqltype = new SQLTypeMapping(Types.BINARY);
-		
-		sqltype.setLength(1);
-		sqltype.setHibernateType("boolean");
-		or.addTypeMapping(sqltype);
-		
-		sqltype = new SQLTypeMapping(Types.BIT);
-		
-		sqltype.setHibernateType("yes_no");
-		or.addTypeMapping(sqltype);
-		
-		ReverseEngineeringStrategy res = or.getReverseEngineeringStrategy(null);
-		assertEquals("boolean",res.columnToHibernateTypeName(null,null, Types.BINARY, 1, SQLTypeMapping.UNKNOWN_PRECISION, SQLTypeMapping.UNKNOWN_SCALE, false, false) );
-		assertEquals(null,res.columnToHibernateTypeName(null,null, Types.LONGVARCHAR, 1, SQLTypeMapping.UNKNOWN_PRECISION, SQLTypeMapping.UNKNOWN_SCALE, false, false) );
-		assertEquals("yes_no",res.columnToHibernateTypeName(null,null, Types.BIT, SQLTypeMapping.UNKNOWN_LENGTH, SQLTypeMapping.UNKNOWN_PRECISION, SQLTypeMapping.UNKNOWN_SCALE, false, false) );
-	}
-	
-	public void testTableExclude() {
-		TableFilter tf = new TableFilter();
-		tf.setMatchName("max");
-		tf.setExclude(Boolean.TRUE);
-		assertTrue(tf.exclude(new TableIdentifier("max") ).booleanValue() );
-		assertNull(tf.exclude(new TableIdentifier("maxnotexact") ) );
-		tf.setMatchName(".*max");
-		assertTrue(tf.exclude(new TableIdentifier("max") ).booleanValue() );
-		assertNull(tf.exclude(new TableIdentifier("maxnotending") ) );
-		assertTrue(tf.exclude(new TableIdentifier("endingWithmax") ).booleanValue() );
-		tf.setMatchName("max.*");
-		assertTrue(tf.exclude(new TableIdentifier("max") ).booleanValue() );
-		tf.setMatchName(".*max.*");
-		assertTrue(tf.exclude(new TableIdentifier("max") ).booleanValue() );
-		assertNull(tf.exclude(new TableIdentifier("notxam") ) );
-		assertTrue(tf.exclude(new TableIdentifier("heremaxsub") ).booleanValue() );
-	}
-	
-	public void testColumnExclude() {
-		
-		OverrideRepository or = buildOverrideRepository();
-		or.addResource(OVERRIDETEST_REVENG_XML);
-		
-		ReverseEngineeringStrategy reverseEngineeringStrategy = or.getReverseEngineeringStrategy();
-		
-		assertFalse(reverseEngineeringStrategy.excludeColumn(new TableIdentifier("EXCOLUMNS"), "blah"));
-		assertFalse(reverseEngineeringStrategy.excludeColumn(new TableIdentifier("EXCOLUMNS"), "NAME"));
-		assertTrue(reverseEngineeringStrategy.excludeColumn(new TableIdentifier("EXCOLUMNS"), "EXCOLUMN"));
-		
-		Table table = findTable(identifier("excolumns"));
-		assertNotNull(table);
-		
-		assertNotNull(table.getColumn(new Column("name")));
-		assertNull(table.getColumn(new Column("excolumn")));
-		
-	}
-	
-	public void testSimpleUserDefinedForeignKeys() {
-		
-		Table table = findTable(identifier("Orders") );
-		
-		Iterator foreignKeyIterator = table.getForeignKeyIterator();
-		ForeignKey fk = (ForeignKey) foreignKeyIterator.next();
-		assertEquals(fk.getReferencedTable().getName(), identifier("Customer") );
-		
-		PersistentClass classMapping = cfg.getClassMapping("Orders");
-		classMapping.getProperty("customer");
-		
-		classMapping = cfg.getClassMapping("Customer");
-		classMapping.getProperty("orderses");
-			
-	}
-	
-	public void testCompositeUserDefinedForeignKeys() {
-		
-		Table table = findTable(identifier("Children") );
-		
-		Iterator foreignKeyIterator = table.getForeignKeyIterator();
-		ForeignKey fk = (ForeignKey) foreignKeyIterator.next();
-		assertEquals(fk.getReferencedTable().getName(), identifier("Parent") );
-		assertEquals(2, fk.getReferencedColumns().size());
-		assertEquals("child_to_parent", fk.getName());
-		
-		PersistentClass classMapping = cfg.getClassMapping("Children");
-		Property property = classMapping.getProperty("propertyParent");
-		assertEquals(2,property.getColumnSpan());
-		
-		classMapping = cfg.getClassMapping("Parent");
-		property = classMapping.getProperty("propertyChildren");	
-			
-	}
-		
-	public void testTypes() {
-		
-		PersistentClass classMapping = cfg.getClassMapping("MiscTypes");
-		
-		
-		assertEquals("SomeUserType", getPropertyTypeName(classMapping.getProperty("name") ) );
-		assertEquals("string", getPropertyTypeName(classMapping.getProperty("shortname") ) );
-		assertEquals("yes_no", getPropertyTypeName(classMapping.getProperty("flag") ) );
-		
-	}
-	
-	public void testTableToClass() {
-		
-		ReverseEngineeringStrategy res = buildOverrideRepository().addResource(OVERRIDETEST_REVENG_XML).getReverseEngineeringStrategy(new DefaultReverseEngineeringStrategy());
-		
-		TableIdentifier tableIdentifier = new TableIdentifier(null, null, "TblTest");
-		assertEquals("org.test.Test", res.tableToClassName(tableIdentifier));		
-		
-		tableIdentifier = new TableIdentifier(settings.getDefaultCatalogName(), "Werd", "Testy");
-		assertEquals("org.werd.Testy", res.tableToClassName(tableIdentifier));
-		
-		tableIdentifier = new TableIdentifier(null, null, "Nothing");
-		assertEquals("Nothing", res.tableToClassName(tableIdentifier));
-		
-	}
-	
-	public void testMetaAttributes() {
-		
-		ReverseEngineeringStrategy res = buildOverrideRepository().addResource(OVERRIDETEST_REVENG_XML).getReverseEngineeringStrategy(new DefaultReverseEngineeringStrategy());
-		
-		TableIdentifier tableIdentifier = new TableIdentifier(null, null, "TblTest");
-		Map attributes = res.tableToMetaAttributes(tableIdentifier);
-		assertNotNull(attributes);
-		assertEquals(attributes.size(),1);
-		MetaAttribute ma = (MetaAttribute) attributes.get("use-in-test");
-		assertEquals(ma.getName(), "use-in-test");
-		assertEquals(ma.getValue(), "true");
-				
-		tableIdentifier = new TableIdentifier(settings.getDefaultCatalogName(), "Werd", "Testy");
-		attributes = res.tableToMetaAttributes( tableIdentifier );
-		assertNotNull(attributes);
-		ma = (MetaAttribute) attributes.get( "werd-meta" );
-		assertEquals(ma.getName(), "werd-meta");
-		assertEquals(ma.getValues().size(), 2);				
-	
-		tableIdentifier = new TableIdentifier(null, "Werd", "MetaTable");
-		attributes = res.tableToMetaAttributes( tableIdentifier );
-		assertNotNull(attributes);
-		assertEquals(2, attributes.size());
-		ma = (MetaAttribute) attributes.get("specific-werd");
-		assertEquals(ma.getName(), "specific-werd");
-		assertEquals(ma.getValue(), "a one");
-		
-		ma = (MetaAttribute) attributes.get( "werd-meta" );
-		assertEquals(ma.getName(), "werd-meta");
-		assertEquals(1, ma.getValues().size()); // as long as no inherit this should be one
-		assertEquals("value three", ma.getValue());
-	
-		tableIdentifier = new TableIdentifier(null, null, "Nothing");
-		assertEquals(null, res.tableToMetaAttributes(tableIdentifier));
-		
-		assertNull(res.columnToMetaAttributes(new TableIdentifier("Nothing"), "bogus"));
-		assertNull(res.columnToMetaAttributes( new TableIdentifier(null, "Werd", "MetaTable"), "bogusColumn" ));
-		attributes = res.columnToMetaAttributes( new TableIdentifier(null, "Werd", "MetaTable"), "MetaColumn" );
-		assertEquals(1, attributes.size());
-		ma = (MetaAttribute) attributes.get("specific-column");
-		assertEquals("specific-column",ma.getName());
-		assertEquals("yes a column with meta",ma.getValue());
-		
-	}
-	
 	protected void configure(JDBCMetaDataConfiguration cfg) {
-		super.configure(cfg);		
-		Settings s = cfg.buildSettings();
-		OverrideRepository or = new OverrideRepository();
-		or.addResource(OVERRIDETEST_REVENG_XML);
-		cfg.setReverseEngineeringStrategy(or.getReverseEngineeringStrategy(new DefaultReverseEngineeringStrategy() ) );
+		super.configure(cfg);
+		ReverseEngineeringStrategy repository = getRepository().getReverseEngineeringStrategy(getDefaultStrategy());
+		cfg.setReverseEngineeringStrategy(repository);
 	}
 
-	private String getPropertyTypeName(Property property) {
-		return ( (SimpleValue)property.getValue() ).getTypeName();
+	protected ReverseEngineeringStrategy getDefaultStrategy() {
+		return new DefaultReverseEngineeringStrategy();
 	}
 
-
-	
+	protected OverrideRepository getRepository() {
+		if (this.repository == null) {
+			OverrideRepository or = buildOverrideRepository();
+			or.addResource(revengFilePath());
+			this.repository = or;
+		}
+		return this.repository;
+	}
 	
 	protected String[] getCreateSQL() {
-		
 		return new String[] {
 				"create table dummy (id numeric(10,0) not null, primary key (id) )",
 				"create table defunct_table ( id numeric(10,0) not null, name varchar(20), shortname varchar(5), flag varchar(1), dumid numeric(10,0), primary key (id), foreign key (dumid) references dummy)",                
@@ -511,7 +96,6 @@
 	}
 
 	protected String[] getDropSQL() {
-		
 		return new String[]  {
 				"drop table excolumns",
 				"drop table parent",
@@ -525,8 +109,15 @@
 				
 		};
 	}
+
 	public static Test suite() {
-		return new TestSuite(OverrideBinderTest.class);
+		TestSuite t = new TestSuite(BinderTest.class.getCanonicalName());
+		t.addTestSuite(BasicBinderTest.class);
+		t.addTestSuite(OverrideBinderTest.class);
+		t.addTestSuite(DocBinderTest.class);
+		t.addTestSuite(TypeMappingBinderTest.class);
+		t.addTestSuite(SchemaOverrideBinderTest.class);
+		return t;
 	}
 
 }

Property changes on: src\test\org\hibernate\tool\test\jdbc2cfg\BinderTest.java
___________________________________________________________________
Added: svn:eol-style
   + native

Index: src/test/org/hibernate/tool/test/jdbc2cfg/CompositeIdTest.java
===================================================================
--- src/test/org/hibernate/tool/test/jdbc2cfg/CompositeIdTest.java	(revision 18689)
+++ src/test/org/hibernate/tool/test/jdbc2cfg/CompositeIdTest.java	(working copy)
@@ -17,7 +17,6 @@
 
 import org.hibernate.SessionFactory;
 import org.hibernate.cfg.Configuration;
-import org.hibernate.cfg.JDBCMetaDataConfiguration;
 import org.hibernate.classic.Session;
 import org.hibernate.mapping.Column;
 import org.hibernate.mapping.Component;
@@ -35,249 +34,216 @@
 
 /**
  * @author max
- *
+ * 
  */
 public class CompositeIdTest extends JDBCMetaDataBinderTestCase {
 
-	protected void configure(JDBCMetaDataConfiguration cfg) {
-		super.configure( cfg );		
+	protected String[] getCreateSQL() {
+
+		return new String[] {
+				"create table SimpleLineItem (\r\n" + "   lineItemId varchar not null,\r\n"
+						+ "   customerOrderIdRef varchar,\r\n" + "   productId varchar not null,\r\n"
+						+ "   extraId varchar not null,\r\n" + "   quantity double,\r\n"
+						+ "   primary key (lineItemId)\r\n" + ")",
+				"create table Product (\r\n" + "   productId varchar not null,\r\n"
+						+ "   extraId varchar not null,\r\n" + "   description varchar not null,\r\n"
+						+ "   price double,\r\n" + "   numberAvailable double,\r\n"
+						+ "   primary key (productId, extraId)\r\n" + ")",
+				"create table Customer (\r\n" + "   customerId varchar not null,\r\n" + "   name varchar not null,\r\n"
+						+ "   address varchar not null,\r\n" + "   primary key (customerId)\r\n" + ")",
+				"create table SimpleCustomerOrder (\r\n" + "   customerOrderId varchar not null,\r\n"
+						+ "   customerId varchar not null,\r\n" + "   orderNumber double not null,\r\n"
+						+ "   orderDate date not null,\r\n" + "   primary key (customerOrderId)\r\n" + ")",
+				"alter table SimpleLineItem add constraint toSimpleCustomerOrder foreign key (customerOrderIdRef) references SimpleCustomerOrder",
+				"alter table SimpleLineItem add constraint fromSimpletoProduct foreign key (productId,extraId) references Product",
+				"alter table SimpleCustomerOrder add constraint fromSimpletoCustomer foreign key (customerId) references Customer",
+				"create table LineItem (\r\n" + "   customerIdRef varchar not null,\r\n"
+						+ "   orderNumber double not null,\r\n" + "   productId varchar not null,\r\n"
+						+ "   extraProdId varchar not null,\r\n" + "   quantity double,\r\n"
+						+ "   primary key (customerIdRef, orderNumber, productId, extraProdId)\r\n" + ")",
+
+				"create table CustomerOrder (\r\n" + "   customerId varchar not null,\r\n"
+						+ "   orderNumber double not null,\r\n" + "   orderDate date not null,\r\n"
+						+ "   primary key (customerId, orderNumber)\r\n" + ")",
+
+				"alter table LineItem add constraint toCustomerOrder foreign key (customerIdRef, orderNumber) references CustomerOrder",
+				"alter table LineItem add constraint toProduct foreign key (productId,extraProdId) references Product",
+				"alter table CustomerOrder add constraint toCustomer foreign key (customerId) references Customer", };
+	}
+
+	protected String[] getGenDataSQL() {
+		return new String[] {
+				"insert into PRODUCT (productId, extraId, description, price, numberAvailable) values('PC', '0', 'My PC', 100.0, 23)",
+				"insert into PRODUCT (productId, extraId, description, price, numberAvailable) values('MS', '1', 'My Mouse', 101.0, 23)",
+				"insert into CUSTOMER (customerId, name, address) values('MAX', 'Max Rydahl Andersen', 'Neuchatel')",
+				"insert into CUSTOMERORDER (customerId, orderNumber, orderDate) values ('MAX', 1, '11-11-2005')",
+				"insert into LINEITEM (customerIdref, orderNumber, productId, extraProdId, quantity) values ('MAX', 1, 'PC', '0', 10)",
+				"insert into LINEITEM (customerIdref, orderNumber, productId, extraProdId, quantity) values ('MAX', 1, 'MS', '1', 12)", };
+	}
+
+	protected String[] getDropSQL() {
+		return new String[] { "alter table LineItem drop constraint toCustomerOrder",
+				"alter table LineItem drop constraint toProduct",
+				"alter table CustomerOrder drop constraint toCustomer",
+				"alter table SimpleLineItem drop constraint toSimpleCustomerOrder",
+				"alter table SimpleLineItem drop constraint fromSimpletoProduct",
+				"alter table SimpleCustomerOrder drop constraint fromSimpletoCustomer", "drop table SimpleLineItem ",
+				"drop table Product ", "drop table Customer ", "drop table SimpleCustomerOrder ",
+				"drop table CustomerOrder ", "drop table LineItem ", };
+	}
+
+	public void testMultiColumnForeignKeys() {
+		Table table = getTable(identifier("LineItem"));
+		assertNotNull(table);
+		ForeignKey foreignKey = getForeignKey(table, identifier("toCustomerOrder"));
+		assertNotNull(foreignKey);
+
+		assertEquals(toClassName(identifier("CustomerOrder")), foreignKey.getReferencedEntityName());
+		assertEquals(identifier("LineItem"), foreignKey.getTable().getName());
+
+		assertEquals(2, foreignKey.getColumnSpan());
+		assertEquals(foreignKey.getColumn(0).getName(), "CUSTOMERIDREF");
+		assertEquals(foreignKey.getColumn(1).getName(), "ORDERNUMBER");
+
+		Table tab = getTable(identifier("CUSTOMERORDER"));
+		assertEquals(tab.getPrimaryKey().getColumn(0).getName(), "CUSTOMERID");
+		assertEquals(tab.getPrimaryKey().getColumn(1).getName(), "ORDERNUMBER");
+
+		cfg.buildMappings();
+
+		PersistentClass lineMapping = cfg.getClassMapping(toClassName(identifier("LineItem")));
+
+		assertEquals(4, lineMapping.getIdentifier().getColumnSpan());
+		Iterator columnIterator = lineMapping.getIdentifier().getColumnIterator();
+		assertEquals(((Column) (columnIterator.next())).getName(), "CUSTOMERIDREF");
+		assertEquals(((Column) (columnIterator.next())).getName(), "ORDERNUMBER");
+
+		/*
+		 * Property productproperty = lineMapping.getProperty("Product");
+		 * assertNotNull(productproperty);
+		 */
+
 	}
-    protected String[] getCreateSQL() {
-        
-        return new String[] {
-                "create table SimpleLineItem (\r\n" +
-                "   lineItemId varchar not null,\r\n" +
-                "   customerOrderIdRef varchar,\r\n" +
-                "   productId varchar not null,\r\n" +
-                "   extraId varchar not null,\r\n" +
-                "   quantity double,\r\n" + 
-                "   primary key (lineItemId)\r\n" + 
-                ")",
-                "create table Product (\r\n" + 
-                "   productId varchar not null,\r\n" +                
-                "   extraId varchar not null,\r\n" +
-                "   description varchar not null,\r\n" + 
-                "   price double,\r\n" + 
-                "   numberAvailable double,\r\n" + 
-                "   primary key (productId, extraId)\r\n" + 
-                ")",
-                "create table Customer (\r\n" + 
-                "   customerId varchar not null,\r\n" + 
-                "   name varchar not null,\r\n" + 
-                "   address varchar not null,\r\n" + 
-                "   primary key (customerId)\r\n" + 
-                ")",
-                "create table SimpleCustomerOrder (\r\n" + 
-                "   customerOrderId varchar not null,\r\n" +
-                "   customerId varchar not null,\r\n" + 
-                "   orderNumber double not null,\r\n" + 
-                "   orderDate date not null,\r\n" + 
-                "   primary key (customerOrderId)\r\n" + 
-                ")",
-                "alter table SimpleLineItem add constraint toSimpleCustomerOrder foreign key (customerOrderIdRef) references SimpleCustomerOrder",
-                "alter table SimpleLineItem add constraint fromSimpletoProduct foreign key (productId,extraId) references Product",
-                "alter table SimpleCustomerOrder add constraint fromSimpletoCustomer foreign key (customerId) references Customer",
-                "create table LineItem (\r\n" + 
-                "   customerIdRef varchar not null,\r\n" + 
-                "   orderNumber double not null,\r\n" + 
-                "   productId varchar not null,\r\n" +
-                "   extraProdId varchar not null,\r\n" +
-                "   quantity double,\r\n" + 
-                "   primary key (customerIdRef, orderNumber, productId, extraProdId)\r\n" + 
-                ")",
-                
-                "create table CustomerOrder (\r\n" + 
-                "   customerId varchar not null,\r\n" + 
-                "   orderNumber double not null,\r\n" + 
-                "   orderDate date not null,\r\n" + 
-                "   primary key (customerId, orderNumber)\r\n" + 
-                ")",
-                
-                "alter table LineItem add constraint toCustomerOrder foreign key (customerIdRef, orderNumber) references CustomerOrder",
-                "alter table LineItem add constraint toProduct foreign key (productId,extraProdId) references Product",
-                "alter table CustomerOrder add constraint toCustomer foreign key (customerId) references Customer",                
-        };
-    }
-    
-    protected String[] getGenDataSQL() {
-        return new String[] {
-                "insert into PRODUCT (productId, extraId, description, price, numberAvailable) values('PC', '0', 'My PC', 100.0, 23)",
-                "insert into PRODUCT (productId, extraId, description, price, numberAvailable) values('MS', '1', 'My Mouse', 101.0, 23)",
-                "insert into CUSTOMER (customerId, name, address) values('MAX', 'Max Rydahl Andersen', 'Neuchatel')",
-                "insert into CUSTOMERORDER (customerId, orderNumber, orderDate) values ('MAX', 1, '11-11-2005')", 
-                "insert into LINEITEM (customerIdref, orderNumber, productId, extraProdId, quantity) values ('MAX', 1, 'PC', '0', 10)",
-                "insert into LINEITEM (customerIdref, orderNumber, productId, extraProdId, quantity) values ('MAX', 1, 'MS', '1', 12)",
-        };
-    }
+
+	public void testPossibleKeyManyToOne() {
+		cfg.buildMappings();
+
+		PersistentClass product = cfg.getClassMapping(toClassName(identifier("CustomerOrder")));
+
+		Property identifierProperty = product.getIdentifierProperty();
+
+		assertTrue(identifierProperty.getValue() instanceof Component);
 
-     protected String[] getDropSQL() {
-        return new String[] {   
-                "alter table LineItem drop constraint toCustomerOrder",
-                "alter table LineItem drop constraint toProduct",
-                "alter table CustomerOrder drop constraint toCustomer",
-                "alter table SimpleLineItem drop constraint toSimpleCustomerOrder",
-                "alter table SimpleLineItem drop constraint fromSimpletoProduct",
-                "alter table SimpleCustomerOrder drop constraint fromSimpletoCustomer",
-                "drop table SimpleLineItem ",
-                "drop table Product ",
-                "drop table Customer ",
-                "drop table SimpleCustomerOrder ",
-                "drop table CustomerOrder ",                
-                "drop table LineItem ",                           
-        };
-    }
-     
-     public void testMultiColumnForeignKeys() {
-        Table table = getTable(identifier("LineItem") );
-        assertNotNull(table);
-        ForeignKey foreignKey = getForeignKey(table, identifier("toCustomerOrder") );     
-        assertNotNull(foreignKey);
-                
-        assertEquals(toClassName(identifier("CustomerOrder") ), foreignKey.getReferencedEntityName() );
-        assertEquals(identifier("LineItem"), foreignKey.getTable().getName() );
-        
-        assertEquals(2,foreignKey.getColumnSpan() );
-        assertEquals(foreignKey.getColumn(0).getName(), "CUSTOMERIDREF");
-        assertEquals(foreignKey.getColumn(1).getName(), "ORDERNUMBER");
-        
-        Table tab = getTable(identifier("CUSTOMERORDER"));
-        assertEquals(tab.getPrimaryKey().getColumn(0).getName(), "CUSTOMERID");
-        assertEquals(tab.getPrimaryKey().getColumn(1).getName(), "ORDERNUMBER");
-        
-        cfg.buildMappings();
-        
-        PersistentClass lineMapping = cfg.getClassMapping(toClassName(identifier("LineItem") ) );
-        
-        assertEquals(4,lineMapping.getIdentifier().getColumnSpan() );
-        Iterator columnIterator = lineMapping.getIdentifier().getColumnIterator();
-        assertEquals(((Column)(columnIterator.next())).getName(), "CUSTOMERIDREF");
-        assertEquals(((Column)(columnIterator.next())).getName(), "ORDERNUMBER");
-        
-        
-/*        Property productproperty = lineMapping.getProperty("Product");        
-        assertNotNull(productproperty);*/
-        
-        
-     }
-     
-     public void testPossibleKeyManyToOne() {
-         cfg.buildMappings();
-         
-         PersistentClass product = cfg.getClassMapping( toClassName(identifier("CustomerOrder") ) );
-         
-         Property identifierProperty = product.getIdentifierProperty();
-         
-         assertTrue(identifierProperty.getValue() instanceof Component);
-         
-         Component cmpid = (Component) identifierProperty.getValue();
-         
-         assertEquals(2, cmpid.getPropertySpan() );
-         
-         Iterator iter = cmpid.getPropertyIterator();
-         Property id = (Property) iter.next();
-         Property extraId = (Property) iter.next();
-         
-         checkKeyProperties( id, extraId );
-         
-     }
+		Component cmpid = (Component) identifierProperty.getValue();
+
+		assertEquals(2, cmpid.getPropertySpan());
+
+		Iterator iter = cmpid.getPropertyIterator();
+		Property id = (Property) iter.next();
+		Property extraId = (Property) iter.next();
+
+		checkKeyProperties(id, extraId);
+
+	}
+
 	protected void checkKeyProperties(Property id, Property extraId) {
-		assertEquals(toPropertyName("customerid"), id.getName() );
-         assertEquals(toPropertyName("ordernumber"), extraId.getName() );
-         
-         assertFalse(id.getValue() instanceof ManyToOne);
-         assertFalse(extraId.getValue() instanceof ManyToOne);
+		assertEquals(toPropertyName("customerid"), id.getName());
+		assertEquals(toPropertyName("ordernumber"), extraId.getName());
+
+		assertFalse(id.getValue() instanceof ManyToOne);
+		assertFalse(extraId.getValue() instanceof ManyToOne);
 	}
-     
-     public void testKeyProperty() {
-        cfg.buildMappings();
-        
-        PersistentClass product = cfg.getClassMapping( toClassName(identifier("Product") ) );
-        
-        Property identifierProperty = product.getIdentifierProperty();
-        
-        assertTrue(identifierProperty.getValue() instanceof Component);
-        
-        Component cmpid = (Component) identifierProperty.getValue();
-        
-        assertEquals(2, cmpid.getPropertySpan() );
-        
-        Iterator iter = cmpid.getPropertyIterator();
-        Property id = (Property) iter.next();
-        Property extraId = (Property) iter.next();
-        
-        assertEquals(toPropertyName("productid"), id.getName() );
-        assertEquals(toPropertyName("extraid"), extraId.getName() );
-        
-        assertFalse(id.getValue() instanceof ManyToOne);
-        assertFalse(extraId.getValue() instanceof ManyToOne);
-     }
-     
-     
-     public void testGeneration() throws IOException, SQLException, ClassNotFoundException, InstantiationException, IllegalAccessException {
-        final File outputdir = new File("reverseoutput");
-        outputdir.mkdirs();
-        
-        cfg.buildMappings();
-         
-        Exporter exporter = new HibernateMappingExporter(cfg, outputdir);
-		
-        Exporter javaExp = new POJOExporter(cfg, outputdir);
-        exporter.start();
-        javaExp.start();
-        
-        XMLPrettyPrinter.prettyPrintDirectory(outputdir,".hbm.xml", false);
-        TestHelper.compile(outputdir, outputdir);
-        
-        Configuration derived = new Configuration();
-        
-        derived.addFile(new File(outputdir, "SimplecustomerOrder.hbm.xml") );
-        derived.addFile(new File(outputdir, "SimpleLineItem.hbm.xml") );
-        derived.addFile(new File(outputdir, "Product.hbm.xml") );
-        derived.addFile(new File(outputdir, "Customer.hbm.xml") );
-        derived.addFile(new File(outputdir, "LineItem.hbm.xml") );
-        derived.addFile(new File(outputdir, "CustomerOrder.hbm.xml") );
-        
-        derived.buildMappings();        
-        
-        /*assertNotNull(derived.getClassMapping("org.reveng.Child") );
-        assertNotNull(derived.getClassMapping("org.reveng.Master") );*/
-        URL[] urls = new URL[] { outputdir.toURL() };
-        URLClassLoader ucl = new URLClassLoader(urls, Thread.currentThread().getContextClassLoader() );
-        Thread.currentThread().setContextClassLoader(ucl);
-        SessionFactory factory = derived.buildSessionFactory();
-        Session session = factory.openSession();
-        
-        executeDDL(getGenDataSQL(), false);
-        session.createQuery("from Lineitem").list();
-        List list = session.createQuery("from Product").list();
-        assertEquals(2,list.size() );
-        
-        list = session.createQuery(getCustomerOrderQuery()).list();
-        assertTrue(list.size()>0);
-        
-        Class productIdClass = ucl.loadClass("ProductId");
-        Object object = productIdClass.newInstance();
-        int hash = -1;
-        try {
-        	hash = object.hashCode();
-        } catch(Throwable t) {
-        	fail("Hashcode on new instance should not fail " + t);
-        }
-        assertFalse("hashcode should be different from system", hash==System.identityHashCode(object));
-        
-        factory.close();
-        Thread.currentThread().setContextClassLoader(ucl.getParent() );
-        
-        
-        TestHelper.deleteDir(outputdir);
-        }
+
+	public void testKeyProperty() {
+		cfg.buildMappings();
+
+		PersistentClass product = cfg.getClassMapping(toClassName(identifier("Product")));
+
+		Property identifierProperty = product.getIdentifierProperty();
+
+		assertTrue(identifierProperty.getValue() instanceof Component);
+
+		Component cmpid = (Component) identifierProperty.getValue();
+
+		assertEquals(2, cmpid.getPropertySpan());
+
+		Iterator iter = cmpid.getPropertyIterator();
+		Property id = (Property) iter.next();
+		Property extraId = (Property) iter.next();
+
+		assertEquals(toPropertyName("productid"), id.getName());
+		assertEquals(toPropertyName("extraid"), extraId.getName());
+
+		assertFalse(id.getValue() instanceof ManyToOne);
+		assertFalse(extraId.getValue() instanceof ManyToOne);
+	}
+
+	public void testGeneration() throws IOException, SQLException, ClassNotFoundException, InstantiationException,
+			IllegalAccessException {
+		final File outputdir = new File("reverseoutput");
+		outputdir.mkdirs();
+
+		cfg.buildMappings();
+
+		Exporter exporter = new HibernateMappingExporter(cfg, outputdir);
+
+		Exporter javaExp = new POJOExporter(cfg, outputdir);
+		exporter.start();
+		javaExp.start();
+
+		XMLPrettyPrinter.prettyPrintDirectory(outputdir, ".hbm.xml", false);
+		TestHelper.compile(outputdir, outputdir);
+
+		Configuration derived = new Configuration();
+
+		derived.addFile(new File(outputdir, "SimplecustomerOrder.hbm.xml"));
+		derived.addFile(new File(outputdir, "SimpleLineItem.hbm.xml"));
+		derived.addFile(new File(outputdir, "Product.hbm.xml"));
+		derived.addFile(new File(outputdir, "Customer.hbm.xml"));
+		derived.addFile(new File(outputdir, "LineItem.hbm.xml"));
+		derived.addFile(new File(outputdir, "CustomerOrder.hbm.xml"));
+
+		derived.buildMappings();
+
+		/*
+		 * assertNotNull(derived.getClassMapping("org.reveng.Child") );
+		 * assertNotNull(derived.getClassMapping("org.reveng.Master") );
+		 */
+		URL[] urls = new URL[] { outputdir.toURL() };
+		URLClassLoader ucl = new URLClassLoader(urls, Thread.currentThread().getContextClassLoader());
+		Thread.currentThread().setContextClassLoader(ucl);
+		SessionFactory factory = derived.buildSessionFactory();
+		Session session = factory.openSession();
+
+		executeDDL(getGenDataSQL(), false);
+		session.createQuery("from Lineitem").list();
+		List list = session.createQuery("from Product").list();
+		assertEquals(2, list.size());
+
+		list = session.createQuery(getCustomerOrderQuery()).list();
+		assertTrue(list.size() > 0);
+
+		Class productIdClass = ucl.loadClass("ProductId");
+		Object object = productIdClass.newInstance();
+		int hash = -1;
+		try {
+			hash = object.hashCode();
+		} catch (Throwable t) {
+			fail("Hashcode on new instance should not fail " + t);
+		}
+		assertFalse("hashcode should be different from system", hash == System.identityHashCode(object));
+
+		factory.close();
+		Thread.currentThread().setContextClassLoader(ucl.getParent());
+
+		TestHelper.deleteDir(outputdir);
+	}
+
 	protected String getCustomerOrderQuery() {
 		return "select li.customerorder.id from Lineitem as li";
 	}
 
-	 public static Test suite() {
-			return new TestSuite(CompositeIdTest.class);
-		}
+	public static Test suite() {
+		return new TestSuite(CompositeIdTest.class);
+	}
 }
-     
-
Index: src/test/org/hibernate/tool/test/jdbc2cfg/SearchEscapeStringTest.java
===================================================================
--- src/test/org/hibernate/tool/test/jdbc2cfg/SearchEscapeStringTest.java	(revision 18703)
+++ src/test/org/hibernate/tool/test/jdbc2cfg/SearchEscapeStringTest.java	(working copy)
@@ -58,7 +58,4 @@
 		return new TestSuite( SearchEscapeStringTest.class );
 	}
 
-	protected void setUp() throws Exception {
-		super.setUp();
-	}
 }
Index: src/test/org/hibernate/tool/test/jdbc2cfg/ManyToManyTest.java
===================================================================
--- src/test/org/hibernate/tool/test/jdbc2cfg/ManyToManyTest.java	(revision 18689)
+++ src/test/org/hibernate/tool/test/jdbc2cfg/ManyToManyTest.java	(working copy)
@@ -31,11 +31,6 @@
 
 	private JDBCMetaDataConfiguration localCfg;
 
-	protected void configure(JDBCMetaDataConfiguration cfg) {
-    	super.configure( cfg );    	    
-        
-	}
-	
 	protected void setUp() throws Exception {
 		super.setUp();
 		
@@ -125,9 +120,7 @@
 			.addFile( new File(getOutputDir(), "WorksOnContext.hbm.xml") );
 		
 		configuration.buildMappings();
-		
 	}
-	
 
 	private void assertPropertyNotExist(PersistentClass projectClass, String prop) {
 		try {
Index: src/test/org/hibernate/tool/test/jdbc2cfg/OracleViewsTest.java
===================================================================
--- src/test/org/hibernate/tool/test/jdbc2cfg/OracleViewsTest.java	(revision 18701)
+++ src/test/org/hibernate/tool/test/jdbc2cfg/OracleViewsTest.java	(working copy)
@@ -17,64 +17,54 @@
 
 /**
  * @author max
- *
+ * 
  */
 public class OracleViewsTest extends JDBCMetaDataBinderTestCase {
 
-	
 	/**
 	 * @return
 	 */
 	protected String[] getDropSQL() {
-		return new String[] {
-				"drop table basic",
-				"drop table somecolumnsnopk",
-                "drop table multikeyed",
-                "drop view basicView",
-                "drop synonym weirdname"
-		};	
+		return new String[] { "drop table basic", "drop table somecolumnsnopk", "drop table multikeyed",
+				"drop view basicView", "drop synonym weirdname" };
 	}
 
 	/**
 	 * @return
 	 */
 	protected String[] getCreateSQL() {
-		
+
 		return new String[] {
 				"create table basic ( a int not null, primary key (a) )",
 				"create table somecolumnsnopk ( pk varchar(25) not null, b char, c int not null )",
-                "create table multikeyed ( orderid varchar(10), customerid varchar(10), name varchar(10), primary key(orderid, customerid) )",
-                "create view basicView as select a from basic",
-                "create synonym weirdname for multikeyed",
-                "comment on table basic is 'a basic comment'",
-                "comment on column basic.a is 'a solid key'"
-		};
+				"create table multikeyed ( orderid varchar(10), customerid varchar(10), name varchar(10), primary key(orderid, customerid) )",
+				"create view basicView as select a from basic", "create synonym weirdname for multikeyed",
+				"comment on table basic is 'a basic comment'", "comment on column basic.a is 'a solid key'" };
 	}
 
 	public boolean appliesTo(Dialect dialect) {
 		return dialect instanceof Oracle9Dialect;
 	}
-	
+
 	public void testViewAndSynonyms() throws SQLException {
-				PersistentClass classMapping = cfg.getClassMapping(toClassName("basicview") );
-				assertNotNull(classMapping);
-			
-				classMapping = cfg.getClassMapping(toClassName("weirdname") );
-				assertTrue("If this is not-null synonyms apparently work!",classMapping==null);
+		PersistentClass classMapping = cfg.getClassMapping(toClassName("basicview"));
+		assertNotNull(classMapping);
 
-				// get comments
-				Table table = getTable(identifier("basic"));
-				assertEquals("a basic comment", table.getComment());
-				assertEquals("a solid key", table.getPrimaryKey().getColumn(0).getComment());
-				
-				table = getTable(identifier("multikeyed"));
-				assertNull(table.getComment());
-				assertNull(table.getColumn(0).getComment());
+		classMapping = cfg.getClassMapping(toClassName("weirdname"));
+		assertTrue("If this is not-null synonyms apparently work!", classMapping == null);
+
+		// get comments
+		Table table = getTable(identifier("basic"));
+		assertEquals("a basic comment", table.getComment());
+		assertEquals("a solid key", table.getPrimaryKey().getColumn(0).getComment());
+
+		table = getTable(identifier("multikeyed"));
+		assertNull(table.getComment());
+		assertNull(table.getColumn(0).getComment());
 	}
 	
-
 	public static Test suite() {
 		return new TestSuite(OracleViewsTest.class);
 	}
-    
+
 }
Index: src/test/org/hibernate/tool/test/DriverMetaDataTest.java
===================================================================
--- src/test/org/hibernate/tool/test/DriverMetaDataTest.java	(revision 18689)
+++ src/test/org/hibernate/tool/test/DriverMetaDataTest.java	(working copy)
@@ -9,101 +9,93 @@
 import org.hibernate.cfg.reveng.dialect.MetaDataDialect;
 import org.hibernate.tool.JDBCMetaDataBinderTestCase;
 
-
 /**
  * Various tests to validate the "sanity" of the jdbc drivers meta data implementation.
  * 
  * @author Max Rydahl Andersen
- *
+ * 
  */
 public class DriverMetaDataTest extends JDBCMetaDataBinderTestCase {
 
-protected String[] getCreateSQL() {
-		
-	return new String[] {
+	protected String[] getCreateSQL() {
+
+		return new String[] {
 				"create table tab_master ( id char not null, name varchar(20), primary key (id) )",
-				"create table tab_child  ( childid character not null, masterref character, primary key (childid), foreign key (masterref) references tab_master(id) )",
-		};
+				"create table tab_child  ( childid character not null, masterref character, primary key (childid), foreign key (masterref) references tab_master(id) )", };
 	}
 
 	protected String[] getDropSQL() {
-		
-		return new String[]  {				
-				"drop table tab_child",
-				"drop table tab_master",					
-		};
+
+		return new String[] { "drop table tab_child", "drop table tab_master", };
 	}
 
 	public void testExportedKeys() {
-	
+
 		MetaDataDialect dialect = new JDBCMetaDataDialect();
-		
+
 		Settings settings = cfg.buildSettings();
-		
-		dialect.configure( settings.getConnectionProvider(), settings.getSQLExceptionConverter() );
-		
-		Iterator tables = dialect.getTables( settings.getDefaultCatalogName(), settings.getDefaultSchemaName(), identifier("tab_master") ); 
-		
+
+		dialect.configure(settings.getConnectionProvider(), settings.getSQLExceptionConverter());
+
+		Iterator tables = dialect.getTables(settings.getDefaultCatalogName(), settings.getDefaultSchemaName(),
+				identifier("tab_master"));
+
 		boolean foundMaster = false;
-		while(tables.hasNext()) {
+		while (tables.hasNext()) {
 			Map map = (Map) tables.next();
-			
+
 			String tableName = (String) map.get("TABLE_NAME");
 			String schemaName = (String) map.get("TABLE_SCHEM");
-	        String catalogName = (String) map.get("TABLE_CAT");
-	        
-	        if(tableName.equals(identifier("tab_master"))) {
+			String catalogName = (String) map.get("TABLE_CAT");
+
+			if (tableName.equals(identifier("tab_master"))) {
 				foundMaster = true;
-				Iterator exportedKeys = dialect.getExportedKeys( catalogName, schemaName, tableName );
+				Iterator exportedKeys = dialect.getExportedKeys(catalogName, schemaName, tableName);
 				int cnt = 0;
-				while ( exportedKeys.hasNext() ) {
+				while (exportedKeys.hasNext()) {
 					Map element = (Map) exportedKeys.next();
 					cnt++;
 				}
-				assertEquals(1,cnt);
-			/*	assertEquals(schemaName, settings.getDefaultSchemaName());
-				assertEquals(catalogName, settings.getDefaultCatalogName());*/
+				assertEquals(1, cnt);
+				/*
+				 * assertEquals(schemaName, settings.getDefaultSchemaName());
+				 * assertEquals(catalogName, settings.getDefaultCatalogName());
+				 */
 			}
 		}
-		
+
 		assertTrue(foundMaster);
 	}
 
 	public void testDataType() {
-		
+
 		MetaDataDialect dialect = new JDBCMetaDataDialect();
-		
+
 		Settings settings = cfg.buildSettings();
-		
-		dialect.configure( settings.getConnectionProvider(), settings.getSQLExceptionConverter() );
-		
-		Iterator tables = dialect.getColumns( settings.getDefaultCatalogName(), settings.getDefaultSchemaName(), "test", null ); 
-		
-		
-		while(tables.hasNext()) {
+
+		dialect.configure(settings.getConnectionProvider(), settings.getSQLExceptionConverter());
+
+		Iterator tables = dialect.getColumns(settings.getDefaultCatalogName(), settings.getDefaultSchemaName(), "test",
+				null, false);
+
+		while (tables.hasNext()) {
 			Map map = (Map) tables.next();
-			
+
 			System.out.println(map);
-			
+
 		}
 	}
-	
+
 	public void testCaseTest() {
-		
-	
 		MetaDataDialect dialect = new JDBCMetaDataDialect();
-		
+
 		Settings settings = cfg.buildSettings();
-		
-		dialect.configure( settings.getConnectionProvider(), settings.getSQLExceptionConverter() );
-		
-		Iterator tables = dialect.getTables( settings.getDefaultCatalogName(), settings.getDefaultSchemaName(), identifier( "TAB_MASTER"));
-		
-		assertHasNext( 1,	tables );
-		
-		
-		
-	}
+
+		dialect.configure(settings.getConnectionProvider(), settings.getSQLExceptionConverter());
 
-	
+		Iterator tables = dialect.getTables(settings.getDefaultCatalogName(), settings.getDefaultSchemaName(),
+				identifier("TAB_MASTER"));
+
+		assertHasNext(1, tables);
+	}
 }
Index: src/test/org/hibernate/tool/ant/HibernateToolTest.java
===================================================================
--- src/test/org/hibernate/tool/ant/HibernateToolTest.java	(revision 18694)
+++ src/test/org/hibernate/tool/ant/HibernateToolTest.java	(working copy)
@@ -198,6 +198,4 @@
 	public static Test suite() {
 		return new TestSuite(HibernateToolTest.class);
 	}
-
-	
 }
Index: src/test/org/hibernate/tool/JDBCMetaDataBinderTestCase.java
===================================================================
--- src/test/org/hibernate/tool/JDBCMetaDataBinderTestCase.java	(revision 18689)
+++ src/test/org/hibernate/tool/JDBCMetaDataBinderTestCase.java	(working copy)
@@ -4,161 +4,183 @@
  */
 package org.hibernate.tool;
 
+import java.io.File;
 import java.sql.Connection;
 import java.sql.DatabaseMetaData;
 import java.sql.SQLException;
 import java.sql.Statement;
 import java.util.Iterator;
 
-
+import org.apache.tools.ant.util.FileUtils;
 import org.hibernate.cfg.Configuration;
 import org.hibernate.cfg.JDBCMetaDataConfiguration;
 import org.hibernate.cfg.Settings;
 import org.hibernate.cfg.reveng.TableIdentifier;
-import org.hibernate.cfg.reveng.dialect.JDBCMetaDataDialect;
+import org.hibernate.dialect.Dialect;
+import org.hibernate.dialect.HSQLDialect;
 import org.hibernate.mapping.ForeignKey;
 import org.hibernate.mapping.Table;
 
 /**
  * @author max
- *
+ * 
  */
 public abstract class JDBCMetaDataBinderTestCase extends BaseTestCase {
 
 	public JDBCMetaDataBinderTestCase() {
-		super( null );
+		super(null);
 	}
-	
+
 	public JDBCMetaDataBinderTestCase(String output) {
 		super(null, output);
 	}
 
-	/*static*/ protected JDBCMetaDataConfiguration cfg;
+	/* static */protected JDBCMetaDataConfiguration cfg;
+
+	private Exception setUpException;
 
-    private static boolean storesLowerCaseIdentifiers;
+	private static boolean storesLowerCaseIdentifiers;
 
-    private static boolean storesUpperCaseIdentifiers;
+	private static boolean storesUpperCaseIdentifiers;
 	
+	protected abstract String[] getCreateSQL();
+
+	protected abstract String[] getDropSQL();
+
+	protected void setUp() throws Exception {
+		cfg = new JDBCMetaDataConfiguration();
+		configure(cfg);
+		if (getName().equals(firstTest())) { // only do if we haven't done it before - to save time!
+			try {
+				try {
+					executeDDL(getDropSQL(), true);
+					dropDatabase();
+				} catch (SQLException se) {
+					System.err.println("Error while dropping - normally ok.");
+					se.printStackTrace();
+				}
+				
+				String[] sqls = getCreateSQL();
+				executeDDL(sqls, true);
+			} catch (Exception e){
+				this.setUpException = e;
+			}
+		}
+		try {
+			cfg.readFromJDBC();
+		} catch (Exception e) {
+			this.setUpException = e;
+		}
+	}
+
+	protected void tearDown() throws Exception {
+		if(getName().equals(lastTest())) {
+			executeDDL(getDropSQL(), true);
+
+			//drop entire databse
+			dropDatabase();
+
+			assertNoTables();
+		}
+		if(this.setUpException != null) {
+			throw setUpException;
+		}
+		super.tearDown();
+	}
+
+	private void dropDatabase() throws InstantiationException, IllegalAccessException, ClassNotFoundException,
+			SQLException {
+		Dialect dialect = (Dialect) Class.forName(cfg.getProperty("hibernate.dialect")).newInstance();
+		if(dialect.getClass() == HSQLDialect.class) {
+			FileUtils.delete(new File("testdb"));
+		} else {
+			String[] dropSQLs = cfg.generateDropSchemaScript(dialect);
+			executeDDL(dropSQLs, true);
+		}
+	}
+
 	/** should this maybe be on dialect ? **/
 	protected String identifier(String actual) {
-		if(storesLowerCaseIdentifiers) {
+		if (storesLowerCaseIdentifiers) {
 			return actual.toLowerCase();
-		} 
-		else if (storesUpperCaseIdentifiers) {
+		} else if (storesUpperCaseIdentifiers) {
 			return actual.toUpperCase();
-		} 
-		else {
+		} else {
 			return actual;
-		}			
+		}
 	}
-	
+
 	/**
-	 * Tries to adjust for different behaviors on databases regarding cases on identifiers.
-	 * Used if you don't care about cases in comparisons.
+	 * Tries to adjust for different behaviors on databases regarding cases on identifiers. Used if
+	 * you don't care about cases in comparisons.
 	 * 
 	 * @param expected
 	 * @param actual
 	 */
 	protected void assertEqualIdentifiers(String expected, String actual) {
-		assertEquals(identifier(expected), identifier(actual) );
+		assertEquals(identifier(expected), identifier(actual));
 	}
-	
+
 	/**
 	 * @param sqls
 	 * @throws SQLException
 	 */
-	protected void executeDDL(String[] sqls, boolean ignoreErrors) throws SQLException {		
+	protected void executeDDL(String[] sqls, boolean ignoreErrors) throws SQLException {
 		Configuration configuration = new Configuration();
 		Settings testSettings = configuration.buildSettings();
-		
-		if(!appliesTo( testSettings.getDialect() )) {
-			fail("test case does not apply to " + testSettings.getDialect());
+
+		if (!appliesTo(testSettings.getDialect())) {
+//			fail("test case does not apply to " + testSettings.getDialect());
 			return; // don't do anything to avoid crippled db
 		}
-		
+
 		Statement statement = null;
 		Connection con = null;
-        try {
-        	
-		con = testSettings.getConnectionProvider().getConnection();
-		
-		DatabaseMetaData metaData = con.getMetaData();
-		storesLowerCaseIdentifiers = metaData.storesLowerCaseIdentifiers();
-        storesUpperCaseIdentifiers = metaData.storesUpperCaseIdentifiers();
-        
-		
-		statement = con.createStatement();
-		
-		
-		
-		for (int i = 0; i < sqls.length; i++) {
-			String ddlsql = sqls[i];
-			System.out.println("Execute: " + ddlsql);
-			
-            try {            	
-            	statement.execute(ddlsql);
-            } 
-            catch (SQLException se) {
-            	if(ignoreErrors) {
-            		System.err.println(se.toString() + " for " + ddlsql);
-            	} else {
-            		throw se;
-            	}
-            }
-		}
-		con.commit();
-        } finally {
-        	if (statement!=null) statement.close();
-        	testSettings.getConnectionProvider().closeConnection(con);
-        	
-        }
-	}
+		try {
+
+			con = testSettings.getConnectionProvider().getConnection();
+
+			DatabaseMetaData metaData = con.getMetaData();
+			storesLowerCaseIdentifiers = metaData.storesLowerCaseIdentifiers();
+			storesUpperCaseIdentifiers = metaData.storesUpperCaseIdentifiers();
 
-	protected abstract String[] getCreateSQL();
-	protected abstract String[] getDropSQL();
+			statement = con.createStatement();
 
-	protected void setUp() throws Exception {
-		super.setUp();
-		if(cfg==null) { // only do if we haven't done it before - to save time!
+			for (int i = 0; i < sqls.length; i++) {
+				String ddlsql = sqls[i];
+				System.out.println("Execute: " + ddlsql);
 
-            try {
-                executeDDL(getDropSQL(), true);
-            }
-            catch (SQLException se) {
-                System.err.println("Error while dropping - normally ok.");
-                se.printStackTrace();
-            }		
-				
-		cfg = new JDBCMetaDataConfiguration();		
-		configure(cfg);
-		
-		String[] sqls = getCreateSQL();
-		
-        executeDDL(sqls, false);
-		
-		cfg.readFromJDBC();			
+				try {
+					statement.execute(ddlsql);
+				} catch (SQLException se) {
+					if (ignoreErrors) {
+						System.err.println(se.toString() + " for " + ddlsql);
+					} else {
+						throw se;
+					}
+				}
+			}
+			con.commit();
+		} finally {
+			if (statement != null)
+				statement.close();
+			testSettings.getConnectionProvider().closeConnection(con);
 		}
 	}
 
-   protected void tearDown() throws Exception {
-        executeDDL(getDropSQL(), false);
-        
-        super.tearDown();
-    }
 	/**
 	 * @param cfg2
 	 */
 	protected void configure(JDBCMetaDataConfiguration cfg) {
-		
-		
+
 	}
-	
+
 	/**
 	 * @param column
 	 * @return
 	 */
 	protected String toPropertyName(String column) {
-		return cfg.getReverseEngineeringStrategy().columnToPropertyName(null,column);
+		return cfg.getReverseEngineeringStrategy().columnToPropertyName(null, column);
 	}
 
 	/**
@@ -166,65 +188,70 @@
 	 * @return
 	 */
 	protected String toClassName(String table) {
-		return cfg.getReverseEngineeringStrategy().tableToClassName(new TableIdentifier(null,null,table) );
+		return cfg.getReverseEngineeringStrategy().tableToClassName(new TableIdentifier(null, null, table));
+	}
+
+	/**
+	 * Return the first foreignkey with the matching name ... there actually might be multiple
+	 * foreignkeys with same name, but then they point to different entitities.
+	 * 
+	 * @param table
+	 * @param fkName
+	 * @return
+	 */
+	protected ForeignKey getForeignKey(Table table, String fkName) {
+		Iterator iter = table.getForeignKeyIterator();
+		while (iter.hasNext()) {
+			ForeignKey fk = (ForeignKey) iter.next();
+			if (fk.getName().equals(fkName)) {
+				return fk;
+			}
+		}
+		return null;
 	}
 
-    /**
-     * Return the first foreignkey with the matching name ... there actually might be multiple foreignkeys with same name, but then they point to different entitities.
-     * @param table
-     * @param fkName
-     * @return
-     */
-    protected ForeignKey getForeignKey(Table table, String fkName) {
-        Iterator iter = table.getForeignKeyIterator();
-        while(iter.hasNext() ) {
-            ForeignKey fk = (ForeignKey) iter.next();
-            if(fk.getName().equals(fkName) ) {
-                return fk;
-            }
-        }
-        return null;
-    }
-    
-    /**
-     * Find the first table matching the name (without looking at schema/catalog)
-     * @param tabName
-     * @return
-     */
-    protected Table getTable(String tabName) {
-        return getTable( cfg, tabName );
-    }
+	/**
+	 * Find the first table matching the name (without looking at schema/catalog)
+	 * 
+	 * @param tabName
+	 * @return
+	 */
+	protected Table getTable(String tabName) {
+		return getTable(cfg, tabName);
+	}
 
 	protected Table getTable(Configuration cfg, String tabName) {
 		Iterator iter = cfg.getTableMappings();
-        while(iter.hasNext() ) {
-            Table table = (Table) iter.next();
-            if(table.getName().equals(tabName) ) {
-                return table;
-            }
-        }
-        return null;
+		while (iter.hasNext()) {
+			Table table = (Table) iter.next();
+			if (table.getName().equals(tabName)) {
+				return table;
+			}
+		}
+		return null;
 	}
- 
+
 	protected Table getTable(Configuration cfg, String schemaName, String tabName) {
 		Iterator iter = cfg.getTableMappings();
-        while(iter.hasNext() ) {
-            Table table = (Table) iter.next();
-            if(table.getName().equals(tabName) && safeEquals(schemaName, table.getSchema())) {
-                return table;
-            }
-        }
-        return null;
+		while (iter.hasNext()) {
+			Table table = (Table) iter.next();
+			if (table.getName().equals(tabName) && safeEquals(schemaName, table.getSchema())) {
+				return table;
+			}
+		}
+		return null;
 	}
-	
+
 	private boolean safeEquals(Object value, Object tf) {
-		if(value==tf) return true;
-		if(value==null) return false;
+		if (value == tf)
+			return true;
+		if (value == null)
+			return false;
 		return value.equals(tf);
 	}
 
 	public Configuration getConfiguration() {
 		return cfg;
 	}
-	
+
 }
Index: src/test/org/hibernate/tool/hbm2x/IncrementalSchemaReadingTest.java
===================================================================
--- src/test/org/hibernate/tool/hbm2x/IncrementalSchemaReadingTest.java	(revision 18689)
+++ src/test/org/hibernate/tool/hbm2x/IncrementalSchemaReadingTest.java	(working copy)
@@ -5,22 +5,16 @@
 package org.hibernate.tool.hbm2x;
 
 import java.util.ArrayList;
-import java.util.HashSet;
 import java.util.Iterator;
 import java.util.List;
-import java.util.Set;
 
-import org.hibernate.cfg.Environment;
-import org.hibernate.cfg.JDBCMetaDataConfiguration;
 import org.hibernate.cfg.JDBCReaderFactory;
 import org.hibernate.cfg.Settings;
 import org.hibernate.cfg.reveng.DatabaseCollector;
 import org.hibernate.cfg.reveng.DefaultDatabaseCollector;
 import org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy;
 import org.hibernate.cfg.reveng.JDBCReader;
-import org.hibernate.cfg.reveng.OverrideRepository;
 import org.hibernate.cfg.reveng.SchemaSelection;
-import org.hibernate.cfg.reveng.TableIdentifier;
 import org.hibernate.cfg.reveng.dialect.JDBCMetaDataDialect;
 import org.hibernate.mapping.Table;
 import org.hibernate.tool.JDBCMetaDataBinderTestCase;
@@ -34,11 +28,6 @@
  */
 public class IncrementalSchemaReadingTest extends JDBCMetaDataBinderTestCase {
 	
-	
-	protected void configure(JDBCMetaDataConfiguration cfg) {
-		super.configure( cfg );
-	}
-	
 	public class MockedMetaDataDialect extends JDBCMetaDataDialect {
 		List gottenTables = new ArrayList();
 		public Iterator getTables(String catalog, String schema, String table) {
@@ -98,8 +87,6 @@
 		assertSame(firstChild, dc.getTable( null, null, "CHILD" ));
 		assertHasNext( 1, firstChild.getForeignKeyIterator() );
 		assertHasNext( 0, finalMaster.getForeignKeyIterator() );
-		
-				
 	}
 
 	protected String[] getCreateSQL() {
Index: src/test/org/hibernate/tool/hbm2x/Hbm2JavaTest.java
===================================================================
--- src/test/org/hibernate/tool/hbm2x/Hbm2JavaTest.java	(revision 18689)
+++ src/test/org/hibernate/tool/hbm2x/Hbm2JavaTest.java	(working copy)
@@ -89,7 +89,7 @@
 		
 		File file = new File( getOutputDir(), "org/hibernate/tool/hbm2x/FatherComponent.java" );
 		
-		assertEquals("test", findFirstString("testParent", file));
+		assertEquals("     private Customer testParent;", findFirstString("testParent", file));
 	}
 	
 	public void testNoVelocityLeftOvers() {
Index: src/test/org/hibernate/tool/hbm2x/DocExporterTest.java
===================================================================
--- src/test/org/hibernate/tool/hbm2x/DocExporterTest.java	(revision 18689)
+++ src/test/org/hibernate/tool/hbm2x/DocExporterTest.java	(working copy)
@@ -35,9 +35,6 @@
 		exporter.start();
 	}
 	
-	protected void tearDown() throws Exception {
-		super.tearDown();
-	}
     public void testExporter() {
     	
     	assertFileAndExists(new File(getOutputDir(), "header.html") );
@@ -46,13 +43,13 @@
     	assertFileAndExists(new File(getOutputDir(), "assets/doc-style.css") );
     	assertFileAndExists(new File(getOutputDir(), "assets/hibernate_logo.gif") );
     	
-    	assertFileAndExists(new File(getOutputDir(), "tables/PUBLIC/summary.html") );
-    	assertFileAndExists(new File(getOutputDir(), "tables/PUBLIC/Customer.html") );
-    	assertFalse(new File(getOutputDir(), "tables/PUBLIC/UPerson.html").exists() );
-    	assertFileAndExists(new File(getOutputDir(), "tables/PUBLIC/CROWN_USERS.html") );
+    	assertFileAndExists(new File(getOutputDir(), "tables/default/summary.html") );
+    	assertFileAndExists(new File(getOutputDir(), "tables/default/Customer.html") );
+    	assertFalse(		new File(getOutputDir(), "tables/default/UPerson.html").exists() );
+    	assertFileAndExists(new File(getOutputDir(), "tables/default/CROWN_USERS.html") );
     	
     	assertFileAndExists(new File(getOutputDir(), "entities/org/hibernate/tool/hbm2x/Customer.html") );
-    	assertTrue(new File(getOutputDir(), "entities/org/hibernate/tool/hbm2x/UPerson.html").exists() );
+    	assertTrue(			new File(getOutputDir(), "entities/org/hibernate/tool/hbm2x/UPerson.html").exists() );
     	assertFileAndExists(new File(getOutputDir(), "entities/org/hibernate/tool/hbm2x/UUser.html") );
     	
     	assertFileAndExists(new File(getOutputDir(), "entities/entitygraph.dot"));
@@ -66,7 +63,7 @@
     
     public void testCommentIncluded() {
     	//A unique customer comment!
-    	File tableFile = new File(getOutputDir(), "tables/PUBLIC/Customer.html");
+    	File tableFile = new File(getOutputDir(), "tables/default/Customer.html");
 		assertFileAndExists(tableFile );
 		
 		assertNotNull(findFirstString("A unique customer comment!", tableFile));
Index: src/test/org/hibernate/tool/hbm2x/DefaultSchemaCatalogTest.java
===================================================================
--- src/test/org/hibernate/tool/hbm2x/DefaultSchemaCatalogTest.java	(revision 18689)
+++ src/test/org/hibernate/tool/hbm2x/DefaultSchemaCatalogTest.java	(working copy)
@@ -27,11 +27,6 @@
  */
 public class DefaultSchemaCatalogTest extends JDBCMetaDataBinderTestCase {
 	
-	
-	protected void configure(JDBCMetaDataConfiguration cfg) {
-		super.configure( cfg );
-	}
-	
 	public void testReadOnlySpecificSchema() {
 		
 		JDBCMetaDataConfiguration configuration = new JDBCMetaDataConfiguration();
@@ -56,8 +51,8 @@
 		TableIdentifier masterid = TableIdentifier.create(catmaster);
 		TableIdentifier childid = TableIdentifier.create(catchild);
 		
-		assertEquals(new TableIdentifier(null, "OVRTEST", "CATMASTER"), masterid);
-		assertEquals(new TableIdentifier(null, "OVRTEST", "CATCHILD"), childid);
+		assertEquals(new TableIdentifier(null, null, "CATMASTER"), masterid);
+		assertEquals(new TableIdentifier(null, null, "CATCHILD"), childid);
 		
 	}
 
Index: src/test/org/hibernate/tool/hbm2x/hbm2hbmxml/Hbm2HbmXmlTest.java
===================================================================
--- src/test/org/hibernate/tool/hbm2x/hbm2hbmxml/Hbm2HbmXmlTest.java	(revision 18689)
+++ src/test/org/hibernate/tool/hbm2x/hbm2hbmxml/Hbm2HbmXmlTest.java	(working copy)
@@ -42,8 +42,6 @@
 
 	protected void setUp() throws Exception {
 		super.setUp();
-		
-		
 		hbmexporter = new HibernateMappingExporter(getCfg(), getOutputDir() );
 		hbmexporter.start();		
 	}
@@ -88,7 +86,7 @@
 		Element root = document.getRootElement();
 		
 		// There are 7 attributes because there are defaults defined by the DTD makes up the missing entries
-		assertEquals("Unexpected number of hibernate-mapping elements ", 7, root.attributeCount() );
+		assertEquals("Unexpected number of hibernate-mapping attributes ", 7, root.attributeCount() );
 		assertEquals("Unexpected package name", "org.hibernate.tool.hbm2x.hbm2hbmxml", root.attribute("package").getStringValue() );
 		assertEquals("Unexpected schema name", "myschema", root.attribute("schema").getStringValue() );
 		assertEquals("Unexpected mycatalog name", "mycatalog", root.attribute("catalog").getStringValue() );
@@ -120,7 +118,7 @@
 		Element root = document.getRootElement();
 		
 		// There are 5 attributes because there are non-defaults not set for this test
-		assertEquals("Unexpected number of hibernate-mapping elements ", 5, root.attributeCount() );
+		assertEquals("Unexpected number of hibernate-mapping attributes ", 5, root.attributeCount() );
 		assertEquals("Unexpected package name", "org.hibernate.tool.hbm2x.hbm2hbmxml", root.attribute("package").getStringValue() );
 		assertEquals("Unexpected access setting", "field", root.attribute("default-access").getStringValue() );
 		assertEquals("Unexpected cascade setting", "save-update", root.attribute("default-cascade").getStringValue() );
@@ -226,7 +224,7 @@
 		Element root = document.getRootElement();
 		
 		// There are 5 attributes because there are non-defaults not set for this test
-		assertEquals("Unexpected number of hibernate-mapping elements ", 5, root.attributeCount() );
+		assertEquals("Unexpected number of hibernate-mapping attributes ", 5, root.attributeCount() );
 		assertEquals("Unexpected package name", "org.hibernate.tool.hbm2x.hbm2hbmxml", root.attribute("package").getStringValue() );
 		assertEquals("Unexpected access setting", "property", root.attribute("default-access").getStringValue() );
 		assertEquals("Unexpected cascade setting", "none", root.attribute("default-cascade").getStringValue() );
@@ -258,7 +256,7 @@
 		Element root = document.getRootElement();
 		
 		// There are 5 attributes because there are non-defaults not set for this test
-		assertEquals("Unexpected number of hibernate-mapping elements ", 5, root.attributeCount() );
+		assertEquals("Unexpected number of hibernate-mapping attributes ", 5, root.attributeCount() );
 		assertEquals("Unexpected package name", "org.hibernate.tool.hbm2x.hbm2hbmxml", root.attribute("package").getStringValue() );
 		assertEquals("Unexpected access setting", "false", root.attribute("default-lazy").getStringValue() );
 		assertEquals("Unexpected cascade setting", "false", root.attribute("auto-import").getStringValue() );
@@ -283,7 +281,7 @@
 
 		xpath = DocumentHelper.createXPath("//hibernate-mapping/class/id/generator/param");
 		list = xpath.selectNodes(document);
-		assertTrue("Expected to get no generator param elements", list.size() == 0);
+		assertTrue("Expected to get no generator param elements", list.isEmpty());
 		
 	}
     
@@ -307,12 +305,12 @@
 		xpath = DocumentHelper.createXPath("//hibernate-mapping/class/id/generator/param");
 		list = xpath.selectNodes(document);
 		assertEquals("Expected to get correct number of generator param elements", 2, list.size() );
-		Attribute paramTableAtt = ( (Element)list.get(0) ).attribute("name");
+		Attribute paramTableAtt = ( (Element)list.get(1) ).attribute("name");
 		assertEquals("Unexpected generator param name", "table", paramTableAtt.getStringValue() );
-		Attribute paramColumnAtt = ( (Element)list.get(1) ).attribute("name");
+		Attribute paramColumnAtt = ( (Element)list.get(0) ).attribute("name");
 		assertEquals("Unexpected generator param name", "column", paramColumnAtt.getStringValue() );
-		assertEquals("Unexpected param value for table", "uni_table", ( (Element)list.get(0) ).getStringValue() );
-		assertEquals("Unexpected param value for column", "next_hi_value", ( (Element)list.get(1) ).getStringValue() );
+		assertEquals("Unexpected param value for column", "next_hi_value", ( (Element)list.get(0) ).getStringValue() );
+		assertEquals("Unexpected param value for table", "uni_table", ( (Element)list.get(1) ).getStringValue() );
     }
 
 	public void testGeneralHbmSettingsQuery()  throws Exception {
Index: src/templates/seam/faces-config.xml.ftl
===================================================================
--- src/templates/seam/faces-config.xml.ftl	(revision 18689)
+++ src/templates/seam/faces-config.xml.ftl	(working copy)
@@ -1,8 +1,5 @@
 <?xml version="1.0" encoding="UTF-8"?>
-<!DOCTYPE faces-config 
-PUBLIC "-//Sun Microsystems, Inc.//DTD JavaServer Faces Config 1.0//EN"
-                            "http://java.sun.com/dtd/web-facesconfig_1_0.dtd">
-<faces-config>
+<faces-config xmlns="http://java.sun.com/xml/ns/javaee" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.0" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-facesconfig_1_0.xsd">
 
 <#foreach entity in c2j.getPOJOIterator(cfg.getClassMappings())>
 	<!-- navigation rules for ${entity.qualifiedDeclarationName} -->
Index: src/testsupport/anttest-build.xml
===================================================================
--- src/testsupport/anttest-build.xml	(revision 18694)
+++ src/testsupport/anttest-build.xml	(working copy)
@@ -1,7 +1,7 @@
 <project name="anttest">
-	<property name="hibernate-core.jar" location="../../../../hibernate-3.1/hibernate3.jar" />
-	<property name="hibernate-core.home" location="../../../../hibernate3" />
-	<property name="hibernate-core.lib.dir" location="${hibernate-core.home}/lib" />
+    <property name="hibernate-core.home" location="C:/powerlogic/jcompany52/servers/fakeserver/qualicopy/WEB-INF/lib"/>
+    <property name="hibernate-core.jar" location="${hibernate-core.home}/hibernate-plc-3.2.5.1-GA.jar"/>
+	<property name="hibernate-core.lib.dir" location="${hibernate-core.home}" />
 	<property name="build.dir" location="../../build/anttest" />
 	<property file="../../etc/hibernate.properties" />
 
@@ -17,7 +17,7 @@
 
 		<pathelement location="${hibernate-core.jar}" />
 		<pathelement path="../../lib/freemarker.jar" />
-		<pathelement path="${hibernate-core.home}\jdbc\hsqldb.jar" />
+		<pathelement path="${hibernate-core.home}/hsqldb.jar" />
 	</path>
 
 
@@ -47,6 +47,46 @@
 
 	</target>
 
+	<target name="testupdateschema">
+		<taskdef name="cleanup"  classname="org.hibernate.tool.ant.HibernateToolTask"/>
+
+		<cleanup destdir="${build.dir}/updateschema">
+			<configuration propertyfile="../../etc/hibernate.properties">
+				<fileset dir="../test" id="id">
+					<include name="**/*Floor.hbm.xml" />
+					<include name="**/*Wall.hbm.xml" />
+				</fileset>
+			</configuration>
+			<!-- cleanup database -->
+			<hbm2ddl drop="true" create="false"/>
+		</cleanup>
+
+		<taskdef name="hibernatetool" classname="org.hibernate.tool.ant.HibernateToolTask" />
+		<!-- Generating initial state -->
+		<hibernatetool destdir="${build.dir}/updateschema">
+			<configuration propertyfile="../../etc/hibernate.properties">
+				<fileset dir="../test" id="id">
+					<include name="**/*Floor.hbm.xml" />
+				</fileset>
+			</configuration>
+			<hbm2ddl console="true" export="true" format="true" create="true" drop="true"/>
+		</hibernatetool>
+
+		<taskdef name="updatetool" classname="org.hibernate.tool.ant.HibernateToolTask" />
+		<delete dir="${build.dir}/updateschema"/>
+		<mkdir dir="${build.dir}/updateschema"/>
+		<!-- Should be generate a DDL for Wall entity -->
+		<updatetool destdir="${build.dir}/updateschema">
+			<configuration propertyfile="../../etc/hibernate.properties">
+				<fileset dir="../test" id="id">
+					<include name="**/*Floor.hbm.xml" />
+					<include name="**/*Wall.hbm.xml" />
+				</fileset>
+			</configuration>
+			<hbm2ddl console="true" export="true" format="true" outputfilename="updateschema.sql"/>
+		</updatetool>
+	</target>
+
 	<target name="testantjdbccfg">
 		<taskdef name="hibernatetool" classname="org.hibernate.tool.ant.HibernateToolTask" classpathref="tasks.classpath" />
 		<property file="../etc/hibernate.properties" prefix="tools" />
