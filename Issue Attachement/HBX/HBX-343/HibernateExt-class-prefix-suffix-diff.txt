
C:\work\hibernate-3>cvs -z3 -d:pserver:anonymous@cvs.sourceforge.net:/cvsroot/hibernate diff -u HibernateExt 
? HibernateExt/build
? HibernateExt/lib
? HibernateExt/rebuild-tools.bat
? HibernateExt/org.hibernate.eclipse/.settings
? HibernateExt/org.hibernate.eclipse.console/.settings
? HibernateExt/org.hibernate.eclipse.help/.settings
? HibernateExt/org.hibernate.eclipse.mapper/.settings
Index: HibernateExt/build.bat
===================================================================
RCS file: /cvsroot/hibernate/HibernateExt/build.bat,v
retrieving revision 1.3
diff -u -r1.3 build.bat
--- HibernateExt/build.bat	12 May 2005 14:39:40 -0000	1.3
+++ HibernateExt/build.bat	14 Jul 2005 07:20:24 -0000
@@ -1,2 +1,2 @@
-set HIBERNATECORE=%~dp0..\hibernate-3.0
+set HIBERNATECORE=%~dp0..\hibernate-3.1
 java -cp "%HIBERNATECORE%\lib\ant-launcher-1.6.3.jar" org.apache.tools.ant.launch.Launcher -lib %HIBERNATECORE%/lib %1 %2 %3 %4 %5
Index: HibernateExt/build.xml
===================================================================
RCS file: /cvsroot/hibernate/HibernateExt/build.xml,v
retrieving revision 1.9
diff -u -r1.9 build.xml
--- HibernateExt/build.xml	1 Dec 2004 12:22:12 -0000	1.9
+++ HibernateExt/build.xml	14 Jul 2005 07:20:24 -0000
@@ -17,7 +17,7 @@
   <!-- Name of project and version, used to create filenames -->
   <property name="Name" value="Hibernate Extensions"/>
   <property name="name" value="hibernate-extensions"/>
-  <property name="version" value="3.0"/>
+  <property name="version" value="3.1"/>
 
   <import file="common/common-build.xml"/>
 
@@ -26,6 +26,12 @@
       <fileset dir="." includes="*/build.xml" excludes="avalon/build.xml,*eclipse*/build.xml"/>
 	</subant>
   </target>
+  
+  <target name="tools" depends="" description="Build just tools">
+	<subant inheritall="false">
+      <fileset dir="." includes="tools/build.xml"/>
+	</subant>
+  </target>  
 
   <target name="clean">
 	<subant target="clean" inheritall="false">
Index: HibernateExt/common/common-build.xml
===================================================================
RCS file: /cvsroot/hibernate/HibernateExt/common/common-build.xml,v
retrieving revision 1.16
diff -u -r1.16 common-build.xml
--- HibernateExt/common/common-build.xml	9 Jul 2005 20:35:41 -0000	1.16
+++ HibernateExt/common/common-build.xml	14 Jul 2005 07:20:24 -0000
@@ -33,6 +33,8 @@
     <property name="javadoc" value="http://java.sun.com/j2se/1.4/docs/api"/>
     <property name="javac.debug" value="on"/>
     <property name="javac.optimize" value="off"/>
+    
+
 
 
     <!-- set Hibernate core related properties -->
@@ -42,6 +44,7 @@
     <property name="hibernate-core.jdbc.dir" location="${hibernate-core.home}/lib"/>  <!-- for some reason jdbc.dir is renamed to lib instead of jdbc when doing a dist of hibernate3 -->
     <property name="hibernate-core.doc.api" location="${hibernate-core.home}/doc/api"/>
     <property name="hibernate-cvs.doc.reference" location="${common-build.basedir}/../../Hibernate3/doc/reference"/>
+    
 
 	<!--
 	Explicitly define tasks from ant..
Index: HibernateExt/org.hibernate.eclipse/.classpath
===================================================================
RCS file: /cvsroot/hibernate/HibernateExt/org.hibernate.eclipse/.classpath,v
retrieving revision 1.10
diff -u -r1.10 .classpath
--- HibernateExt/org.hibernate.eclipse/.classpath	10 Jul 2005 15:58:44 -0000	1.10
+++ HibernateExt/org.hibernate.eclipse/.classpath	14 Jul 2005 07:20:24 -0000
@@ -1,11 +1,10 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <classpath>
-	<classpathentry kind="src" path="src/"/>
+	<classpathentry kind="src" path="src"/>
 	<classpathentry exported="true" kind="lib" path="lib/antlr-2.7.5H3.jar"/>
 	<classpathentry exported="true" kind="lib" path="lib/asm.jar"/>
 	<classpathentry exported="true" kind="lib" path="lib/asm-attrs.jar"/>
 	<classpathentry exported="true" kind="lib" path="lib/c3p0-0.8.5.2.jar"/>
-	<classpathentry exported="true" kind="lib" path="lib/cglib-2.1.jar"/>
 	<classpathentry exported="true" kind="lib" path="lib/commons-collections-2.1.1.jar"/>
 	<classpathentry exported="true" kind="lib" path="lib/commons-logging-1.0.4.jar"/>
 	<classpathentry exported="true" kind="lib" path="lib/concurrent-1.3.2.jar"/>
@@ -14,7 +13,7 @@
 	<classpathentry exported="true" kind="lib" path="lib/ehcache-1.1.jar"/>
 	<classpathentry exported="true" kind="lib" path="lib/hibernate3.jar"/>
 	<classpathentry exported="true" kind="lib" path="lib/hibernateconsole.jar"/>
-	<classpathentry exported="true" kind="lib" path="lib/hibernate-tools.jar"/>
+	<classpathentry exported="true" sourcepath="C:/work/hibernate-3/HibernateExt/tools/src/java" kind="lib" path="lib/hibernate-tools.jar"/>
 	<classpathentry exported="true" kind="lib" path="lib/jboss-cache.jar"/>
 	<classpathentry exported="true" kind="lib" path="lib/jboss-common.jar"/>
 	<classpathentry exported="true" kind="lib" path="lib/jboss-jmx.jar"/>
@@ -33,5 +32,6 @@
 	<classpathentry exported="true" kind="lib" path="lib/velocity-tools-generic-1.1.jar"/>
 	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER"/>
 	<classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>
+	<classpathentry kind="lib" path="lib/cglib-2.1.1.jar"/>
 	<classpathentry kind="output" path="build/eclipse"/>
 </classpath>
Index: HibernateExt/org.hibernate.eclipse.console/src/org/hibernate/eclipse/console/wizards/ArtifactGeneratorWizard.java
===================================================================
RCS file: /cvsroot/hibernate/HibernateExt/org.hibernate.eclipse.console/src/org/hibernate/eclipse/console/wizards/ArtifactGeneratorWizard.java,v
retrieving revision 1.20
diff -u -r1.20 ArtifactGeneratorWizard.java
--- HibernateExt/org.hibernate.eclipse.console/src/org/hibernate/eclipse/console/wizards/ArtifactGeneratorWizard.java	9 Jul 2005 22:28:43 -0000	1.20
+++ HibernateExt/org.hibernate.eclipse.console/src/org/hibernate/eclipse/console/wizards/ArtifactGeneratorWizard.java	14 Jul 2005 07:20:24 -0000
@@ -3,6 +3,8 @@
 import java.io.File;
 import java.lang.reflect.InvocationTargetException;
 
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
 import org.eclipse.core.resources.IResource;
 import org.eclipse.core.resources.IWorkspaceRoot;
 import org.eclipse.core.resources.ResourcesPlugin;
@@ -50,7 +52,8 @@
 public class ArtifactGeneratorWizard extends Wizard implements INewWizard {
 	private BasicGeneratorSettingsPage page;
 	private ISelection selection;
-
+    private static final Log log = LogFactory.getLog(ArtifactGeneratorWizard.class);
+    
 	/**
 	 * Constructor for ArtifactGeneratorWizard.
 	 */
@@ -78,7 +81,7 @@
         final String outputPackage = page.getOutputPackage();
         final IPath output = page.getOutputDirectory();
         
-        if(!MessageDialog.openQuestion(getShell(), "Start artifact generation", "Do you want to start generating artifcats into " + output.toPortableString() + ",\npossibly overwriting existing files in this directory ?") ) {
+        if(!MessageDialog.openQuestion(getShell(), "Start artifact generation", "Do you want to start generating artifacts into " + output.toPortableString() + ",\npossibly overwriting existing files in this directory ?") ) {
             return false;
         }
         
@@ -86,7 +89,11 @@
         final String configurationName = page.getConfigurationName();
 		final boolean reveng = page.isReverseEngineerEnabled();
 		final boolean genjava = page.isGenerateJava();
+        final String javaPrefix = page.getJavaPrefix();
+        final String javaSuffix = page.getJavaSuffix();
         final boolean gendao = page.isGenerateDao();
+        final String daoPrefix = page.getDaoPrefix();
+        final String daoSuffix = page.getDaoSuffix();
 		final boolean genhbm = page.isGenerateMappings();
 		final boolean gencfg = page.isGenerateCfg();
         final boolean preferRaw = page.isPreferRawCompositeIds();
@@ -97,7 +104,7 @@
 		IRunnableWithProgress op = new IRunnableWithProgress() {
 			public void run(IProgressMonitor monitor) throws InvocationTargetException {
 				try {
-doFinish(configurationName, output, outputPackage, revengsettings, reveng, genjava, gendao, genhbm, gencfg, monitor, preferRaw, templatedir, ejb3, gendoc);
+					doFinish(configurationName, output, outputPackage, revengsettings, reveng, genjava, javaPrefix, javaSuffix, gendao, daoPrefix, daoSuffix, genhbm, gencfg, monitor, preferRaw, templatedir, ejb3, gendoc);
 				} catch (CoreException e) {
 					throw new InvocationTargetException(e);
 				} finally {
@@ -133,7 +140,7 @@
 
 	private void doFinish(
 		String configName, IPath output,
-String outputPackage, IPath revengsettings, boolean reveng, final boolean genjava, final boolean gendao, final boolean genhbm, final boolean gencfg, final IProgressMonitor monitor, boolean preferRawCompositeids, IPath templateDir, final boolean ejb3, final boolean gendoc)
+		String outputPackage, IPath revengsettings, boolean reveng, final boolean genjava, final String javaPrefix, final String javaSuffix, final boolean gendao, final String daoPrefix, final String daoSuffix, final boolean genhbm, final boolean gencfg, final IProgressMonitor monitor, boolean preferRawCompositeids, IPath templateDir, final boolean ejb3, final boolean gendoc)
 		throws CoreException {
 		// create a sample file
 		monitor.beginTask("Generating artifacts for " + configName, 10);
@@ -175,46 +182,52 @@
                 if(templateres!=null) {
                     templatePaths = new String[] { templateres.getRawLocation().toOSString() };
                 }
-                
-                final HibernateMappingExporter hbmExporter = new HibernateMappingExporter(cfg, outputdir);
-				hbmExporter.setTemplatePaths(templatePaths);
-				final POJOExporter javaExporter = new POJOExporter(cfg, outputdir); // TODO: expose generics as an option
-				javaExporter.setEjb3(ejb3);
-				javaExporter.setGenerics(ejb3);
-				javaExporter.setTemplatePaths(templatePaths);
-                // Add support for DAO generation
-                final DAOExporter daoExporter = new DAOExporter(cfg,outputdir);
-                daoExporter.setTemplatePaths(templatePaths);
-				final Exporter cfgExporter = new HibernateConfigurationExporter(cfg, outputdir); 
 				
 				if(genhbm) {
 					monitor.subTask("mapping files");
+                    final HibernateMappingExporter hbmExporter = new HibernateMappingExporter(cfg, outputdir);
+                    hbmExporter.setTemplatePaths(templatePaths);
 					hbmExporter.start();
 					monitor.worked(5);
 				}
 				
 				if(genjava) {
 					monitor.subTask("domain code");
+                    final POJOExporter javaExporter = new POJOExporter(cfg, outputdir); // TODO: expose generics as an option
+                    javaExporter.setEjb3(ejb3);
+                    javaExporter.setGenerics(ejb3);
+                    javaExporter.setTemplatePaths(templatePaths);
+                   javaExporter.setClassNameModifier("classPrefix",javaPrefix);
+                   javaExporter.setClassNameModifier("classSuffix",javaSuffix);
 					javaExporter.start();
 					monitor.worked(6);
 				}
-                
+
+                // Add support for DAO generation
                 if(gendao) {
                     monitor.subTask("DAO code");
+                    final DAOExporter daoExporter = new DAOExporter(cfg,outputdir);
+                    daoExporter.setTemplatePaths(templatePaths);
+                    daoExporter.setClassNameModifier("classPrefix",daoPrefix);
+                    daoExporter.setClassNameModifier("classSuffix",daoSuffix);
+                    // We also need to provide the domain class modifiers, since the DAO will need them 
+                    // for its return types
+                    daoExporter.setClassNameModifier("domainClassPrefix",javaPrefix);
+                    daoExporter.setClassNameModifier("domainClassSuffix",javaSuffix);                    
                     daoExporter.start();
                     monitor.worked(7);
                 }
 				
 				if(gencfg) {
 					monitor.subTask("hibernate configuration");
-					cfgExporter.start();
-monitor.worked(8);
+                    new HibernateConfigurationExporter(cfg, outputdir).start();
+					monitor.worked(8);
 				}
 				
 				if(gendoc) {
 					monitor.subTask("hibernate doc");
 					new DocExporter(cfg, outputdir).start();
-monitor.worked(9);
+					monitor.worked(9);
 				}
                 try {
                     resource.refreshLocal(IResource.DEPTH_INFINITE, monitor);
Index: HibernateExt/org.hibernate.eclipse.console/src/org/hibernate/eclipse/console/wizards/BasicGeneratorSettingsPage.java
===================================================================
RCS file: /cvsroot/hibernate/HibernateExt/org.hibernate.eclipse.console/src/org/hibernate/eclipse/console/wizards/BasicGeneratorSettingsPage.java,v
retrieving revision 1.9
diff -u -r1.9 BasicGeneratorSettingsPage.java
--- HibernateExt/org.hibernate.eclipse.console/src/org/hibernate/eclipse/console/wizards/BasicGeneratorSettingsPage.java	9 Jul 2005 22:28:43 -0000	1.9
+++ HibernateExt/org.hibernate.eclipse.console/src/org/hibernate/eclipse/console/wizards/BasicGeneratorSettingsPage.java	14 Jul 2005 07:20:24 -0000
@@ -50,9 +50,14 @@
 
 	private SelectionButtonDialogField generatejava;
 	private SelectionButtonDialogField enableEJB3annotations;
+    private StringDialogField javaPrefix = new StringDialogField();
+    private StringDialogField javaSuffix = new StringDialogField();
     
     private SelectionButtonDialogField generatedao;
+    private StringDialogField daoPrefix = new StringDialogField();
+    private StringDialogField daoSuffix = new StringDialogField();
     
+   
 	private SelectionButtonDialogField generatemappings;
 
 	private SelectionButtonDialogField generatedocs;
@@ -92,7 +97,7 @@
 		
 		container.setLayout(layout);
 		layout.numColumns = 3;
-layout.verticalSpacing = 10;
+		layout.verticalSpacing = 10;
 		
 		consoleConfigurationName = new ComboDialogField(SWT.READ_ONLY);
 		consoleConfigurationName.setLabelText("Console &configuration:");
@@ -159,11 +164,22 @@
 		
         enableEJB3annotations = new SelectionButtonDialogField(SWT.CHECK);
         enableEJB3annotations.setLabelText("EJB3/JSR-220 annotations (experimental!)");
+        javaPrefix.setLabelText("Domain class name prefix");
+        javaSuffix.setLabelText("Domain class name suffix");
+        // Make the annotation and java prefix/suffix fileds dependent on the principal "Generate Java" field
+        // generatejava.attachDialogField(enableEJB3annotations);
+        generatejava.attachDialogFields(new DialogField[] { enableEJB3annotations, javaPrefix, javaSuffix });
         
-        generatejava.attachDialogField(enableEJB3annotations);
         
-        generatedao = new SelectionButtonDialogField(SWT.CHECK);
+        
+        generatedao = new SelectionButtonDialogField(SWT.CHECK);       
         generatedao.setLabelText("Generate DAO code (.java)");
+        daoPrefix.setLabelText("DAO class name prefix");
+        daoSuffix.setLabelText("DAO class name suffix");
+        daoSuffix.setText("DAO");
+        // Make the DAO prefix/suffix fields dependent on the principal DAO field
+        generatedao.attachDialogFields(new DialogField[] { daoPrefix, daoSuffix, javaPrefix, javaSuffix });
+        
         
         useOwnTemplates = new SelectionButtonDialogField(SWT.CHECK);
         useOwnTemplates.setDialogFieldListener(fieldlistener);
@@ -196,7 +212,18 @@
 		generatejava.doFillIntoGrid(container, 3);
         fillLabel(container);
         enableEJB3annotations.doFillIntoGrid(container, 2);
+        
+        javaPrefix.doFillIntoGrid(container, 2);
+        fillLabel(container);
+        javaSuffix.doFillIntoGrid(container, 2);
+       
+        
         generatedao.doFillIntoGrid(container, 3);
+        daoPrefix.doFillIntoGrid(container, 2);
+        fillLabel(container);
+        daoSuffix.doFillIntoGrid(container, 2);
+        fillLabel(container);
+        
 		generatemappings.doFillIntoGrid(container, 3);
 		generatecfgfile.doFillIntoGrid(container, 3);
 		generatedocs.doFillIntoGrid(container, 3);
@@ -418,5 +445,25 @@
 	public boolean isGenerateDoc() {
 		return generatedocs.isSelected();
 	}
+
+
+    public String getDaoPrefix() {
+        return daoPrefix.getText();
+    }
+
+
+    public String getDaoSuffix() {
+        return daoSuffix.getText();
+    }
+
+
+    public String getJavaPrefix() {
+        return javaPrefix.getText();
+    }
+
+
+    public String getJavaSuffix() {
+        return javaSuffix.getText();
+    }
     
 }
\ No newline at end of file
Index: HibernateExt/tools/src/java/org/hibernate/tool/hbm2x/DAOExporter.java
===================================================================
RCS file: /cvsroot/hibernate/HibernateExt/tools/src/java/org/hibernate/tool/hbm2x/DAOExporter.java,v
retrieving revision 1.3
diff -u -r1.3 DAOExporter.java
--- HibernateExt/tools/src/java/org/hibernate/tool/hbm2x/DAOExporter.java	9 Jul 2005 17:09:35 -0000	1.3
+++ HibernateExt/tools/src/java/org/hibernate/tool/hbm2x/DAOExporter.java	14 Jul 2005 07:20:27 -0000
@@ -15,19 +15,31 @@
 
     private static final Log log = LogFactory.getLog(DAOExporter.class);
 
+    String templateName = DAO_DAOHOME_VM;
 
     public DAOExporter(Configuration cfg, File outputdir) {
         super(cfg, outputdir);
-        templateName = DAO_DAOHOME_VM;
     }
 
-    protected String getNameForClass(PersistentClass clazz) {
-        String className = super.getNameForClass(clazz) + "Home";
-        return className;
+    public boolean startComponent(Component component) throws ExporterException {
+        // we ignore
+        return false;
+    }
+
+    public void exportPersistentClass(PersistentClass clazz) {
+        log.info("Generating class " + getCompleteNameForClass(clazz) + " using template " + templateName);
+        runVelocity(clazz, getCompleteNameForClass(clazz), templateName);
+    }
+
+    public void start() {
+        // TODO Auto-generated method stub
+        super.start();
     }
 
     public void exportComponent(Component component) throws ExporterException {
         return;
     }
 
-}
+    }
+
+
Index: HibernateExt/tools/src/java/org/hibernate/tool/hbm2x/POJOExporter.java
===================================================================
RCS file: /cvsroot/hibernate/HibernateExt/tools/src/java/org/hibernate/tool/hbm2x/POJOExporter.java,v
retrieving revision 1.16
diff -u -r1.16 POJOExporter.java
--- HibernateExt/tools/src/java/org/hibernate/tool/hbm2x/POJOExporter.java	18 Jun 2005 23:38:34 -0000	1.16
+++ HibernateExt/tools/src/java/org/hibernate/tool/hbm2x/POJOExporter.java	14 Jul 2005 07:20:27 -0000
@@ -22,7 +22,9 @@
  */
 public class POJOExporter extends AbstractExporter {
 
-	private static final String POJO_JAVACLASS_VM = "pojo/javaclass.vm";
+    private static final String CLASS_SUFFIX = "classSuffix";
+    private static final String CLASS_PREFIX = "classPrefix";
+    private static final String POJO_JAVACLASS_VM = "pojo/javaclass.vm";
 	private static final Log log = LogFactory.getLog(POJOExporter.class);
 	
 	private StringWriter tempWriter;
@@ -30,6 +32,8 @@
     
 	private boolean ejb3;
     private boolean generics;
+    
+
 
     public POJOExporter(Configuration cfg, File outputdir) {
     	super(cfg, outputdir);
@@ -53,12 +57,18 @@
 		this.generics = generics;
 	}
 
-	protected String getNameForClass(PersistentClass clazz) {
-		return getTemplateHelper().getCfg2JavaTool().getQualifiedDeclarationName(clazz);
+    protected String getCompleteNameForClass(PersistentClass clazz) {
+        Cfg2JavaTool cfg = getTemplateHelper().getCfg2JavaTool();
+        return cfg.getPackageName(clazz) + "." + getClassNameModifier(POJOExporter.CLASS_PREFIX)  + cfg.getDeclarationName(clazz) + getClassNameModifier(POJOExporter.CLASS_SUFFIX);
+    }
+    
+	protected String getRootNameForClass(PersistentClass clazz) {
+        return getTemplateHelper().getCfg2JavaTool().getQualifiedDeclarationName(clazz);
 	}
 	
 	public void exportPersistentClass(PersistentClass clazz) {
-		runVelocity(clazz, getNameForClass(clazz), templateName);
+        log.info("Generating class: " + getCompleteNameForClass(clazz));
+		runVelocity(clazz, getCompleteNameForClass(clazz), templateName);
 	}
 
 	public void exportComponent(Component component) throws ExporterException {
@@ -71,21 +81,24 @@
 		}        
 	}
 
-	protected void runVelocity(Object clazz, String qualifiedDeclarationName, String templateName) {
+	protected void runVelocity(Object clazz, String completeClassName, String templateName) {
 	    tempWriter = new StringWriter();			
 		getTemplateHelper().putInContext("clazz", clazz);
 		getTemplateHelper().putInContext("secondpassclassimports", "$secondpassclassimports");
+
 		// First run - writes to in-memory string
 		getTemplateHelper().processTemplate(templateName, tempWriter);
+        // Tidy up
 		getTemplateHelper().removeFromContext("secondpassclassimports", "$secondpassclassimports");
+
 		
 		try {
 			String o = (String) getTemplateHelper().getContext().get("classimports");
 			if(o==null) o = "";
 			getTemplateHelper().putInContext("secondpassclassimports", o);
 
-			File file = getFileForClassName(getOutputDirectory(), qualifiedDeclarationName, ".java");
-			log.info("Writing " + qualifiedDeclarationName + " to " + file.getAbsolutePath() );
+			File file = getFileForClassName(getOutputDirectory(), completeClassName, ".java");
+			log.info("Writing " + completeClassName + " to " + file.getAbsolutePath() );
 			// Second run - writes to file (allows for placing imports correctly and optimized ;)
 			FileWriter fileWriter = new FileWriter(file);
             getTemplateHelper().processString(tempWriter.toString(), fileWriter);
@@ -105,6 +118,13 @@
         getTemplateHelper().putInContext("ejb3", Boolean.valueOf(ejb3) );
         getTemplateHelper().putInContext("generics", Boolean.valueOf(generics) );
         
+        // Put all class name modifiers in Velocity context
+       for(Iterator keys = classNameModifiers.keySet().iterator(); keys.hasNext();)
+       {
+           String key = (String) keys.next();
+           getTemplateHelper().putInContext(key,(String) classNameModifiers.get(key));
+       }
+        
         Map components = new HashMap();
         
         for (Iterator classes = getConfiguration().getClassMappings(); classes.hasNext(); ) {
@@ -126,4 +146,28 @@
 		templateName = string;
 	}
 
+	//  ----------------------------------------------------------------------------------------------------
+    // 20050709 - Add support for prefixing and suffixing of derived class names
+	// -----------------------------------------------------------------------------------------------------
+    private Map classNameModifiers = new HashMap();
+    
+    public void setClassNameModifier(String key, String value)
+    {
+            classNameModifiers.put(key, value);
+    }
+
+    public String getClassNameModifier(String key)
+    {
+        if (classNameModifiers.containsKey(key))
+        {
+            return (String) classNameModifiers.get(key);
+        }
+        else
+        {
+            // No key - return empty string
+            return new String();
+        }
+    }
+    // ----------------------------------------------------------------------------------------------------
+
 }
Index: HibernateExt/tools/src/velocity/dao/daohome.vm
===================================================================
RCS file: /cvsroot/hibernate/HibernateExt/tools/src/velocity/dao/daohome.vm,v
retrieving revision 1.3
diff -u -r1.3 daohome.vm
--- HibernateExt/tools/src/velocity/dao/daohome.vm	9 Jul 2005 17:09:35 -0000	1.3
+++ HibernateExt/tools/src/velocity/dao/daohome.vm	14 Jul 2005 07:20:27 -0000
@@ -1,6 +1,8 @@
 $c2j.getPackageDeclaration($clazz)
 
 #set($cls = ".class")
+#set($completeDAOClassName = "$classPrefix$c2j.getDeclarationName($clazz)$classSuffix")
+#set($completeDOClassName = "$domainClassPrefix$c2j.getDeclarationName($clazz)$domainClassSuffix")
 
 #if($ejb3) 
 import javax.ejb.*;	
@@ -9,25 +11,20 @@
 import org.hibernate.*;
 import org.hibernate.criterion.Example;
 #end
+
 import java.util.*;
 import org.apache.commons.logging.*;
 import javax.naming.InitialContext;
 
-/**
-$c2j.toJavaDoc($render.eval("@see $c2j.getQualifiedDeclarationName($clazz)"),0)
- */
-#if($ejb3) 
-@Stateless
-#end
-public class $c2j.getDeclarationName($clazz)Home {
+public class $completeDAOClassName {
 
-    private static final Log log = LogFactory.getLog($c2j.getDeclarationName($clazz)\$cls);
+    private static final Log log = LogFactory.getLog($completeDAOClassName\$cls);
 
 #if($ejb3) 
     @Inject private EntityManager entityManager;
     
-    public void persist($c2j.getDeclarationName($clazz) transientInstance) {
-        log.debug("persisting $c2j.getDeclarationName($clazz) instance");
+    public void persist($completeDOClassName transientInstance) {
+        log.debug("persisting $completeDOClassName instance");
         try {
             entityManager.persist(transientInstance);
             log.debug("persist successful");
@@ -38,8 +35,8 @@
         }
     }
     
-    public void remove($c2j.getDeclarationName($clazz) persistentInstance) {
-        log.debug("removing $c2j.getDeclarationName($clazz) instance");
+    public void remove($completeDOClassName persistentInstance) {
+        log.debug("removing $completeDOClassName instance");
         try {
             entityManager.remove(persistentInstance);
             log.debug("remove successful");
@@ -50,10 +47,10 @@
         }
     }
     
-    public $c2j.getDeclarationName($clazz) merge($c2j.getDeclarationName($clazz) detachedInstance) {
-        log.debug("merging $c2j.getDeclarationName($clazz) instance");
+    public $completeDOClassName merge($completeDOClassName detachedInstance) {
+        log.debug("merging $completeDOClassName instance");
         try {
-            $c2j.getDeclarationName($clazz) result = entityManager.merge(detachedInstance);
+            $completeDOClassName result = entityManager.merge(detachedInstance);
             log.debug("merge successful");
             return result;
         }
@@ -63,10 +60,10 @@
         }
     }
     
-    public $c2j.getDeclarationName($clazz) findById($c2j.stripPackage( $c2j.getJavaTypeName($clazz.identifierProperty), $clazz ) id) {
-        log.debug("getting $c2j.getDeclarationName($clazz) instance with id: " + id);
+    public $completeDOClassName findById($c2j.stripPackage( $c2j.getJavaTypeName($clazz.identifierProperty), $clazz ) id) {
+        log.debug("getting $completeDOClassName instance with id: " + id);
         try {
-            $c2j.getDeclarationName($clazz) instance = entityManager.find($c2j.getDeclarationName($clazz).class, id);
+            $completeDOClassName instance = entityManager.find($completeDOClassName.class, id);
             log.debug("get successful");
             return instance;
         }
@@ -89,8 +86,8 @@
         }
     }
     
-    public void persist($c2j.getDeclarationName($clazz) transientInstance) {
-        log.debug("persisting $c2j.getDeclarationName($clazz) instance");
+    public void persist($completeDOClassName transientInstance) {
+        log.debug("persisting $completeDOClassName instance");
         try {
             sessionFactory.getCurrentSession().persist(transientInstance);
             log.debug("persist successful");
@@ -101,8 +98,8 @@
         }
     }
     
-    public void attachDirty($c2j.getDeclarationName($clazz) instance) {
-        log.debug("attaching dirty $c2j.getDeclarationName($clazz) instance");
+    public void attachDirty($completeDOClassName instance) {
+        log.debug("attaching dirty $completeDOClassName instance");
         try {
             sessionFactory.getCurrentSession().saveOrUpdate(instance);
             log.debug("attach successful");
@@ -113,8 +110,8 @@
         }
     }
     
-    public void attachClean($c2j.getDeclarationName($clazz) instance) {
-        log.debug("attaching clean $c2j.getDeclarationName($clazz) instance");
+    public void attachClean($completeDOClassName instance) {
+        log.debug("attaching clean $completeDOClassName instance");
         try {
             sessionFactory.getCurrentSession().lock(instance, LockMode.NONE);
             log.debug("attach successful");
@@ -125,8 +122,8 @@
         }
     }
     
-    public void delete($c2j.getDeclarationName($clazz) persistentInstance) {
-        log.debug("deleting $c2j.getDeclarationName($clazz) instance");
+    public void delete($completeDOClassName persistentInstance) {
+        log.debug("deleting $completeDOClassName instance");
         try {
             sessionFactory.getCurrentSession().delete(persistentInstance);
             log.debug("delete successful");
@@ -137,10 +134,10 @@
         }
     }
     
-    public $c2j.getDeclarationName($clazz) merge($c2j.getDeclarationName($clazz) detachedInstance) {
-        log.debug("merging $c2j.getDeclarationName($clazz) instance");
+    public $completeDOClassName merge($completeDOClassName detachedInstance) {
+        log.debug("merging $completeDOClassName instance");
         try {
-            $c2j.getDeclarationName($clazz) result = ($c2j.getDeclarationName($clazz)) sessionFactory.getCurrentSession()
+            $completeDOClassName result = ($completeDOClassName) sessionFactory.getCurrentSession()
                     .merge(detachedInstance);
             log.debug("merge successful");
             return result;
@@ -151,10 +148,10 @@
         }
     }
     
-    public $c2j.getDeclarationName($clazz) findById($c2j.stripPackage( $c2j.getJavaTypeName($clazz.identifierProperty), $clazz ) id) {
-        log.debug("getting $c2j.getDeclarationName($clazz) instance with id: " + id);
+    public $completeDOClassName findById($c2j.stripPackage( $c2j.getJavaTypeName($clazz.identifierProperty), $clazz ) id) {
+        log.debug("getting $completeDOClassName instance with id: " + id);
         try {
-            $c2j.getDeclarationName($clazz) instance = ($c2j.getDeclarationName($clazz)) sessionFactory.getCurrentSession()
+            $completeDOClassName instance = ($completeDOClassName) sessionFactory.getCurrentSession()
                     .get("$clazz.entityName", id);
             if (instance==null) {
                 log.debug("get successful, no instance found");
@@ -170,8 +167,8 @@
         }
     }
     
-    public List findByExample($c2j.getDeclarationName($clazz) instance) {
-        log.debug("finding $c2j.getDeclarationName($clazz) instance by example");
+    public List findByExample($completeDOClassName instance) {
+        log.debug("finding $completeDOClassName instance by example");
         try {
             List results = sessionFactory.getCurrentSession()
                     .createCriteria("$clazz.entityName")
@@ -189,4 +186,5 @@
         
 #end
 
-}
\ No newline at end of file
+}
+
Index: HibernateExt/tools/src/velocity/pojo/javaclass.vm
===================================================================
RCS file: /cvsroot/hibernate/HibernateExt/tools/src/velocity/pojo/javaclass.vm,v
retrieving revision 1.13
diff -u -r1.13 javaclass.vm
--- HibernateExt/tools/src/velocity/pojo/javaclass.vm	5 Jun 2005 07:46:33 -0000	1.13
+++ HibernateExt/tools/src/velocity/pojo/javaclass.vm	14 Jul 2005 07:20:27 -0000
@@ -1,16 +1,20 @@
 $c2j.getPackageDeclaration($clazz)
 
+#set($cls = ".class")
+#set($completeClassName = "$classPrefix$c2j.getDeclarationName($clazz)$classSuffix")
+
 #if($ejb3) 
 import javax.ejb.*;	
 import javax.persistence.*;
 #end
 import java.util.*;
+import org.apache.commons.logging.*;
 
 $c2j.addExtraImports($clazz,$ctx)
 $secondpassclassimports
 
 /**
-$c2j.getClassJavaDoc($clazz, $render.eval($ctx, "$c2j.getDeclarationName($clazz) generated by hbm2java"),0)
+$c2j.getClassJavaDoc($clazz, $render.eval($ctx, "$completeClassName generated by hbm2java"),0)
  */
 #if($ejb3)
 @Entity
@@ -23,7 +27,10 @@
 #end
 )
 #end
-$c2j.getClassModifiers($clazz) $c2j.getDeclarationType($clazz) $c2j.getDeclarationName($clazz) $c2j.getExtendsDeclaration($clazz) $c2j.getImplementsDeclaration($clazz) {
+$c2j.getClassModifiers($clazz) $c2j.getDeclarationType($clazz) $completeClassName $c2j.getExtendsDeclaration($clazz) $c2j.getImplementsDeclaration($clazz) {
+
+	private static final Log log = LogFactory.getLog($completeClassName\$cls);
+
 
 #if(!$c2j.isInterface($clazz))
     // Fields    
@@ -41,19 +48,19 @@
     // Constructors
 
     /** default constructor */
-    public $c2j.getDeclarationName($clazz)() {
+    public $completeClassName() {
     }
     
 #if($clazz.hasIdentifierProperty() && !$clazz.getSuperclass())    
     /** constructor with id */
-    public $c2j.getDeclarationName($clazz)($c2j.stripPackage( $c2j.getJavaTypeName($clazz.identifierProperty), $clazz ) $clazz.identifierProperty.name) {
+    public $completeClassName($c2j.stripPackage( $c2j.getJavaTypeName($clazz.identifierProperty), $clazz ) $clazz.identifierProperty.name) {
         this.$clazz.identifierProperty.name = $clazz.identifierProperty.name;
     }
 #end
    
     
 ##    /** full constructor */
-##    public $c2j.getDeclarationName($clazz)($c2j.asParameterList($c2j.getPropertyClosureForFullConstructor($clazz))) {
+##    public $completeClassName($c2j.asParameterList($c2j.getPropertyClosureForFullConstructor($clazz))) {
 ###if(!$c2j.getPropertyClosureForSuperclassFullConstructor($clazz).isEmpty()) 
 ##        super($c2j.asArgumentList($c2j.getPropertyClosureForSuperclassFullConstructor($clazz)));        
 ###end
@@ -107,8 +114,8 @@
    public boolean equals(Object other) {
          if ( (this == other ) ) return true;
 		 if ( (other == null ) ) return false;
-		 if ( !(other instanceof $c2j.getDeclarationName($clazz)) ) return false;
-		 $c2j.getDeclarationName($clazz) castOther = ( $c2j.getDeclarationName($clazz) ) other; 
+		 if ( !(other instanceof $completeClassName) ) return false;
+		 $completeClassName castOther = ( $completeClassName ) other; 
          
 		 return $c2j.generateEquals($clazz, "this", "castOther");
    }
