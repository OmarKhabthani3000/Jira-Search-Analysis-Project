Index: D:/workspaces/hibernate/HibernateExt/tools/src/java/org/hibernate/cfg/reveng/OverrideRepository.java
===================================================================
--- D:/workspaces/hibernate/HibernateExt/tools/src/java/org/hibernate/cfg/reveng/OverrideRepository.java	(revision 14421)
+++ D:/workspaces/hibernate/HibernateExt/tools/src/java/org/hibernate/cfg/reveng/OverrideRepository.java	(working copy)
@@ -13,15 +13,12 @@
 import java.util.Properties;
 import java.util.Set;
 
-import net.sf.cglib.core.KeyFactory;
-
 import org.apache.commons.collections.MultiMap;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.dom4j.Document;
 import org.hibernate.MappingException;
 import org.hibernate.mapping.ForeignKey;
-import org.hibernate.mapping.MetaAttribute;
 import org.hibernate.mapping.Table;
 import org.hibernate.util.StringHelper;
 import org.hibernate.util.XMLHelper;
@@ -548,11 +545,62 @@
 	
 	private static final TableColumnKeyFactory TABLECOLUMN_KEY_FACTORY;
 	static {
-		TABLECOLUMN_KEY_FACTORY = (TableColumnKeyFactory) KeyFactory.create(TableColumnKeyFactory.class);		
+		TABLECOLUMN_KEY_FACTORY = new TableColumnKeyFactory();//) KeyFactory.create(TableColumnKeyFactory.class);		
 	}
 
-	static interface TableColumnKeyFactory {
-		Object newInstance(TableIdentifier query, String name);
+	static class TableColumnKeyFactory {
+		
+		private class TableColumnKey{
+			
+			private TableIdentifier query;
+			private String name;
+			
+			private TableColumnKey(TableIdentifier query, String name){
+				this.query = query;
+				this.name = name;
+			}
+			
+			/* (non-Javadoc)
+			 * @see java.lang.Object#hashCode()
+			 */
+			@Override
+			public int hashCode() {
+				final int prime = 31;
+				int result = 1;
+				result = prime * result + ((name == null) ? 0 : name.hashCode());
+				result = prime * result + ((query == null) ? 0 : query.hashCode());
+				return result;
+			}
+
+			/* (non-Javadoc)
+			 * @see java.lang.Object#equals(java.lang.Object)
+			 */
+			@Override
+			public boolean equals(Object obj) {
+				if (this == obj)
+					return true;
+				if (obj == null)
+					return false;
+				if (getClass() != obj.getClass())
+					return false;
+				final TableColumnKey other = (TableColumnKey) obj;
+				if (name == null) {
+					if (other.name != null)
+						return false;
+				} else if (!name.equals(other.name))
+					return false;
+				if (query == null) {
+					if (other.query != null)
+						return false;
+				} else if (!query.equals(other.query))
+					return false;
+				return true;
+			};
+		}		
+		
+		Object newInstance(TableIdentifier query, String name){
+			return new TableColumnKey(query, name);
+		}		
 	}
 
 	public void setTypeNameForColumn(TableIdentifier identifier, String columnName, String type) {
