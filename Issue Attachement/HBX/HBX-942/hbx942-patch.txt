Index: C:/tools/tools/src/test/org/hibernate/tool/test/jdbc2cfg/VersioningTest.java
===================================================================
--- C:/tools/tools/src/test/org/hibernate/tool/test/jdbc2cfg/VersioningTest.java	(revision 11551)
+++ C:/tools/tools/src/test/org/hibernate/tool/test/jdbc2cfg/VersioningTest.java	(working copy)
@@ -17,13 +17,15 @@
 import org.hibernate.tool.hbm2x.HibernateMappingExporter;
 import org.hibernate.type.IntegerType;
 import org.hibernate.type.TimestampType;
+;
 
 /**
+ * To be extended by VersioningForJDK50Test for the JPA generation part
  * @author max
  *
  */
 public class VersioningTest extends JDBCMetaDataBinderTestCase {
-
+	
 	protected String[] getCreateSQL() {
 		
 		return new String[] {
@@ -59,10 +61,8 @@
 	}
 	
 	public void testGenerateMappings() {
-		
         cfg.buildMappings();
-        
-		Exporter exporter = new HibernateMappingExporter(cfg, getOutputDir());
+        Exporter exporter = new HibernateMappingExporter(cfg, getOutputDir());
 		
 		exporter.start();
 		
@@ -73,33 +73,37 @@
 		derived.addFile(new File(getOutputDir(), "WithRealTimestamp.hbm.xml") );
 		derived.addFile(new File(getOutputDir(), "WithFakeTimestamp.hbm.xml") );
 		
+		testVersioningInDerivedCfg(derived,"");
+	}
+    
+	protected void testVersioningInDerivedCfg(Configuration derived, String defaultPackage){
 		derived.buildMappings();
 		
-		PersistentClass cl = derived.getClassMapping("Withversion");		
+		PersistentClass cl = derived.getClassMapping( defaultPackage + "Withversion" );		
 		
 		Property version = cl.getVersion();
 		assertNotNull(version);
 		assertEquals("version", version.getName());
 		
-		cl = derived.getClassMapping("Noversion");
+		cl = derived.getClassMapping( defaultPackage + "Noversion" );
 		assertNotNull(cl);
 		version = cl.getVersion();
 		assertNull(version);
 
-		cl = derived.getClassMapping("Withrealtimestamp");
+		cl = derived.getClassMapping( defaultPackage + "Withrealtimestamp" );
 		assertNotNull(cl);
 		version = cl.getVersion();
 		assertNotNull(version);
 		assertTrue(version.getType() instanceof TimestampType);
 		
-		cl = derived.getClassMapping("Withfaketimestamp");
+		cl = derived.getClassMapping( defaultPackage + "Withfaketimestamp" );
 		assertNotNull(cl);
 		version = cl.getVersion();
 		assertNotNull(version);
 		assertTrue(version.getType() instanceof IntegerType);
-		
 	}
 	
+	
 	public static Test suite() {
 		return new TestSuite(VersioningTest.class);
 	}
Index: C:/tools/tools/src/java/org/hibernate/tool/hbm2x/pojo/BasicPOJOClass.java
===================================================================
--- C:/tools/tools/src/java/org/hibernate/tool/hbm2x/pojo/BasicPOJOClass.java	(revision 11551)
+++ C:/tools/tools/src/java/org/hibernate/tool/hbm2x/pojo/BasicPOJOClass.java	(working copy)
@@ -307,6 +307,9 @@
 	public String generateBasicAnnotation(Property property) {
 		StringBuffer annotations = new StringBuffer( "    " );
 		if(property.getValue() instanceof SimpleValue) {
+			if (hasVersionProperty())
+				if (property.equals(getVersionProperty()))
+						buildVersionAnnotation(annotations);
 			String typeName = ((SimpleValue)property.getValue()).getTypeName();
 			if("date".equals(typeName) || "java.sql.Date".equals(typeName)) {
 				buildTemporalAnnotation( annotations, "DATE" );
@@ -315,6 +318,8 @@
 			} else if ("time".equals(typeName) || "java.sql.Time".equals(typeName)) {
 				buildTemporalAnnotation(annotations, "TIME");
 			} //TODO: calendar etc. ?
+
+						
 		}
 			
 		return annotations.toString();
@@ -327,6 +332,12 @@
 		return annotations.append( "@" + temporal +"(" + temporalType + "." + temporalTypeValue + ")");
 	}
 	
+	private StringBuffer buildVersionAnnotation(StringBuffer annotations) {
+		String version = importType("javax.persistence.Version");
+		
+		return annotations.append( "@" + version );
+	}
+	
 	public String generateAnnColumnAnnotation(Property property) {
 		StringBuffer annotations = new StringBuffer( "    " );
 		boolean insertable = property.isInsertable();
Index: C:/tools/tools/src/test5.0/org/hibernate/tool/test/jdbc2cfg/VersioningForJDK50Test.java
===================================================================
--- C:/tools/tools/src/test5.0/org/hibernate/tool/test/jdbc2cfg/VersioningForJDK50Test.java	(revision 0)
+++ C:/tools/tools/src/test5.0/org/hibernate/tool/test/jdbc2cfg/VersioningForJDK50Test.java	(revision 0)
@@ -0,0 +1,85 @@
+/*
+ * Created on 2004-11-24
+ *
+ */
+package org.hibernate.tool.test.jdbc2cfg;
+
+import java.io.File;
+import java.net.URL;
+import java.net.URLClassLoader;
+import java.util.ArrayList;
+import java.util.List;
+
+import junit.framework.Test;
+import junit.framework.TestSuite;
+
+import org.hibernate.cfg.AnnotationConfiguration;
+import org.hibernate.cfg.JDBCMetaDataConfiguration;
+import org.hibernate.cfg.reveng.DefaultReverseEngineeringStrategy;
+import org.hibernate.cfg.reveng.ReverseEngineeringSettings;
+import org.hibernate.tool.hbm2x.POJOExporter;
+import org.hibernate.tool.test.TestHelper;
+;
+
+/**
+ * based on VersioningTest
+ * requires a default package to be easily added to classloader
+ * steps:
+ * 1- build mappings from jdbc (see table used in VersioningTest, some has version, some timestamp,...
+ * 2- use *annotated* pojo exporter
+ * 3- check if generated classes compile, add them to classloader
+ * 4- make a derived configuration from annotated classes
+ * 5- test the derived configuration
+ * 
+ * @author anthony
+ */
+public class VersioningForJDK50Test extends VersioningTest {
+    protected void configure(JDBCMetaDataConfiguration cfgToConfigure) {        
+        DefaultReverseEngineeringStrategy c = new DefaultReverseEngineeringStrategy();
+        c.setSettings(new ReverseEngineeringSettings(c).setDefaultPackageName("myPackage"));
+        cfgToConfigure.setReverseEngineeringStrategy(c);
+    }
+	
+	public void testGenerateJPA() throws Exception{
+        
+        cfg.buildMappings();  
+        
+		POJOExporter exporter = new POJOExporter(cfg, getOutputDir() );
+		exporter.setTemplatePath(new String[0]);
+		exporter.getProperties().setProperty("ejb3", "true");
+		exporter.getProperties().setProperty("jdk5", "true");
+		exporter.start();
+		
+		File file = new File( "ejb3compilable" );
+		file.mkdir();
+		
+		ArrayList list = new ArrayList();
+		List jars = new ArrayList();
+		jars.add("ejb3-persistence.jar");
+		jars.add("hibernate-annotations.jar");
+		TestHelper.compile(getOutputDir(), file, TestHelper.visitAllFiles(getOutputDir(), list), "1.5", TestHelper.buildClasspath(jars));
+		
+		URL[] urls = new URL[]{file.toURL()};
+		Thread currentThread = Thread.currentThread();
+		URLClassLoader ucl = new URLClassLoader( urls, currentThread.getContextClassLoader() );
+		currentThread.setContextClassLoader( ucl );
+
+		
+		Class withversionClazz = ucl.loadClass("myPackage.Withversion");
+		Class withrealtimestampClazz = ucl.loadClass("myPackage.Withrealtimestamp");
+		Class noversionClazz = ucl.loadClass("myPackage.Noversion");
+		Class withfaketimestampClazz = ucl.loadClass("myPackage.Withfaketimestamp");
+		AnnotationConfiguration derived = new AnnotationConfiguration();
+		derived.addAnnotatedClass( withversionClazz );
+		derived.addAnnotatedClass( withrealtimestampClazz );
+		derived.addAnnotatedClass( noversionClazz );
+		derived.addAnnotatedClass( withfaketimestampClazz );
+		
+		testVersioningInDerivedCfg(  derived , "myPackage." );
+		
+	}
+	
+	public static Test suite() {
+		return new TestSuite(VersioningForJDK50Test.class);
+	}
+}
Index: C:/tools/tools/etc/hibernate.properties
===================================================================
--- C:/tools/tools/etc/hibernate.properties	(revision 11551)
+++ C:/tools/tools/etc/hibernate.properties	(working copy)
@@ -438,4 +438,4 @@
 #hibernate.jndi.class com.ibm.websphere.naming.WsnInitialContextFactory
 #hibernate.jndi.url iiop://localhost:900/
 
-hibernatetool.metadatadialect org.hibernate.cfg.reveng.dialect.H2MetaDataDialect
\ No newline at end of file
+#hibernatetool.metadatadialect org.hibernate.cfg.reveng.dialect.H2MetaDataDialect
\ No newline at end of file
