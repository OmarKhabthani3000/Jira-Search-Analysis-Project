Define a multi-line description with:
	<meta attribute="field-description">

    <class name="com.dygtig.domain.Actype" table="actype" catalog="takeoff">
        <id name="id" type="long">
            <column name="ID"/>
            <generator class="assigned" />
        </id>
        <property name="ver" type="long">
->>         <meta attribute="field-description">
            Descriptive text.... yada yada yada
             Descriptive text.... yada yada yada
             Descriptive text.... yada yada yada
             Descriptive text.... yada yada yada
             Descriptive text.... yada yada yada
            Descriptive text.... yada yada yada
            </meta>
            <column name="VER" not-null="true" />
        </property>
        <property name="type" type="character">
            <column name="TYPE" not-null="true" />
        </property>
        <property name="suffix" type="character">
            <column name="SUFFIX" not-null="true" />
        </property>
        <property name="model" type="string">
            <column name="MODEL" not-null="true" />
        </property>
    </class>


Generated output without fix (note spaces are carried forward)...

public class Actype  implements java.io.Serializable {

    // Fields

    /** id */
    private Long id;

    /**
     *             Descriptive text.... yada yada yada
     *              Descriptive text.... yada yada yada
     *              Descriptive text.... yada yada yada
     *              Descriptive text.... yada yada yada
     *              Descriptive text.... yada yada yada
     *             Descriptive text.... yada yada yada
     *
     */

With the fix ("pretty" :)

public class Actype  implements java.io.Serializable {

    // Fields

    /** id */
    private Long id;

    /**
     * ver
     * <p>
     * Descriptive text.... yada yada yada
     *  Descriptive text.... yada yada yada
     *  Descriptive text.... yada yada yada
     *  Descriptive text.... yada yada yada
     *  Descriptive text.... yada yada yada
     * Descriptive text.... yada yada yada
     *
     */


New method in StringUtil:

    /**
     * Strip any of the supplied string from the start of a string but
     * do not strip more than maxStrip characters.
     * <p>
     * If maxStrip value is zero then no restriction is imposed.
     * <p>
     * @param str  the string to remove characters from
     * @param strip  the string to remove
     * @param max characters to strip
     * @return the stripped string
     */
	public static String stripStart(String str, String strip, int maxStrip) {
        if (str == null) return null;

		if (maxStrip > 0 && str.length() > maxStrip)
			return stripStart(str.substring(0,maxStrip-1), strip) + str.substring(maxStrip);
		else
			return stripStart(str, strip);
	}



Used in Cfg2JavaTool:


	/**
	 * Output supplied string as JavaDoc.  Prefex each line with a "*"
	 * add the indent spaces for all lines except the first line.
	 *
	 * @param string to output
	 * @param int    number of spaces to indent after the first line.
	 *
	 * @todo add StringTokenizer to delimit string on a group of delimiters.
	 */
	public String toJavaDoc(String string, int indent) {
	    StringBuffer result = new StringBuffer();
		int baseIndent;
	    if(string!=null) {
	     	Object[] lines = StringUtils.split(string, "\n\r\f");
>	     	if (lines.length > 1)
>	     		baseIndent = ((String) lines[0]).length() - StringUtils.stripStart((String) lines[0], null).length();
>	     	else
>	     		baseIndent = 0;

	        for (int i = 0; i < lines.length; i++) {
>	            String docline = StringUtils.stripStart((String) lines[i],
null, baseIndent);
	            if (i<lines.length-1) docline += "\n";
				docline = "* " + docline;
				if (i == 0)
					result.append(docline);
				else
					result.append(StringUtils.leftPad(docline, docline.length() + indent));
	        }

	    }
	    return result.toString();
	}

