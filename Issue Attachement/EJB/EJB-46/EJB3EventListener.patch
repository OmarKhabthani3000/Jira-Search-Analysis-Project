Index: D:/projects/hibernateExt/ejb/src/java/org/hibernate/ejb/event/EJB3MergeEventListener.java
===================================================================
--- D:/projects/hibernateExt/ejb/src/java/org/hibernate/ejb/event/EJB3MergeEventListener.java	(revision 9926)
+++ D:/projects/hibernateExt/ejb/src/java/org/hibernate/ejb/event/EJB3MergeEventListener.java	(working copy)
@@ -1,6 +1,8 @@
 //$Id$
 package org.hibernate.ejb.event;
 
+import java.io.Serializable;
+import org.hibernate.HibernateException;
 import org.hibernate.event.EventSource;
 import org.hibernate.event.def.DefaultMergeEventListener;
 import org.hibernate.persister.entity.EntityPersister;
@@ -21,17 +23,31 @@
 		super();
 	}
 
-	;
-
 	public EJB3MergeEventListener(EntityCallbackHandler callbackHandler) {
 		super();
 		this.callbackHandler = callbackHandler;
 	}
 
 	@Override
-	protected boolean invokeSaveLifecycle(Object entity, EntityPersister persister, EventSource source) {
-		callbackHandler.preCreate( entity ); //always call the precreate event even if on safe vetoe it
-		return super.invokeSaveLifecycle( entity, persister, source );
-
+	protected Serializable saveWithGeneratedId(
+			Object entity,
+			String entityName,
+			Object anything,
+			EventSource source,
+			boolean requiresImmediateIdAccess)
+	throws HibernateException {
+		callbackHandler.preCreate( entity );
+		return super.saveWithGeneratedId(entity, entityName, anything, source, requiresImmediateIdAccess);
 	}
+	
+	@Override
+	protected Serializable saveWithRequestedId(
+			Object entity,
+			Serializable requestedId,
+			String entityName,
+			Object anything,
+			EventSource source) 
+	throws HibernateException {
+		return super.saveWithRequestedId(entity, requestedId, entityName, anything, source);
+	}
 }
Index: D:/projects/hibernateExt/ejb/src/java/org/hibernate/ejb/event/EJB3PersistEventListener.java
===================================================================
--- D:/projects/hibernateExt/ejb/src/java/org/hibernate/ejb/event/EJB3PersistEventListener.java	(revision 9926)
+++ D:/projects/hibernateExt/ejb/src/java/org/hibernate/ejb/event/EJB3PersistEventListener.java	(working copy)
@@ -1,6 +1,8 @@
 //$Id$
 package org.hibernate.ejb.event;
 
+import java.io.Serializable;
+import org.hibernate.HibernateException;
 import org.hibernate.event.EventSource;
 import org.hibernate.event.def.DefaultPersistEventListener;
 import org.hibernate.persister.entity.EntityPersister;
@@ -27,8 +29,25 @@
 	}
 
 	@Override
-	protected boolean invokeSaveLifecycle(Object entity, EntityPersister persister, EventSource source) {
-		callbackHandler.preCreate( entity ); //always call the precreate event even if on safe vetoe it
-		return super.invokeSaveLifecycle( entity, persister, source );
+	protected Serializable saveWithGeneratedId(
+			Object entity,
+			String entityName,
+			Object anything,
+			EventSource source,
+			boolean requiresImmediateIdAccess)
+	throws HibernateException {
+		callbackHandler.preCreate( entity );
+		return super.saveWithGeneratedId(entity, entityName, anything, source, requiresImmediateIdAccess);
 	}
+	
+	@Override
+	protected Serializable saveWithRequestedId(
+			Object entity,
+			Serializable requestedId,
+			String entityName,
+			Object anything,
+			EventSource source) 
+	throws HibernateException {
+		return super.saveWithRequestedId(entity, requestedId, entityName, anything, source);
+	}
 }
Index: D:/projects/hibernateExt/ejb/src/java/org/hibernate/ejb/event/EJB3SaveEventListener.java
===================================================================
--- D:/projects/hibernateExt/ejb/src/java/org/hibernate/ejb/event/EJB3SaveEventListener.java	(revision 9926)
+++ D:/projects/hibernateExt/ejb/src/java/org/hibernate/ejb/event/EJB3SaveEventListener.java	(working copy)
@@ -1,6 +1,9 @@
 //$Id$
 package org.hibernate.ejb.event;
 
+import java.io.Serializable;
+
+import org.hibernate.HibernateException;
 import org.hibernate.event.EventSource;
 import org.hibernate.event.def.DefaultSaveEventListener;
 import org.hibernate.persister.entity.EntityPersister;
@@ -29,8 +32,25 @@
 	}
 
 	@Override
-	protected boolean invokeSaveLifecycle(Object entity, EntityPersister persister, EventSource source) {
-		callbackHandler.preCreate( entity ); //always call the precreate event even if on safe vetoe it
-		return super.invokeSaveLifecycle( entity, persister, source );
+	protected Serializable saveWithGeneratedId(
+			Object entity,
+			String entityName,
+			Object anything,
+			EventSource source,
+			boolean requiresImmediateIdAccess)
+	throws HibernateException {
+		callbackHandler.preCreate( entity );
+		return super.saveWithGeneratedId(entity, entityName, anything, source, requiresImmediateIdAccess);
 	}
+	
+	@Override
+	protected Serializable saveWithRequestedId(
+			Object entity,
+			Serializable requestedId,
+			String entityName,
+			Object anything,
+			EventSource source) 
+	throws HibernateException {
+		return super.saveWithRequestedId(entity, requestedId, entityName, anything, source);
+	}
 }
Index: D:/projects/hibernateExt/ejb/src/java/org/hibernate/ejb/event/EJB3SaveOrUpdateEventListener.java
===================================================================
--- D:/projects/hibernateExt/ejb/src/java/org/hibernate/ejb/event/EJB3SaveOrUpdateEventListener.java	(revision 9926)
+++ D:/projects/hibernateExt/ejb/src/java/org/hibernate/ejb/event/EJB3SaveOrUpdateEventListener.java	(working copy)
@@ -1,6 +1,9 @@
 //$Id$
 package org.hibernate.ejb.event;
 
+import java.io.Serializable;
+
+import org.hibernate.HibernateException;
 import org.hibernate.event.EventSource;
 import org.hibernate.event.def.DefaultSaveOrUpdateEventListener;
 import org.hibernate.persister.entity.EntityPersister;
@@ -21,16 +24,31 @@
 		super();
 	}
 
-	;
-
 	public EJB3SaveOrUpdateEventListener(EntityCallbackHandler callbackHandler) {
 		super();
 		this.callbackHandler = callbackHandler;
 	}
 
 	@Override
-	protected boolean invokeSaveLifecycle(Object entity, EntityPersister persister, EventSource source) {
-		callbackHandler.preCreate( entity ); //always call the precreate event even if on safe vetoe it
-		return super.invokeSaveLifecycle( entity, persister, source );
+	protected Serializable saveWithGeneratedId(
+			Object entity,
+			String entityName,
+			Object anything,
+			EventSource source,
+			boolean requiresImmediateIdAccess)
+	throws HibernateException {
+		callbackHandler.preCreate( entity );
+		return super.saveWithGeneratedId(entity, entityName, anything, source, requiresImmediateIdAccess);
 	}
+	
+	@Override
+	protected Serializable saveWithRequestedId(
+			Object entity,
+			Serializable requestedId,
+			String entityName,
+			Object anything,
+			EventSource source) 
+	throws HibernateException {
+		return super.saveWithRequestedId(entity, requestedId, entityName, anything, source);
+	}
 }
