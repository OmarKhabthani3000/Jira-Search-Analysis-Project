Proposed documentation.

Indexing Java BigDecimal type as a NumericField

As discussed in HSEARCH-678, Hibernate Search currently has no direct support for bridging BigDecimal objects to Lucene as a @NumericField, and the trie index optimisations that would bring.  There is direct support in the form of BigDecimalBridge, so that:

@Field BigDecimal val;

Will index the "val" attribute as a String object in Lucene.  This means it will not benefit from trie indexing and searching on this field will be slow.

Simply marking it as @NumericField is also doomed, because Hibernate Search has no defined way of bridging it as a numeric field.  So, the code:

@Field(name="val", index=Index.UN_TOKENIZED, store=Store.YES)
@NumericField
private BigDecimal val;

Will result in the exception "org.hibernate.search.SearchException: Unable to guess FieldBridge for val" during SessionFactory initialisation.

One solution is to provide your own NumericFieldBridge that multiplies values, for example the value 1.23 would be multiplied by 100 to be stored as the number 123 in Lucene, and divided by 100 again on retrieval:

import java.math.BigDecimal;
import org.apache.lucene.document.Document;
import org.hibernate.search.bridge.LuceneOptions;
import org.hibernate.search.bridge.builtin.NumericFieldBridge;

public class BigDecimalNumericFieldBridge extends NumericFieldBridge {
	private static final BigDecimal storeFactor = BigDecimal.valueOf(100);

	@Override
	public void set(String name, Object value, Document document, LuceneOptions luceneOptions) {
		if (value != null) {
			BigDecimal decimalValue = (BigDecimal) value;
			long indexedValue = decimalValue.multiply(storeFactor).longValue();
			luceneOptions.addNumericFieldToDocument(name, indexedValue, document);
		}
	}

	@Override
	public Object get(String name, Document document) {
		String fromLucene = document.get(name);
		BigDecimal storedBigDecimal = new BigDecimal(fromLucene);
		return storedBigDecimal.divide(storeFactor);
	}

}

then,

@Field @NumericField
@FieldBridge(impl = BigDecimalNumericFieldBridge.class)
private BigDecimal val;

The drawback is that this approach truncates the BigDecimal values, because their values can be truly huge, as described here: http://download.oracle.com/javase/6/docs/api/java/math/BigDecimal.html#longValue()
