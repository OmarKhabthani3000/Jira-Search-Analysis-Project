Index: /home/munrbra/hibernateext/HibernateExt/search/src/java/org/hibernate/search/engine/DocumentBuilder.java
===================================================================
--- /home/munrbra/hibernateext/HibernateExt/search/src/java/org/hibernate/search/engine/DocumentBuilder.java	(revision 11520)
+++ /home/munrbra/hibernateext/HibernateExt/search/src/java/org/hibernate/search/engine/DocumentBuilder.java	(working copy)
@@ -182,6 +182,20 @@
 			propertiesMetadata.fieldIndex.add( getIndex( fieldAnn.index() ) );
 			propertiesMetadata.fieldBridges.add( BridgeFactory.guessType( member ) );
 		}
+		
+		org.hibernate.search.annotations.Fields fieldsAnn =
+			member.getAnnotation(org.hibernate.search.annotations.Fields.class);
+		if(fieldsAnn != null)
+		{
+			for(org.hibernate.search.annotations.Field field : fieldsAnn.fields())
+			{
+				propertiesMetadata.fieldGetters.add(member);
+				propertiesMetadata.fieldNames.add(prefix + BinderHelper.getAttributeName(member, field.name()));
+				propertiesMetadata.fieldStore.add(getStore(field.store()));
+				propertiesMetadata.fieldIndex.add(getIndex(field.index()));
+				propertiesMetadata.fieldBridges.add(BridgeFactory.guessType(member));
+			}
+		}
 
 		IndexedEmbedded embeddedAnn = member.getAnnotation( IndexedEmbedded.class );
 		if ( embeddedAnn != null ) {
Index: /home/munrbra/hibernateext/HibernateExt/search/src/test/org/hibernate/search/test/query/Book.java
===================================================================
--- /home/munrbra/hibernateext/HibernateExt/search/src/test/org/hibernate/search/test/query/Book.java	(revision 11520)
+++ /home/munrbra/hibernateext/HibernateExt/search/src/test/org/hibernate/search/test/query/Book.java	(working copy)
@@ -4,6 +4,10 @@
 import javax.persistence.Entity;
 import javax.persistence.Id;
 
+import org.hibernate.search.annotations.Store;
+import org.hibernate.search.annotations.Index;
+import org.hibernate.search.annotations.Field;
+import org.hibernate.search.annotations.Fields;
 import org.hibernate.search.annotations.Indexed;
 import org.hibernate.search.annotations.Text;
 import org.hibernate.search.annotations.Keyword;
@@ -29,7 +33,14 @@
 		this.body = body;
 	}
 
-	@Unstored
+	@Fields(fields={
+				@Field(name="body", 
+					   index=Index.TOKENIZED, 
+					   store=Store.YES),
+				@Field(name="bodySort",
+					   index=Index.UN_TOKENIZED, 
+					   store=Store.NO)
+					})
 	public String getBody() {
 		return body;
 	}
Index: /home/munrbra/hibernateext/HibernateExt/search/src/test/org/hibernate/search/test/query/LuceneQueryTest.java
===================================================================
--- /home/munrbra/hibernateext/HibernateExt/search/src/test/org/hibernate/search/test/query/LuceneQueryTest.java	(revision 11520)
+++ /home/munrbra/hibernateext/HibernateExt/search/src/test/org/hibernate/search/test/query/LuceneQueryTest.java	(working copy)
@@ -13,6 +13,7 @@
 import org.hibernate.ScrollableResults;
 import org.hibernate.stat.Statistics;
 import org.apache.lucene.search.Query;
+import org.apache.lucene.search.Sort;
 import org.apache.lucene.queryParser.QueryParser;
 import org.apache.lucene.analysis.StopAnalyzer;
 
@@ -22,6 +23,40 @@
  */
 public class LuceneQueryTest extends SearchTestCase {
 
+	public void testFields() throws Exception
+	{
+		FullTextSession s = Search.createFullTextSession(openSession());
+		Transaction tx = s.beginTransaction();
+		Book book = new Book(1, "Testing Fields", "Some body to test");
+		s.save(book);
+		Book book2 = new Book(2, "Second Testing Fields", "A body");
+		s.save(book2);
+		tx.commit();
+		s.clear();
+		
+		tx = s.beginTransaction();
+		QueryParser parser = new QueryParser("title", new StopAnalyzer());
+		Query query = parser.parse("body:body");
+		FullTextQuery hibQuery = s.createFullTextQuery(query, Book.class);
+		hibQuery.setSort(new Sort("bodySort", true));
+		List result = hibQuery.list();
+		
+		assertNotNull(result);
+		assertEquals(2, result.size());
+		assertEquals("Testing Fields", ((Book)result.get(0)).getSummary());
+		assertEquals("Second Testing Fields", ((Book)result.get(1)).getSummary());
+		
+		result.clear();
+		hibQuery.setSort(new Sort("bodySort", false));
+		result = hibQuery.list();
+		
+		assertNotNull(result);
+		assertEquals(2, result.size());
+		assertEquals("Second Testing Fields", ((Book)result.get(0)).getSummary());
+		assertEquals("Testing Fields", ((Book)result.get(1)).getSummary());
+		tx.commit();
+		s.close();
+	}
 	public void testList() throws Exception {
 		FullTextSession s = Search.createFullTextSession( openSession() );
 		Transaction tx = s.beginTransaction();
