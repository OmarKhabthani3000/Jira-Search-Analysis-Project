From a7551317925405dbae5112e272761597ec4db2cc Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Yoann=20Rodi=C3=A8re?= <yoann@hibernate.org>
Date: Thu, 29 Sep 2016 10:45:12 +0200
Subject: [PATCH] HSEARCH-2363 Test case for ambiguous string repressentation
 in ZonedDateTimeBridge

---
 .../search/test/bridge/time/JavaTimeTest.java      | 29 ++++++++++++++--------
 1 file changed, 19 insertions(+), 10 deletions(-)

diff --git a/orm/src/test/java/org/hibernate/search/test/bridge/time/JavaTimeTest.java b/orm/src/test/java/org/hibernate/search/test/bridge/time/JavaTimeTest.java
index 70c1a19..76295cc 100644
--- a/orm/src/test/java/org/hibernate/search/test/bridge/time/JavaTimeTest.java
+++ b/orm/src/test/java/org/hibernate/search/test/bridge/time/JavaTimeTest.java
@@ -22,6 +22,7 @@
 import java.time.YearMonth;
 import java.time.ZoneId;
 import java.time.ZoneOffset;
+import java.time.ZonedDateTime;
 
 import javax.persistence.Column;
 import javax.persistence.Entity;
@@ -68,16 +69,6 @@ public void testLocalDate() throws Exception {
 	}
 
 	@Test
-	public void testLocalTime() throws Exception {
-		LocalTime time = LocalTime.of( 13, 15, 55, 7 );
-
-		Sample sample = new Sample( 1L, "LocalTime example" );
-		sample.localTime = time;
-
-		assertThatFieldIsIndexed( "localTime", time, sample );
-	}
-
-	@Test
 	public void testLocalDateTime() throws Exception {
 		LocalDate date = LocalDate.of( 1998, Month.FEBRUARY, 12 );
 		LocalTime time = LocalTime.of( 13, 05, 33 );
@@ -163,6 +154,21 @@ public void testOffsetTime() throws Exception {
 	}
 
 	@Test
+	public void testZonedDateTime() throws Exception {
+		// CET DST rolls back at 2011-10-30 2:59:59 (+02) to 2011-10-30 2:00:00 (+01)
+		// Credit: user leonbloy at http://stackoverflow.com/a/18794412/6692043
+		LocalDateTime localDateTime = LocalDateTime.of( 2011, 10, 30, 2, 50, 0, 0 );
+
+		ZonedDateTime value = localDateTime.atZone( ZoneId.of( "CET" ) ).withLaterOffsetAtOverlap();
+
+		Sample sample = new Sample( 1L, "ZonedDateTime example" );
+		sample.zonedDateTime = value;
+
+		assertThatFieldIsIndexed( "zonedDateTime", value, sample );
+	}
+
+
+	@Test
 	public void testYear() throws Exception {
 		Year value = Year.of( Year.MAX_VALUE );
 
@@ -265,6 +271,9 @@ public Sample(long id, String description) {
 		private OffsetDateTime offsetDateTime;
 
 		@Field(analyze = Analyze.NO, store = Store.YES)
+		private ZonedDateTime zonedDateTime;
+
+		@Field(analyze = Analyze.NO, store = Store.YES)
 		private OffsetTime offsetTime;
 
 		@Field(analyze = Analyze.NO, store = Store.YES)
