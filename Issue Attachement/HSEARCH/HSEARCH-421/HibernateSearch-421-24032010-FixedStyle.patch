Index: src/main/java/org/hibernate/search/Environment.java
===================================================================
--- src/main/java/org/hibernate/search/Environment.java	(revision 19121)
+++ src/main/java/org/hibernate/search/Environment.java	(working copy)
@@ -115,5 +115,8 @@
 	 *
 	 */
 	public static final String MODEL_MAPPING = "hibernate.search.model_mapping";
+
+
+	public static final String ERROR_HANDLER = "hibernate.search.error_handler";
 	
 }
Index: src/main/java/org/hibernate/search/backend/Workspace.java
===================================================================
--- src/main/java/org/hibernate/search/backend/Workspace.java	(revision 19121)
+++ src/main/java/org/hibernate/search/backend/Workspace.java	(working copy)
@@ -236,4 +236,8 @@
 		}
 	}
 
+	public SearchFactoryImplementor getSearchFactory() {
+        return this.searchFactoryImplementor;
+    }
+
 }
Index: src/main/java/org/hibernate/search/backend/impl/lucene/PerDPResources.java
===================================================================
--- src/main/java/org/hibernate/search/backend/impl/lucene/PerDPResources.java	(revision 19121)
+++ src/main/java/org/hibernate/search/backend/impl/lucene/PerDPResources.java	(working copy)
@@ -75,5 +75,9 @@
 		}
 		executor.shutdown();
 	}
+
+	public SearchFactoryImplementor getSearchFactory() {
+		return workspace.getSearchFactory();
+	}
 	
 }
Index: src/main/java/org/hibernate/search/engine/SearchFactoryImplementor.java
===================================================================
--- src/main/java/org/hibernate/search/engine/SearchFactoryImplementor.java	(revision 19121)
+++ src/main/java/org/hibernate/search/engine/SearchFactoryImplementor.java	(working copy)
@@ -35,6 +35,7 @@
 import org.hibernate.search.backend.Worker;
 import org.hibernate.search.backend.impl.batchlucene.BatchBackend;
 import org.hibernate.search.batchindexing.MassIndexerProgressMonitor;
+import org.hibernate.search.exception.ErrorHandler;
 import org.hibernate.search.filter.FilterCachingStrategy;
 import org.hibernate.search.store.DirectoryProvider;
 import org.hibernate.search.store.optimization.OptimizerStrategy;
@@ -93,4 +94,7 @@
 	Similarity getSimilarity(DirectoryProvider<?> directoryProvider);
 
 	boolean isExclusiveIndexUsageEnabled(DirectoryProvider<?> provider);
+
+	ErrorHandler getErrorHandler();
+	
 }
Index: src/main/java/org/hibernate/search/exception/ErrorContext.java
===================================================================
--- src/main/java/org/hibernate/search/exception/ErrorContext.java	(revision 0)
+++ src/main/java/org/hibernate/search/exception/ErrorContext.java	(revision 0)
@@ -0,0 +1,21 @@
+package org.hibernate.search.exception;
+
+import java.util.Set;
+
+/**
+ * ErrorContext
+ * 
+ * @author: Amin Mohammed-Coleman
+ * @since: Mar 23, 2010
+ */
+public interface ErrorContext {
+
+	Set<FailingOperation> getFailingOperations();
+
+	FailingOperation getOperationAtFault();
+
+	Throwable getThrowable();
+
+	boolean hasErrors();
+	
+}
Index: src/main/java/org/hibernate/search/exception/ErrorHandler.java
===================================================================
--- src/main/java/org/hibernate/search/exception/ErrorHandler.java	(revision 0)
+++ src/main/java/org/hibernate/search/exception/ErrorHandler.java	(revision 0)
@@ -0,0 +1,13 @@
+package org.hibernate.search.exception;
+
+/**
+ * ErrorHandler
+ * 
+ * @author: Amin Mohammed-Coleman
+ * @since: Mar 23, 2010
+ */
+public interface ErrorHandler {
+
+	void handle(ErrorContext context);
+	
+}
Index: src/main/java/org/hibernate/search/exception/FailingOperation.java
===================================================================
--- src/main/java/org/hibernate/search/exception/FailingOperation.java	(revision 0)
+++ src/main/java/org/hibernate/search/exception/FailingOperation.java	(revision 0)
@@ -0,0 +1,42 @@
+package org.hibernate.search.exception;
+
+import java.io.Serializable;
+
+public class FailingOperation implements Serializable {
+
+	private final Serializable id;
+
+	private final Class<?> entityClass;
+
+	private final Operation operation;
+
+	public FailingOperation(final Serializable id, final Class<?> entityClass, final Operation operation) {
+		this.id = id;
+		this.entityClass = entityClass;
+		this.operation = operation;
+	}
+
+	public Serializable getId() {
+		return this.id;
+	}
+
+	public Class<?> getEntityClass() {
+		return this.entityClass;
+	}
+
+	public Operation getOperation() {
+		return this.operation;
+	}
+
+	public enum Operation {
+		ADD, UPDATE, DELETE, OPTIMIZE;
+	}
+
+	@Override
+	public String toString() {
+		StringBuilder builder = new StringBuilder();
+		builder.append( "Operation " ).append( operation ).append( " for " ).append( entityClass ).append( " failed." );
+		return builder.toString();
+	}
+	
+}
Index: src/main/java/org/hibernate/search/exception/LogErrorHandler.java
===================================================================
--- src/main/java/org/hibernate/search/exception/LogErrorHandler.java	(revision 0)
+++ src/main/java/org/hibernate/search/exception/LogErrorHandler.java	(revision 0)
@@ -0,0 +1,14 @@
+package org.hibernate.search.exception;
+
+import org.hibernate.search.util.LoggerFactory;
+import org.slf4j.Logger;
+
+public class LogErrorHandler implements ErrorHandler {
+
+	private static final Logger log = LoggerFactory.make();
+
+	public void handle(ErrorContext context) {
+		log.error( "" + context );
+	}
+	
+}
Index: src/main/java/org/hibernate/search/exception/impl/ErrorContextBuilder.java
===================================================================
--- src/main/java/org/hibernate/search/exception/impl/ErrorContextBuilder.java	(revision 0)
+++ src/main/java/org/hibernate/search/exception/impl/ErrorContextBuilder.java	(revision 0)
@@ -0,0 +1,43 @@
+package org.hibernate.search.exception.impl;
+
+import org.hibernate.search.exception.ErrorContext;
+import org.hibernate.search.exception.FailingOperation;
+
+import java.util.HashSet;
+import java.util.Set;
+
+public class ErrorContextBuilder {
+
+	private FailingOperation operationAtFault;
+
+	private Throwable th;
+
+	private Set<FailingOperation> failingOperations;
+
+	public ErrorContextBuilder() {
+		failingOperations = new HashSet<FailingOperation>();
+	}
+
+	public ErrorContextBuilder primaryFailure(FailingOperation operationAtFault) {
+		this.operationAtFault = operationAtFault;
+		return this;
+	}
+
+	public ErrorContextBuilder errorThatOccurred(Throwable th) {
+		this.th = th;
+		return this;
+	}
+
+	public ErrorContextBuilder subsequentFailure(FailingOperation operation) {
+		failingOperations.add( operation );
+		return this;
+	}
+
+	public ErrorContext createErrorContext() {
+		ErrorContextImpl context = new ErrorContextImpl();
+		context.setOperationAtFault( operationAtFault );
+		context.setThrowable( th );
+		return context;
+	}
+	
+}
Index: src/main/java/org/hibernate/search/exception/impl/ErrorContextImpl.java
===================================================================
--- src/main/java/org/hibernate/search/exception/impl/ErrorContextImpl.java	(revision 0)
+++ src/main/java/org/hibernate/search/exception/impl/ErrorContextImpl.java	(revision 0)
@@ -0,0 +1,58 @@
+package org.hibernate.search.exception.impl;
+
+import org.hibernate.search.exception.ErrorContext;
+import org.hibernate.search.exception.FailingOperation;
+
+import java.util.Collections;
+import java.util.Set;
+
+class ErrorContextImpl implements ErrorContext {
+
+	private Set<FailingOperation> failingOperations;
+
+	private FailingOperation operationAtFault;
+
+	private Throwable throwable;
+
+	public Set<FailingOperation> getFailingOperations() {
+		return Collections.unmodifiableSet( failingOperations );
+	}
+
+	public FailingOperation getOperationAtFault() {
+		return this.operationAtFault;
+	}
+
+	public Throwable getThrowable() {
+		return this.throwable;
+	}
+
+	public void setFailingOperations(Set<FailingOperation> failingOperations) {
+		this.failingOperations = failingOperations;
+	}
+
+	public void setThrowable(Throwable th) {
+		this.throwable = th;
+	}
+
+	public void setOperationAtFault(FailingOperation operationAtFault) {
+		this.operationAtFault = operationAtFault;
+	}
+
+	public boolean hasErrors() {
+		final boolean hasFailingOperations = failingOperations != null && failingOperations.size() > 0;
+		return operationAtFault != null && hasFailingOperations;
+	}
+
+	@Override
+	public String toString() {
+		StringBuilder builder = new StringBuilder();
+		builder.append( "Operation at fault " ).append( operationAtFault );
+		builder.append( "Subsequent operations that failed " ).append( "\n" );
+		for ( FailingOperation failingOperation : failingOperations ) {
+			builder.append( failingOperation ).append( "\n" );
+		}
+		builder.append( "Underlying exception " ).append( throwable.toString() );
+		return builder.toString();
+	}
+	
+}
Index: src/main/java/org/hibernate/search/impl/SearchFactoryImpl.java
===================================================================
--- src/main/java/org/hibernate/search/impl/SearchFactoryImpl.java	(revision 19121)
+++ src/main/java/org/hibernate/search/impl/SearchFactoryImpl.java	(working copy)
@@ -74,6 +74,8 @@
 import org.hibernate.search.engine.EntityState;
 import org.hibernate.search.engine.FilterDef;
 import org.hibernate.search.engine.SearchFactoryImplementor;
+import org.hibernate.search.exception.ErrorHandler;
+import org.hibernate.search.exception.LogErrorHandler;
 import org.hibernate.search.filter.CachingWrapperFilter;
 import org.hibernate.search.filter.FilterCachingStrategy;
 import org.hibernate.search.filter.MRUFilterCachingStrategy;
@@ -689,4 +691,13 @@
 		return dirProviderData.get( provider ).exclusiveIndexUsage;
 	}
 
+	public ErrorHandler getErrorHandler() {
+		String errorHandlerClassName = configurationProperties.getProperty( Environment.ERROR_HANDLER );
+		if ( StringHelper.isEmpty( errorHandlerClassName ) ) {
+			return new LogErrorHandler();
+		}
+		return PluginLoader.instanceFromName( ErrorHandler.class, errorHandlerClassName, SearchFactoryImpl.class,
+				"Error Handler" );
+	}
+
 }
