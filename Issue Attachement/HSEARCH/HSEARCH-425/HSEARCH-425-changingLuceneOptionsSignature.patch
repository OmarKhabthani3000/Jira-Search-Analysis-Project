Index: src/test/java/org/hibernate/search/test/configuration/CatDeptsFieldsClassBridge.java
===================================================================
--- src/test/java/org/hibernate/search/test/configuration/CatDeptsFieldsClassBridge.java	(revision 18993)
+++ src/test/java/org/hibernate/search/test/configuration/CatDeptsFieldsClassBridge.java	(working copy)
@@ -27,7 +27,6 @@
 import java.util.Map;
 
 import org.apache.lucene.document.Document;
-import org.apache.lucene.document.Field;
 import org.hibernate.search.bridge.FieldBridge;
 import org.hibernate.search.bridge.LuceneOptions;
 import org.hibernate.search.bridge.ParameterizedBridge;
@@ -58,9 +57,7 @@
 		if ( fieldValue2 == null ) {
 			fieldValue2 = "";
 		}
-		String fieldValue = fieldValue1 + sepChar + fieldValue2;
-		Field field = new Field( name, fieldValue, luceneOptions.getStore(), luceneOptions.getIndex(), luceneOptions.getTermVector() );
-		field.setBoost( luceneOptions.getBoost() );
-		document.add( field );
+		String indexedString = fieldValue1 + sepChar + fieldValue2;
+		luceneOptions.addToDocument( name, indexedString, document );
 	}
 }
Index: src/test/java/org/hibernate/search/test/configuration/EquipmentType.java
===================================================================
--- src/test/java/org/hibernate/search/test/configuration/EquipmentType.java	(revision 18993)
+++ src/test/java/org/hibernate/search/test/configuration/EquipmentType.java	(working copy)
@@ -27,7 +27,6 @@
 import java.util.Map;
 
 import org.apache.lucene.document.Document;
-import org.apache.lucene.document.Field;
 
 import org.hibernate.search.bridge.FieldBridge;
 import org.hibernate.search.bridge.LuceneOptions;
@@ -38,6 +37,7 @@
  */
 @SuppressWarnings("unchecked")
 public class EquipmentType implements FieldBridge, ParameterizedBridge {
+
 	private Map equips;
 
 	public void setParameterValues(Map parameters) {
@@ -51,16 +51,12 @@
 		// a requirement. It just works that way in this instance. The
 		// actual name could be supplied by hard coding it below.
 		Departments deps = ( Departments ) value;
-		Field field;
-		String fieldValue1 = deps.getManufacturer();
+		String fieldValue = deps.getManufacturer();
 
-		if ( fieldValue1 != null ) {
-			String fieldValue = ( String ) equips.get( fieldValue1 );
-			field = new Field(
-					name, fieldValue, luceneOptions.getStore(), luceneOptions.getIndex(), luceneOptions.getTermVector()
-			);
-			field.setBoost( luceneOptions.getBoost() );
-			document.add( field );
+		if ( fieldValue != null ) {
+			String indexedString = ( String ) equips.get( fieldValue );
+			luceneOptions.addToDocument( name, indexedString, document );
 		}
 	}
+	
 }
Index: src/test/java/org/hibernate/search/test/bridge/CatFieldsClassBridge.java
===================================================================
--- src/test/java/org/hibernate/search/test/bridge/CatFieldsClassBridge.java	(revision 18993)
+++ src/test/java/org/hibernate/search/test/bridge/CatFieldsClassBridge.java	(working copy)
@@ -27,7 +27,6 @@
 import java.util.Map;
 
 import org.apache.lucene.document.Document;
-import org.apache.lucene.document.Field;
 import org.hibernate.search.bridge.FieldBridge;
 import org.hibernate.search.bridge.LuceneOptions;
 import org.hibernate.search.bridge.ParameterizedBridge;
@@ -58,9 +57,7 @@
 		if ( fieldValue2 == null ) {
 			fieldValue2 = "";
 		}
-		String fieldValue = fieldValue1 + sepChar + fieldValue2;
-		Field field = new Field( name, fieldValue, luceneOptions.getStore(), luceneOptions.getIndex(), luceneOptions.getTermVector() );
-		field.setBoost( luceneOptions.getBoost() );
-		document.add( field );
+		String indexedString = fieldValue1 + sepChar + fieldValue2;
+		luceneOptions.addToDocument( name, indexedString, document );
 	}
 }
Index: src/test/java/org/hibernate/search/test/bridge/CatDeptsFieldsClassBridge.java
===================================================================
--- src/test/java/org/hibernate/search/test/bridge/CatDeptsFieldsClassBridge.java	(revision 18993)
+++ src/test/java/org/hibernate/search/test/bridge/CatDeptsFieldsClassBridge.java	(working copy)
@@ -27,7 +27,6 @@
 import java.util.Map;
 
 import org.apache.lucene.document.Document;
-import org.apache.lucene.document.Field;
 import org.hibernate.search.bridge.FieldBridge;
 import org.hibernate.search.bridge.LuceneOptions;
 import org.hibernate.search.bridge.ParameterizedBridge;
@@ -58,9 +57,7 @@
 		if ( fieldValue2 == null ) {
 			fieldValue2 = "";
 		}
-		String fieldValue = fieldValue1 + sepChar + fieldValue2;
-		Field field = new Field( name, fieldValue, luceneOptions.getStore(), luceneOptions.getIndex(), luceneOptions.getTermVector() );
-		field.setBoost( luceneOptions.getBoost() );
-		document.add( field );
+		String indexedString = fieldValue1 + sepChar + fieldValue2;
+		luceneOptions.addToDocument( name, indexedString, document );
 	}
 }
Index: src/test/java/org/hibernate/search/test/bridge/DateSplitBridge.java
===================================================================
--- src/test/java/org/hibernate/search/test/bridge/DateSplitBridge.java	(revision 18993)
+++ src/test/java/org/hibernate/search/test/bridge/DateSplitBridge.java	(working copy)
@@ -30,7 +30,6 @@
 import java.util.TimeZone;
 
 import org.apache.lucene.document.Document;
-import org.apache.lucene.document.Field;
 import org.hibernate.search.bridge.FieldBridge;
 import org.hibernate.search.bridge.LuceneOptions;
 
@@ -52,24 +51,14 @@
 		int day = cal.get(Calendar.DAY_OF_MONTH);
 		
 		// set year
-		Field field = new Field(name + ".year", String.valueOf(year),
-				luceneOptions.getStore(), luceneOptions.getIndex(),
-				luceneOptions.getTermVector());
-		field.setBoost(luceneOptions.getBoost());
-		document.add(field);
+		luceneOptions.addToDocument( name + ".year", String.valueOf(year), document );
 		
 		// set month and pad it if needed
-		field = new Field(name + ".month", month < 10 ? "0" : ""
-				+ String.valueOf(month), luceneOptions.getStore(),
-				luceneOptions.getIndex(), luceneOptions.getTermVector());
-		field.setBoost(luceneOptions.getBoost());
-		document.add(field);
+		luceneOptions.addToDocument( name + ".month",
+				month < 10 ? "0" : "" + String.valueOf(month), document );
 		
 		// set day and pad it if needed
-		field = new Field(name + ".day", day < 10 ? "0" : ""
-				+ String.valueOf(day), luceneOptions.getStore(),
-				luceneOptions.getIndex(), luceneOptions.getTermVector());
-		field.setBoost(luceneOptions.getBoost());
-		document.add(field);
+		luceneOptions.addToDocument( name + ".day",
+				day < 10 ? "0" : "" + String.valueOf(day), document );
 	}
 }
Index: src/test/java/org/hibernate/search/test/bridge/TruncateFieldBridge.java
===================================================================
--- src/test/java/org/hibernate/search/test/bridge/TruncateFieldBridge.java	(revision 18993)
+++ src/test/java/org/hibernate/search/test/bridge/TruncateFieldBridge.java	(working copy)
@@ -28,26 +28,23 @@
 import org.apache.lucene.document.Field;
 import org.hibernate.search.bridge.FieldBridge;
 import org.hibernate.search.bridge.LuceneOptions;
-import org.hibernate.util.StringHelper;
 
 /**
  * @author Emmanuel Bernard
  */
 public class TruncateFieldBridge implements FieldBridge {
+	
 	public Object get(String name, Document document) {
 		Field field = document.getField( name );
 		return field.stringValue();
 	}
 
 	public void set(String name, Object value, Document document, LuceneOptions luceneOptions) {
-		String indexedString = (String) value;
-		//Do not add fields on empty strings, seems a sensible default in most situations
-		if ( StringHelper.isNotEmpty( indexedString ) ) {
-			Field field = new Field(name, indexedString.substring(0,
-					indexedString.length() / 2), luceneOptions.getStore(),
-					luceneOptions.getIndex(), luceneOptions.getTermVector());
-			field.setBoost( luceneOptions.getBoost() );
-			document.add( field );
+		String stringValue = (String) value;
+		if ( stringValue != null ) {
+			String indexedString = stringValue.substring( 0, stringValue.length() / 2 );
+			luceneOptions.addToDocument( name, indexedString, document );
 		}
 	}
+	
 }
Index: src/test/java/org/hibernate/search/test/bridge/EquipmentType.java
===================================================================
--- src/test/java/org/hibernate/search/test/bridge/EquipmentType.java	(revision 18993)
+++ src/test/java/org/hibernate/search/test/bridge/EquipmentType.java	(working copy)
@@ -27,7 +27,6 @@
 import java.util.Map;
 
 import org.apache.lucene.document.Document;
-import org.apache.lucene.document.Field;
 
 import org.hibernate.search.bridge.FieldBridge;
 import org.hibernate.search.bridge.LuceneOptions;
@@ -51,16 +50,11 @@
 		// a requirement. It just works that way in this instance. The
 		// actual name could be supplied by hard coding it below.
 		Departments deps = ( Departments ) value;
-		Field field;
 		String fieldValue1 = deps.getManufacturer();
 
 		if ( fieldValue1 != null ) {
-			String fieldValue = ( String ) equips.get( fieldValue1 );
-			field = new Field(
-					name, fieldValue, luceneOptions.getStore(), luceneOptions.getIndex(), luceneOptions.getTermVector()
-			);
-			field.setBoost( luceneOptions.getBoost() );
-			document.add( field );
+			String indexedString = ( String ) equips.get( fieldValue1 );
+			luceneOptions.addToDocument( name, indexedString, document );
 		}
 	}
 }
Index: src/test/java/org/hibernate/search/test/id/PersonPKBridge.java
===================================================================
--- src/test/java/org/hibernate/search/test/id/PersonPKBridge.java	(revision 18993)
+++ src/test/java/org/hibernate/search/test/id/PersonPKBridge.java	(working copy)
@@ -55,35 +55,13 @@
 		PersonPK id = ( PersonPK ) value;
 
 		//store each property in a unique field
-		Field field = new Field(
-				name + ".firstName",
-				id.getFirstName(),
-				luceneOptions.getStore(),
-				luceneOptions.getIndex(),
-				luceneOptions.getTermVector()
-		);
-		field.setBoost( luceneOptions.getBoost() );
-		document.add( field );
+		luceneOptions.addToDocument( name + ".firstName", id.getFirstName(), document );
 
-		field = new Field(
-				name + ".lastName",
-				id.getLastName(),
-				luceneOptions.getStore(),
-				luceneOptions.getIndex(),
-				luceneOptions.getTermVector()
-		);
-		field.setBoost( luceneOptions.getBoost() );
-		document.add( field );
-
+		luceneOptions.addToDocument( name + ".lastName", id.getLastName(), document );
+		
 		//store the unique string representation in the named field
-		field = new Field(
-				name,
-				objectToString( id ),
-				luceneOptions.getStore(),
-				luceneOptions.getIndex(),
-				luceneOptions.getTermVector()
-		);
-		field.setBoost( luceneOptions.getBoost() );
-		document.add( field );
+		luceneOptions.addToDocument( name, objectToString( id ), document );
+
 	}
+	
 }
Index: src/main/java/org/hibernate/search/bridge/String2FieldBridgeAdaptor.java
===================================================================
--- src/main/java/org/hibernate/search/bridge/String2FieldBridgeAdaptor.java	(revision 18993)
+++ src/main/java/org/hibernate/search/bridge/String2FieldBridgeAdaptor.java	(working copy)
@@ -25,8 +25,6 @@
 package org.hibernate.search.bridge;
 
 import org.apache.lucene.document.Document;
-import org.apache.lucene.document.Field;
-import org.hibernate.util.StringHelper;
 
 /**
  * Bridge to use a StringBridge as a FieldBridge.
@@ -42,13 +40,7 @@
 
 	public void set(String name, Object value, Document document, LuceneOptions luceneOptions) {
 		String indexedString = stringBridge.objectToString( value );
-		//Do not add fields on empty strings, seems a sensible default in most situations
-		//TODO if Store, probably also save empty ones
-		if ( StringHelper.isNotEmpty( indexedString ) ) {
-			Field field = new Field( name, indexedString, luceneOptions.getStore(), luceneOptions.getIndex(), luceneOptions.getTermVector() );
-			field.setBoost( luceneOptions.getBoost() );
-			document.add( field );
-		}
+		luceneOptions.addToDocument( name, indexedString, document );
 	}
 
 }
Index: src/main/java/org/hibernate/search/bridge/LuceneOptions.java
===================================================================
--- src/main/java/org/hibernate/search/bridge/LuceneOptions.java	(revision 18993)
+++ src/main/java/org/hibernate/search/bridge/LuceneOptions.java	(working copy)
@@ -24,7 +24,7 @@
  */
 package org.hibernate.search.bridge;
 
-import org.apache.lucene.document.Field;
+import org.apache.lucene.document.Document;
 
 /**
  * A wrapper class for Lucene parameters needed for indexing.
@@ -32,15 +32,7 @@
  * @author Emmanuel Bernard
  */
 public interface LuceneOptions {
-	Field.Store getStore();
+	
+	void addToDocument(String name, String indexedString, Document document);
 
-	Field.Index getIndex();
-
-	Field.TermVector getTermVector();
-
-	/**
-	 * @return the boost value. If <code>boost == null</code>, the default boost value
-	 * 1.0 is returned.
-	 */
-	Float getBoost();
 }
Index: src/main/java/org/hibernate/search/engine/DocumentBuilderContainedEntity.java
===================================================================
--- src/main/java/org/hibernate/search/engine/DocumentBuilderContainedEntity.java	(revision 18993)
+++ src/main/java/org/hibernate/search/engine/DocumentBuilderContainedEntity.java	(working copy)
@@ -458,7 +458,7 @@
 	private void bindClassBridgeAnnotation(String prefix, PropertiesMetadata propertiesMetadata, ClassBridge ann, InitContext context) {
 		String fieldName = prefix + ann.name();
 		propertiesMetadata.classNames.add( fieldName );
-		propertiesMetadata.classStores.add( getStore( ann.store() ) );
+		propertiesMetadata.classStores.add( ann.store() );
 		propertiesMetadata.classIndexes.add( getIndex( ann.index() ) );
 		propertiesMetadata.classTermVectors.add( getTermVector( ann.termVector() ) );
 		propertiesMetadata.classBridges.add( BridgeFactory.extractType( ann ) );
@@ -479,7 +479,7 @@
 		propertiesMetadata.fieldGetters.add( member );
 		String fieldName = prefix + ReflectionHelper.getAttributeName( member, fieldAnn.name() );
 		propertiesMetadata.fieldNames.add( fieldName );
-		propertiesMetadata.fieldStore.add( getStore( fieldAnn.store() ) );
+		propertiesMetadata.fieldStore.add( fieldAnn.store() );
 		propertiesMetadata.fieldIndex.add( getIndex( fieldAnn.index() ) );
 		propertiesMetadata.fieldBoosts.add( getBoost( member, fieldAnn ) );
 		propertiesMetadata.dynamicFieldBoosts.add( getDynamicBoost( member ) );
@@ -539,19 +539,6 @@
 		return localPrefix;
 	}
 
-	protected Field.Store getStore(Store store) {
-		switch ( store ) {
-			case NO:
-				return Field.Store.NO;
-			case YES:
-				return Field.Store.YES;
-			case COMPRESS:
-				return Field.Store.COMPRESS;
-			default:
-				throw new AssertionFailure( "Unexpected Store: " + store );
-		}
-	}
-
 	protected Field.TermVector getTermVector(TermVector vector) {
 		switch ( vector ) {
 			case NO:
@@ -777,7 +764,7 @@
 		public final List<String> fieldNames = new ArrayList<String>();
 		public final List<XMember> fieldGetters = new ArrayList<XMember>();
 		public final List<FieldBridge> fieldBridges = new ArrayList<FieldBridge>();
-		public final List<Field.Store> fieldStore = new ArrayList<Field.Store>();
+		public final List<Store> fieldStore = new ArrayList<Store>();
 		public final List<Field.Index> fieldIndex = new ArrayList<Field.Index>();
 		public final List<Float> fieldBoosts = new ArrayList<Float>();
 		public final List<BoostStrategy> dynamicFieldBoosts = new ArrayList<BoostStrategy>();
@@ -789,7 +776,7 @@
 		public final List<XMember> containedInGetters = new ArrayList<XMember>();
 
 		public final List<String> classNames = new ArrayList<String>();
-		public final List<Field.Store> classStores = new ArrayList<Field.Store>();
+		public final List<Store> classStores = new ArrayList<Store>();
 		public final List<Field.Index> classIndexes = new ArrayList<Field.Index>();
 		public final List<FieldBridge> classBridges = new ArrayList<FieldBridge>();
 		public final List<Field.TermVector> classTermVectors = new ArrayList<Field.TermVector>();
Index: src/main/java/org/hibernate/search/engine/LuceneOptionsImpl.java
===================================================================
--- src/main/java/org/hibernate/search/engine/LuceneOptionsImpl.java	(revision 18993)
+++ src/main/java/org/hibernate/search/engine/LuceneOptionsImpl.java	(working copy)
@@ -24,10 +24,14 @@
  */
 package org.hibernate.search.engine;
 
+import org.apache.lucene.document.CompressionTools;
+import org.apache.lucene.document.Document;
+import org.apache.lucene.document.Field;
 import org.apache.lucene.document.Field.Index;
-import org.apache.lucene.document.Field.Store;
 import org.apache.lucene.document.Field.TermVector;
 
+import org.hibernate.annotations.common.util.StringHelper;
+import org.hibernate.search.annotations.Store;
 import org.hibernate.search.bridge.LuceneOptions;
 
 /**
@@ -35,41 +39,48 @@
  * This is a package level class
  *  
  * @author Hardy Ferentschik
+ * @author Sanne Grinovero
  */
 class LuceneOptionsImpl implements LuceneOptions {
-	private final Store store;
-	private final Index index;
+	
+	private final boolean storeCompressed;
+	private final boolean storeUncompressed;
+	private final Index indexMode;
 	private final TermVector termVector;
 	private final Float boost;
 
-	public LuceneOptionsImpl(Store store, Index index, TermVector termVector, Float boost) {
-		this.store = store;
-		this.index = index;
+	public LuceneOptionsImpl(Store store, Index indexMode, TermVector termVector, Float boost) {
+		this.indexMode = indexMode;
 		this.termVector = termVector;
 		this.boost = boost;
+		this.storeCompressed = store.equals( Store.COMPRESS );
+		this.storeUncompressed = store.equals( Store.YES );
 	}
 
-	public Store getStore() {
-		return store;
+	public void addToDocument(String name, String indexedString, Document document) {
+		//Do not add fields on empty strings, seems a sensible default in most situations
+		//TODO if Store, probably also save empty ones
+		if ( StringHelper.isNotEmpty( indexedString ) ) {
+			if ( ! ( indexMode.equals( Index.NO ) && storeCompressed ) ) {
+				standardFieldAdd( name, indexedString, document );
+			}
+			if ( storeCompressed ) {
+				compressedFieldAdd( name, indexedString, document );
+			}
+		}
 	}
 
-	public Index getIndex() {
-		return index;
+	private void standardFieldAdd(String name, String indexedString, Document document) {
+		Field field = new Field( name, false, indexedString, storeUncompressed ? Field.Store.YES : Field.Store.NO , indexMode, termVector );
+		if ( boost != null )
+			field.setBoost( boost );
+		document.add( field );
 	}
-
-	public TermVector getTermVector() {
-		return termVector;
+	
+	private void compressedFieldAdd(String name, String indexedString, Document document) {
+		byte[] compressedString = CompressionTools.compressString( indexedString );
+		Field field = new Field( name, compressedString, Field.Store.YES );
+		document.add( field );
 	}
-
-	/**
-	 * @return the boost value. If <code>boost == null</code>, the default boost value
-	 * 1.0 is returned.
-	 */
-	public Float getBoost() {
-		if ( boost != null ) {
-			return boost;
-		} else {
-			return 1.0f;
-		}
-	}
+	
 }
Index: src/main/java/org/hibernate/search/engine/DocumentBuilderIndexedEntity.java
===================================================================
--- src/main/java/org/hibernate/search/engine/DocumentBuilderIndexedEntity.java	(revision 18993)
+++ src/main/java/org/hibernate/search/engine/DocumentBuilderIndexedEntity.java	(working copy)
@@ -214,7 +214,7 @@
 				propertiesMetadata.fieldGetters.add( member );
 				String fieldName = prefix + attributeName;
 				propertiesMetadata.fieldNames.add( fieldName );
-				propertiesMetadata.fieldStore.add( getStore( Store.YES ) );
+				propertiesMetadata.fieldStore.add( Store.YES );
 				propertiesMetadata.fieldIndex.add( getIndex( Index.UN_TOKENIZED ) );
 				propertiesMetadata.fieldTermVectors.add( getTermVector( TermVector.NO ) );
 				propertiesMetadata.fieldBridges.add( BridgeFactory.guessType( null, member, reflectionManager ) );
@@ -411,7 +411,7 @@
 
 		// now add the entity id to the document
 		LuceneOptions luceneOptions = new LuceneOptionsImpl(
-				Field.Store.YES,
+				Store.YES,
 				Field.Index.NOT_ANALYZED, Field.TermVector.NO, idBoost
 		);
 		idBridge.set( idKeywordName, id, doc, luceneOptions );
@@ -638,7 +638,7 @@
 			populateResult(
 					builderIndexedEntity.idKeywordName,
 					builderIndexedEntity.idBridge,
-					Field.Store.YES,
+					Store.YES,
 					fields,
 					result,
 					document
@@ -650,19 +650,19 @@
 		return result;
 	}
 
-	private static void populateResult(String fieldName, FieldBridge fieldBridge, Field.Store store,
+	private static void populateResult(String fieldName, FieldBridge fieldBridge, Store store,
 									   String[] fields, Object[] result, Document document) {
 		int matchingPosition = getFieldPosition( fields, fieldName );
 		if ( matchingPosition != -1 ) {
 			//TODO make use of an isTwoWay() method
-			if ( store != Field.Store.NO && TwoWayFieldBridge.class.isAssignableFrom( fieldBridge.getClass() ) ) {
+			if ( store != Store.NO && TwoWayFieldBridge.class.isAssignableFrom( fieldBridge.getClass() ) ) {
 				result[matchingPosition] = ( ( TwoWayFieldBridge ) fieldBridge ).get( fieldName, document );
 				if ( log.isTraceEnabled() ) {
 					log.trace( "Field {} projected as {}", fieldName, result[matchingPosition] );
 				}
 			}
 			else {
-				if ( store == Field.Store.NO ) {
+				if ( store == Store.NO ) {
 					throw new SearchException( "Projecting an unstored field: " + fieldName );
 				}
 				else {
