Index: test/org/hibernate/search/test/embedded/Address.java
===================================================================
--- test/org/hibernate/search/test/embedded/Address.java	(revision 14081)
+++ test/org/hibernate/search/test/embedded/Address.java	(working copy)
@@ -3,18 +3,20 @@
 
 import java.util.Set;
 import java.util.HashSet;
+
 import javax.persistence.Entity;
 import javax.persistence.Id;
 import javax.persistence.GeneratedValue;
-import javax.persistence.OneToOne;
 import javax.persistence.OneToMany;
 
+import org.hibernate.annotations.Target;
 import org.hibernate.search.annotations.Indexed;
 import org.hibernate.search.annotations.DocumentId;
 import org.hibernate.search.annotations.Field;
 import org.hibernate.search.annotations.Index;
 import org.hibernate.search.annotations.IndexedEmbedded;
 import org.hibernate.search.annotations.ContainedIn;
+import org.hibernate.search.annotations.IndexedTarget;
 
 /**
  * @author Emmanuel Bernard
@@ -31,8 +33,10 @@
 	@Field(index= Index.TOKENIZED)
 	private String street;
 
+	@Target(Owner.class)
 	@IndexedEmbedded(depth = 1, prefix = "ownedBy_")
-	private Owner ownedBy;
+	@IndexedTarget(Owner.class)
+	private Person ownedBy;
 
 	@OneToMany(mappedBy = "address")
 	@ContainedIn
@@ -55,11 +59,11 @@
 		this.street = street;
 	}
 
-	public Owner getOwnedBy() {
+	public Person getOwnedBy() {
 		return ownedBy;
 	}
 
-	public void setOwnedBy(Owner ownedBy) {
+	public void setOwnedBy(Person ownedBy) {
 		this.ownedBy = ownedBy;
 	}
 
Index: test/org/hibernate/search/test/embedded/Person.java
===================================================================
--- test/org/hibernate/search/test/embedded/Person.java	(revision 0)
+++ test/org/hibernate/search/test/embedded/Person.java	(revision 0)
@@ -0,0 +1,19 @@
+/**
+ * $Id: $
+ * Hibernate Search Tests
+ * Copyright (c) 2007 ScanPlus GmbH, Ulm, Germany
+ */
+package org.hibernate.search.test.embedded;
+
+public interface Person
+{
+
+    public String getName();
+
+    public void setName(String name);
+
+    public Address getAddress();
+
+    public void setAddress(Address address);
+
+}
\ No newline at end of file
Index: test/org/hibernate/search/test/embedded/EmbeddedTest.java
===================================================================
--- test/org/hibernate/search/test/embedded/EmbeddedTest.java	(revision 14081)
+++ test/org/hibernate/search/test/embedded/EmbeddedTest.java	(working copy)
@@ -27,7 +27,7 @@
 		a.setStreet( "Tower place" );
 		a.getTowers().add( tower );
 		tower.setAddress( a );
-		Owner o = new Owner();
+		Person o = new Owner();
 		o.setName( "Atlanta Renting corp" );
 		a.setOwnedBy( o );
 		o.setAddress( a );
@@ -88,7 +88,7 @@
 		a.setStreet( "Tower place" );
 		a.getTowers().add( tower );
 		tower.setAddress( a );
-		Owner o = new Owner();
+		Person o = new Owner();
 		o.setName( "Atlanta Renting corp" );
 		a.setOwnedBy( o );
 		o.setAddress( a );
Index: test/org/hibernate/search/test/embedded/Owner.java
===================================================================
--- test/org/hibernate/search/test/embedded/Owner.java	(revision 14081)
+++ test/org/hibernate/search/test/embedded/Owner.java	(working copy)
@@ -12,7 +12,7 @@
  * @author Emmanuel Bernard
  */
 @Embeddable
-public class Owner {
+public class Owner implements Person {
 	@Field(index = Index.TOKENIZED)
 	private String name;
 
@@ -21,18 +21,30 @@
 	private Address address;
 
 
+	/* (non-Javadoc)
+     * @see org.hibernate.search.test.embedded.Person#getName()
+     */
 	public String getName() {
 		return name;
 	}
 
+	/* (non-Javadoc)
+     * @see org.hibernate.search.test.embedded.Person#setName(java.lang.String)
+     */
 	public void setName(String name) {
 		this.name = name;
 	}
 
+	/* (non-Javadoc)
+     * @see org.hibernate.search.test.embedded.Person#getAddress()
+     */
 	public Address getAddress() {
 		return address;
 	}
 
+	/* (non-Javadoc)
+     * @see org.hibernate.search.test.embedded.Person#setAddress(org.hibernate.search.test.embedded.Address)
+     */
 	public void setAddress(Address address) {
 		this.address = address;
 	}
Index: java/org/hibernate/search/annotations/IndexedTarget.java
===================================================================
--- java/org/hibernate/search/annotations/IndexedTarget.java	(revision 0)
+++ java/org/hibernate/search/annotations/IndexedTarget.java	(revision 0)
@@ -0,0 +1,18 @@
+package org.hibernate.search.annotations;
+
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Documented;
+
+@Retention( RetentionPolicy.RUNTIME )
+@Target( { ElementType.FIELD, ElementType.METHOD } )
+@Documented
+/**
+ * Specifies the type of an association (@*ToOne or @Embedded)
+ */
+public @interface IndexedTarget {
+
+    Class value();
+}
Index: java/org/hibernate/search/engine/DocumentBuilder.java
===================================================================
--- java/org/hibernate/search/engine/DocumentBuilder.java	(revision 14081)
+++ java/org/hibernate/search/engine/DocumentBuilder.java	(working copy)
@@ -32,6 +32,7 @@
 import org.hibernate.search.annotations.DocumentId;
 import org.hibernate.search.annotations.Index;
 import org.hibernate.search.annotations.IndexedEmbedded;
+import org.hibernate.search.annotations.IndexedTarget;
 import org.hibernate.search.annotations.Store;
 import org.hibernate.search.annotations.ClassBridge;
 import org.hibernate.search.annotations.ClassBridges;
@@ -237,6 +238,13 @@
 			level++;
 
 			XClass elementClass = member.getElementClass();
+			IndexedTarget targetAnn = member.getAnnotation( IndexedTarget.class );
+			if (null != targetAnn) {
+			    XClass tmpElementClass = reflectionManager.toXClass(targetAnn.value());
+			    if (null != tmpElementClass) {
+			        elementClass = tmpElementClass;
+			    }
+			}
 			if ( maxLevel == Integer.MAX_VALUE //infinite
 					&& processedClasses.contains( elementClass ) ) {
 				throw new SearchException(
