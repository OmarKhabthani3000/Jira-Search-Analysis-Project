diff --git a/orm/src/test/java/org/hibernate/search/test/shards/DynamicShardingTest.java b/orm/src/test/java/org/hibernate/search/test/shards/DynamicShardingTest.java
index d69f09d..73eb0b2 100644
--- a/orm/src/test/java/org/hibernate/search/test/shards/DynamicShardingTest.java
+++ b/orm/src/test/java/org/hibernate/search/test/shards/DynamicShardingTest.java
@@ -17,8 +17,13 @@
 import java.util.Properties;
 import java.util.Set;
 
+import javax.persistence.Entity;
+import javax.persistence.GeneratedValue;
+import javax.persistence.Id;
+
 import org.apache.lucene.document.Document;
 import org.apache.lucene.queryparser.classic.QueryParser;
+import org.apache.lucene.search.MatchAllDocsQuery;
 import org.hibernate.Criteria;
 import org.hibernate.Session;
 import org.hibernate.SessionFactory;
@@ -28,11 +33,17 @@
 import org.hibernate.criterion.Property;
 import org.hibernate.search.FullTextSession;
 import org.hibernate.search.Search;
+import org.hibernate.search.annotations.DocumentId;
+import org.hibernate.search.annotations.Field;
+import org.hibernate.search.annotations.Indexed;
+import org.hibernate.search.annotations.SortableField;
 import org.hibernate.search.engine.integration.impl.ExtendedSearchIntegrator;
 import org.hibernate.search.engine.service.spi.ServiceManager;
 import org.hibernate.search.engine.spi.EntityIndexBinding;
 import org.hibernate.search.hcore.impl.HibernateSessionFactoryService;
 import org.hibernate.search.indexes.spi.IndexManager;
+import org.hibernate.search.query.dsl.QueryBuilder;
+import org.hibernate.search.query.engine.spi.HSQuery;
 import org.hibernate.search.spi.BuildContext;
 import org.hibernate.search.store.ShardIdentifierProviderTemplate;
 import org.hibernate.search.test.SearchTestBase;
@@ -75,13 +86,13 @@ public void testDynamicCreationOfShards() throws Exception {
 		EntityIndexBinding entityIndexBinding = getExtendedSearchIntegrator().getIndexBindings().get( Animal.class );
 		assertThat( entityIndexBinding.getIndexManagers() ).hasSize( 0 );
 
-		insertAnimals( elephant );
+		insert( elephant );
 		assertThat( entityIndexBinding.getIndexManagers() ).hasSize( 1 );
 
-		insertAnimals( spider );
+		insert( spider );
 		assertThat( entityIndexBinding.getIndexManagers() ).hasSize( 2 );
 
-		insertAnimals( bear );
+		insert( bear );
 		assertThat( entityIndexBinding.getIndexManagers() ).hasSize( 2 );
 
 		assertEquals( 2, getNumberOfDocumentsInIndex( "Animal.Mammal" ) );
@@ -90,7 +101,7 @@ public void testDynamicCreationOfShards() throws Exception {
 
 	@Test
 	public void testDynamicShardsAreTargetingInQuery() throws Exception {
-		insertAnimals( elephant, spider, bear );
+		insert( elephant, spider, bear );
 
 		Session session = openSession();
 		Transaction tx = session.beginTransaction();
@@ -108,7 +119,7 @@ public void testInitialiseDynamicShardsOnStartup() throws Exception {
 		EntityIndexBinding entityIndexBinding = getExtendedSearchIntegrator().getIndexBindings().get( Animal.class );
 		assertThat( entityIndexBinding.getIndexManagers() ).hasSize( 0 );
 
-		insertAnimals( elephant, spider, bear );
+		insert( elephant, spider, bear );
 
 		assertThat( entityIndexBinding.getIndexManagers() ).hasSize( 2 );
 
@@ -117,7 +128,7 @@ public void testInitialiseDynamicShardsOnStartup() throws Exception {
 
 	@Test
 	public void testDeletion() throws Exception {
-		insertAnimals( elephant, spider, bear );
+		insert( elephant, spider, bear );
 
 		assertEquals( 2, getNumberOfDocumentsInIndex( "Animal.Mammal" ) );
 		assertEquals( 1, getNumberOfDocumentsInIndex( "Animal.Insect" ) );
@@ -128,6 +139,17 @@ public void testDeletion() throws Exception {
 		assertEquals( 1, getNumberOfDocumentsInIndex( "Animal.Insect" ) );
 	}
 
+	@Test
+	public void testQueryWhenEmpty() throws Exception {
+		HSQuery query = getExtendedSearchIntegrator().createHSQuery( new MatchAllDocsQuery(), Animal.class );
+		assertEquals( 0, query.queryResultSize() );
+
+		SomeOtherEntity someOtherIndexedObject = new SomeOtherEntity();
+		insert( someOtherIndexedObject );
+
+		assertEquals( 0, query.queryResultSize() );
+	}
+
 	@Override
 	public void configure(Map<String,Object> cfg) {
 		cfg.put( "hibernate.search.Animal.sharding_strategy", AnimalShardIdentifierProvider.class.getName() );
@@ -141,24 +163,24 @@ public void configure(Map<String,Object> cfg) {
 	@Override
 	public Class<?>[] getAnnotatedClasses() {
 		return new Class<?>[] {
-				Animal.class
+				Animal.class, SomeOtherEntity.class
 		};
 	}
 
-	private void insertAnimals(Animal... animals) {
+	private void insert(Object... entities) {
 		try ( Session session = openSession() ) {
 			Transaction tx = session.beginTransaction();
-			for ( Animal animal : animals ) {
-				session.persist( animal );
+			for ( Object entity : entities ) {
+				session.persist( entity );
 			}
 			tx.commit();
 		}
 	}
 
-	private void deleteAnimal(Animal animal) {
+	private void deleteAnimal(Object entity) {
 		try (Session session = openSession()) {
 			Transaction tx = session.beginTransaction();
-			session.delete( animal );
+			session.delete( entity );
 			tx.commit();
 		}
 	}
@@ -187,6 +209,19 @@ private void deleteAnimal(Animal animal) {
 		}
 	}
 
+	@Indexed
+	@Entity
+	private static class SomeOtherEntity {
+		@DocumentId
+		@Field(name = "idField")
+		@Id
+		@GeneratedValue
+		private Integer id;
+
+		protected SomeOtherEntity() {
+		}
+	}
+
 	public static class AnimalShardIdentifierProvider extends ShardIdentifierProviderTemplate {
 
 		@Override
