Index: doc/reference/en/modules/optimize.xml
===================================================================
--- doc/reference/en/modules/optimize.xml	(revision 14684)
+++ doc/reference/en/modules/optimize.xml	(working copy)
@@ -4,8 +4,8 @@
   <title>Index Optimization</title>
 
   <para>From time to time, the Lucene index needs to be optimized. The process
-  is essentially a defragmentation: until the optimization occurs, deleted
-  documents are just marked as such, no physical deletion is applied, the
+  is essentially a defragmentation: until the optimization occurs deleted
+  documents are just marked as such, no physical deletion is applied; the
   optimization can also adjust the number of files in the Lucene
   Directory.</para>
 
@@ -46,7 +46,6 @@
 
     <programlisting>hibernate.search.default.optimizer.operation_limit.max = 1000
 hibernate.search.default.optimizer.transaction_limit.max = 100
-
 hibernate.search.Animal.optimizer.transaction_limit.max = 50</programlisting>
 
     <para>An optimization will be triggered to the <literal>Animal</literal>
@@ -65,7 +64,7 @@
       </listitem>
     </itemizedlist>
 
-    <para>If none of these parameters are defined, not optimization is
+    <para>If none of these parameters are defined, no optimization is
     processed automatically.</para>
   </section>
 
@@ -73,14 +72,14 @@
     <title>Manual optimization</title>
 
     <para>You can programmatically optimize (defragment) a Lucene index from
-    Hibernate Search through the <classname>SearchFactory</classname></para>
+    Hibernate Search through the <classname>SearchFactory</classname>:</para>
 
-    <programlisting>searchFactory.optimize(Order.class);
+    <programlisting>searchFactory.optimize(Order.class);</programlisting>
 
-searchFactory.optimize();</programlisting>
+	<programlisting>searchFactory.optimize();</programlisting>
 
-    <para>The first example reindex the Lucene index holding
-    <classname>Order</classname>s, the second, optimize all indexes.</para>
+    <para>The first example optimizes the Lucene index holding
+    <classname>Order</classname>s; the second, optimizes all indexes.</para>
 
     <para>The <classname>SearchFactory</classname> can be accessed from a
     <classname>FullTextSession</classname>:</para>
@@ -97,15 +96,17 @@
     <title>Adjusting optimization</title>
 
     <para>Apache Lucene has a few parameters to influence how optimization is
-    performed. Hibernate Search expose those parameters.</para>
+    performed. Hibernate Search exposes those parameters.</para>
 
-    <para>Further index optimisation parameters include
-    <literal>hibernate.search.[default|&lt;indexname&gt;].[batch|transaction].merge_factor</literal>,
-    <literal>hibernate.search.[default|&lt;indexname&gt;].[batch|transaction].max_merge_docs</literal>,
-    <literal>hibernate.search.[default|&lt;indexname&gt;].[batch|transaction].max_buffered_docs</literal>
-    and
-    <literal>hibernate.search.[default|&lt;indexname&gt;].[batch|transaction].ram_buffer_size</literal>
-    - see <xref linkend="lucene-indexing-performance" /> for more
-    details.</para>
+    <para>Further index optimisation parameters include:
+    <itemizedlist>
+		<listitem><literal>hibernate.search.[default|&lt;indexname&gt;].[batch|transaction].max_buffered_docs</literal></listitem>
+		<listitem><literal>hibernate.search.[default|&lt;indexname&gt;].[batch|transaction].max_field_length</literal></listitem>
+		<listitem><literal>hibernate.search.[default|&lt;indexname&gt;].[batch|transaction].max_merge_docs</literal></listitem>
+		<listitem><literal>hibernate.search.[default|&lt;indexname&gt;].[batch|transaction].merge_factor</literal></listitem>
+		<listitem><literal>hibernate.search.[default|&lt;indexname&gt;].[batch|transaction].ram_buffer_size</literal></listitem>
+		<listitem><literal>hibernate.search.[default|&lt;indexname&gt;].[batch|transaction].term_index_interval</literal></listitem>
+	</itemizedlist>
+    See <xref linkend="lucene-indexing-performance" /> for more details.</para>
   </section>
 </chapter>
Index: doc/reference/en/modules/configuration.xml
===================================================================
--- doc/reference/en/modules/configuration.xml	(revision 14684)
+++ doc/reference/en/modules/configuration.xml	(working copy)
@@ -556,7 +556,7 @@
     </section>
   </section>
 
-  <section id="lucene-indexing-performance" revision="2">
+  <section id="lucene-indexing-performance" revision="3">
     <title>Tuning Lucene indexing performance</title>
 
     <para>Hibernate Search allows you to tune the Lucene indexing performance
@@ -569,42 +569,13 @@
 
     <para>There are two sets of parameters allowing for different performance
     settings depending on the use case. During indexing operations triggered
-    by database modifications, the following ones are used: <itemizedlist>
-        <listitem>
-          <para><literal>hibernate.search.[default|&lt;indexname&gt;].transaction.merge_factor</literal></para>
-        </listitem>
-
-        <listitem>
-          <para><literal>hibernate.search.[default|&lt;indexname&gt;].transaction.max_merge_docs</literal></para>
-        </listitem>
-
-        <listitem>
-          <para><literal>hibernate.search.[default|&lt;indexname&gt;].transaction.max_buffered_docs</literal></para>
-        </listitem>
-        
-        <listitem>
-          <para><literal>hibernate.search.[default|&lt;indexname&gt;].transaction.ram_buffer_size</literal></para>
-        </listitem>
-      </itemizedlist>When indexing occurs via
-    <literal>FullTextSession.index()</literal> (see <xref
-    linkend="search-batchindex" />), the following properties are used:
-    <itemizedlist>
-        <listitem>
-          <para><literal>hibernate.search.[default|&lt;indexname&gt;].batch.merge_factor</literal></para>
-        </listitem>
-
-        <listitem>
-          <para><literal>hibernate.search.[default|&lt;indexname&gt;].batch.max_merge_docs</literal></para>
-        </listitem>
-
-        <listitem>
-          <para><literal>hibernate.search.[default|&lt;indexname&gt;].batch.max_buffered_docs</literal></para>
-        </listitem>
-        
-        <listitem>
-          <para><literal>hibernate.search.[default|&lt;indexname&gt;].batch.ram_buffer_size</literal></para>
-        </listitem>
-      </itemizedlist></para>
+    by database modifications, the parameters are grouped by the
+    <literal>transaction</literal> keyword:
+    <programlisting>hibernate.search.[default|&lt;indexname&gt;].transaction.&lt;parameter_name&gt;</programlisting>
+    When indexing occurs via <literal>FullTextSession.index()</literal> (see <xref
+    linkend="search-batchindex" />), the used properties are those grouped under the <literal>batch</literal> keyword:
+    <programlisting>hibernate.search.[default|&lt;indexname&gt;].batch.&lt;parameter_name&gt;</programlisting>
+    </para>
 
     <para>Unless the corresponding <literal>.batch</literal> property is
     explicitly set, the value will default to the
@@ -633,62 +604,60 @@
         </thead>
 
         <tbody>
+        
           <row>
-            <entry><literal>hibernate.search.[default|&lt;indexname&gt;].transaction.merge_factor</literal></entry>
+            <entry><literal>hibernate.search.[default|&lt;indexname&gt;].[transaction|batch].max_buffered_delete_terms</literal></entry>
 
-            <entry><para>Controls segment merge frequency and size. </para>
-            <para>Determines how often segment indices are merged when
-            insertion occurs. With smaller values, less RAM is used while
-            indexing, and searches on unoptimized indices are faster, but
-            indexing speed is slower. With larger values, more RAM is used
-            during indexing, and while searches on unoptimized indices are
-            slower, indexing is faster. Thus larger values (&gt; 10) are best
-            for batch index creation, and smaller values (&lt; 10) for indices
-            that are interactively maintained. The value must no be lower than
-            2.</para> <para>Used by Hibernate Search during index update
-            operations as part of database modifications.</para></entry>
+            <entry><para>Determines the minimal number of delete terms required before the buffered
+			in-memory delete terms are applied and flushed. If there are documents
+			buffered in memory at the time, they are merged and a new segment is
+   			created.</para></entry>
 
-            <entry>10</entry>
+            <entry>Disabled (flushes by RAM usage)</entry>
           </row>
 
           <row>
-            <entry><literal>hibernate.search.[default|&lt;indexname&gt;].transaction.max_merge_docs</literal></entry>
+            <entry><literal>hibernate.search.[default|&lt;indexname&gt;].[transaction|batch].max_buffered_docs</literal></entry>
 
-            <entry><para>Defines the largest number of documents allowed in a
-            segment.</para> <para>Used by Hibernate Search during index update
-            operations as part of database modifications.</para></entry>
+            <entry><para>Controls the amount of documents buffered in memory
+            during indexing. The bigger the more RAM is consumed.</para>
+           </entry>
 
-            <entry>Unlimited (Integer.MAX_VALUE)</entry>
+            <entry>Disabled (flushes by RAM usage)</entry>
           </row>
 
           <row>
-            <entry><literal>hibernate.search.[default|&lt;indexname&gt;].transaction.max_buffered_docs</literal></entry>
+            <entry><literal>hibernate.search.[default|&lt;indexname&gt;].[transaction|batch].max_field_length</literal></entry>
 
-            <entry><para>Controls the amount of documents buffered in memory
-            during indexing. The bigger the more RAM is consumed.</para>
-            <para>Used by Hibernate Search during index update operations as
-            part of database modifications.</para></entry>
+            <entry><para>The maximum number of terms that will be indexed for a single field.
+            This limits the amount of memory required for indexing so that very large data will not crash the indexing process by
+			running out of memory. This setting refers to the number of running terms,
+			not to the number of different terms.</para>
+			<para>This silently truncates large documents, excluding from the index all terms that occur further in the document.
+			If you know your source documents are large, be sure to set this value high enough to accomodate the expected size. 
+			If you set it to Integer.MAX_VALUE, then the only limit is your memory, but you should anticipate an OutOfMemoryError.
+			</para>
+			<para>If setting this value in <literal>batch</literal> differently than in <literal>transaction</literal>
+			you may get different data (and results) in your index depending on the indexing mode.</para>
+           </entry>
 
-            <entry>Disabled (not set)</entry>
+            <entry>10000</entry>
           </row>
           
           <row>
-            <entry><literal>hibernate.search.[default|&lt;indexname&gt;].transaction.ram_buffer_size</literal></entry>
+            <entry><literal>hibernate.search.[default|&lt;indexname&gt;].[transaction|batch].max_merge_docs</literal></entry>
 
-            <entry><para>Controls the amount of RAM in MB dedicated to document buffers.
-            When used together max_buffered_docs a flush occurs for whichever event happens first.</para>
-            <para>Generally for faster indexing performance it's best to flush by RAM usage instead of document
-   			count and use as large a RAM buffer as you can.</para>
-            <para>Used by Hibernate Search during index update operations as
-            part of database modifications.</para></entry>
+            <entry><para>Defines the largest number of documents allowed in a segment.
+            Larger values are best for batched indexing and speedier searches.
+            Small values are best for transaction indexing.</para></entry>
 
-            <entry>16 MB</entry>
+            <entry>Unlimited (Integer.MAX_VALUE)</entry>
           </row>
 
           <row>
-            <entry><literal>hibernate.search.[default|&lt;indexname&gt;].batch.merge_factor</literal></entry>
+            <entry><literal>hibernate.search.[default|&lt;indexname&gt;].[transaction|batch].merge_factor</literal></entry>
 
-            <entry><para>Controls segment merge frequency and size.</para>
+            <entry><para>Controls segment merge frequency and size. </para>
             <para>Determines how often segment indices are merged when
             insertion occurs. With smaller values, less RAM is used while
             indexing, and searches on unoptimized indices are faster, but
@@ -697,45 +666,34 @@
             slower, indexing is faster. Thus larger values (&gt; 10) are best
             for batch index creation, and smaller values (&lt; 10) for indices
             that are interactively maintained. The value must no be lower than
-            2.</para> <para>Used during indexing via
-            <literal>FullTextSession.index()</literal></para></entry>
+            2.</para></entry>
 
             <entry>10</entry>
           </row>
 
           <row>
-            <entry><literal>hibernate.search.[default|&lt;indexname&gt;].batch.max_merge_docs</literal></entry>
-
-            <entry><para>Defines the largest number of documents allowed in a
-            segment.</para> <para>Used during indexing via
-            <literal>FullTextSession.index()</literal></para></entry>
-
-            <entry>Unlimited (Integer.MAX_VALUE)</entry>
-          </row>
-
-          <row>
-            <entry><literal>hibernate.search.[default|&lt;indexname&gt;].batch.max_buffered_docs</literal></entry>
-
-            <entry><para>Controls the amount of documents buffered in memory
-            during indexing. The bigger the more RAM is consumed.</para>
-            <para>Used during indexing via
-            <literal>FullTextSession.index()</literal></para></entry>
-
-            <entry>Disabled (not set)</entry>
-          </row>
-          
-          <row>
-            <entry><literal>hibernate.search.[default|&lt;indexname&gt;].batch.ram_buffer_size</literal></entry>
+            <entry><literal>hibernate.search.[default|&lt;indexname&gt;].[transaction|batch].ram_buffer_size</literal></entry>
 
             <entry><para>Controls the amount of RAM in MB dedicated to document buffers.
             When used together max_buffered_docs a flush occurs for whichever event happens first.</para>
             <para>Generally for faster indexing performance it's best to flush by RAM usage instead of document
    			count and use as large a RAM buffer as you can.</para>
-            <para>Used during indexing via
-            <literal>FullTextSession.index()</literal></para></entry>
+            </entry>
 
             <entry>16 MB</entry>
           </row>
+          <row>
+            <entry><literal>hibernate.search.[default|&lt;indexname&gt;].[transaction|batch].term_index_interval</literal></entry>
+
+            <entry><para>Expert: Set the interval between indexed terms.</para>
+            <para>Large values cause less memory to be used by IndexReader, but slow random-access to terms.
+            Small values cause more memory to be used by an IndexReader, and speed
+   			random-access to terms. See Lucene documentation for more details.</para>
+            </entry>
+
+            <entry>128</entry>
+          </row>
+
         </tbody>
       </tgroup>
     </table>
Index: doc/reference/en/modules/batchindex.xml
===================================================================
--- doc/reference/en/modules/batchindex.xml	(revision 14684)
+++ doc/reference/en/modules/batchindex.xml	(working copy)
@@ -42,13 +42,18 @@
 
     <para>Other parameters which also can affect indexing time and memory
     consumption are
-    <literal>hibernate.search.[default|&lt;indexname&gt;].batch.merge_factor</literal>
+    <literal>hibernate.search.[default|&lt;indexname&gt;].batch.max_buffered_docs</literal>
+    ,
+    <literal>hibernate.search.[default|&lt;indexname&gt;].batch.max_field_length</literal>
     ,
     <literal>hibernate.search.[default|&lt;indexname&gt;].batch.max_merge_docs</literal>
     ,
-    <literal>hibernate.search.[default|&lt;indexname&gt;].batch.max_buffered_docs</literal>
-    and
+    <literal>hibernate.search.[default|&lt;indexname&gt;].batch.merge_factor</literal>
+    ,
     <literal>hibernate.search.[default|&lt;indexname&gt;].batch.ram_buffer_size</literal>
+    and
+    <literal>hibernate.search.[default|&lt;indexname&gt;].batch.term_index_interval</literal>
+    
     . These parameters are Lucene specific and Hibernate Search is just
     passing these paramters through - see <xref
     linkend="lucene-indexing-performance" /> for more details.</para>
Index: src/java/org/hibernate/search/backend/LuceneIndexingParameters.java
===================================================================
--- src/java/org/hibernate/search/backend/LuceneIndexingParameters.java	(revision 14684)
+++ src/java/org/hibernate/search/backend/LuceneIndexingParameters.java	(working copy)
@@ -9,21 +9,23 @@
 import org.apache.lucene.index.IndexWriter;
 import org.hibernate.search.SearchException;
 import org.hibernate.search.backend.configuration.IndexWriterSetting;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
 
 /**
- * Wrapper class around the Lucene indexing parameters <i>mergeFactor</i>, <i>maxMergeDocs</i>,
- * <i>maxBufferedDocs</i>, <i>termIndexInterval</i>, <i>RAMBufferSizeMB</i>.
+ * Wrapper class around the Lucene indexing parameters defined in IndexWriterSetting.
  * <p>
  * There are two sets of these parameters. One is for regular indexing the other is for batch indexing
  * triggered by <code>FullTextSessoin.index(Object entity)</code>
  * 
  * @author Hardy Ferentschik
  * @author Sanne Grinovero
+ * 
+ * @see org.hibernate.search.backend.configuration.IndexWriterSetting IndexWriterSetting
+ * @see org.hibernate.search.FullTextSession#index(Object) FullTextSessoin.index(Object entity)
  */
 public class LuceneIndexingParameters implements Serializable {
 
+	private static final long serialVersionUID = 5424606407623591663L;
+	
 	// value keyword
 	public static final String EXPLICIT_DEFAULT_VALUE = "default"; 
 	// property path keywords
@@ -48,8 +50,8 @@
 				batchProps.setProperty( key, batchValue );
 			}
 		}
-		transactionIndexParameters = new ParameterSet(transactionProps);
-		batchIndexParameters = new ParameterSet(batchProps);
+		transactionIndexParameters = new ParameterSet( transactionProps );
+		batchIndexParameters = new ParameterSet( batchProps );
 	}
 
 	public ParameterSet getTransactionIndexParameters() {
@@ -62,13 +64,15 @@
 
 	public class ParameterSet implements Serializable {
 		
+		private static final long serialVersionUID = -6121723702279869524L;
+		
 		final Map<IndexWriterSetting, Integer> parameters = new HashMap<IndexWriterSetting, Integer>();
 		
 		public ParameterSet(Properties prop) {
 			for ( IndexWriterSetting t : IndexWriterSetting.values() ) {
 				String value = prop.getProperty( t.getKey() );
-				if ( ! (value==null || EXPLICIT_DEFAULT_VALUE.equals(value) ) ) {
-					parameters.put( t, t.parseVal(value) );
+				if ( ! (value==null || EXPLICIT_DEFAULT_VALUE.equals( value ) ) ) {
+					parameters.put( t, t.parseVal( value ) );
 				}
 			}
 		}
Index: src/java/org/hibernate/search/backend/configuration/IndexWriterSetting.java
===================================================================
--- src/java/org/hibernate/search/backend/configuration/IndexWriterSetting.java	(revision 14684)
+++ src/java/org/hibernate/search/backend/configuration/IndexWriterSetting.java	(working copy)
@@ -5,32 +5,73 @@
 import org.apache.lucene.index.IndexWriter;
 import org.hibernate.search.SearchException;
 
+/**
+ * Represents possible options to be applied to an
+ * <code>org.apache.lucene.index.IndexWriter</code>
+ * 
+ * @author Sanne Grinovero
+ */
 public enum IndexWriterSetting implements Serializable {
-	
-	MERGE_FACTOR( "merge_factor" ) {
+	/**
+	 * @see org.apache.lucene.index.IndexWriter.setMaxBufferedDeleteTerms(int)
+	 */
+	MAX_BUFFERED_DELETE_TERMS( "max_buffered_delete_terms" ) {
 		public void applySetting(IndexWriter writer, int value) {
-			writer.setMergeFactor( value );
+			writer.setMaxBufferedDeleteTerms( value );
+		}
+	} ,
+	/**
+	 * @see org.apache.lucene.index.IndexWriter.setMaxBufferedDocs(int)
+	 */
+	MAX_BUFFERED_DOCS( "max_buffered_docs" ) {
+		public void applySetting(IndexWriter writer, int value) {
+			writer.setMaxBufferedDocs( value );
+		}
+	} ,
+	/**
+	 * @see org.apache.lucene.index.IndexWriter.setMaxFieldLength(int)
+	 */
+	MAX_FIELD_LENGTH( "max_field_length" ) {
+		public void applySetting(IndexWriter writer, int value) {
+			writer.setMaxFieldLength( value );
 		}
 	} ,
+	/**
+	 * @see org.apache.lucene.index.IndexWriter.setMaxMergeDocs(int)
+	 */
 	MAX_MERGE_DOCS( "max_merge_docs" ) {
 		public void applySetting(IndexWriter writer, int value) {
 			writer.setMaxMergeDocs( value );
 		}
 	} ,
-	MAX_BUFFERED_DOCS( "max_buffered_docs" ) {
+	/**
+	 * @see org.apache.lucene.index.IndexWriter.setMergeFactor(int)
+	 */
+	MERGE_FACTOR( "merge_factor" ) {
 		public void applySetting(IndexWriter writer, int value) {
-			writer.setMaxBufferedDocs( value );
+			writer.setMergeFactor( value );
 		}
 	} ,
+	/**
+	 * @see org.apache.lucene.index.IndexWriter.setRAMBufferSizeMB(int)
+	 */
 	RAM_BUFFER_SIZE( "ram_buffer_size" ) {
 		public void applySetting(IndexWriter writer, int value) {
 			writer.setRAMBufferSizeMB( value );
 		}
+	},
+	/**
+	 * @see org.apache.lucene.index.IndexWriter.setTermIndexInterval(int)
+	 */
+	TERM_INDEX_INTERVAL( "term_index_interval" ) {
+		public void applySetting(IndexWriter writer, int value) {
+			writer.setTermIndexInterval( value );
+		}
 	};
 	
 	private final String cfgKey;
 	
-	IndexWriterSetting(String configurationKey){
+	IndexWriterSetting(String configurationKey) {
 		this.cfgKey = configurationKey;
 	}
 	
@@ -39,6 +80,9 @@
 	 */
 	public abstract void applySetting(IndexWriter writer, int value);
 
+	/**
+	 * @return The key used in configuration files to select an option.
+	 */
 	public String getKey() {
 		return cfgKey;
 	}
