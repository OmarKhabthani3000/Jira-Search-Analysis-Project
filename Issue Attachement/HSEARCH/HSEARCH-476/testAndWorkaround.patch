Index: src/main/java/org/hibernate/search/backend/AddLuceneWork.java
===================================================================
--- src/main/java/org/hibernate/search/backend/AddLuceneWork.java	(revision 19121)
+++ src/main/java/org/hibernate/search/backend/AddLuceneWork.java	(working copy)
@@ -63,5 +63,9 @@
 	public <T> T getWorkDelegate(final WorkVisitor<T> visitor) {
 		return visitor.getDelegate( this );
 	}
+	
+	public String toString() {
+		return "Add LuceneWork: " + this.getEntityClass().getSimpleName() + "#" + this.getIdInString();
+	}
 
 }
Index: src/main/java/org/hibernate/search/backend/DeleteLuceneWork.java
===================================================================
--- src/main/java/org/hibernate/search/backend/DeleteLuceneWork.java	(revision 19121)
+++ src/main/java/org/hibernate/search/backend/DeleteLuceneWork.java	(working copy)
@@ -42,4 +42,8 @@
 		return visitor.getDelegate( this );
 	}
 	
+	public String toString() {
+		return "Delete LuceneWork: " + this.getEntityClass().getSimpleName() + "#" + this.getIdInString();
+	}
+	
 }
Index: src/main/java/org/hibernate/search/backend/WorkQueue.java
===================================================================
--- src/main/java/org/hibernate/search/backend/WorkQueue.java	(revision 19121)
+++ src/main/java/org/hibernate/search/backend/WorkQueue.java	(working copy)
@@ -29,11 +29,16 @@
 import java.util.Collections;
 
 import org.hibernate.annotations.common.AssertionFailure;
+import org.hibernate.search.util.LoggerFactory;
+import org.slf4j.Logger;
 
 /**
  * @author Emmanuel Bernard
  */
 public class WorkQueue {
+	
+	private static final Logger log = LoggerFactory.make();
+	
 	private List<Work> queue;
 
 	private List<LuceneWork> sealedQueue;
@@ -66,9 +71,16 @@
 		return subQueue;
 	}
 
-
 	public List<LuceneWork> getSealedQueue() {
 		if (sealedQueue == null) throw new AssertionFailure("Access a Sealed WorkQueue which has not been sealed");
+		if (log.isDebugEnabled()) {
+			StringBuilder sb = new StringBuilder();
+			for (LuceneWork lw : sealedQueue) {
+				sb.append( lw.toString() );
+				sb.append( "\n" );
+			}
+			log.debug( "sending sealedQueue to backend: \n" + sb.toString() );
+		}
 		return sealedQueue;
 	}
 
Index: src/main/java/org/hibernate/search/backend/impl/lucene/works/AddWorkDelegate.java
===================================================================
--- src/main/java/org/hibernate/search/backend/impl/lucene/works/AddWorkDelegate.java	(revision 19121)
+++ src/main/java/org/hibernate/search/backend/impl/lucene/works/AddWorkDelegate.java	(working copy)
@@ -61,6 +61,11 @@
 	}
 
 	public void performWork(LuceneWork work, IndexWriter writer) {
+		if ( work.getId() == null ) {
+			//don't perform this kind of work
+			log.debug( "Skipping add work as \"id\" is null for entity {}", work.getEntityClass() );
+			return;
+		}
 		final Class<?> entityType = work.getEntityClass();
 		@SuppressWarnings("unchecked")
 		DocumentBuilderIndexedEntity documentBuilder = workspace.getDocumentBuilder( entityType );
Index: src/main/java/org/hibernate/search/backend/impl/lucene/works/DeleteExtWorkDelegate.java
===================================================================
--- src/main/java/org/hibernate/search/backend/impl/lucene/works/DeleteExtWorkDelegate.java	(revision 19121)
+++ src/main/java/org/hibernate/search/backend/impl/lucene/works/DeleteExtWorkDelegate.java	(working copy)
@@ -63,6 +63,10 @@
 		Serializable id = work.getId();
 		log.trace( "Removing {}#{} by id using an IndexWriter.", managedType, id );
 		Term idTerm = builder.getTerm( id );
+		if ( idTerm.text() == null ) {
+			log.debug( "Canceling remove as idTerm is null for entity {}", managedType, id );
+			return;
+		}
 		try {
 			writer.deleteDocuments( idTerm );
 		}
Index: src/main/java/org/hibernate/search/backend/impl/lucene/works/DeleteWorkDelegate.java
===================================================================
--- src/main/java/org/hibernate/search/backend/impl/lucene/works/DeleteWorkDelegate.java	(revision 19121)
+++ src/main/java/org/hibernate/search/backend/impl/lucene/works/DeleteWorkDelegate.java	(working copy)
@@ -67,8 +67,12 @@
 		DocumentBuilderIndexedEntity<?> builder = workspace.getDocumentBuilder( entityType );
 
 		BooleanQuery entityDeletionQuery = new BooleanQuery();
-
-		TermQuery idQueryTerm = new TermQuery( builder.getTerm( id ) );
+		Term idTerm = builder.getTerm( id );
+		if ( idTerm.text() == null ) {
+			log.debug( "Canceling remove as idTerm is null for entity {}", entityType, id );
+			return;
+		}
+		TermQuery idQueryTerm = new TermQuery( idTerm );
 		entityDeletionQuery.add( idQueryTerm, BooleanClause.Occur.MUST );
 
 		Term classNameQueryTerm =  new Term( DocumentBuilder.CLASS_FIELDNAME, entityType.getName() );
Index: src/test/java/org/hibernate/search/test/scratch/Event.java
===================================================================
--- src/test/java/org/hibernate/search/test/scratch/Event.java	(revision 0)
+++ src/test/java/org/hibernate/search/test/scratch/Event.java	(revision 0)
@@ -0,0 +1,76 @@
+/* $Id$
+ * 
+ * Hibernate, Relational Persistence for Idiomatic Java
+ * 
+ * Copyright (c) 2009, Red Hat, Inc. and/or its affiliates or third-party contributors as
+ * indicated by the @author tags or express copyright attribution
+ * statements applied by the authors.  All third-party contributions are
+ * distributed under license by Red Hat, Inc.
+ * 
+ * This copyrighted material is made available to anyone wishing to use, modify,
+ * copy, or redistribute it subject to the terms and conditions of the GNU
+ * Lesser General Public License, as published by the Free Software Foundation.
+ * 
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
+ * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
+ * for more details.
+ * 
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with this distribution; if not, write to:
+ * Free Software Foundation, Inc.
+ * 51 Franklin Street, Fifth Floor
+ * Boston, MA  02110-1301  USA
+ */
+package org.hibernate.search.test.scratch;
+
+import java.io.Serializable;
+import java.util.HashSet;
+import java.util.Set;
+
+import javax.persistence.Entity;
+import javax.persistence.GeneratedValue;
+import javax.persistence.Id;
+import javax.persistence.OneToMany;
+
+import org.hibernate.search.annotations.ContainedIn;
+import org.hibernate.search.annotations.IndexedEmbedded;
+
+@Entity
+public class Event implements Serializable {
+
+	private Long id;
+	private Set<ParentOfBirthEvent> parentsOf = new HashSet<ParentOfBirthEvent>();
+	private Set<Person> children = new HashSet<Person>();
+
+	@Id
+	@GeneratedValue
+	public Long getId() {
+		return id;
+	}
+
+	public void setId(Long id) {
+		this.id = id;
+	}
+
+	@IndexedEmbedded
+	@OneToMany(mappedBy = "event")
+	public Set<ParentOfBirthEvent> getParentsOf() {
+		return parentsOf;
+	}
+
+	public void setParentsOf(Set<ParentOfBirthEvent> parentsOf) {
+		this.parentsOf = parentsOf;
+	}
+
+	@ContainedIn
+	@OneToMany(mappedBy = "birthEvent")
+	public Set<Person> getChildren() {
+		return children;
+	}
+
+	public void setChildren(Set<Person> children) {
+		this.children = children;
+	}
+
+}
Index: src/test/java/org/hibernate/search/test/scratch/ParentOfBirthEvent.java
===================================================================
--- src/test/java/org/hibernate/search/test/scratch/ParentOfBirthEvent.java	(revision 0)
+++ src/test/java/org/hibernate/search/test/scratch/ParentOfBirthEvent.java	(revision 0)
@@ -0,0 +1,82 @@
+/* $Id$
+ * 
+ * Hibernate, Relational Persistence for Idiomatic Java
+ * 
+ * Copyright (c) 2009, Red Hat, Inc. and/or its affiliates or third-party contributors as
+ * indicated by the @author tags or express copyright attribution
+ * statements applied by the authors.  All third-party contributions are
+ * distributed under license by Red Hat, Inc.
+ * 
+ * This copyrighted material is made available to anyone wishing to use, modify,
+ * copy, or redistribute it subject to the terms and conditions of the GNU
+ * Lesser General Public License, as published by the Free Software Foundation.
+ * 
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
+ * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
+ * for more details.
+ * 
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with this distribution; if not, write to:
+ * Free Software Foundation, Inc.
+ * 51 Franklin Street, Fifth Floor
+ * Boston, MA  02110-1301  USA
+ */
+package org.hibernate.search.test.scratch;
+
+import javax.persistence.CascadeType;
+import javax.persistence.Entity;
+import javax.persistence.GeneratedValue;
+import javax.persistence.Id;
+import javax.persistence.ManyToOne;
+
+import org.hibernate.search.annotations.ContainedIn;
+import org.hibernate.search.annotations.DocumentId;
+import org.hibernate.search.annotations.Indexed;
+import org.hibernate.search.annotations.IndexedEmbedded;
+
+@Entity
+@Indexed
+public class ParentOfBirthEvent {
+
+	private Long id;
+	private Person parent;
+	private Event event;
+
+	public ParentOfBirthEvent(Person parent, Event event) {
+		this.parent = parent;
+		this.event = event;
+	}
+
+	@Id
+	@DocumentId
+	@GeneratedValue
+	public Long getId() {
+		return id;
+	}
+
+	public void setId(Long id) {
+		this.id = id;
+	}
+
+	@IndexedEmbedded
+	@ManyToOne
+	public Person getParent() {
+		return parent;
+	}
+
+	public void setParent(Person parent) {
+		this.parent = parent;
+	}
+
+	@ContainedIn
+	@ManyToOne(cascade=CascadeType.ALL)
+	public Event getEvent() {
+		return event;
+	}
+
+	public void setEvent(Event event) {
+		this.event = event;
+	}
+
+}
Index: src/test/java/org/hibernate/search/test/scratch/Person.java
===================================================================
--- src/test/java/org/hibernate/search/test/scratch/Person.java	(revision 0)
+++ src/test/java/org/hibernate/search/test/scratch/Person.java	(revision 0)
@@ -0,0 +1,100 @@
+/* $Id$
+ * 
+ * Hibernate, Relational Persistence for Idiomatic Java
+ * 
+ * Copyright (c) 2009, Red Hat, Inc. and/or its affiliates or third-party contributors as
+ * indicated by the @author tags or express copyright attribution
+ * statements applied by the authors.  All third-party contributions are
+ * distributed under license by Red Hat, Inc.
+ * 
+ * This copyrighted material is made available to anyone wishing to use, modify,
+ * copy, or redistribute it subject to the terms and conditions of the GNU
+ * Lesser General Public License, as published by the Free Software Foundation.
+ * 
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
+ * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
+ * for more details.
+ * 
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with this distribution; if not, write to:
+ * Free Software Foundation, Inc.
+ * 51 Franklin Street, Fifth Floor
+ * Boston, MA  02110-1301  USA
+ */
+package org.hibernate.search.test.scratch;
+
+import java.io.Serializable;
+import java.util.HashSet;
+import java.util.Set;
+
+import javax.persistence.CascadeType;
+import javax.persistence.Entity;
+import javax.persistence.GeneratedValue;
+import javax.persistence.Id;
+import javax.persistence.ManyToOne;
+import javax.persistence.OneToMany;
+
+import org.hibernate.search.annotations.ContainedIn;
+import org.hibernate.search.annotations.DocumentId;
+import org.hibernate.search.annotations.Field;
+import org.hibernate.search.annotations.Indexed;
+import org.hibernate.search.annotations.IndexedEmbedded;
+import org.hibernate.search.annotations.Store;
+
+@Entity
+@Indexed
+public class Person implements Serializable {
+
+	private Long id;
+	private Set<ParentOfBirthEvent> parentOfBirthEvents;
+	private Event birthEvent;
+	private String name;
+
+	public Person() {
+		birthEvent = new Event();
+		birthEvent.getChildren().add( this );
+		parentOfBirthEvents = new HashSet<ParentOfBirthEvent>();
+	}
+
+	@DocumentId
+	@Id
+	@GeneratedValue
+	public Long getId() {
+		return id;
+	}
+
+	public void setId(Long id) {
+		this.id = id;
+	}
+
+	@ContainedIn
+	@OneToMany(cascade = { CascadeType.ALL })
+	public Set<ParentOfBirthEvent> getParentOfBirthEvents() {
+		return parentOfBirthEvents;
+	}
+
+	public void setParentOfBirthEvents(Set<ParentOfBirthEvent> parentOfBirthEvents) {
+		this.parentOfBirthEvents = parentOfBirthEvents;
+	}
+
+	@IndexedEmbedded(depth = 4)
+	@ManyToOne(cascade = { CascadeType.ALL }, optional = false)
+	public Event getBirthEvent() {
+		return birthEvent;
+	}
+
+	public void setBirthEvent(Event birthEvent) {
+		this.birthEvent = birthEvent;
+	}
+
+	@Field(store=Store.YES)
+	public String getName() {
+		return name;
+	}
+
+	public void setName(String name) {
+		this.name = name;
+	}
+
+}
Index: src/test/java/org/hibernate/search/test/scratch/RecursiveGraphTest.java
===================================================================
--- src/test/java/org/hibernate/search/test/scratch/RecursiveGraphTest.java	(revision 0)
+++ src/test/java/org/hibernate/search/test/scratch/RecursiveGraphTest.java	(revision 0)
@@ -0,0 +1,115 @@
+/* $Id$
+ * 
+ * Hibernate, Relational Persistence for Idiomatic Java
+ * 
+ * Copyright (c) 2009, Red Hat, Inc. and/or its affiliates or third-party contributors as
+ * indicated by the @author tags or express copyright attribution
+ * statements applied by the authors.  All third-party contributions are
+ * distributed under license by Red Hat, Inc.
+ * 
+ * This copyrighted material is made available to anyone wishing to use, modify,
+ * copy, or redistribute it subject to the terms and conditions of the GNU
+ * Lesser General Public License, as published by the Free Software Foundation.
+ * 
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
+ * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
+ * for more details.
+ * 
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with this distribution; if not, write to:
+ * Free Software Foundation, Inc.
+ * 51 Franklin Street, Fifth Floor
+ * Boston, MA  02110-1301  USA
+ */
+package org.hibernate.search.test.scratch;
+
+import java.io.IOException;
+import java.util.List;
+
+import org.apache.lucene.document.Document;
+import org.apache.lucene.document.Fieldable;
+import org.apache.lucene.index.CorruptIndexException;
+import org.apache.lucene.index.IndexReader;
+import org.apache.lucene.search.IndexSearcher;
+import org.apache.lucene.search.MatchAllDocsQuery;
+import org.apache.lucene.search.Query;
+import org.apache.lucene.search.ScoreDoc;
+import org.apache.lucene.search.TopDocs;
+import org.hibernate.Session;
+import org.hibernate.search.test.SearchTestCase;
+
+public class RecursiveGraphTest extends SearchTestCase {
+
+	public void testCreateParentAndChild() throws Exception {
+        Person[] people = new Person[2];
+        Person parent = new Person();
+        parent.setName( "parent" );
+        Person child = new Person();
+        child.setName( "child" );
+        connectChildToParent(child, parent);
+        people[0] = parent;
+        people[1] = child;
+        savePeople( people );
+        showIndexContentsForType( Person.class );
+        assertEquals( 2, getDocumentNbr( Person.class ) );
+    }
+	
+	private void connectChildToParent(Person child, Person parent) {
+        Event birthEvent = child.getBirthEvent();
+        child.setBirthEvent(birthEvent);
+        ParentOfBirthEvent parentOfBirthEvent = new ParentOfBirthEvent(parent, child.getBirthEvent());
+        parent.getParentOfBirthEvents().add(parentOfBirthEvent);
+    }
+	
+	public void savePeople(Person... people) {
+        for (Person person : people) {
+        	if (person==null) continue;
+        	Session s = getSessions().openSession();
+    		s.getTransaction().begin();
+    		s.save( person );
+    		s.getTransaction().commit();
+    		s.close();
+        }
+    }
+
+	@Override
+	protected Class<?>[] getMappings() {
+		return new Class[]{
+				Event.class,
+				Person.class,
+				ParentOfBirthEvent.class
+		};
+	}
+	
+	private int getDocumentNbr(Class type) throws Exception {
+		IndexReader reader = IndexReader.open( getDirectory( type ), false );
+		try {
+			return reader.numDocs();
+		}
+		finally {
+			reader.close();
+		}
+	}
+	
+	private void showIndexContentsForType(Class type) throws CorruptIndexException, IOException {
+		IndexSearcher searcher = new IndexSearcher( getDirectory( type ), false );
+		try {
+			Query q = new MatchAllDocsQuery();
+			TopDocs docs = searcher.search( q, null, 100 );
+			ScoreDoc[] scoreDocs = docs.scoreDocs;
+			for (ScoreDoc sd : scoreDocs) {
+				Document doc = searcher.doc( sd.doc );
+				StringBuilder sb = new StringBuilder();
+				for (Fieldable field : (List<Fieldable>)doc.getFields()) {
+					sb.append( field.name() ).append( ":" ).append( field.stringValue() ).append( " " );
+				}
+				System.out.println( sb.toString() );
+			}
+		}
+		finally {
+			searcher.close();
+		}
+	}
+
+}
\ No newline at end of file
Index: src/test/resources/log4j.properties
===================================================================
--- src/test/resources/log4j.properties	(revision 19121)
+++ src/test/resources/log4j.properties	(working copy)
@@ -16,6 +16,8 @@
 log4j.appender.socket.port=4560
 log4j.appender.socket.locationInfo=true
 
+log4j.logger.org.hibernate.search.backend=debug
+
 ### set log levels - for more verbose logging change 'info' to 'debug' ###
 
 log4j.rootLogger=warn, stdout
