Index: src/net/sf/hibernate/id/SequenceGenerator.java
===================================================================
RCS file: /cvsroot/hibernate/Hibernate2/src/net/sf/hibernate/id/SequenceGenerator.java,v
retrieving revision 1.8.2.2
diff -u -r1.8.2.2 SequenceGenerator.java
--- src/net/sf/hibernate/id/SequenceGenerator.java	10 Aug 2003 02:56:50 -0000	1.8.2.2
+++ src/net/sf/hibernate/id/SequenceGenerator.java	30 Oct 2003 08:00:21 -0000
@@ -35,11 +35,18 @@
 public class SequenceGenerator implements PersistentIdentifierGenerator, Configurable {
 	
 	/**
-	 * The sequence parameter
+	 * The sequence parameter.
 	 */
 	public static final String SEQUENCE = "sequence";
+
+	/**
+	 * The parameters parameter, appended to the create sequence SQL.
+	 * For example (Oracle): "INCREMENT BY 1 START WITH 1 MAXVALUE 100 NOCACHE".
+	 */
+	public static final String PARAMETERS = "parameters";
 	
 	private String sequenceName;
+	private String parameters;
 	private Type type;
 	private String sql;
 	
@@ -47,6 +54,7 @@
 	
 	public void configure(Type type, Properties params, Dialect dialect) throws MappingException {
 		this.sequenceName = PropertiesHelper.getString(SEQUENCE, params, "hibernate_sequence");
+		this.parameters = PropertiesHelper.getString(PARAMETERS, params, StringHelper.EMPTY_STRING);
 		String schemaName = params.getProperty(SCHEMA);
 		if ( schemaName!=null && sequenceName.indexOf(StringHelper.DOT)<0 ) 
 			sequenceName = schemaName + '.' + sequenceName;
@@ -83,9 +91,16 @@
 	}
 	
 	public String[] sqlCreateStrings(Dialect dialect) throws HibernateException {
-		return new String[] {
-			dialect.getCreateSequenceString(sequenceName)
-		};
+	    if (parameters != StringHelper.EMPTY_STRING) {
+    		return new String[] {
+    			dialect.getCreateSequenceString(sequenceName + " " + parameters)
+    		};
+        }
+        else {
+            return new String[] {
+    			dialect.getCreateSequenceString(sequenceName)
+    		};
+        }
 	}
 	
 	public String sqlDropString(Dialect dialect) throws HibernateException {
