/*
 * $Header:  $
 * $Revision:  $
 * $Date:  $
 * 
 * ============================================================================
 *          The C24 IO Deployed Component Software License, Version 1.1
 * ============================================================================
 * 
 * Copyright (c) 2000-2004 Century 24 Solutions Ltd. All  Rights Reserved.
 * 
 * Century 24 Solutions Limited ("C24") authorizes redistribution
 * and use of this software in source and binary forms, with or without
 * modification, for non-resale purposes only, provided that the
 * following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistribution in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the distribution.
 * 
 * 3. The names "Integration Objects" and "C24 IO" must not be used to
 *    endorse or promote products derived from this software without prior
 *    written permission. For written permission, please contact io@c24.biz.
 * 
 * This software is provided "AS IS," without a warranty of any kind. ALL
 * EXPRESS OR IMPLIED CONDITIONS, REPRESENTATIONS AND WARRANTIES, INCLUDING
 * ANY IMPLIED WARRANTY OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE
 * OR NON-INFRINGEMENT, ARE HEREBY EXCLUDED. CENTURY 24 SOLUTIONS AND ITS
 * LICENSORS SHALL NOT BE LIABLE FOR ANY DAMAGES OR LIABILITIES SUFFERED BY
 * LICENSEE AS A RESULT OF OR RELATING TO USE, MODIFICATION OR DISTRIBUTION
 * OF THE SOFTWARE OR ITS DERIVATIVES. IN NO EVENT WILL CENTURY 24 SOLUTIONS
 * OR ITS LICENSORS BE LIABLE FOR ANY LOST REVENUE, PROFIT OR DATA, OR FOR DIRECT,
 * INDIRECT, SPECIAL, CONSEQUENTIAL, INCIDENTAL OR PUNITIVE DAMAGES, HOWEVER
 * CAUSED AND REGARDLESS OF THE THEORY OF LIABILITY, ARISING OUT OF THE USE OF
 * OR INABILITY TO USE SOFTWARE, EVEN IF CENTURY 24 SOLUTIONS HAS BEEN ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGES.
 * 
 * You acknowledge that the Software is not designed, licensed or intended for
 * use in the design, construction, operation or maintenance of any nuclear
 * facility.
 * 
 * For information concerning C24 IO and other C24 products and services, contact
 * us at info@c24.biz or visit www.c24.biz
 * 
 * Auto-Generated by Century 24 Integration Objects.
 */

package biz.c24.io.csv;


/**
 * An object with get / set methods specific to its type.
 * @author C24 Integration Objects&#174;
 * @see biz.c24.io.csv.RecordClass
 **/
public class Record extends biz.c24.io.api.data.ComplexDataObject 
{
    private java.lang.String field1;
    private java.lang.String field2;
    private java.lang.String field3;

    /**
     * Constructs a new instance defined by the default element.
     **/
    public Record()
    {
        super(new biz.c24.io.api.data.Element("Record", 1, 1, biz.c24.io.csv.RecordClass.getInstance(), biz.c24.io.csv.CSVDataDataModel.getInstance()));
    }

    /**
     * Constructs a new instance defined by the specified element.
     * @param definingElementDecl The element which defines the object.
     **/
    public Record(biz.c24.io.api.data.Element definingElementDecl)
    {
        super(definingElementDecl);
    }

    /**
     * Constructs a new instance defined by the specified element and type.
     * @param definingElementDecl The element which defines the object.
     * @param type The type which defines the object.
     **/
    public Record(biz.c24.io.api.data.Element definingElementDecl, biz.c24.io.api.data.ComplexDataType type)
    {
        super(definingElementDecl, type);
    }

    /**
     * Constructs a new instance cloned from the specified object.
     * @param clone The object to be cloned.
     **/
    public Record(biz.c24.io.csv.Record clone)
    {
        super(clone);
    }

    /**
     * Adds <code>value</code> as an element called <code>name</code>.<p>
     * The legal value(s) for <code>name</code> are defined in {@link #getElement}.
     **/
    public void addElement(java.lang.String name, java.lang.Object value)
    {
        name = makeSubstitution(name, -1);
        if (name.equals("Field1"))
            setField1((java.lang.String) value);
        else if (name.equals("Field2"))
            setField2((java.lang.String) value);
        else if (name.equals("Field3"))
            setField3((java.lang.String) value);
        else
            super.addElement(name, value);
    }

    public java.lang.Object clone()
    {
        return new biz.c24.io.csv.Record(this);
    }

    public boolean equals(java.lang.Object obj)
    {
        return super.equals(obj);
    }

    /**
     * Returns the element called <code>name</code> at <code>index</code>.<p>
     * The legal value(s) for <code>name</code> are: <b>field1, field2, field3</b>.
     **/
    public java.lang.Object getElement(java.lang.String name, int index)
    {
        name = getSubstitute(name);
        if (name.equals("Field1"))
            return this.field1;
        else if (name.equals("Field2"))
            return this.field2;
        else if (name.equals("Field3"))
            return this.field3;
        else
            return super.getElement(name, index);
    }

    /**
     * Returns the count of elements called <code>name</code>.<p>
     * The legal value(s) for <code>name</code> are defined in {@link #getElement}.
     **/
    public int getElementCount(java.lang.String name)
    {
        name = getSubstitute(name);
        if (name.equals("Field1"))
            return this.field1 == null ? 0 : 1;
        else if (name.equals("Field2"))
            return this.field2 == null ? 0 : 1;
        else if (name.equals("Field3"))
            return this.field3 == null ? 0 : 1;
        else
            return super.getElementCount(name);
    }

    /**
     * Returns the element called <code>name</code> at <code>index</code>.<p>
     * The legal value(s) for <code>name</code> are defined in {@link #getElement}.
     **/
    public int getElementIndex(java.lang.String name, java.lang.Object element)
    {
        name = getSubstitute(name);
        if (name.equals("Field1"))
            return this.field1 != null && this.field1.equals(element) ? 0 : -1;
        else if (name.equals("Field2"))
            return this.field2 != null && this.field2.equals(element) ? 0 : -1;
        else if (name.equals("Field3"))
            return this.field3 != null && this.field3.equals(element) ? 0 : -1;
        else
            return super.getElementIndex(name, element);
    }

    /**
     * Gets the value of Field1 (1).
     * @return The value.
     **/
    public java.lang.String getField1()
    {
        return this.field1;
    }

    /**
     * Gets the value of Field2 (1).
     * @return The value.
     **/
    public java.lang.String getField2()
    {
        return this.field2;
    }

    /**
     * Gets the value of Field3 (1).
     * @return The value.
     **/
    public java.lang.String getField3()
    {
        return this.field3;
    }

    public int hashCode()
    {
        return super.hashCode();
    }

    /**
     * Removes the element called <code>name</code> at <code>index</code>.<p>
     * The legal value(s) for <code>name</code> are defined in {@link #getElement}.
     **/
    public void removeElement(java.lang.String name, int index)
    {
        name = unmakeSubstitution(name, index);
        if (name.equals("Field1"))
            this.field1 = null;
        else if (name.equals("Field2"))
            this.field2 = null;
        else if (name.equals("Field3"))
            this.field3 = null;
        else
            super.removeElement(name, index);
    }

    /**
     * Sets <code>value</code> as an element called <code>name</code> at <code>index</code>.<p>
     * The legal value(s) for <code>name</code> are defined in {@link #getElement}.
     **/
    public void setElement(java.lang.String name, int index, java.lang.Object value)
    {
        name = makeSubstitution(name, index);
        if (name.equals("Field1"))
            setField1((java.lang.String) value);
        else if (name.equals("Field2"))
            setField2((java.lang.String) value);
        else if (name.equals("Field3"))
            setField3((java.lang.String) value);
        else
            super.setElement(name, index, value);
    }

    /**
     * Sets the value of Field1 (1).
     * @param value The new value.
     **/
    public void setField1(java.lang.String value)
    {
        this.field1 = value;
    }

    /**
     * Sets the value of Field2 (1).
     * @param value The new value.
     **/
    public void setField2(java.lang.String value)
    {
        this.field2 = value;
    }

    /**
     * Sets the value of Field3 (1).
     * @param value The new value.
     **/
    public void setField3(java.lang.String value)
    {
        this.field3 = value;
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
    {
        out.writeObject(this.field1);
        out.writeObject(this.field2);
        out.writeObject(this.field3);
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException
    {
        this.field1 = (java.lang.String) in.readObject();
        this.field2 = (java.lang.String) in.readObject();
        this.field3 = (java.lang.String) in.readObject();
    }

}
