Index: src/net/sf/hibernate/property/BasicPropertyAccessor.java
===================================================================
RCS file: /cvsroot/hibernate/Hibernate2/src/net/sf/hibernate/property/BasicPropertyAccessor.java,v
retrieving revision 1.6
diff -u -r1.6 BasicPropertyAccessor.java
--- src/net/sf/hibernate/property/BasicPropertyAccessor.java	4 Jun 2004 05:43:47 -0000	1.6
+++ src/net/sf/hibernate/property/BasicPropertyAccessor.java	1 Dec 2004 18:38:55 -0000
@@ -1,7 +1,6 @@
 //$Id: BasicPropertyAccessor.java,v 1.6 2004/06/04 05:43:47 steveebersole Exp $
 package net.sf.hibernate.property;
 
-import java.beans.Introspector;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 
@@ -160,15 +159,16 @@
 		BasicGetter getter = getGetterOrNull(theClass, propertyName);
 		Class returnType = (getter==null) ? null : getter.getReturnType();
 		
+		// capitalize the first character as per JavaBean spec
+		String baseName = capitalize(propertyName);
+
 		Method[] methods = theClass.getDeclaredMethods();
 		Method potentialSetter = null;
 		for (int i=0; i<methods.length; i++) {
 			String methodName = methods[i].getName();
 			
 			if ( methods[i].getParameterTypes().length==1 && methodName.startsWith("set") ) {
-				String testStdMethod = Introspector.decapitalize( methodName.substring(3) );
-				String testOldMethod = methodName.substring(3);
-				if ( testStdMethod.equals(propertyName) || testOldMethod.equals(propertyName) ) {
+				if ( methodName.equals("set" + baseName) ) {
 					potentialSetter = methods[i];
 					if ( returnType==null || methods[i].getParameterTypes()[0].equals(returnType) ) return potentialSetter;
 				}
@@ -207,7 +207,10 @@
 	}
 	
 	private static Method getterMethod(Class theClass, String propertyName) {
-		
+
+		// capitalize the first character as per JavaBean spec
+		String baseName = capitalize(propertyName);
+
 		Method[] methods = theClass.getDeclaredMethods();
 		for (int i=0; i<methods.length; i++) {
 			// only carry on if the method has no parameters
@@ -215,24 +218,27 @@
 				String methodName = methods[i].getName();
 				
 				// try "get"
-				if( methodName.startsWith("get") ) {
-					String testStdMethod = Introspector.decapitalize( methodName.substring(3) );
-					String testOldMethod = methodName.substring(3);
-					if( testStdMethod.equals(propertyName) || testOldMethod.equals(propertyName) ) return methods[i];
-					
+				if( methodName.equals("get" + baseName) ) {
+					return methods[i];
 				}
 				
 				// if not "get" then try "is"
-				/*boolean isBoolean = methods[i].getReturnType().equals(Boolean.class) || 
-					methods[i].getReturnType().equals(boolean.class);*/
-				if( methodName.startsWith("is") ) {
-					String testStdMethod = Introspector.decapitalize( methodName.substring(2) );
-					String testOldMethod = methodName.substring(2);
-					if( testStdMethod.equals(propertyName) || testOldMethod.equals(propertyName) ) return methods[i];
+				if( methodName.equals("is" + baseName) ) {
+					return methods[i];
 				}
 			}
 		}
 		return null;
 	}
-	
+
+    private static String capitalize(String s) {
+    	if (s == null || s.length() == 0) {
+    	    return s;
+    	}
+
+    	char chars[] = s.toCharArray();
+    	chars[0] = Character.toUpperCase(chars[0]);
+
+    	return new String(chars);
+    }
 }
