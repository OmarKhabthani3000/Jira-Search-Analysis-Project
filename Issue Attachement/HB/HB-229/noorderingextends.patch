Index: net/sf/hibernate/hibernate-mapping-2.0.dtd
===================================================================
RCS file: /cvsroot/hibernate/Hibernate2/src/net/sf/hibernate/hibernate-mapping-2.0.dtd,v
retrieving revision 1.34.2.7
diff -u -r1.34.2.7 hibernate-mapping-2.0.dtd
--- net/sf/hibernate/hibernate-mapping-2.0.dtd	10 Aug 2003 16:51:41 -0000	1.34.2.7
+++ net/sf/hibernate/hibernate-mapping-2.0.dtd	22 Aug 2003 10:11:07 -0000
@@ -18,7 +18,7 @@
 
 <!-- The document root. -->
 
-<!ELEMENT hibernate-mapping (meta*, import*, class*, query*)>
+<!ELEMENT hibernate-mapping (meta*, import*, (class|subclass|joined-subclass)*, query*)>
   <!ATTLIST hibernate-mapping schema CDATA #IMPLIED>                            <!-- default: none -->
   <!ATTLIST hibernate-mapping default-cascade (none|save-update|all) "none">
   <!ATTLIST hibernate-mapping auto-import (true|false) "true">
@@ -109,6 +109,7 @@
   <!ATTLIST subclass discriminator-value CDATA #IMPLIED>  <!-- default: unqualified class name | none -->
   <!ATTLIST subclass dynamic-update (true|false) "false">
   <!ATTLIST subclass dynamic-insert (true|false) "false">
+  <!ATTLIST subclass extends CDATA #IMPLIED>              <!-- default: empty when a toplevel, otherwise the nearest class definition -->
 
 <!-- Joined subclasses are used for the normalized table-per-subclass mapping strategy -->
 
@@ -124,6 +125,7 @@
   <!ATTLIST joined-subclass schema CDATA #IMPLIED>
   <!ATTLIST joined-subclass dynamic-update (true|false) "false">
   <!ATTLIST joined-subclass dynamic-insert (true|false) "false">
+  <!ATTLIST joined-subclass extends CDATA #IMPLIED>       <!-- default: empty when a toplevel, otherwise the nearest class definition -->
   
 <!-- Property of an entity class or component, component-element, composite-id, etc. 
 JavaBeans style properties are mapped to table columns. -->
Index: net/sf/hibernate/cfg/Binder.java
===================================================================
RCS file: /cvsroot/hibernate/Hibernate2/src/net/sf/hibernate/cfg/Binder.java,v
retrieving revision 1.26.2.12
diff -u -r1.26.2.12 Binder.java
--- net/sf/hibernate/cfg/Binder.java	20 Aug 2003 14:33:14 -0000	1.26.2.12
+++ net/sf/hibernate/cfg/Binder.java	22 Aug 2003 10:11:10 -0000
@@ -916,16 +916,10 @@
 				bindComponent(subnode, (Component) value, reflectedClass, subpath, true, mappings);
 			}
 			else if ( "subclass".equals(name) ) {
-				Subclass subclass = new Subclass(model);
-				bindSubclass( subnode, subclass, mappings );
-				model.addSubclass(subclass);
-				mappings.addClass(subclass);
+				handleSubclass(model, mappings, subnode);
 			}
 			else if ( "joined-subclass".equals(name) ) {
-				Subclass subclass = new Subclass(model);
-				bindJoinedSubclass( subnode, subclass, mappings );
-				model.addSubclass(subclass);
-				mappings.addClass(subclass);
+				handleJoinedSubclass(model, mappings, subnode);
 			}
 			if ( value!=null) {
 				value.setTypeByReflection( model.getPersistentClass(), propertyName );
@@ -937,6 +931,20 @@
 		}
 	}
 
+	private static void handleJoinedSubclass(PersistentClass model, Mappings mappings, Element subnode) throws MappingException {
+		Subclass subclass = new Subclass(model);
+		bindJoinedSubclass( subnode, subclass, mappings );
+		model.addSubclass(subclass);
+		mappings.addClass(subclass);
+	}
+
+	private static void handleSubclass(PersistentClass model, Mappings mappings, Element subnode) throws MappingException {
+		Subclass subclass = new Subclass(model);
+		bindSubclass( subnode, subclass, mappings );
+		model.addSubclass(subclass);
+		mappings.addClass(subclass);
+	}
+
 	public static void bindSetSecondPass(Element node, Set model, java.util.Map persistentClasses, Mappings mappings) throws MappingException {
 
 		bindCollectionSecondPass(node, model, persistentClasses, mappings);
@@ -1099,7 +1107,30 @@
 			Binder.bindRootClass(n, rootclass, model);
 			model.addClass(rootclass);
 		}
-
+		
+		Iterator subclassnodes = hmNode.elementIterator("subclass");
+			while ( subclassnodes.hasNext() ) {
+				Element subnode = (Element) subclassnodes.next();
+				PersistentClass superModel = getSuperclass(model, subnode);
+				if(superModel==null) {
+					model.addSecondPassResolver(new Binder.SecondPassResolver(subnode, model, subnode.attributeValue("extends"),false));						
+				} else {
+					handleSubclass(superModel, model, subnode);
+				}
+			}
+		
+		Iterator joinedsubclassnodes = hmNode.elementIterator("joined-subclass");
+			while (joinedsubclassnodes.hasNext()) {
+				Element subnode = (Element) joinedsubclassnodes.next();
+				PersistentClass superModel = getSuperclass(model, subnode);
+				if(superModel==null) {
+					model.addSecondPassResolver(new Binder.SecondPassResolver(subnode, model, subnode.attributeValue("extends"),true));
+				} else {
+					handleJoinedSubclass(superModel, model, subnode);
+				}
+			}
+		
+		
 		nodes = hmNode.elementIterator("query");
 		while ( nodes.hasNext() ) {
 			Element n = (Element) nodes.next();
@@ -1120,11 +1151,58 @@
 		}
 	}
 
+	private static PersistentClass getSuperclass(Mappings model, Element subnode) throws MappingException {
+		String extendsValue = subnode.attributeValue("extends");
+		Class superclass;
+		try {
+			superclass = ReflectHelper.classForName(extendsValue);
+		} catch (ClassNotFoundException e) {
+			throw new MappingException("extends class " + extendsValue + " not found.",e);
+		}
+		PersistentClass superModel = model.getClass(superclass);
+			
+		return superModel;
+	}
+
 	private static String getPropertyName(Element node) {
 		Attribute propertyNameNode = node.attribute("name");
 		return (propertyNameNode==null) ? null : propertyNameNode.getValue();
 	}
 
+	/** Small "command" clsas for resolving toplevel subclasses and joined-subclasses */
+	static class SecondPassResolver {
+		final Element node;
+		final String superclass;
+		final boolean joined;
+		final Mappings mappings;
+		
+		SecondPassResolver(Element node, Mappings mappings, String superclass, boolean joined) {
+			this.node = node;
+			this.superclass = superclass;
+			this.joined = joined;	
+			this.mappings = mappings;	
+		}
+		
+		/** Attempts to resolve and complete the class definition. Can be called multiple times. 
+		 *  Return true if it succeds, otherwise false. 
+		 */
+		boolean secondPassResolve() throws MappingException {
+			PersistentClass supermodel = getSuperclass(mappings, node);
+			if(supermodel == null) return false;
+			
+			if(joined) {
+				handleJoinedSubclass(supermodel, mappings, node);
+			} else {
+				handleSubclass(supermodel, mappings, node);
+			}
+			return true;
+		}
+		
+		public String toString() {
+			return "<" + node.getName() + " name=" + node.attributeValue("name") + " extends=" + superclass + "/>"; 
+		}
+	}
+	
 	abstract static class SecondPass {
 		Element node;
 		Mappings mappings;
@@ -1152,7 +1230,7 @@
 		}
 		abstract void secondPass(java.util.Map persistentClasses) throws MappingException;
 	}
-
+	
 	static class CollectionSecondPass extends SecondPass {
 		CollectionSecondPass(Element node, Mappings mappings, Collection collection) {
 			super(node, mappings, collection);
Index: net/sf/hibernate/cfg/Configuration.java
===================================================================
RCS file: /cvsroot/hibernate/Hibernate2/src/net/sf/hibernate/cfg/Configuration.java,v
retrieving revision 1.27.2.8
diff -u -r1.27.2.8 Configuration.java
--- net/sf/hibernate/cfg/Configuration.java	20 Aug 2003 21:47:57 -0000	1.27.2.8
+++ net/sf/hibernate/cfg/Configuration.java	22 Aug 2003 10:11:11 -0000
@@ -23,6 +23,7 @@
 import org.apache.commons.logging.LogFactory;
 import org.dom4j.Attribute;
 import org.dom4j.Element;
+import org.dom4j.rule.Mode;
 import org.w3c.dom.Document;
 import org.xml.sax.InputSource;
 
@@ -50,6 +51,7 @@
 import net.sf.hibernate.cache.Cache;
 import net.sf.hibernate.cache.CacheConcurrencyStrategy;
 import net.sf.hibernate.cache.CacheException;
+import net.sf.hibernate.cfg.Binder.SecondPassResolver;
 import net.sf.hibernate.dialect.Dialect;
 import net.sf.hibernate.engine.Mapping;
 
@@ -78,6 +80,7 @@
 	private Map tables = new HashMap();
 	private Map namedQueries = new HashMap();
 	private List secondPasses = new ArrayList();
+	private List secondPassResolver = new ArrayList();
 	private List propertyReferences = new ArrayList();
 	private Interceptor interceptor = EMPTY_INTERCEPTOR;
 	private Properties properties = Environment.getProperties();
@@ -93,6 +96,7 @@
 		secondPasses = new ArrayList();
 		interceptor = EMPTY_INTERCEPTOR;
 		properties = Environment.getProperties();
+		secondPassResolver = new ArrayList();
 	}
 
 	private Mapping mapping = new Mapping() {
@@ -243,7 +247,7 @@
 	 * mappings to.
 	 */
 	public Mappings createMappings() {
-		return new Mappings(classes, collections, tables, namedQueries, imports, caches, secondPasses, propertyReferences);
+		return new Mappings(classes, collections, tables, namedQueries, imports, caches, secondPasses, propertyReferences, secondPassResolver);
 	}
 
 	/**
@@ -500,6 +504,25 @@
 	// This method may be called many times!!
 	private void secondPassCompile() throws MappingException {
 
+		log.info("processing externally defined subclasses");
+		int resolved = 0;
+		do {
+			resolved = 0;
+			Iterator iter = secondPassResolver.iterator();
+			while (iter.hasNext()) {
+				Binder.SecondPassResolver lazy = (SecondPassResolver) iter.next();
+
+				if (lazy.secondPassResolve()) {
+					resolved++;
+					iter.remove();
+				}
+			}
+		} while(resolved>0); 
+				 
+		if(secondPassResolver.size()>0) {
+			throw new MappingException("Could not resolve superclasses for " + secondPassResolver.size() + " class(es). " + secondPassResolver);
+		} 
+		
 		log.info("processing one-to-many association mappings");
 
 		Iterator iter = secondPasses.iterator();
Index: net/sf/hibernate/cfg/Mappings.java
===================================================================
RCS file: /cvsroot/hibernate/Hibernate2/src/net/sf/hibernate/cfg/Mappings.java,v
retrieving revision 1.7.2.3
diff -u -r1.7.2.3 Mappings.java
--- net/sf/hibernate/cfg/Mappings.java	13 Aug 2003 16:02:44 -0000	1.7.2.3
+++ net/sf/hibernate/cfg/Mappings.java	22 Aug 2003 10:11:11 -0000
@@ -4,15 +4,15 @@
 import java.util.List;
 import java.util.Map;
 
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
-
 import net.sf.hibernate.MappingException;
 import net.sf.hibernate.cache.CacheConcurrencyStrategy;
 import net.sf.hibernate.mapping.Collection;
 import net.sf.hibernate.mapping.PersistentClass;
 import net.sf.hibernate.mapping.Table;
 
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+
 /**
  * A collection of mappings from classes and collections to
  * relational database tables. (Represents a single
@@ -27,6 +27,7 @@
 	private final Map collections;
 	private final Map tables;
 	private final Map queries;
+	private final List secondPassResolver;
 	private final List secondPasses;
 	private final Map imports;
 	private String schemaName;
@@ -34,8 +35,10 @@
 	private boolean autoImport;
 	private final List propertyReferences;
 	private final Map caches;
+
 	
-	Mappings(Map classes, Map collections, Map tables, Map queries, Map imports, Map caches, List secondPasses, List propertyReferences) {
+	
+	Mappings(Map classes, Map collections, Map tables, Map queries, Map imports, Map caches, List secondPasses, List propertyReferences, List lazyClasses) {
 		this.classes = classes;
 		this.collections = collections;
 		this.queries = queries;
@@ -44,6 +47,7 @@
 		this.secondPasses = secondPasses;
 		this.propertyReferences = propertyReferences;
 		this.caches = caches;
+		this.secondPassResolver = lazyClasses;
 	}
 	
 	public void addClass(PersistentClass persistentClass) throws MappingException {
@@ -121,6 +125,13 @@
 	void addSecondPass(Binder.SecondPass sp) {
 		secondPasses.add(sp);
 	}
+	
+	public void addSecondPassResolver(Binder.SecondPassResolver node) {
+		if(log.isTraceEnabled()) {
+			log.trace("queing up second pass resolver for " + node);
+		}
+		secondPassResolver.add(node);
+	}
 
 	/**
 	 * Returns the autoImport.
@@ -153,6 +164,8 @@
 	public void addCache(String name, CacheConcurrencyStrategy cache) {
 		caches.put(name, cache);
 	}
+
+	
 
 }
 
Index: net/sf/hibernate/mapping/PersistentClass.java
===================================================================
RCS file: /cvsroot/hibernate/Hibernate2/src/net/sf/hibernate/mapping/PersistentClass.java,v
retrieving revision 1.14.2.1
diff -u -r1.14.2.1 PersistentClass.java
--- net/sf/hibernate/mapping/PersistentClass.java	1 Aug 2003 14:07:45 -0000	1.14.2.1
+++ net/sf/hibernate/mapping/PersistentClass.java	22 Aug 2003 10:11:26 -0000
@@ -4,6 +4,7 @@
 import java.util.ArrayList;
 import java.util.Iterator;
 
+import net.sf.hibernate.MappingException;
 import net.sf.hibernate.cache.CacheConcurrencyStrategy;
 import net.sf.hibernate.sql.Alias;
 import net.sf.hibernate.util.JoinedIterator;
@@ -45,7 +46,15 @@
 		return discriminatorValue;
 	}
 	
-	public void addSubclass(Subclass subclass) {
+	public void addSubclass(Subclass subclass) throws MappingException {
+		// inheritance cycle detection (paranoid check)
+		PersistentClass superc = getSuperclass();
+		while(superc!=null) {
+			if(subclass.getName().equals(superc.getName())) {
+				throw new MappingException("Circular inheritance mapping detected! " + subclass.getName() + " will have it self as superclass when extending " + getName());
+			}
+			superc = superc.getSuperclass();
+		}
 		subclasses.add(subclass);
 	}
 	
Index: net/sf/hibernate/mapping/RootClass.java
===================================================================
RCS file: /cvsroot/hibernate/Hibernate2/src/net/sf/hibernate/mapping/RootClass.java,v
retrieving revision 1.13
diff -u -r1.13 RootClass.java
--- net/sf/hibernate/mapping/RootClass.java	12 Jul 2003 08:57:41 -0000	1.13
+++ net/sf/hibernate/mapping/RootClass.java	22 Aug 2003 10:11:26 -0000
@@ -4,6 +4,7 @@
 import java.util.Collections;
 import java.util.Iterator;
 
+import net.sf.hibernate.MappingException;
 import net.sf.hibernate.cache.CacheConcurrencyStrategy;
 
 public class RootClass extends PersistentClass {
@@ -59,7 +60,7 @@
 		return Collections.singleton( getTable() ).iterator();
 	}
 	
-	public void addSubclass(Subclass subclass) {
+	public void addSubclass(Subclass subclass) throws MappingException {
 		super.addSubclass(subclass);
 		setPolymorphic(true);
 	}
Index: net/sf/hibernate/test/ABC.hbm.xml
===================================================================
RCS file: /cvsroot/hibernate/Hibernate2/src/net/sf/hibernate/test/ABC.hbm.xml,v
retrieving revision 1.7
diff -u -r1.7 ABC.hbm.xml
--- net/sf/hibernate/test/ABC.hbm.xml	17 Jun 2003 09:36:38 -0000	1.7
+++ net/sf/hibernate/test/ABC.hbm.xml	22 Aug 2003 10:11:28 -0000
@@ -8,16 +8,7 @@
 		</id>
 		<discriminator column="clazz" type="integer" not-null="false"/>
 		<property name="name"/>
-		<subclass name="net.sf.hibernate.test.B" discriminator-value="-1">
-			<property name="count" column="count_"/>
-			<subclass name="net.sf.hibernate.test.C1" discriminator-value="null">
-				<property name="address" column="c1"/>
-				<one-to-one name="d"/>
-			</subclass>
-			<subclass name="net.sf.hibernate.test.C2" discriminator-value="2">
-				<property name="address" column="c2"/>
-			</subclass>
-		</subclass>
+		
 	</class>
 
 	<class name="net.sf.hibernate.test.D" discriminator-value="0" proxy="net.sf.hibernate.test.D">
Index: net/sf/hibernate/test/ABCTest.java
===================================================================
RCS file: /cvsroot/hibernate/Hibernate2/src/net/sf/hibernate/test/ABCTest.java,v
retrieving revision 1.5.2.1
diff -u -r1.5.2.1 ABCTest.java
--- net/sf/hibernate/test/ABCTest.java	8 Aug 2003 06:16:16 -0000	1.5.2.1
+++ net/sf/hibernate/test/ABCTest.java	22 Aug 2003 10:11:28 -0000
@@ -77,7 +77,7 @@
 	
 	public static Test suite() throws Exception {
 		try {
-			TestCase.buildSessionFactory( new String[] {  "ABC.hbm.xml" } );
+			TestCase.buildSessionFactory( new String[] {  "ABCExtends.hbm.xml", "ABC.hbm.xml"} );
 			return new TestSuite(ABCTest.class);
 		}
 		catch (Exception e) {
Index: net/sf/hibernate/test/B.java
===================================================================
RCS file: /cvsroot/hibernate/Hibernate2/src/net/sf/hibernate/test/B.java,v
retrieving revision 1.4
diff -u -r1.4 B.java
--- net/sf/hibernate/test/B.java	28 Jul 2003 00:34:32 -0000	1.4
+++ net/sf/hibernate/test/B.java	22 Aug 2003 10:11:28 -0000
@@ -6,6 +6,22 @@
 public class B extends A {
 	private int count;
 	private Map map;
+	private C2 downwards;
+	
+	/**
+	 * @return
+	 */
+	public C2 getDownwards() {
+		return downwards;
+	}
+
+	/**
+	 * @param downwards
+	 */
+	public void setDownwards(C2 downwards) {
+		this.downwards = downwards;
+	}
+
 	/**
 	 * Returns the count.
 	 * @return int
Index: net/sf/hibernate/test/Multi.hbm.xml
===================================================================
RCS file: /cvsroot/hibernate/Hibernate2/src/net/sf/hibernate/test/Multi.hbm.xml,v
retrieving revision 1.12.2.3
diff -u -r1.12.2.3 Multi.hbm.xml
--- net/sf/hibernate/test/Multi.hbm.xml	13 Aug 2003 09:37:08 -0000	1.12.2.3
+++ net/sf/hibernate/test/Multi.hbm.xml	22 Aug 2003 10:11:31 -0000
@@ -16,19 +16,7 @@
         <property name="name"/>
         <property name="address"/>
         <property name="date" column="date_"/>
-        
-        <joined-subclass 
-        	name="net.sf.hibernate.test.Mono" 
-        	table="mono"
-        	dynamic-insert="true" 
-    		dynamic-update="true">
-        	<key column="superid"/>
-        	<set name="strings" table="monostrings">
-        		<key column="monoid_"/>
-        		<element type="string" column="str_"/>
-        	</set>
-        </joined-subclass>
-        
+                
         <joined-subclass name="net.sf.hibernate.test.TrivialClass">
         	<key column="tcid"/>
         </joined-subclass>
Index: net/sf/hibernate/test/MultiTableTest.java
===================================================================
RCS file: /cvsroot/hibernate/Hibernate2/src/net/sf/hibernate/test/MultiTableTest.java,v
retrieving revision 1.18.2.5
diff -u -r1.18.2.5 MultiTableTest.java
--- net/sf/hibernate/test/MultiTableTest.java	13 Aug 2003 09:37:08 -0000	1.18.2.5
+++ net/sf/hibernate/test/MultiTableTest.java	22 Aug 2003 10:11:31 -0000
@@ -637,7 +637,7 @@
 	public static Test suite() throws Exception {
 		try {
 			TestCase.buildSessionFactory(
-				new String[] { "Multi.hbm.xml" }
+				new String[] { "Multi.hbm.xml", "MultiExtends.hbm.xml" }
 			);
 		}
 		catch (Exception e) {
Index: src/net/sf/hibernate/test/ABCExtends.hbm.xml
===================================================================
RCS file: src/net/sf/hibernate/test/ABCExtends.hbm.xml
diff -N src/net/sf/hibernate/test/ABCExtends.hbm.xml
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ src/net/sf/hibernate/test/ABCExtends.hbm.xml	1 Jan 1970 00:00:00 -0000
@@ -0,0 +1,20 @@
+<?xml version="1.0"?>
+<!DOCTYPE hibernate-mapping SYSTEM "http://hibernate.sourceforge.net/hibernate-mapping-2.0.dtd" >
+<hibernate-mapping>
+
+	<subclass name="net.sf.hibernate.test.C2" discriminator-value="2" extends="net.sf.hibernate.test.B">
+		<property name="address" column="c2"/>
+	</subclass>
+
+	<subclass name="net.sf.hibernate.test.B" discriminator-value="-1" extends="net.sf.hibernate.test.A">
+			<property name="count" column="count_"/>
+			<many-to-one name="downwards" column="downwards"/>
+			<subclass name="net.sf.hibernate.test.C1" discriminator-value="null">
+				<property name="address" column="c1"/>
+				<one-to-one name="d"/>				
+			</subclass>
+	</subclass>
+	
+	
+	
+</hibernate-mapping>
Index: src/net/sf/hibernate/test/MultiExtends.hbm.xml
===================================================================
RCS file: src/net/sf/hibernate/test/MultiExtends.hbm.xml
diff -N src/net/sf/hibernate/test/MultiExtends.hbm.xml
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ src/net/sf/hibernate/test/MultiExtends.hbm.xml	1 Jan 1970 00:00:00 -0000
@@ -0,0 +1,19 @@
+<?xml version="1.0"?>
+<!DOCTYPE hibernate-mapping SYSTEM "http://hibernate.sourceforge.net/hibernate-mapping-2.0.dtd" >
+<hibernate-mapping>
+
+        <joined-subclass 
+        	name="net.sf.hibernate.test.Mono" 
+        	extends="net.sf.hibernate.test.Top"
+        	table="mono"
+        	dynamic-insert="true" 
+    		dynamic-update="true">
+        	<key column="superid"/>
+        	<set name="strings" table="monostrings">
+        		<key column="monoid_"/>
+        		<element type="string" column="str_"/>
+        	</set>
+        </joined-subclass>
+
+
+</hibernate-mapping>
