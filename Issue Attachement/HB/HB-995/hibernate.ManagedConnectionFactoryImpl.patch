Index: ManagedConnectionFactoryImpl.java
===================================================================
RCS file: /cvsroot/hibernate/Hibernate2/src/net/sf/hibernate/jca/ManagedConnectionFactoryImpl.java,v
retrieving revision 1.4
diff -u -r1.4 ManagedConnectionFactoryImpl.java
--- ManagedConnectionFactoryImpl.java	15 Jun 2003 12:45:06 -0000	1.4
+++ ManagedConnectionFactoryImpl.java	30 May 2004 18:17:18 -0000
@@ -61,6 +61,9 @@
 	/** Hibernate properties */
 	private String properties;
 	
+    /** Check if use hibernate.cfg.xml */
+    private Boolean useConfigXML;	
+	
 	//
 	//
 	//
@@ -107,42 +110,54 @@
 	 * calls.
 	 */
 	private synchronized void initialize() throws ResourceException {
-		// locate datasource
-		if (datasource == null) {
-			try {
-				Context ctx = new InitialContext();
+	    
+	    //check if we use cfg.xml, so we don't need this
+	    if ((useConfigXML == null) || (!useConfigXML.booleanValue())) {
+			// locate datasource
+			if (datasource == null) {
 				try {
-					datasource = (DataSource) ctx.lookup(datasourceJndi);
-				} 
-				finally {
-					ctx.close();
+					Context ctx = new InitialContext();
+					try {
+						datasource = (DataSource) ctx.lookup(datasourceJndi);
+					} 
+					finally {
+						ctx.close();
+					}
+				}
+				catch (NamingException e) {
+					final String message =
+					"Cannot locate DataSource " + datasourceJndi;
+					log(message, e);
+					final ResourceException re = new ResourceException(message);
+					re.setLinkedException(e);
+					throw re;
 				}
 			}
-			catch (NamingException e) {
-				final String message =
-				"Cannot locate DataSource " + datasourceJndi;
-				log(message, e);
-				final ResourceException re = new ResourceException(message);
-				re.setLinkedException(e);
-				throw re;
-			}
-		}
+	    }
 		
 		// initialize session factory
 		if (sessionFactory == null) {
 			try {
-				final String delim = " ,\n\t\r\f";
-				final Properties hibProperties = new Properties();
-				// @todo load this.properties
-				hibProperties.setProperty(Environment.DIALECT, dialect);
-				
-				Configuration cfg = new Configuration().addProperties(hibProperties);
-				
-				// taken from HibernateService, maybe factor out for JCA 1.5
-				String[] mappingFiles = PropertiesHelper.toStringArray(mapResources, delim);
-				for ( int i=0; i<mappingFiles.length; i++ ) {
-					cfg.addResource( mappingFiles[i], Thread.currentThread().getContextClassLoader() );
-				}
+			    Configuration cfg;
+			    //check if we use cfg.xml, so we don't need this
+			    if ((useConfigXML == null) || (!useConfigXML.booleanValue())) {
+					final String delim = " ,\n\t\r\f";
+					final Properties hibProperties = new Properties();
+					// @todo load this.properties
+					hibProperties.setProperty(Environment.DIALECT, dialect);
+					
+					cfg = new Configuration().addProperties(hibProperties);
+					
+					// taken from HibernateService, maybe factor out for JCA 1.5
+					String[] mappingFiles = PropertiesHelper.toStringArray(mapResources, delim);
+					for ( int i=0; i<mappingFiles.length; i++ ) {
+						cfg.addResource( mappingFiles[i], Thread.currentThread().getContextClassLoader() );
+					}
+			    } else {
+                    //just try to get the hibernate.cfg.xml from classpath and we're done
+                    cfg = new Configuration().configure();
+                    log("Configured Hibernate through hibernate.cfg.xml");
+                }
 				sessionFactory = cfg.buildSessionFactory();
 			}
 			catch (HibernateException e) {
