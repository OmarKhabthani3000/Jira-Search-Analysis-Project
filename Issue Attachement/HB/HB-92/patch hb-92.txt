Index: src/net/sf/hibernate/id/IdentifierGeneratorFactory.java
===================================================================
RCS file: /cvsroot/hibernate/Hibernate2/src/net/sf/hibernate/id/IdentifierGeneratorFactory.java,v
retrieving revision 1.5
diff -u -r1.5 IdentifierGeneratorFactory.java
--- src/net/sf/hibernate/id/IdentifierGeneratorFactory.java	25 Apr 2003 03:40:33 -0000	1.5
+++ src/net/sf/hibernate/id/IdentifierGeneratorFactory.java	21 May 2003 10:15:56 -0000
@@ -1,93 +1,75 @@
-//$Id: IdentifierGeneratorFactory.java,v 1.5 2003/04/25 03:40:33 oneovthafew Exp $
-package net.sf.hibernate.id;
-
-import java.sql.ResultSet;
-import java.sql.SQLException;
-import java.util.HashMap;
-import java.util.Properties;
-
-import net.sf.hibernate.MappingException;
-import net.sf.hibernate.dialect.Dialect;
-import net.sf.hibernate.type.Type;
-import net.sf.hibernate.util.ReflectHelper;
-
-/**
- * Factory methods for <tt>IdentifierGenerator</tt> framework
- * 
- * @author Gavin King
- */
-public final class IdentifierGeneratorFactory {
-	
-	// unhappy about this being public ... is there a better way?
-	public static Number get(ResultSet rs, Class clazz) throws SQLException, IdentifierGenerationException {
-		if ( clazz==Long.class ) {
-			return new Long( rs.getLong(1) );
-		}
-		else if ( clazz==Integer.class ) {
-			return new Integer( rs.getInt(1) );
-		}
-		else if ( clazz==Short.class ) {
-			return new Short( rs.getShort(1) );
-		}
-		else {
-			throw new IdentifierGenerationException("this id generator generates long, integer, short");
-		}
-	}
-
-	private static final HashMap idgenerators = new HashMap();
-
-	public static final String SHORT_CIRCUIT_INDICATOR = new String();
-	static {
-		idgenerators.put("uuid.hex", UUIDHexGenerator.class);
-		idgenerators.put("uuid.string", UUIDStringGenerator.class);
-		idgenerators.put("hilo", TableHiLoGenerator.class);
-		idgenerators.put("assigned", Assigned.class);
-		idgenerators.put("identity", IdentityGenerator.class);
-		idgenerators.put("sequence", SequenceGenerator.class);
-		idgenerators.put("seqhilo", SequenceHiLoGenerator.class);
-		idgenerators.put("vm", CounterGenerator.class);
-		idgenerators.put("foreign", ForeignGenerator.class);
-	}
-	
-	public static IdentifierGenerator create(String strategy, Type type, Properties params, Dialect dialect) throws MappingException {
-		try {
-			Class clazz = (Class) idgenerators.get(strategy);
-			if ( "native".equals(strategy) ) {
-				if ( dialect.supportsIdentityColumns() ) {
-					clazz = IdentityGenerator.class;
-				}
-				else if ( dialect.supportsSequences() ) {
-					clazz = SequenceGenerator.class;
-				}
-				else {
-					clazz = TableHiLoGenerator.class;
-				}
-			}
-			if (clazz==null) clazz = ReflectHelper.classForName(strategy);
-			IdentifierGenerator idgen = (IdentifierGenerator) clazz.newInstance();
-			if (idgen instanceof Configurable) ( (Configurable) idgen).configure(type, params, dialect);
-			return idgen;
-		}
-		catch (Exception e) {
-			throw new MappingException("could not instantiate id generator", e);
-		}
-	}
-	
-	static Number createNumber(long value, Class clazz) throws IdentifierGenerationException {
-		if ( clazz==Long.class ) {
-			return new Long(value);
-		}
-		else if ( clazz==Integer.class ) {
-			return new Integer( (int) value );
-		}
-		else if ( clazz==Short.class ) {
-			return new Short( (short) value );
-		}
-		else {
-			throw new IdentifierGenerationException("this id generator generates long, integer, short");
-		}
-	}
-	
-	private IdentifierGeneratorFactory() {} //cannot be instantiated
-	
-}
+//$Id: IdentifierGeneratorFactory.java,v 1.5 2003/04/25 03:40:33 oneovthafew Exp $
+package net.sf.hibernate.id;
+
+import java.util.HashMap;
+import java.util.Properties;
+
+import net.sf.hibernate.MappingException;
+import net.sf.hibernate.dialect.Dialect;
+import net.sf.hibernate.type.Type;
+import net.sf.hibernate.util.ReflectHelper;
+
+/**
+ * Factory methods for <tt>IdentifierGenerator</tt> framework
+ * 
+ * @author Gavin King
+ */
+public final class IdentifierGeneratorFactory {
+	
+	private static final HashMap idgenerators = new HashMap();
+
+	public static final String SHORT_CIRCUIT_INDICATOR = new String();
+	static {
+		idgenerators.put("uuid.hex", UUIDHexGenerator.class);
+		idgenerators.put("uuid.string", UUIDStringGenerator.class);
+		idgenerators.put("hilo", TableHiLoGenerator.class);
+		idgenerators.put("assigned", Assigned.class);
+		idgenerators.put("identity", IdentityGenerator.class);
+		idgenerators.put("sequence", SequenceGenerator.class);
+		idgenerators.put("seqhilo", SequenceHiLoGenerator.class);
+		idgenerators.put("vm", CounterGenerator.class);
+		idgenerators.put("foreign", ForeignGenerator.class);
+	}
+	
+	public static IdentifierGenerator create(String strategy, Type type, Properties params, Dialect dialect) throws MappingException {
+		try {
+			Class clazz = (Class) idgenerators.get(strategy);
+			if ( "native".equals(strategy) ) {
+				if ( dialect.supportsIdentityColumns() ) {
+					clazz = IdentityGenerator.class;
+				}
+				else if ( dialect.supportsSequences() ) {
+					clazz = SequenceGenerator.class;
+				}
+				else {
+					clazz = TableHiLoGenerator.class;
+				}
+			}
+			if (clazz==null) clazz = ReflectHelper.classForName(strategy);
+			IdentifierGenerator idgen = (IdentifierGenerator) clazz.newInstance();
+			if (idgen instanceof Configurable) ( (Configurable) idgen).configure(type, params, dialect);
+			return idgen;
+		}
+		catch (Exception e) {
+			throw new MappingException("could not instantiate id generator", e);
+		}
+	}
+	
+	static Number createNumber(long value, Class clazz) throws IdentifierGenerationException {
+		if ( clazz==Long.class ) {
+			return new Long(value);
+		}
+		else if ( clazz==Integer.class ) {
+			return new Integer( (int) value );
+		}
+		else if ( clazz==Short.class ) {
+			return new Short( (short) value );
+		}
+		else {
+			throw new IdentifierGenerationException("this id generator generates long, integer, short");
+		}
+	}
+	
+	private IdentifierGeneratorFactory() {} //cannot be instantiated
+	
+}
Index: src/net/sf/hibernate/id/SequenceGenerator.java
===================================================================
RCS file: /cvsroot/hibernate/Hibernate2/src/net/sf/hibernate/id/SequenceGenerator.java,v
retrieving revision 1.7
diff -u -r1.7 SequenceGenerator.java
--- src/net/sf/hibernate/id/SequenceGenerator.java	25 Apr 2003 03:40:33 -0000	1.7
+++ src/net/sf/hibernate/id/SequenceGenerator.java	21 May 2003 10:15:56 -0000
@@ -39,8 +39,13 @@
 	 */
 	public static final String SEQUENCE = "sequence";
 	
+	/**
+	 * The id result column name.
+	 */
+	private static final String ID_COLUMN_NAME = "id";
+	
 	private String sequenceName;
-	private Class returnClass;
+	private Type type;
 	private String sql;
 	
 	private static final Log log = LogFactory.getLog(SequenceGenerator.class);
@@ -50,8 +55,8 @@
 		String schemaName = params.getProperty(SCHEMA);
 		if ( schemaName!=null && sequenceName.indexOf(StringHelper.DOT)<0 ) 
 			sequenceName = schemaName + '.' + sequenceName;
-		returnClass = type.getReturnedClass();
-		sql = dialect.getSequenceNextValString(sequenceName);
+		this.type = type;
+		this.sql = dialect.getSequenceNextValString(sequenceName) + " " + ID_COLUMN_NAME;
 	}
 	
 	public Serializable generate(SessionImplementor session, Object obj) throws SQLException, HibernateException {
@@ -59,10 +64,11 @@
 		PreparedStatement st = session.getBatcher().prepareStatement(sql);
 		try {
 			ResultSet rs = st.executeQuery();
-			final Number result;
+			final Serializable result;
 			try {
-				rs.next();
-				result = IdentifierGeneratorFactory.get(rs, returnClass);
+				if ( !rs.next() ) throw new HibernateException("The database returned no natively generated identity value");
+				
+				result = (Serializable)type.nullSafeGet(rs, ID_COLUMN_NAME, session, null);
 			}
 			finally {
 				rs.close();
@@ -77,7 +83,6 @@
 		finally {
 			session.getBatcher().closeStatement(st);
 		}
-		
 	}
 	
 	public String[] sqlCreateStrings(Dialect dialect) throws HibernateException {
Index: src/net/sf/hibernate/persister/AbstractEntityPersister.java
===================================================================
RCS file: /cvsroot/hibernate/Hibernate2/src/net/sf/hibernate/persister/AbstractEntityPersister.java,v
retrieving revision 1.24
diff -u -r1.24 AbstractEntityPersister.java
--- src/net/sf/hibernate/persister/AbstractEntityPersister.java	26 Apr 2003 06:09:11 -0000	1.24
+++ src/net/sf/hibernate/persister/AbstractEntityPersister.java	21 May 2003 10:15:56 -0000
@@ -81,6 +81,11 @@
 	private transient final Class superclass;
 	private transient final boolean dynamicUpdate;
 	
+	
+	/**
+	 * The id result column name.
+	 */
+	protected static final String ID_COLUMN_NAME = "id";
 	private transient final String identitySelectString;
 	
 	private transient final Class[] proxyInterfaces;
@@ -490,7 +495,7 @@
 		
 		idgen = model.getIdentifier().createIdentifierGenerator(dialect);
 		useIdentityColumn = idgen instanceof IdentityGenerator;
-		identitySelectString = useIdentityColumn ? dialect.getIdentitySelectString() : null;
+		identitySelectString = useIdentityColumn ? dialect.getIdentitySelectString() + " " + ID_COLUMN_NAME : null;
 		
 		
 		// UNSAVED-VALUE:
Index: src/net/sf/hibernate/persister/EntityPersister.java
===================================================================
RCS file: /cvsroot/hibernate/Hibernate2/src/net/sf/hibernate/persister/EntityPersister.java,v
retrieving revision 1.29
diff -u -r1.29 EntityPersister.java
--- src/net/sf/hibernate/persister/EntityPersister.java	18 May 2003 15:45:14 -0000	1.29
+++ src/net/sf/hibernate/persister/EntityPersister.java	21 May 2003 10:15:57 -0000
@@ -33,7 +33,6 @@
 import net.sf.hibernate.QueryException;
 import net.sf.hibernate.StaleObjectStateException;
 import net.sf.hibernate.hql.PathExpressionParser;
-import net.sf.hibernate.id.IdentifierGeneratorFactory;
 import net.sf.hibernate.sql.Delete;
 import net.sf.hibernate.sql.InFragment;
 import net.sf.hibernate.sql.Insert;
@@ -490,7 +489,7 @@
 			final Serializable id;
 			try {
 				if ( !rs.next() ) throw new HibernateException("The database returned no natively generated identity value");
-				id = IdentifierGeneratorFactory.get( rs, getIdentifierType().getReturnedClass() );
+				id = (Serializable)getIdentifierType().nullSafeGet(rs, ID_COLUMN_NAME, session, null);
 			}
 			finally {
 				rs.close();
Index: src/net/sf/hibernate/persister/NormalizedEntityPersister.java
===================================================================
RCS file: /cvsroot/hibernate/Hibernate2/src/net/sf/hibernate/persister/NormalizedEntityPersister.java,v
retrieving revision 1.23
diff -u -r1.23 NormalizedEntityPersister.java
--- src/net/sf/hibernate/persister/NormalizedEntityPersister.java	18 May 2003 15:45:14 -0000	1.23
+++ src/net/sf/hibernate/persister/NormalizedEntityPersister.java	21 May 2003 10:15:57 -0000
@@ -34,7 +34,6 @@
 import net.sf.hibernate.QueryException;
 import net.sf.hibernate.StaleObjectStateException;
 import net.sf.hibernate.hql.PathExpressionParser;
-import net.sf.hibernate.id.IdentifierGeneratorFactory;
 import net.sf.hibernate.sql.CaseFragment;
 import net.sf.hibernate.sql.Delete;
 import net.sf.hibernate.sql.Insert;
@@ -513,7 +512,7 @@
 			ResultSet rs = idselect.executeQuery();
 			try {
 				if ( !rs.next() ) throw new HibernateException("The database returned no natively generated identity value");
-				id = IdentifierGeneratorFactory.get( rs, getIdentifierType().getReturnedClass() );
+				id = (Serializable)getIdentifierType().nullSafeGet(rs, ID_COLUMN_NAME, session, null);
 			}
 			finally {
 				rs.close();