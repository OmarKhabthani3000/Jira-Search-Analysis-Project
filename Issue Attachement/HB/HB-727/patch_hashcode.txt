Index: net/sf/hibernate/cfg/Binder.java
===================================================================
RCS file: /cvsroot/hibernate/Hibernate2/src/net/sf/hibernate/cfg/Binder.java,v
retrieving revision 1.26.2.60
diff -u -r1.26.2.60 Binder.java
--- net/sf/hibernate/cfg/Binder.java	29 Jan 2004 02:11:58 -0000	1.26.2.60
+++ net/sf/hibernate/cfg/Binder.java	20 Feb 2004 15:27:01 -0000
@@ -301,7 +301,13 @@
 				Class idClass = id.getComponentClass();
 				if ( !ReflectHelper.overridesEquals(idClass) ) {
 					throw new MappingException(
-						"composite-id class must override equals() and hashCode(): " + 
+						"composite-id class must override equals(): " + 
+						id.getComponentClass().getName()
+					);
+				}
+				if ( !ReflectHelper.overridesHashCode(idClass) ) {
+					throw new MappingException(
+						"composite-id class must override hashCode(): " + 
 						id.getComponentClass().getName()
 					);
 				}
Index: net/sf/hibernate/util/ReflectHelper.java
===================================================================
RCS file: /cvsroot/hibernate/Hibernate2/src/net/sf/hibernate/util/ReflectHelper.java,v
retrieving revision 1.12.2.13
diff -u -r1.12.2.13 ReflectHelper.java
--- net/sf/hibernate/util/ReflectHelper.java	17 Dec 2003 01:37:13 -0000	1.12.2.13
+++ net/sf/hibernate/util/ReflectHelper.java	20 Feb 2004 15:27:06 -0000
@@ -33,17 +33,22 @@
 	
 	private static final Class[] NO_CLASSES = new Class[0];
 	private static final Class[] OBJECT = new Class[] { Object.class };
+	private static final Class[] NO_PARAM = new Class[] { };
 	private static final Method OBJECT_EQUALS;
+	private static final Method OBJECT_HASHCODE;
 	
 	static {
 		Method eq;
+		Method hash;
 		try {
 			eq = Object.class.getMethod("equals", OBJECT);
+			hash = Object.class.getMethod("hashCode", NO_PARAM);
 		}
 		catch (Exception e) {
-			throw new AssertionFailure("Could not find Object.equals()", e);
+			throw new AssertionFailure("Could not find Object.equals() or Object.hashCode()", e);
 		}
 		OBJECT_EQUALS = eq;
+		OBJECT_HASHCODE = hash;
 	}
 	
 	public static boolean overridesEquals(Class clazz) {
@@ -57,6 +62,17 @@
 		return !OBJECT_EQUALS.equals(equals);
 	}
 	
+	public static boolean overridesHashCode(Class clazz) {
+		Method hashCode;
+		try {
+			hashCode = clazz.getMethod("hashCode", NO_PARAM);
+		}
+		catch (NoSuchMethodException nsme) {
+			return false; //its an interface so we can't really tell anything...
+		}
+		return !OBJECT_HASHCODE.equals(hashCode);
+	}
+
 	private static Getter getter(Class clazz, String name) throws MappingException {
 		try {
 			return BASIC_PROPERTY_ACCESSOR.getGetter(clazz, name);
