Index: //users/jkristian/hibernate-2.1/3rdparty/hibernate/build/src/net/sf/hibernate/impl/DirtyCollectionSearchVisitor.java
--- src/net/sf/hibernate/impl/DirtyCollectionSearchVisitor.java #1
+++ src/net/sf/hibernate/impl/DirtyCollectionSearchVisitor.java 2003-12-18 10:29:30 -0800
@@ -13,7 +13,7 @@
  * 
  * @author Gavin King
  */
-class DirtyCollectionSearchVisitor extends AbstractVisitor {
+class DirtyCollectionSearchVisitor extends CollectionVisitor {
 	
 	private boolean dirty = false;
 
Index: //users/jkristian/hibernate-2.1/3rdparty/hibernate/build/src/net/sf/hibernate/impl/EvictVisitor.java
--- src/net/sf/hibernate/impl/EvictVisitor.java #1
+++ src/net/sf/hibernate/impl/EvictVisitor.java 2003-12-18 10:29:10 -0800
@@ -11,7 +11,7 @@
  * 
  * @author Gavin King
  */
-class EvictVisitor extends AbstractVisitor {
+class EvictVisitor extends CollectionVisitor {
 
 	EvictVisitor(SessionImpl session) {
 		super(session);

Index: //users/jkristian/hibernate-2.1/3rdparty/hibernate/build/src/net/sf/hibernate/impl/CollectionVisitor.java
--- src/net/sf/hibernate/impl/CollectionVisitor.java 1970-01-01 00:00:00Z
+++ src/net/sf/hibernate/impl/CollectionVisitor.java #1
@@ -0,0 +1,41 @@
+//$Id$
+package net.sf.hibernate.impl;
+
+import net.sf.hibernate.HibernateException;
+import net.sf.hibernate.persister.ClassPersister;
+import net.sf.hibernate.type.Type;
+
+/**
+ * Abstract superclass of algorithms that walk
+ * a tree of property values of an entity, and
+ * perform specific functionality for collections
+ * (but not simple properties or associated entities).
+ * 
+ * @author <a href="mailto:jkristian@docent.com">John Kristian</a>
+ */
+abstract class CollectionVisitor extends AbstractVisitor {
+
+	CollectionVisitor(SessionImpl session) {
+		super(session);
+	}
+
+	/**
+	 * Visit collections referenced by the given entity.
+	 * This implementation is merely a performance optimization: it saves time,
+	 * by not getting values of properties that don't refer to collections.
+	 */
+	void process(Object entity, ClassPersister persister) 
+		throws HibernateException
+	{
+		Type[] types = persister.getPropertyTypes();
+		Object[] values = new Object[types.length];
+		for (int i = 0; i < types.length; ++i) {
+			values[i] = ( types[i].isPersistentCollectionType()
+			           || types[i].isComponentType() )
+				? persister.getPropertyValue(entity, i)
+				: null;
+		}
+		processValues(values, types);
+	}
+
+}
