Index: test/org/hibernate/test/TestCase.java
===================================================================
RCS file: /cvsroot/hibernate/Hibernate2/test/org/hibernate/test/TestCase.java,v
retrieving revision 1.4
diff -u -r1.4 TestCase.java
--- test/org/hibernate/test/TestCase.java	4 Jun 2004 01:27:36 -0000	1.4
+++ test/org/hibernate/test/TestCase.java	16 Aug 2004 09:58:58 -0000
@@ -14,60 +14,76 @@
 import net.sf.hibernate.dialect.Dialect;
 import net.sf.hibernate.mapping.Collection;
 import net.sf.hibernate.mapping.PersistentClass;
+import net.sf.hibernate.mapping.Property;
+import net.sf.hibernate.mapping.SimpleValue;
 
 public abstract class TestCase extends junit.framework.TestCase {
-	
+
 	private static SessionFactory sessions;
 	private static Configuration cfg;
 	private static Dialect dialect;
 	private static Class lastTestClass;
 	private Session session;
-	
+
 	public TestCase(String x) {
 		super(x);
 	}
-	
+
 	private void buildSessionFactory(String[] files) throws Exception {
-		
+
 		if ( getSessions()!=null ) getSessions().close();
-		
+
 		try {
-		
+
 			setCfg( new Configuration() );
-			
+
 			cfg.setProperty(Environment.HBM2DDL_AUTO, "create-drop");
-			
+
 			//cfg.setNamingStrategy(ImprovedNamingStrategy.INSTANCE);
 
 			for (int i=0; i<files.length; i++) {
 				if ( !files[i].startsWith("net/") ) files[i] = "org/hibernate/test/" + files[i];
 				getCfg().addResource( files[i], TestCase.class.getClassLoader() );
 			}
-			
+
 			Iterator iter = cfg.getClassMappings();
 			while ( iter.hasNext() ) {
 				PersistentClass clazz = (PersistentClass) iter.next();
-				if ( !clazz.isInherited() ) {
+
+                // This code excerpted from current Hibernate3 cvs - don't set
+                // caching on for lobs
+                Iterator props = clazz.getPropertyClosureIterator();
+				boolean hasLob = false;
+				while ( props.hasNext() ) {
+					Property prop = (Property) props.next();
+					if ( prop.getValue().isSimpleValue() ) {
+						String type = ( (SimpleValue) prop.getValue() ).getType().getName();
+						if ( "blob".equals(type) || "clob".equals(type) ) hasLob = true;
+						if ( "java.sql.Blob".equals(type) || "java.sql.Clob".equals(type) ) hasLob = true;
+					}
+				}
+
+				if ( !clazz.isInherited() && !hasLob) {
 					cfg.setCacheConcurrencyStrategy( clazz.getMappedClass(), new NonstrictReadWriteCache() );
 				}
 			}
-			
+
 			iter = cfg.getCollectionMappings();
 			while ( iter.hasNext() ) {
 				Collection coll = (Collection) iter.next();
 				cfg.setCacheConcurrencyStrategy( coll.getRole(), new NonstrictReadWriteCache() );
 			}
-			
+
 			setDialect( Dialect.getDialect() );
-			
+
 			setSessions( getCfg().buildSessionFactory( /*new TestInterceptor()*/ ) );
-			
+
 		}
 		catch (Exception e) {
 			e.printStackTrace();
 			throw e;
 		}
-		
+
 	}
 
 	protected void setUp() throws Exception {
@@ -76,7 +92,7 @@
 			lastTestClass = getClass();
 		}
 	}
-	
+
 	protected void runTest() throws Throwable {
 		try {
 			super.runTest();
@@ -108,12 +124,12 @@
 			throw e;
 		}
 	}
-	
+
 	public Session openSession() throws HibernateException {
 		session = sessions.openSession();
 		return session;
 	}
-	
+
 	protected abstract String[] getMappings();
 
 	private void setSessions(SessionFactory sessions) {
