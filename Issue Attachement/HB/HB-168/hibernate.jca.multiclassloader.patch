diff -urN ./src/META-INF/ra.xml ../orig/hibernate-2.0/src/META-INF/ra.xml
--- ./src/META-INF/ra.xml	Sat Jul  5 13:48:14 2003
+++ ../orig/hibernate-2.0/src/META-INF/ra.xml	Tue Jun 17 14:01:33 2003
@@ -23,22 +23,6 @@
             <config-property-name>Dialect</config-property-name>
             <config-property-type>java.lang.String</config-property-type>
         </config-property>
-		<!-- 
-		
-			LazyInit - by delaying initialization of Hibernate SessionFactory
-			we enforce initialization in context of runtime classlaoder.
-			Therefor it's not necessary to add arctificial <classpath /> entries
-			to make sure that connector is able to load all the classes at
-			deploy time.
-		
-			Personally I think that it should be default option. 
-														mimo-AT-proinet.pl
-
-		-->
-        <config-property>
-            <config-property-name>LazyInit</config-property-name>
-            <config-property-type>boolean</config-property-type>
-        </config-property>
         <config-property>
             <config-property-name>MapResources</config-property-name>
             <config-property-type>java.lang.String</config-property-type>
diff -urN ./src/net/sf/hibernate/jca/ManagedConnectionFactoryImpl.java ../orig/hibernate-2.0/src/net/sf/hibernate/jca/ManagedConnectionFactoryImpl.java
--- ./src/net/sf/hibernate/jca/ManagedConnectionFactoryImpl.java	Sun Jul  6 01:19:08 2003
+++ ../orig/hibernate-2.0/src/net/sf/hibernate/jca/ManagedConnectionFactoryImpl.java	Tue Jun 17 14:01:33 2003
@@ -27,9 +27,6 @@
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 
-import java.util.WeakHashMap;
-import java.lang.ClassLoader;
-
 /**
  * Factory for creating Factories, connections and matching connections
  *
@@ -72,43 +69,8 @@
 	
 	private DataSource datasource;
 	
-	private WeakHashMap clSessionFactory = new WeakHashMap();
-
-	private boolean lazyInit=true;
-
-	private SessionFactory getClSessionFactory() throws ResourceException {
-		// initialize session factory
-		ClassLoader cl = Thread.currentThread().getContextClassLoader();
-		SessionFactory sessionFactory = (SessionFactory) clSessionFactory.get(cl);
-		if ( sessionFactory == null) {
-			try {
-				final String delim = " ,\n\t\r\f";
-				final Properties hibProperties = new Properties();
-				// @todo load this.properties
-				hibProperties.setProperty(Environment.DIALECT, dialect);
-				
-				Configuration cfg = new Configuration().addProperties(hibProperties);
-				
-				// taken from HibernateService, maybe factor out for JCA 1.5
-				String[] mappingFiles = PropertiesHelper.toStringArray(mapResources, delim);
-				for ( int i=0; i<mappingFiles.length; i++ ) {
-					cfg.addResource( mappingFiles[i],  cl);
-				}
-				sessionFactory = cfg.buildSessionFactory();
-				clSessionFactory.put(cl, sessionFactory);
-			}
-			catch (HibernateException e) {
-				final String message =
-				"Cannot create Hibernate session factory";
-				log(message, e);
-				final ResourceException re = new ResourceException(message);
-				re.setLinkedException(e);
-				throw re;
-			}
-		}
-		return sessionFactory;
-	}
-
+	private SessionFactory sessionFactory;
+	
 	/**
 	 * Creates a Hibernate SessionFactory for the container
 	 *
@@ -166,9 +128,32 @@
 			}
 		}
 		
-		if( !lazyInit) 
-			getClSessionFactory();
-		
+		// initialize session factory
+		if (sessionFactory == null) {
+			try {
+				final String delim = " ,\n\t\r\f";
+				final Properties hibProperties = new Properties();
+				// @todo load this.properties
+				hibProperties.setProperty(Environment.DIALECT, dialect);
+				
+				Configuration cfg = new Configuration().addProperties(hibProperties);
+				
+				// taken from HibernateService, maybe factor out for JCA 1.5
+				String[] mappingFiles = PropertiesHelper.toStringArray(mapResources, delim);
+				for ( int i=0; i<mappingFiles.length; i++ ) {
+					cfg.addResource( mappingFiles[i], Thread.currentThread().getContextClassLoader() );
+				}
+				sessionFactory = cfg.buildSessionFactory();
+			}
+			catch (HibernateException e) {
+				final String message =
+				"Cannot create Hibernate session factory";
+				log(message, e);
+				final ResourceException re = new ResourceException(message);
+				re.setLinkedException(e);
+				throw re;
+			}
+		}
 	}
 	
 	/**
@@ -274,14 +259,6 @@
 			this.dialect = dialect;
 		}
 		
-		public void setLazyInit(boolean l) {
-			this.lazyInit = l;
-		}
-
-		public boolean getLazyInit() {
-			return this.lazyInit;
-		}
-
 		public String getMapResources() {
 			return mapResources;
 		}
@@ -306,8 +283,8 @@
 			return datasource;
 		}
 		
-		SessionFactory getSessionFactory() throws ResourceException {
-			return getClSessionFactory();
+		SessionFactory getSessionFactory() {
+			return sessionFactory;
 		}
 		
 		//
