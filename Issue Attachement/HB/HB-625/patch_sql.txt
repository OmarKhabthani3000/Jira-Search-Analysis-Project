Index: BatcherImpl.java
===================================================================
RCS file: /cvsroot/hibernate/Hibernate2/src/net/sf/hibernate/impl/BatcherImpl.java,v
retrieving revision 1.9.2.15
diff -u -r1.9.2.15 BatcherImpl.java
--- BatcherImpl.java	13 Dec 2003 04:45:53 -0000	1.9.2.15
+++ BatcherImpl.java	14 Jan 2004 11:38:26 -0000
@@ -221,13 +221,17 @@
 		}
 		
 		sqlLog.debug(sql);
-		if ( factory.isShowSqlEnabled() ) System.out.println("Hibernate: " + sql);
+		//if ( factory.isShowSqlEnabled() ) System.out.println("Hibernate: " + sql);
 		
 		try {
 			log.trace("preparing statement");
-			return scrollable ?
+			PreparedStatement ps = scrollable ?
 				conn.prepareStatement(sql, ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY) :
 				conn.prepareStatement(sql);
+			if ( factory.isShowSqlEnabled() ) {
+				ps = new LoggerPreparedStatement(ps, sql);
+			}
+			return ps;
 		}
 		catch (SQLException sqle) {
 			JDBCExceptionReporter.logExceptions(sqle);
Index: LoggerPreparedStatement.java
===================================================================
RCS file: LoggerPreparedStatement.java
diff -N LoggerPreparedStatement.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ LoggerPreparedStatement.java	14 Jan 2004 11:38:27 -0000
@@ -0,0 +1,290 @@
+package net.sf.hibernate.impl;
+
+import java.io.InputStream;
+import java.io.Reader;
+import java.math.BigDecimal;
+import java.net.URL;
+import java.sql.Array;
+import java.sql.Blob;
+import java.sql.Clob;
+import java.sql.Connection;
+import java.sql.Date;
+import java.sql.ParameterMetaData;
+import java.sql.PreparedStatement;
+import java.sql.Ref;
+import java.sql.ResultSet;
+import java.sql.ResultSetMetaData;
+import java.sql.SQLException;
+import java.sql.SQLWarning;
+import java.sql.Time;
+import java.sql.Timestamp;
+import java.util.Calendar;
+
+/**
+ * Wrapper for a PreparedStatement that logs to the standart output
+ * the request with the value bind.
+ * @author Adrien Sauvez
+ */
+public class LoggerPreparedStatement implements PreparedStatement {
+	
+	private PreparedStatement ps;
+	private String sql;
+	private String[] values = new String[10];
+	
+	public LoggerPreparedStatement(PreparedStatement ps, String sql) {
+		this.ps = ps;
+		this.sql = sql;
+	}
+	
+	private void log() {
+		StringBuffer msg = new StringBuffer("Hibernate: ");
+		int previous = 0;
+		int next = sql.indexOf('?');
+		int i = 0;
+		while(next != -1) {
+			msg.append(sql.substring(previous, next++));
+			msg.append(values[i++]);
+			previous = next;
+			next = sql.indexOf('?', next);			
+		}
+		msg.append(sql.substring(previous));
+		System.out.println(msg.toString());
+	}
+	
+	private void log(String sql) {
+		this.sql = sql;
+		values = new String[10];
+		log();
+	}
+	
+	private void setValue(int parameterIndex, String val) {
+		if(values.length < parameterIndex) {
+			String[] t = new String[parameterIndex * 2];
+			System.arraycopy(values, 0, t, 0, values.length);
+			values = t;
+		}
+		values[parameterIndex - 1] = val;
+	}
+	
+	public void addBatch() throws SQLException {
+		log(); 
+		ps.addBatch(); 
+	}
+	public void addBatch(String sql) throws SQLException {
+		log(sql);
+		ps.addBatch(sql); 
+	}
+	public boolean execute() throws SQLException {
+		log(); 
+		return ps.execute(); 
+	}
+	public boolean execute(String sql) throws SQLException {
+		log(sql); 
+		return ps.execute(sql); 
+	}
+	public boolean execute(String sql, int autoGeneratedKeys) throws SQLException { 
+		log(sql); 
+		return ps.execute(sql, autoGeneratedKeys); 
+	}
+	public boolean execute(String sql, int[] columnIndexes) throws SQLException { 
+		log(sql); 
+		return ps.execute(sql, columnIndexes); 
+	}
+	public boolean execute(String sql, String[] columnNames) throws SQLException { 
+		log(sql); 
+		return ps.execute(sql, columnNames); 
+	}
+	public ResultSet executeQuery() throws SQLException { 
+		log(); 
+		return ps.executeQuery(); 
+	}
+	public ResultSet executeQuery(String sql) throws SQLException { 
+		log(sql); 
+		return ps.executeQuery(sql); 
+	}
+	public int executeUpdate() throws SQLException { 
+		log(); 
+		return ps.executeUpdate(); 
+	}
+	public int executeUpdate(String sql) throws SQLException { 
+		log(sql); 
+		return ps.executeUpdate(sql); 
+	}
+	public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException { 
+		log(sql); 
+		return ps.executeUpdate(sql, autoGeneratedKeys); 
+	}
+	public int executeUpdate(String sql, int[] columnIndexes) throws SQLException { 
+		log(sql); 
+		return ps.executeUpdate(sql, columnIndexes); 
+	}
+	public int executeUpdate(String sql, String[] columnNames) throws SQLException { 
+		log(sql); 
+		return ps.executeUpdate(sql, columnNames); 
+	}
+	
+	public int[] executeBatch() throws SQLException { return ps.executeBatch(); }
+	public void cancel() throws SQLException { ps.cancel(); }
+	public void clearBatch() throws SQLException { ps.clearBatch(); }
+	public void clearParameters() throws SQLException { ps.clearParameters(); }
+	public void clearWarnings() throws SQLException { ps.clearWarnings(); }
+	public void close() throws SQLException { ps.close(); }
+	public boolean equals(Object obj) { return ps.equals(obj); }
+	public Connection getConnection() throws SQLException { return ps.getConnection(); }
+	public int getFetchDirection() throws SQLException { return ps.getFetchDirection(); }
+	public int getFetchSize() throws SQLException { return ps.getFetchSize(); }
+	public ResultSet getGeneratedKeys() throws SQLException { return ps.getGeneratedKeys(); }
+	public int getMaxFieldSize() throws SQLException { return ps.getMaxFieldSize(); }
+	public int getMaxRows() throws SQLException { return ps.getMaxRows(); }
+	public ResultSetMetaData getMetaData() throws SQLException { return ps.getMetaData(); }
+	public boolean getMoreResults() throws SQLException { return ps.getMoreResults(); }
+	public boolean getMoreResults(int current) throws SQLException { return ps.getMoreResults(current); }
+	public ParameterMetaData getParameterMetaData() throws SQLException { return ps.getParameterMetaData(); }
+	public int getQueryTimeout() throws SQLException { return ps.getQueryTimeout(); }
+	public ResultSet getResultSet() throws SQLException { return ps.getResultSet(); }
+	public int getResultSetConcurrency() throws SQLException { return ps.getResultSetConcurrency(); }
+	public int getResultSetHoldability() throws SQLException { return ps.getResultSetHoldability(); }
+	public int getResultSetType() throws SQLException { return ps.getResultSetType(); }
+	public int getUpdateCount() throws SQLException { return ps.getUpdateCount(); }
+	public SQLWarning getWarnings() throws SQLException { return ps.getWarnings(); }
+	public int hashCode() { return ps.hashCode(); }
+	public void setEscapeProcessing(boolean enable) throws SQLException { ps.setEscapeProcessing(enable); }
+	public void setFetchDirection(int direction) throws SQLException { ps.setFetchDirection(direction); }
+	public void setFetchSize(int rows) throws SQLException { ps.setFetchSize(rows); }
+	public void setCursorName(String name) throws SQLException { ps.setCursorName(name); }
+	public void setMaxFieldSize(int max) throws SQLException { ps.setMaxFieldSize(max);	}
+	public void setMaxRows(int max) throws SQLException { ps.setMaxRows(max); }
+	public void setQueryTimeout(int seconds) throws SQLException { ps.setQueryTimeout(seconds); }
+	public String toString() { return ps.toString(); }
+	
+	public void setNull(int parameterIndex, int sqlType) throws SQLException { 
+		setValue(parameterIndex, "NULL");	
+		ps.setNull(parameterIndex, sqlType); 
+	}
+	public void setNull(int parameterIndex, int sqlType, String typeName) throws SQLException { 
+		setValue(parameterIndex, "NULL");	
+		ps.setNull(parameterIndex, sqlType, typeName); 
+	}
+
+	public void setBigDecimal(int parameterIndex, BigDecimal x) throws SQLException { 
+		setValue(parameterIndex, x.toString());
+		ps.setBigDecimal(parameterIndex, x); 
+	}
+	public void setBoolean(int parameterIndex, boolean x) throws SQLException { 
+		setValue(parameterIndex, Boolean.toString(x));	
+		ps.setBoolean(parameterIndex, x); 
+	}
+	public void setByte(int parameterIndex, byte x) throws SQLException { 
+		setValue(parameterIndex, Byte.toString(x));	
+		ps.setByte(parameterIndex, x); 
+	}
+	public void setDate(int parameterIndex, Date x) throws SQLException { 
+		setValue(parameterIndex, x.toString());	
+		ps.setDate(parameterIndex, x); 
+	}
+	public void setDate(int parameterIndex, Date x, Calendar cal) throws SQLException { 
+		setValue(parameterIndex, x.toString());	
+		ps.setDate(parameterIndex, x, cal); 
+	}
+	public void setDouble(int parameterIndex, double x) throws SQLException { 
+		setValue(parameterIndex, Double.toString(x));	
+		ps.setDouble(parameterIndex, x); 
+	}
+	public void setFloat(int parameterIndex, float x) throws SQLException { 
+		setValue(parameterIndex, Float.toString(x));	
+		ps.setFloat(parameterIndex, x); 
+	}
+	public void setInt(int parameterIndex, int x) throws SQLException { 
+		setValue(parameterIndex, Integer.toString(x));	
+		ps.setInt(parameterIndex, x); 
+	}
+	public void setLong(int parameterIndex, long x) throws SQLException { 
+		setValue(parameterIndex, Long.toString(x));	
+		ps.setLong(parameterIndex, x); 
+	}
+	public void setShort(int parameterIndex, short x) throws SQLException { 
+		setValue(parameterIndex, Short.toString(x));	
+		ps.setShort(parameterIndex, x); 
+	}
+	public void setString(int parameterIndex, String x) throws SQLException { 
+		setValue(parameterIndex, "'" + x + "'");	
+		ps.setString(parameterIndex, x);
+	}
+	public void setTime(int parameterIndex, Time x) throws SQLException { 
+		setValue(parameterIndex, "'" + x + "'");	
+		ps.setTime(parameterIndex, x); 
+	}
+	public void setTime(int parameterIndex, Time x, Calendar cal) throws SQLException { 
+		setValue(parameterIndex, "'" + x + "'");	
+		ps.setTime(parameterIndex, x, cal); 
+	}
+	public void setTimestamp(int parameterIndex, Timestamp x) throws SQLException {
+		setValue(parameterIndex, "'" + x + "'");	
+		ps.setTimestamp(parameterIndex, x); 
+	}
+	public void setTimestamp(int parameterIndex, Timestamp x, Calendar cal)	throws SQLException { 
+		setValue(parameterIndex, "'" + x + "'");	
+		ps.setTimestamp(parameterIndex, x, cal); 
+	}
+	public void setURL(int parameterIndex, URL x) throws SQLException {
+		setValue(parameterIndex, "'" + x + "'");	
+		ps.setURL(parameterIndex, x); 
+	}
+	
+	
+	
+	public void setBytes(int parameterIndex, byte[] x) throws SQLException { 
+		setValue(parameterIndex, "<bytes>");	
+		ps.setBytes(parameterIndex, x); 
+	}
+	public void setCharacterStream(int parameterIndex, Reader reader, int length) throws SQLException { 
+		setValue(parameterIndex, "<reader>");	
+		ps.setCharacterStream(parameterIndex, reader, length); 
+	}
+	public void setClob(int i, Clob x) throws SQLException { 
+		setValue(i, "<Clob>");	
+		ps.setClob(i, x); 
+	}
+	public void setObject(int parameterIndex, Object x, int targetSqlType, int scale) throws SQLException { 
+		setValue(parameterIndex, "<Object>");	
+		ps.setObject(parameterIndex, x, targetSqlType, scale); 
+	}
+	public void setObject(int parameterIndex, Object x) throws SQLException { 
+		setValue(parameterIndex, "<Object>");	
+		ps.setObject(parameterIndex, x); 
+	}
+	public void setObject(int parameterIndex, Object x, int targetSqlType) throws SQLException { 
+		setValue(parameterIndex, "<Object>");	
+		ps.setObject(parameterIndex, x, targetSqlType); 
+	}
+	public void setUnicodeStream(int parameterIndex, InputStream x, int length) throws SQLException { 
+		setValue(parameterIndex, "<InputStream>");	
+		ps.setUnicodeStream(parameterIndex, x, length); 
+	}
+	public void setRef(int i, Ref x) throws SQLException { 
+		setValue(i, "<Ref>");	
+		ps.setRef(i, x);
+	}
+	public void setArray(int i, Array x) throws SQLException { 
+		setValue(i, "<Array>");	
+		ps.setArray(i, x); 
+	}
+	public void setAsciiStream(int parameterIndex, InputStream x, int length) throws SQLException { 
+		setValue(parameterIndex, "<InputStream>");	
+		ps.setAsciiStream(parameterIndex, x, length); 
+	}
+	public void setBinaryStream(int parameterIndex, InputStream x, int length) throws SQLException { 
+		setValue(parameterIndex, "<InputStream>");	
+		ps.setBinaryStream(parameterIndex, x, length); 
+	}
+	public void setBlob(int i, Blob x) throws SQLException { 
+		setValue(i, "<Blob>");	
+		ps.setBlob(i, x); 
+	}
+}
+
+
+
+
+
+
