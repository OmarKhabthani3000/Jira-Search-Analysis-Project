Index: src/net/sf/hibernate/dialect/Dialect.java
===================================================================
RCS file: /cvsroot/hibernate/Hibernate2/src/net/sf/hibernate/dialect/Dialect.java,v
retrieving revision 1.26
diff -u -r1.26 Dialect.java
--- src/net/sf/hibernate/dialect/Dialect.java	15 Jul 2004 06:18:45 -0000	1.26
+++ src/net/sf/hibernate/dialect/Dialect.java	12 Aug 2004 18:25:10 -0000
@@ -202,6 +202,14 @@
 	}
 	
 	/**
+	 * Does this dialect use the <tt>TABLE.*</tt> form of <tt>FOR UPDATE OF</tt>?
+	 * @return boolean
+	 */
+	public boolean forUpdateOfUsesStar() {
+		return false;
+	}
+	
+	/**
 	 * Does this dialect support the <tt>UNIQUE</tt> column syntax?
 	 * @return boolean
 	 */
Index: src/net/sf/hibernate/dialect/Oracle9Dialect.java
===================================================================
RCS file: /cvsroot/hibernate/Hibernate2/src/net/sf/hibernate/dialect/Oracle9Dialect.java,v
retrieving revision 1.19
diff -u -r1.19 Oracle9Dialect.java
--- src/net/sf/hibernate/dialect/Oracle9Dialect.java	8 Aug 2004 08:23:16 -0000	1.19
+++ src/net/sf/hibernate/dialect/Oracle9Dialect.java	12 Aug 2004 18:25:10 -0000
@@ -159,7 +159,11 @@
 	}
 
 	public boolean supportsForUpdateOf() {
-		return false;
+		return true;
+	}
+
+	public boolean forUpdateOfUsesStar() {
+		return true;
 	}
 
 	public String getQuerySequencesString() {
Index: src/net/sf/hibernate/sql/ForUpdateFragment.java
===================================================================
RCS file: /cvsroot/hibernate/Hibernate2/src/net/sf/hibernate/sql/ForUpdateFragment.java,v
retrieving revision 1.6
diff -u -r1.6 ForUpdateFragment.java
--- src/net/sf/hibernate/sql/ForUpdateFragment.java	4 Jun 2004 05:43:48 -0000	1.6
+++ src/net/sf/hibernate/sql/ForUpdateFragment.java	12 Aug 2004 18:25:10 -0000
@@ -14,17 +14,21 @@
  */
 public class ForUpdateFragment {
 	private StringBuffer aliases = new StringBuffer();
+	private StringBuffer starAliases = new StringBuffer();
 	private boolean isNowaitEnabled;
 	public ForUpdateFragment addTableAlias(String alias) {
 		if ( aliases.length()>0 ) aliases.append(", ");
+		if ( starAliases.length()>0 ) starAliases.append(", ");
 		aliases.append(alias);
+		starAliases.append(alias + ".*");
 		return this;
 	}
 	public String toFragmentString(Dialect dialect) {
 		if ( aliases.length()==0 ) return StringHelper.EMPTY_STRING;
 		boolean nowait = isNowaitEnabled && dialect.supportsForUpdateNowait();
 		if ( dialect.supportsForUpdateOf() ) {
-			return " for update of " + aliases + ( nowait ? " nowait" : StringHelper.EMPTY_STRING );
+			StringBuffer useAliases = dialect.forUpdateOfUsesStar() ? starAliases : aliases;
+			return " for update of " + useAliases + ( nowait ? " nowait" : StringHelper.EMPTY_STRING );
 		}
 		else if ( dialect.supportsForUpdate() ) {
 			return " for update" + ( nowait ? " nowait" : StringHelper.EMPTY_STRING );
