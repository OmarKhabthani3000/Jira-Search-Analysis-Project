Index: TextType.java
===================================================================
RCS file: /cvsroot/hibernate/Hibernate2/src/net/sf/hibernate/type/Attic/TextType.java,v
retrieving revision 1.1.2.3
diff -u -r1.1.2.3 TextType.java
--- TextType.java	30 Oct 2003 06:19:32 -0000	1.1.2.3
+++ TextType.java	21 Nov 2003 14:20:17 -0000
@@ -2,9 +2,8 @@
 package net.sf.hibernate.type;
 
 import java.io.IOException;
-import java.io.InputStream;
-import java.io.StringBufferInputStream;
-import java.io.StringWriter;
+import java.io.Reader;
+import java.io.StringReader;
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 import java.sql.SQLException;
@@ -16,36 +15,52 @@
 	
 	public void set(PreparedStatement st, Object value, int index) throws HibernateException, SQLException {		
 		String str = (String) value;
-		st.setAsciiStream( index, new StringBufferInputStream(str), str.length() );
+		st.setCharacterStream( index, new StringReader(str), str.length() );
 	}
 	
 	public Object get(ResultSet rs, String name) throws HibernateException, SQLException {
 		
-			InputStream inputStream = rs.getAsciiStream(name);
+			// Retrieve the value of the designated column in the current row of this 
+			// ResultSet object as a java.io.Reader object
+			//
+			Reader charReader = rs.getCharacterStream(name);
 			
-			if (inputStream==null) return null; // is this really necessary?
-			
-			StringWriter sw = new StringWriter();//ByteArrayOutputStream outputStream = new ByteArrayOutputStream(2048);
-			byte[] buffer = new byte[2048];
+			// if the corresponding SQL value is NULL, the reader we got is NULL as well
+			//
+			if (charReader==null) { 
+				return null;
+			}
 			
+			// Fetch Reader content up to the end - and put characters in a StringBuffer
+			//
+			StringBuffer sb = new StringBuffer();
+
 			try {
-				while (true) {
-					int amountRead = inputStream.read(buffer);
-					if (amountRead == -1) {
+				char[] buffer = new char[2048];
+				while(true) {
+					int amountRead = charReader.read(buffer, 0, buffer.length);
+					if( amountRead == -1 ) {
 						break;
 					}
-					sw.write( new String(buffer) );
+					
+					sb.append(buffer, 0, amountRead);
 				}
-				
-				inputStream.close();
-				sw.close();
 			}
 			catch (IOException ioe) {
 				throw new HibernateException( "IOException occurred reading text", ioe );
 			}
+			finally {
+				try {
+					charReader.close();
+				}
+				catch (IOException e) {
+					// Ooops - unable to properly close the Reader
+					// Unfortunately we can't do much...
+				}
+			}
 			
-			return sw.toString();
-			
+			// Return StringBuffer content as a large String
+			return sb.toString();
 	}
 	
 	public int sqlType() {
