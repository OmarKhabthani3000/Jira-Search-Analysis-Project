Index: tools/src/java/net/sf/hibernate/tool/hbm2java/FinderRenderer.java
===================================================================
RCS file: /cvsroot/hibernate/HibernateExt/tools/src/java/net/sf/hibernate/tool/hbm2java/FinderRenderer.java,v
retrieving revision 1.5
diff -u -r1.5 FinderRenderer.java
--- tools/src/java/net/sf/hibernate/tool/hbm2java/FinderRenderer.java	8 Jan 2004 18:39:16 -0000	1.5
+++ tools/src/java/net/sf/hibernate/tool/hbm2java/FinderRenderer.java	26 Feb 2004 11:23:43 -0000
@@ -89,7 +89,9 @@
         StringWriter strWriter = new StringWriter();
         PrintWriter writer = new PrintWriter(strWriter);
     
-        writer.println("/** Automatically generated Finder class for " + savedToClass  + ".\n" +                       " * @author Hibernate FinderGenerator " +                       " **/");
+        writer.println("/** Automatically generated Finder class for " + savedToClass  + ".\n" +
+                       " * @author Hibernate FinderGenerator " +
+                       " **/");
  
         String classScope = "public";
         writer.print(classScope + " class " + savedToClass);
@@ -151,7 +153,7 @@
                     writer.println("        Session session = " + sessionMethod);
                 }
 
-                writer.println("        List finds = session.find(\"from " + classMapping.getName()
+                writer.println("        List finds = session.find(\"from " + classMapping.getCanonicalName()
                   + " as " + classMapping.getName().toLowerCase()
                   + " where " + classMapping.getName().toLowerCase() + "." + field.getFieldName() + "=?\", " + getFieldAsObject(false, field)
                         + ", " + getFieldAsHibernateType(false, field) + ");");
@@ -337,6 +339,8 @@
         hibType.put("double", "Hibernate.DOUBLE");
 
         hibType.put("String", "Hibernate.STRING");
+        
+        hibType.put("Locale", "Hibernate.LOCALE");
 
     }
 
@@ -351,7 +355,7 @@
    public static String getFieldAsHibernateType(boolean prependThis, FieldProperty field) {
         ClassName type = field.getClassType();
         String hibTypeString = (String) hibType.get(type.getName());
-        if (hibType != null) {
+        if (hibTypeString != null) {
             return hibTypeString;
         } else {
             return "Hibernate.OBJECT";
