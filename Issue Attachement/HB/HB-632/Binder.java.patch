*** Binder.java	Wed Dec 17 15:07:12 2003
--- C:\temp\clean\Binder.java	Fri Jan 16 18:53:19 2004
***************
*** 211,220 ****
--- 211,224 ----
  		// properties
  		propertiesFromXML(node, model, mappings);
  	}
  
  	public static void bindRootClass(Element node, RootClass model, Mappings mappings) throws MappingException {
+ 		bindRootClass(node, model,mappings, null);
+ 	}
+ 
+ 	public static void bindRootClass(Element node, RootClass model, Mappings mappings, String defaultSchema) throws MappingException {
  
  		bindClass(node, model, mappings);
  
  		//TABLENAME
  		Attribute schemaNode = node.attribute("schema");
***************
*** 261,271 ****
  					model.setIdentifierProperty(prop);
  				}
  				if ( id.getType().getReturnedClass().isArray() ) throw new MappingException(
  					"illegal use of an array as an identifier (arrays don't reimplement equals)"
  				);
! 				makeIdentifier(subnode, id, mappings);
  			}
  			else if ( "composite-id".equals(name) ) {
  				Component id = new Component(model);
  				model.setIdentifier(id);
  				if (propertyName==null) {
--- 265,275 ----
  					model.setIdentifierProperty(prop);
  				}
  				if ( id.getType().getReturnedClass().isArray() ) throw new MappingException(
  					"illegal use of an array as an identifier (arrays don't reimplement equals)"
  				);
! 				makeIdentifier(subnode, id, mappings, defaultSchema);
  			}
  			else if ( "composite-id".equals(name) ) {
  				Component id = new Component(model);
  				model.setIdentifier(id);
  				if (propertyName==null) {
***************
*** 286,296 ****
  					);
  					Property prop = new Property(id);
  					bindProperty(subnode, prop, mappings);
  					model.setIdentifierProperty(prop);
  				}
! 				makeIdentifier(subnode, id, mappings);
  				
  				Class idClass = id.getComponentClass();
  				if ( !ReflectHelper.overridesEquals(idClass) ) {
  					throw new MappingException(
  						"composite-id class must override equals() and hashCode(): " + 
--- 290,300 ----
  					);
  					Property prop = new Property(id);
  					bindProperty(subnode, prop, mappings);
  					model.setIdentifierProperty(prop);
  				}
! 				makeIdentifier(subnode, id, mappings, defaultSchema);
  				
  				Class idClass = id.getComponentClass();
  				if ( !ReflectHelper.overridesEquals(idClass) ) {
  					throw new MappingException(
  						"composite-id class must override equals() and hashCode(): " + 
***************
*** 914,933 ****
--- 918,942 ----
  			}
  		}
  	}
  
  	private static void makeIdentifier(Element node, SimpleValue model, Mappings mappings) {
+ 		makeIdentifier(node, model, mappings, null); 
+ 	}
+ 	private static void makeIdentifier(Element node, SimpleValue model, Mappings mappings, String defaultSchema) {
  		//GENERATOR
  
  		Element subnode = node.element("generator");
  		if ( subnode!=null ) {
  			model.setIdentifierGeneratorStrategy( subnode.attributeValue("class") );
  
  			Properties params = new Properties();
  
  			if ( mappings.getSchemaName()!=null ) {
  				params.setProperty( PersistentIdentifierGenerator.SCHEMA, mappings.getSchemaName() );
+ 			} else if (defaultSchema != null) {
+ 				params.setProperty( PersistentIdentifierGenerator.SCHEMA, defaultSchema);
  			}
  			params.setProperty(
  				PersistentIdentifierGenerator.TABLE,
  				model.getTable().getName()
  			);
***************
*** 1184,1193 ****
--- 1193,1206 ----
  		}
  
  	}
  
  	public static void bindRoot(Document doc, Mappings model) throws MappingException {
+ 		bindRoot(doc, model, null);
+ 	}
+ 
+ 	public static void bindRoot(Document doc, Mappings model, String defaultSchema) throws MappingException {
  
  		Element hmNode = doc.getRootElement();
  		Attribute schemaNode = hmNode.attribute("schema");
  		model.setSchemaName( (schemaNode==null) ? null : schemaNode.getValue() );
  		Attribute dcNode = hmNode.attribute("default-cascade");
***************
*** 1199,1209 ****
  
  		Iterator nodes = hmNode.elementIterator("class");
  		while ( nodes.hasNext() ) {
  			Element n = (Element) nodes.next();
  			RootClass rootclass = new RootClass();
! 			Binder.bindRootClass(n, rootclass, model);
  			model.addClass(rootclass);
  		}
  		
  		Iterator subclassnodes = hmNode.elementIterator("subclass");
  			while ( subclassnodes.hasNext() ) {
--- 1212,1222 ----
  
  		Iterator nodes = hmNode.elementIterator("class");
  		while ( nodes.hasNext() ) {
  			Element n = (Element) nodes.next();
  			RootClass rootclass = new RootClass();
! 			Binder.bindRootClass(n, rootclass, model, defaultSchema);
  			model.addClass(rootclass);
  		}
  		
  		Iterator subclassnodes = hmNode.elementIterator("subclass");
  			while ( subclassnodes.hasNext() ) {
