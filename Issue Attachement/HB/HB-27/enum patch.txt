Index: net/sf/hibernate/Hibernate.java
===================================================================
RCS file: /cvsroot/hibernate/Hibernate2/src/net/sf/hibernate/Hibernate.java,v
retrieving revision 1.13
diff -u -r1.13 Hibernate.java
--- net/sf/hibernate/Hibernate.java	25 Apr 2003 03:40:29 -0000	1.13
+++ net/sf/hibernate/Hibernate.java	8 May 2003 09:50:54 -0000
@@ -35,7 +35,8 @@
 import net.sf.hibernate.type.ManyToOneType;
 import net.sf.hibernate.type.NullableType;
 import net.sf.hibernate.type.ObjectType;
-import net.sf.hibernate.type.PersistentEnumType;
+import net.sf.hibernate.type.PersistentIntEnumType;
+import net.sf.hibernate.type.PersistentStringEnumType;
 import net.sf.hibernate.type.SerializableType;
 import net.sf.hibernate.type.ShortType;
 import net.sf.hibernate.type.StringType;
@@ -175,10 +176,16 @@
 		throw new UnsupportedOperationException();
 	}
 	/**
-	 * A Hibernate persistent enum type
+	 * A Hibernate persistent integer enum type
 	 */
-	public static Type enum(Class enumClass) throws MappingException {
-		return new PersistentEnumType(enumClass);
+	public static Type intEnum(Class enumClass) throws MappingException {
+		return new PersistentIntEnumType(enumClass);
+	}
+	/**
+	 * A Hibernate persistent integer enum type
+	 */
+	public static Type stringEnum(Class enumClass) throws MappingException {
+		return new PersistentStringEnumType(enumClass);
 	}
 	/**
 	 * A Hibernate <tt>serializable</tt> type
Index: net/sf/hibernate/PersistentEnum.java
===================================================================
RCS file: net/sf/hibernate/PersistentEnum.java
diff -N net/sf/hibernate/PersistentEnum.java
--- net/sf/hibernate/PersistentEnum.java	25 Apr 2003 03:40:30 -0000	1.4
+++ /dev/null	1 Jan 1970 00:00:00 -0000
@@ -1,23 +0,0 @@
-//$Id: PersistentEnum.java,v 1.4 2003/04/25 03:40:30 oneovthafew Exp $
-package net.sf.hibernate;
-
-/**
- * Implementors of <tt>PersistentEnum</tt> are enumerated types persisted to
- * the database as <tt>SMALLINT</tt>s. As well as implementing <tt>toInt()</tt>,
- * a <tt>PersistentEnum</tt> must also provide a static method with the
- * signature:<br>
- * <br>
- * 		<tt>public static PersistentEnum fromInt(int i)</tt>
- *
- * @author Gavin King
- */
-
-public interface PersistentEnum {
-	public int toInt();
-}
-
-
-
-
-
-
Index: net/sf/hibernate/PersistentIntEnum.java
===================================================================
RCS file: net/sf/hibernate/PersistentIntEnum.java
diff -N net/sf/hibernate/PersistentIntEnum.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ net/sf/hibernate/PersistentIntEnum.java	8 May 2003 09:50:55 -0000
@@ -0,0 +1,23 @@
+//$Id: PersistentEnum.java,v 1.4 2003/04/25 03:40:30 oneovthafew Exp $
+package net.sf.hibernate;
+
+/**
+ * Implementors of <tt>PersistentEnum</tt> are enumerated types persisted to
+ * the database as <tt>SMALLINT</tt>s. As well as implementing <tt>toInt()</tt>,
+ * a <tt>PersistentEnum</tt> must also provide a static method with the
+ * signature:<br>
+ * <br>
+ * 		<tt>public static PersistentEnum fromInt(int i)</tt>
+ *
+ * @author Gavin King
+ */
+
+public interface PersistentIntEnum {
+	public int toInt();
+}
+
+
+
+
+
+
Index: net/sf/hibernate/PersistentStringEnum.java
===================================================================
RCS file: net/sf/hibernate/PersistentStringEnum.java
diff -N net/sf/hibernate/PersistentStringEnum.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ net/sf/hibernate/PersistentStringEnum.java	8 May 2003 09:50:55 -0000
@@ -0,0 +1,23 @@
+//$Id: PersistentEnum.java,v 1.4 2003/04/25 03:40:30 oneovthafew Exp $
+package net.sf.hibernate;
+
+/**
+ * Implementors of <tt>PersistentStringEnum</tt> are enumerated types persisted to
+ * the database as <tt>VARCHAR</tt>s. As well as implementing <tt>toString()</tt>,
+ * a <tt>PersistentStringEnum</tt> must also provide a static method with the
+ * signature:<br>
+ * <br>
+ * 		<tt>public static PersistentStringEnum fromString(String s)</tt>
+ *
+ * @author Gavin King
+ */
+
+public interface PersistentStringEnum {
+	public String toString();
+}
+
+
+
+
+
+
Index: net/sf/hibernate/Query.java
===================================================================
RCS file: /cvsroot/hibernate/Hibernate2/src/net/sf/hibernate/Query.java,v
retrieving revision 1.12
diff -u -r1.12 Query.java
--- net/sf/hibernate/Query.java	25 Apr 2003 03:40:30 -0000	1.12
+++ net/sf/hibernate/Query.java	8 May 2003 09:50:55 -0000
@@ -254,26 +254,43 @@
 	 * @param val a non-null instance of a persistent class
 	 */
 	public Query setEntity(int position, Object val); // use setParameter for null values
+	
 	/**
 	 * Bind an instance of a persistent enumeration class to a JDBC-style query parameter.
 	 * @param position the position of the parameter in the query
 	 * string, numbered from <tt>0</tt>.
 	 * @param val a non-null instance of a persistent enumeration
 	 */
-	public Query setEnum(int position, Object val) throws MappingException; // use setParameter for null values
+	public Query setIntEnum(int position, Object val) throws MappingException; // use setParameter for null values
 	
 	/**
+	 * Bind an instance of a persistent enumeration class to a JDBC-style query parameter.
+	 * @param position the position of the parameter in the query
+	 * string, numbered from <tt>0</tt>.
+	 * @param val a non-null instance of a persistent enumeration
+	 */
+	public Query setStringEnum(int position, Object val) throws MappingException; // use setParameter for null values
+
+	/**
 	 * Bind an instance of a mapped persistent class to a named query parameter.
 	 * @param name the name of the parameter
 	 * @param val a non-null instance of a persistent class
 	 */
 	public Query setEntity(String name, Object val); // use setParameter for null values
+	
+	/**
+	 * Bind an instance of a mapped persistent enumeration class to a named query parameter.
+	 * @param name the name of the parameter
+	 * @param val a non-null instance of a persistent enumeration
+	 */
+	public Query setIntEnum(String name, Object val) throws MappingException; // use setParameter for null values
+	
 	/**
 	 * Bind an instance of a mapped persistent enumeration class to a named query parameter.
 	 * @param name the name of the parameter
 	 * @param val a non-null instance of a persistent enumeration
 	 */
-	public Query setEnum(String name, Object val) throws MappingException; // use setParameter for null values
+	public Query setStringEnum(String name, Object val) throws MappingException; // use setParameter for null values
 }
 
 
Index: net/sf/hibernate/impl/QueryImpl.java
===================================================================
RCS file: /cvsroot/hibernate/Hibernate2/src/net/sf/hibernate/impl/QueryImpl.java,v
retrieving revision 1.17
diff -u -r1.17 QueryImpl.java
--- net/sf/hibernate/impl/QueryImpl.java	25 Apr 2003 05:56:33 -0000	1.17
+++ net/sf/hibernate/impl/QueryImpl.java	8 May 2003 09:50:55 -0000
@@ -181,8 +181,13 @@
 		return this;
 	}
 	
-	public Query setEnum(int position, Object val) throws MappingException {
-		setParameter( position, val, Hibernate.enum( val.getClass() ) );
+	public Query setIntEnum(int position, Object val) throws MappingException {
+		setParameter( position, val, Hibernate.intEnum( val.getClass() ) );
+		return this;
+	}
+	
+	public Query setStringEnum(int position, Object val) throws MappingException {
+		setParameter( position, val, Hibernate.stringEnum( val.getClass() ) );
 		return this;
 	}
 	
@@ -236,8 +241,13 @@
 		return this;
 	}
 	
-	public Query setEnum(String name, Object val) throws MappingException {
-		setParameter( name, val, Hibernate.enum( val.getClass() ) );
+	public Query setIntEnum(String name, Object val) throws MappingException {
+		setParameter( name, val, Hibernate.intEnum( val.getClass() ) );
+		return this;
+	}
+	
+	public Query setStringEnum(String name, Object val) throws MappingException {
+		setParameter( name, val, Hibernate.stringEnum( val.getClass() ) );
 		return this;
 	}
 	
Index: net/sf/hibernate/test/FooStatus.java
===================================================================
RCS file: /cvsroot/hibernate/Hibernate2/src/net/sf/hibernate/test/FooStatus.java,v
retrieving revision 1.4
diff -u -r1.4 FooStatus.java
--- net/sf/hibernate/test/FooStatus.java	9 Feb 2003 06:28:16 -0000	1.4
+++ net/sf/hibernate/test/FooStatus.java	8 May 2003 09:50:55 -0000
@@ -3,9 +3,9 @@
 
 import java.io.Serializable;
 
-import net.sf.hibernate.PersistentEnum;
+import net.sf.hibernate.PersistentIntEnum;
 
-public class FooStatus implements PersistentEnum, Serializable {
+public class FooStatus implements PersistentIntEnum, Serializable {
 	private short code;
 	
 	public static FooStatus ON = new FooStatus(1);
Index: net/sf/hibernate/tool/class2hbm/MapGenerator.java
===================================================================
RCS file: /cvsroot/hibernate/Hibernate2/src/net/sf/hibernate/tool/class2hbm/MapGenerator.java,v
retrieving revision 1.5
diff -u -r1.5 MapGenerator.java
--- net/sf/hibernate/tool/class2hbm/MapGenerator.java	2 Feb 2003 04:48:27 -0000	1.5
+++ net/sf/hibernate/tool/class2hbm/MapGenerator.java	8 May 2003 09:50:55 -0000
@@ -11,7 +11,7 @@
 import java.util.Hashtable;
 import java.util.Vector;
 
-import net.sf.hibernate.PersistentEnum;
+import net.sf.hibernate.PersistentIntEnum;
 import net.sf.hibernate.type.Type;
 import net.sf.hibernate.type.TypeFactory;
 import net.sf.hibernate.util.StringHelper;
@@ -529,7 +529,7 @@
 		/*else if ( Type.class.isAssignableFrom(cls) ) {
 			return new ReflectedProperty( name, cls, this, "custom" );
 		}*/
-		else if ( PersistentEnum.class.isAssignableFrom(cls) ) {
+		else if ( PersistentIntEnum.class.isAssignableFrom(cls) ) {
 			return new ReflectedProperty( name, cls, this, "enum" );
 		}
 		// differs from Hibernate.auto...
Index: net/sf/hibernate/type/PersistentEnumType.java
===================================================================
RCS file: net/sf/hibernate/type/PersistentEnumType.java
diff -N net/sf/hibernate/type/PersistentEnumType.java
--- net/sf/hibernate/type/PersistentEnumType.java	25 Apr 2003 03:40:37 -0000	1.6
+++ /dev/null	1 Jan 1970 00:00:00 -0000
@@ -1,119 +0,0 @@
-//$Id: PersistentEnumType.java,v 1.6 2003/04/25 03:40:37 oneovthafew Exp $
-package net.sf.hibernate.type;
-
-import java.io.Serializable;
-import java.lang.reflect.InvocationTargetException;
-import java.lang.reflect.Method;
-import java.sql.PreparedStatement;
-import java.sql.ResultSet;
-import java.sql.SQLException;
-import java.sql.Types;
-
-import net.sf.hibernate.AssertionFailure;
-import net.sf.hibernate.HibernateException;
-import net.sf.hibernate.MappingException;
-import net.sf.hibernate.PersistentEnum;
-import net.sf.hibernate.engine.SessionImplementor;
-import net.sf.hibernate.util.ReflectHelper;
-
-/**
- * A type for Hibernate <tt>PersistentEnum</tt>
- * @see net.sf.hibernate.PersistentEnum
- * @author Gavin King
- */
-public class PersistentEnumType extends ImmutableType implements LiteralType {
-	
-	private static final Class[] INTEGER_ARG = new Class[] { int.class };
-	private final Class enumClass;
-	private final Method method;
-	
-	public PersistentEnumType(Class enumClass) throws MappingException {
-		this.enumClass = enumClass;
-		try {
-			method = enumClass.getDeclaredMethod("fromInt", INTEGER_ARG);
-			if ( !ReflectHelper.isPublic(enumClass, method) ) method.setAccessible(true);
-		}
-		catch (NoSuchMethodException nme) {
-			throw new MappingException("PersistentEnum class did not implement fromInt(int): " + enumClass.getName() );
-		}
-	}
-	
-	public Object get(ResultSet rs, String name) throws HibernateException, SQLException {
-		int code = rs.getInt(name);
-		if ( rs.wasNull() ) {
-			return null;
-		}
-		else {
-			return getInstance( new Integer(code) );
-		}
-	}
-	
-	public Object getInstance(Integer code) throws HibernateException {
-		try {
-			return method.invoke( null, new Object[] { code } );
-		}
-		catch (IllegalArgumentException iae) {
-			throw new AssertionFailure("Could not invoke fromInt() from PersistentEnumType", iae);
-		}
-		catch (InvocationTargetException ite) {
-			throw new HibernateException( "InvocationTargetException occurred inside fromInt()", ite );
-		}
-		catch (IllegalAccessException iae) {
-			throw new HibernateException( "IllegalAccessException occurred calling fromInt()", iae );
-		}
-	}
-	
-	
-	public boolean equals(Object x, Object y) {
-		return (x==y) || ( x!=null && y!=null && x.getClass()==y.getClass() && ( (PersistentEnum) x ).toInt()==( (PersistentEnum) y ).toInt() );
-	}
-	
-	public Class getReturnedClass() {
-		return enumClass;
-	}
-	
-	public void set(PreparedStatement st, Object value, int index) throws SQLException {
-		
-		if (value==null) {
-			st.setNull( index, Types.SMALLINT );
-		}
-		else {
-			st.setInt( index, ( (PersistentEnum) value ).toInt() );
-		}
-	}
-	
-	public int sqlType() {
-		return Types.SMALLINT;
-	}
-	public String getName() { return enumClass.getName(); }
-	
-	public String toXML(Object value) {
-		return (value==null) ? null : Integer.toString( ( (PersistentEnum) value ).toInt() );
-	}
-	public Object assemble(Serializable cached,	SessionImplementor session, Object owner)
-	throws HibernateException {
-		if (cached==null) {
-			return null;
-		}
-		else {
-			return getInstance( (Integer) cached );
-		}
-	}
-	
-	public Serializable disassemble(Object value, SessionImplementor session)
-	throws HibernateException {
-		return (value==null) ? null : new Integer( ( (PersistentEnum) value ).toInt() );
-	}
-	
-	
-	public String objectToSQLString(Object value) throws Exception {
-		return Integer.toString( ( (PersistentEnum) value ).toInt() );
-	}
-	
-	
-}
-
-
-
-
-
Index: net/sf/hibernate/type/PersistentIntEnumType.java
===================================================================
RCS file: net/sf/hibernate/type/PersistentIntEnumType.java
diff -N net/sf/hibernate/type/PersistentIntEnumType.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ net/sf/hibernate/type/PersistentIntEnumType.java	8 May 2003 09:50:56 -0000
@@ -0,0 +1,175 @@
+//$Id: PersistentEnumType.java,v 1.6 2003/04/25 03:40:37 oneovthafew Exp $
+package net.sf.hibernate.type;
+
+import java.io.Serializable;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.sql.Types;
+
+import net.sf.hibernate.AssertionFailure;
+import net.sf.hibernate.HibernateException;
+import net.sf.hibernate.MappingException;
+import net.sf.hibernate.PersistentIntEnum;
+import net.sf.hibernate.engine.SessionImplementor;
+import net.sf.hibernate.util.ReflectHelper;
+
+/**
+ * A type for Hibernate <tt>PersistentIntEnum</tt>
+ * @see net.sf.hibernate.PersistentIntEnum
+ * @author Gavin King
+ */
+public class PersistentIntEnumType
+	extends ImmutableType
+	implements LiteralType {
+
+	private static final Class[] INTEGER_ARG = new Class[] { int.class };
+	private final Class enumClass;
+	private final Method method;
+
+	/**
+	 * Constructor.
+	 * @param enumClass
+	 * @throws MappingException
+	 */
+	public PersistentIntEnumType(Class enumClass) throws MappingException {
+		this.enumClass = enumClass;
+		try {
+			method = enumClass.getDeclaredMethod("fromInt", INTEGER_ARG);
+			if (!ReflectHelper.isPublic(enumClass, method))
+				method.setAccessible(true);
+		} catch (NoSuchMethodException nme) {
+			throw new MappingException(
+				"PersistentEnum class did not implement fromInt(int): "
+					+ enumClass.getName());
+		}
+	}
+
+	/**
+	 * Returns an object of the correct type from a
+	 * result set.
+	 */
+	public Object get(ResultSet rs, String name)
+		throws HibernateException, SQLException {
+		int code = rs.getInt(name);
+		if (rs.wasNull()) {
+			return null;
+		} else {
+			return getInstance(new Integer(code));
+		}
+	}
+
+	/**
+	 * Returns an instance of an enumerated type.
+	 * @param code
+	 * @return
+	 * @throws HibernateException
+	 */
+	public Object getInstance(Integer code) throws HibernateException {
+		try {
+			return method.invoke(null, new Object[] { code });
+		} catch (IllegalArgumentException iae) {
+			throw new AssertionFailure(
+				"Could not invoke fromInt() from PersistentEnumType",
+				iae);
+		} catch (InvocationTargetException ite) {
+			throw new HibernateException(
+				"InvocationTargetException occurred inside fromInt()",
+				ite);
+		} catch (IllegalAccessException iae) {
+			throw new HibernateException(
+				"IllegalAccessException occurred calling fromInt()",
+				iae);
+		}
+	}
+
+	/**
+	 * Returns true if the enumerated type instances are equal.
+	 */
+	public boolean equals(Object x, Object y) {
+		return (x == y)
+			|| (x != null
+				&& y != null
+				&& x.getClass() == y.getClass()
+				&& ((PersistentIntEnum) x).toInt()
+					== ((PersistentIntEnum) y).toInt());
+	}
+
+	/**
+	 * Returns the class for this enumerated type.
+	 */
+	public Class getReturnedClass() {
+		return enumClass;
+	}
+
+	/**
+	 * Sets an 
+	 */
+	public void set(PreparedStatement st, Object value, int index)
+		throws SQLException {
+
+		if (value == null) {
+			st.setNull(index, Types.SMALLINT);
+		} else {
+			st.setInt(index, ((PersistentIntEnum) value).toInt());
+		}
+	}
+
+	/**
+	 * Returns the Hibernate SQL type.
+	 */
+	public int sqlType() {
+		return Types.SMALLINT;
+	}
+
+	/**
+	 * Returns the name of the enumerated type class.
+	 */
+	public String getName() {
+		return enumClass.getName();
+	}
+
+	/**
+	 * Returns an XML compliant representation of a
+	 * enumerated type instance.
+	 */
+	public String toXML(Object value) {
+		return (value == null)
+			? null
+			: Integer.toString(((PersistentIntEnum) value).toInt());
+	}
+	
+	/**
+	 * Returns an enumerated type instance from a cache.
+	 */
+	public Object assemble(
+		Serializable cached,
+		SessionImplementor session,
+		Object owner)
+		throws HibernateException {
+		if (cached == null) {
+			return null;
+		} else {
+			return getInstance((Integer) cached);
+		}
+	}
+
+	/**
+	 * 
+	 */
+	public Serializable disassemble(Object value, SessionImplementor session)
+		throws HibernateException {
+		return (value == null)
+			? null
+			: new Integer(((PersistentIntEnum) value).toInt());
+	}
+
+	/**
+	 * 
+	 */
+	public String objectToSQLString(Object value) throws Exception {
+		return Integer.toString(((PersistentIntEnum) value).toInt());
+	}
+}
Index: net/sf/hibernate/type/PersistentStringEnumType.java
===================================================================
RCS file: net/sf/hibernate/type/PersistentStringEnumType.java
diff -N net/sf/hibernate/type/PersistentStringEnumType.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ net/sf/hibernate/type/PersistentStringEnumType.java	8 May 2003 09:50:56 -0000
@@ -0,0 +1,175 @@
+//$Id: PersistentEnumType.java,v 1.6 2003/04/25 03:40:37 oneovthafew Exp $
+package net.sf.hibernate.type;
+
+import java.io.Serializable;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.sql.Types;
+
+import net.sf.hibernate.AssertionFailure;
+import net.sf.hibernate.HibernateException;
+import net.sf.hibernate.MappingException;
+import net.sf.hibernate.PersistentStringEnum;
+import net.sf.hibernate.engine.SessionImplementor;
+import net.sf.hibernate.util.ReflectHelper;
+
+/**
+ * A type for Hibernate <tt>PersistentIntEnum</tt>
+ * @see net.sf.hibernate.PersistentIntEnum
+ * @author Gavin King
+ */
+public class PersistentStringEnumType
+	extends ImmutableType
+	implements LiteralType {
+
+	private static final Class[] STRING_ARG = new Class[] { String.class };
+	private final Class enumClass;
+	private final Method method;
+
+	/**
+	 * Constructor.
+	 * @param enumClass
+	 * @throws MappingException
+	 */
+	public PersistentStringEnumType(Class enumClass) throws MappingException {
+		this.enumClass = enumClass;
+		try {
+			method = enumClass.getDeclaredMethod("fromString", STRING_ARG);
+			if (!ReflectHelper.isPublic(enumClass, method))
+				method.setAccessible(true);
+		} catch (NoSuchMethodException nme) {
+			throw new MappingException(
+				"PersistentStringEnum class did not implement fromString(String): "
+					+ enumClass.getName());
+		}
+	}
+
+	/**
+	 * Returns an object of the correct type from a
+	 * result set.
+	 */
+	public Object get(ResultSet rs, String name)
+		throws HibernateException, SQLException {
+		String code = rs.getString(name);
+		if (rs.wasNull()) {
+			return null;
+		} else {
+			return getInstance(code);
+		}
+	}
+
+	/**
+	 * Returns an instance of an enumerated type.
+	 * @param code
+	 * @return
+	 * @throws HibernateException
+	 */
+	public Object getInstance(String code) throws HibernateException {
+		try {
+			return method.invoke(null, new Object[] { code });
+		} catch (IllegalArgumentException iae) {
+			throw new AssertionFailure(
+				"Could not invoke fromString() from PersistentStringEnumType",
+				iae);
+		} catch (InvocationTargetException ite) {
+			throw new HibernateException(
+				"InvocationTargetException occurred inside fromString()",
+				ite);
+		} catch (IllegalAccessException iae) {
+			throw new HibernateException(
+				"IllegalAccessException occurred calling fromString)",
+				iae);
+		}
+	}
+
+	/**
+	 * Returns true if the enumerated type instances are equal.
+	 */
+	public boolean equals(Object x, Object y) {
+		return (x == y)
+			|| (x != null
+				&& y != null
+				&& x.getClass() == y.getClass()
+				&& ((PersistentStringEnum) x).toString()
+					== ((PersistentStringEnum) y).toString());
+	}
+
+	/**
+	 * Returns the class for this enumerated type.
+	 */
+	public Class getReturnedClass() {
+		return enumClass;
+	}
+
+	/**
+	 * Sets an 
+	 */
+	public void set(PreparedStatement st, Object value, int index)
+		throws SQLException {
+
+		if (value == null) {
+			st.setNull(index, Types.VARCHAR);
+		} else {
+			st.setString(index, ((PersistentStringEnum) value).toString());
+		}
+	}
+
+	/**
+	 * Returns the Hibernate SQL type.
+	 */
+	public int sqlType() {
+		return Types.VARCHAR;
+	}
+
+	/**
+	 * Returns the name of the enumerated type class.
+	 */
+	public String getName() {
+		return enumClass.getName();
+	}
+
+	/**
+	 * Returns an XML compliant representation of a
+	 * enumerated type instance.
+	 */
+	public String toXML(Object value) {
+		return (value == null)
+			? null
+			: ((PersistentStringEnum) value).toString();
+	}
+	
+	/**
+	 * Returns an enumerated type instance from a cache.
+	 */
+	public Object assemble(
+		Serializable cached,
+		SessionImplementor session,
+		Object owner)
+		throws HibernateException {
+		if (cached == null) {
+			return null;
+		} else {
+			return getInstance((String)cached);
+		}
+	}
+
+	/**
+	 * 
+	 */
+	public Serializable disassemble(Object value, SessionImplementor session)
+		throws HibernateException {
+		return (value == null)
+			? null
+			: ((PersistentStringEnum) value).toString();
+	}
+
+	/**
+	 * 
+	 */
+	public String objectToSQLString(Object value) throws Exception {
+		return ((PersistentStringEnum) value).toString();
+	}
+}
Index: net/sf/hibernate/type/TypeFactory.java
===================================================================
RCS file: /cvsroot/hibernate/Hibernate2/src/net/sf/hibernate/type/TypeFactory.java,v
retrieving revision 1.9
diff -u -r1.9 TypeFactory.java
--- net/sf/hibernate/type/TypeFactory.java	2 May 2003 09:17:14 -0000	1.9
+++ net/sf/hibernate/type/TypeFactory.java	8 May 2003 09:50:56 -0000
@@ -20,7 +20,8 @@
 import net.sf.hibernate.HibernateException;
 import net.sf.hibernate.Lifecycle;
 import net.sf.hibernate.MappingException;
-import net.sf.hibernate.PersistentEnum;
+import net.sf.hibernate.PersistentIntEnum;
+import net.sf.hibernate.PersistentStringEnum;
 import net.sf.hibernate.UserType;
 import net.sf.hibernate.engine.SessionImplementor;
 import net.sf.hibernate.util.ReflectHelper;
@@ -149,8 +150,11 @@
 				else if ( Lifecycle.class.isAssignableFrom(typeClass) ) {
 					type = Hibernate.association(typeClass);
 				}
-				else if ( PersistentEnum.class.isAssignableFrom(typeClass) ) {
-					type = Hibernate.enum(typeClass);
+				else if ( PersistentIntEnum.class.isAssignableFrom(typeClass) ) {
+					type = Hibernate.intEnum(typeClass);
+				}
+				else if ( PersistentStringEnum.class.isAssignableFrom(typeClass) ) {
+					type = Hibernate.stringEnum(typeClass);
 				}
 				else if  ( Serializable.class.isAssignableFrom(typeClass) ) {
 					type = Hibernate.serializable(typeClass);
