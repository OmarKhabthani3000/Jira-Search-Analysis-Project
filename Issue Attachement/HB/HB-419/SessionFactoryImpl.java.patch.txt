Index: SessionFactoryImpl.java
===================================================================
RCS file: /usr/local/cvsroot/eman_java/eman.infra.orm.hibernate/src/net/sf/hibernate/impl/SessionFactoryImpl.java,v
retrieving revision 1.3
retrieving revision 1.5
diff -u -r1.3 -r1.5
--- SessionFactoryImpl.java    14 Oct 2003 15:13:42 -0000    1.3
+++ SessionFactoryImpl.java    20 Oct 2003 16:54:59 -0000    1.5
@@ -1,4 +1,4 @@
-//$Id: SessionFactoryImpl.java,v 1.3 2003/10/14 15:13:42 jdk Exp $
+//$Id: SessionFactoryImpl.java,v 1.5 2003/10/20 16:54:59 jdk Exp $
 package net.sf.hibernate.impl;

 import java.io.IOException;
@@ -7,6 +7,7 @@
 import java.io.ObjectOutputStream;
 import java.io.ObjectStreamException;
 import java.io.Serializable;
+import java.lang.reflect.Constructor;
 import java.sql.Connection;
 import java.util.ArrayList;
 import java.util.Collections;
@@ -140,10 +141,23 @@
         Iterator collections = cfg.getCollectionMappings();
         while ( collections.hasNext() ) {
             Collection map = (Collection) collections.next();
-            CollectionPersister persister = map.isOneToMany() ?
-                (CollectionPersister) new OneToManyPersister(map, cfg, this) :
-                (CollectionPersister) new BasicCollectionPersister(map, cfg, this);
-            collectionPersisters.put( map.getRole(), persister );
+            Class persisterClass = map.getPersister();
+            if (persisterClass == null) {
+                CollectionPersister persister = map.isOneToMany() ?
+                    (CollectionPersister) new OneToManyPersister(map, cfg, this) :
+                    (CollectionPersister) new BasicCollectionPersister(map, cfg, this);
+                collectionPersisters.put( map.getRole(), persister );
+            }
+            else {
+                try {
+                    Class[] classList = new Class[]{Collection.class, Configuration.class, SessionFactoryImplementor.class};
+                    Constructor persisterConstructor = persisterClass.getConstructor(classList);
+                    CollectionPersister persister = (CollectionPersister) persisterConstructor.newInstance(new Object[]{map, cfg, this});
+                    collectionPersisters.put(map.getRole(), persister);
+                } catch (Exception e) {
+                    throw new HibernateException(e);
+                }
+            }
         }
         collectionMetadata = Collections.unmodifiableMap(collectionPersisters);
        



