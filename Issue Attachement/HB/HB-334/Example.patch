Index: Example.java
===================================================================
RCS file: /cvsroot/hibernate/Hibernate2/src/net/sf/hibernate/expression/Attic/Example.java,v
retrieving revision 1.1.2.5
diff -w -u -r1.1.2.5 Example.java
--- Example.java        6 Sep 2003 16:02:44 -0000       1.1.2.5
+++ Example.java        13 Sep 2003 20:28:21 -0000
@@ -31,9 +31,15 @@
        private final Object entity;
        private final Set excludedProperties = new HashSet();
        private PropertySelector selector;
+       private int matchMode;
        private boolean isLikeEnabled;
        private boolean isIgnoreCaseEnabled;

+       public static final int MATCH_EXACTLY = 0;
+       public static final int MATCH_PREFIX = 1;
+       public static final int MATCH_SUFFIX = 2;
+       public static final int MATCH_ANYWHERE = 3;
+
        /**
         * A strategy for choosing property values for inclusion in the query
         * criteria
@@ -93,11 +99,16 @@
        /**
         * Use the "like" operator for all string-valued properties
         */
-       public Example enableLike() {
+       public Example enableLike(int matchMode) {
+               this.matchMode = matchMode;
                isLikeEnabled = true;
                return this;
        }

+       public Example enableLike() {
+               return this.enableLike(MATCH_EXACTLY);
+       }
+
        /**
         * Ignore case for all string-valued properties
         */
@@ -190,7 +201,24 @@
                        if ( i!=meta.getVersionProperty() && isPropertyIncluded(
                                values[i], propertyNames[i], propertyTypes[i]
                        ) ) {
-                               if ( values[i]!=null ) list.add( new TypedValue( propertyTypes[i], values[i] ) );
+                               if ( values[i]!=null ) {
+                                       Object toAdd = values[i];
+                                       if (isIgnoreCaseEnabled && toAdd instanceof String) {
+                                               toAdd = toAdd.toString().toLowerCase();
+                                       }
+                                       if (isLikeEnabled && toAdd instanceof String) {
+                                               if (matchMode == MATCH_SUFFIX) {
+                                                       toAdd = "%" + toAdd.toString() ;
+                                               }
+                                               else if (matchMode == MATCH_PREFIX) {
+                                                       toAdd = toAdd.toString() + "%";
+                                               }
+                                               else if (matchMode == MATCH_ANYWHERE) {
+                                                       toAdd = "%" + toAdd.toString() + "%";
+                                               }
+                                       }
+                                       list.add( new TypedValue( propertyTypes[i], toAdd ) );
+                               }
                        }
                }
                return (TypedValue[]) list.toArray(TYPED_VALUES);
