diff -ur hibernate-2.1/src/net/sf/hibernate/Interceptor.java hibernate-2.1-new/src/net/sf/hibernate/Interceptor.java
--- hibernate-2.1/src/net/sf/hibernate/Interceptor.java	Wed Feb  4 22:46:32 2004
+++ hibernate-2.1-new/src/net/sf/hibernate/Interceptor.java	Wed Apr 21 15:45:15 2004
@@ -24,7 +24,7 @@
  * @see net.sf.hibernate.cfg.Configuration#setInterceptor(Interceptor)
  * @author Gavin King
  */
-public interface Interceptor {
+public interface Interceptor extends Serializable {
 	/**
 	 * Called just before an object is initialized. The interceptor may change the <tt>state</tt>, which will
 	 * be propagated to the persistent object. Note that when this method is called, <tt>entity</tt> will be
diff -ur hibernate-2.1/src/net/sf/hibernate/cfg/Binder.java hibernate-2.1-new/src/net/sf/hibernate/cfg/Binder.java
--- hibernate-2.1/src/net/sf/hibernate/cfg/Binder.java	Wed Feb  4 22:46:32 2004
+++ hibernate-2.1-new/src/net/sf/hibernate/cfg/Binder.java	Wed Apr 21 16:13:10 2004
@@ -1313,7 +1313,7 @@
 		return superModel;
 	}
 
-	abstract static class SecondPass {
+	abstract static class SecondPass implements Serializable {
 		Element node;
 		Mappings mappings;
 		Collection collection;
diff -ur hibernate-2.1/src/net/sf/hibernate/cfg/Configuration.java hibernate-2.1-new/src/net/sf/hibernate/cfg/Configuration.java
--- hibernate-2.1/src/net/sf/hibernate/cfg/Configuration.java	Wed Feb  4 22:46:31 2004
+++ hibernate-2.1-new/src/net/sf/hibernate/cfg/Configuration.java	Wed Apr 21 15:45:26 2004
@@ -72,7 +72,7 @@
  * @see net.sf.hibernate.SessionFactory
  * @author Gavin King
  */
-public class Configuration {
+public class Configuration implements Serializable {
 
 	private Map classes = new HashMap();
 	private Map imports = new HashMap();
diff -ur hibernate-2.1/src/net/sf/hibernate/cfg/Mappings.java hibernate-2.1-new/src/net/sf/hibernate/cfg/Mappings.java
--- hibernate-2.1/src/net/sf/hibernate/cfg/Mappings.java	Wed Feb  4 22:46:32 2004
+++ hibernate-2.1-new/src/net/sf/hibernate/cfg/Mappings.java	Wed Apr 21 16:15:08 2004
@@ -3,6 +3,7 @@
 
 import java.util.List;
 import java.util.Map;
+import java.io.Serializable;
 
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
@@ -20,7 +21,7 @@
  * <tt>&lt;hibernate-mapping&gt;</tt> element.)
  * @author Gavin King
  */
-public class Mappings {
+public class Mappings implements Serializable {
 	
 	private static final Log log = LogFactory.getLog(Mappings.class);
 	
@@ -216,4 +217,4 @@
 		return namingStrategy;
 	}
 
-}
\ No newline at end of file
+}
diff -ur hibernate-2.1/src/net/sf/hibernate/cfg/NamingStrategy.java hibernate-2.1-new/src/net/sf/hibernate/cfg/NamingStrategy.java
--- hibernate-2.1/src/net/sf/hibernate/cfg/NamingStrategy.java	Wed Feb  4 22:46:32 2004
+++ hibernate-2.1-new/src/net/sf/hibernate/cfg/NamingStrategy.java	Wed Apr 21 16:10:32 2004
@@ -1,6 +1,8 @@
 //$Id: hibernate.patch,v 1.1 2004/04/26 16:08:48 luish Exp $
 package net.sf.hibernate.cfg;
 
+import java.io.Serializable;
+
 /**
  * A set of rules for determining the physical column
  * and table names given the information in the mapping
@@ -11,7 +13,7 @@
  * @see ImprovedNamingStrategy
  * @author Gavin King
  */
-public interface NamingStrategy {
+public interface NamingStrategy extends Serializable {
 	/**
 	 * Return a table name for an entity class
 	 * @param className the fully-qualified class name
diff -ur hibernate-2.1/src/net/sf/hibernate/engine/Mapping.java hibernate-2.1-new/src/net/sf/hibernate/engine/Mapping.java
--- hibernate-2.1/src/net/sf/hibernate/engine/Mapping.java	Wed Feb  4 22:46:32 2004
+++ hibernate-2.1-new/src/net/sf/hibernate/engine/Mapping.java	Wed Apr 21 15:45:24 2004
@@ -3,6 +3,8 @@
 
 import net.sf.hibernate.MappingException;
 import net.sf.hibernate.type.Type;
+import java.io.Serializable;
+
 
 /**
  * Defines operations common to "compiled" mappings (ie. <tt>SessionFactory</tt>)
@@ -14,7 +16,7 @@
  * @see net.sf.hibernate.cfg.Configuration
  * @author Gavin King
  */
-public interface Mapping {
+public interface Mapping extends Serializable {
 	public Type getIdentifierType(Class persistentClass) throws MappingException;
 	public String getIdentifierPropertyName(Class persistentClass) throws MappingException;
 	public Type getPropertyType(Class persistentClass, String propertyName) throws MappingException;
diff -ur hibernate-2.1/src/net/sf/hibernate/mapping/Column.java hibernate-2.1-new/src/net/sf/hibernate/mapping/Column.java
--- hibernate-2.1/src/net/sf/hibernate/mapping/Column.java	Wed Feb  4 22:46:32 2004
+++ hibernate-2.1-new/src/net/sf/hibernate/mapping/Column.java	Wed Apr 21 16:07:23 2004
@@ -1,6 +1,8 @@
 //$Id: hibernate.patch,v 1.1 2004/04/26 16:08:48 luish Exp $
 package net.sf.hibernate.mapping;
 
+import java.io.Serializable;
+
 import net.sf.hibernate.HibernateException;
 import net.sf.hibernate.MappingException;
 import net.sf.hibernate.dialect.Dialect;
@@ -13,7 +15,7 @@
  * A column of a relational database table
  * @author Gavin King
  */
-public class Column {
+public class Column implements Serializable {
 	
 	private static final int DEFAULT_PROPERTY_LENGTH = 255;
 	
diff -ur hibernate-2.1/src/net/sf/hibernate/mapping/Fetchable.java hibernate-2.1-new/src/net/sf/hibernate/mapping/Fetchable.java
--- hibernate-2.1/src/net/sf/hibernate/mapping/Fetchable.java	Wed Feb  4 22:46:32 2004
+++ hibernate-2.1-new/src/net/sf/hibernate/mapping/Fetchable.java	Wed Apr 21 15:58:16 2004
@@ -1,11 +1,13 @@
 //$Id: hibernate.patch,v 1.1 2004/04/26 16:08:48 luish Exp $
 package net.sf.hibernate.mapping;
 
+import java.io.Serializable;
+
 /**
  * Any mapping with an outer-join attribute
  * @author Gavin King
  */
-public interface Fetchable {
+public interface Fetchable extends Serializable {
 	public int getOuterJoinFetchSetting();
 	public void setOuterJoinFetchSetting(int joinedFetch);
 }
diff -ur hibernate-2.1/src/net/sf/hibernate/mapping/Formula.java hibernate-2.1-new/src/net/sf/hibernate/mapping/Formula.java
--- hibernate-2.1/src/net/sf/hibernate/mapping/Formula.java	Wed Feb  4 22:46:32 2004
+++ hibernate-2.1-new/src/net/sf/hibernate/mapping/Formula.java	Wed Apr 21 16:07:35 2004
@@ -1,6 +1,8 @@
 //$Id: hibernate.patch,v 1.1 2004/04/26 16:08:48 luish Exp $
 package net.sf.hibernate.mapping;
 
+import java.io.Serializable;
+
 import net.sf.hibernate.dialect.Dialect;
 import net.sf.hibernate.sql.Template;
 import net.sf.hibernate.util.StringHelper;
@@ -9,7 +11,7 @@
  * A formula is a derived column value
  * @author Gavin King
  */
-public class Formula {
+public class Formula implements Serializable {
 	private static int formulaUniqueInteger=0;
 	
 	private String formula;
diff -ur hibernate-2.1/src/net/sf/hibernate/mapping/IdentifierBag.java hibernate-2.1-new/src/net/sf/hibernate/mapping/IdentifierBag.java
--- hibernate-2.1/src/net/sf/hibernate/mapping/IdentifierBag.java	Wed Feb  4 22:46:32 2004
+++ hibernate-2.1-new/src/net/sf/hibernate/mapping/IdentifierBag.java	Wed Apr 21 16:08:27 2004
@@ -1,6 +1,8 @@
 //$Id: hibernate.patch,v 1.1 2004/04/26 16:08:48 luish Exp $
 package net.sf.hibernate.mapping;
 
+import java.io.Serializable;
+
 import net.sf.hibernate.type.PersistentCollectionType;
 import net.sf.hibernate.type.TypeFactory;
 
diff -ur hibernate-2.1/src/net/sf/hibernate/mapping/MetaAttribute.java hibernate-2.1-new/src/net/sf/hibernate/mapping/MetaAttribute.java
--- hibernate-2.1/src/net/sf/hibernate/mapping/MetaAttribute.java	Wed Feb  4 22:46:32 2004
+++ hibernate-2.1-new/src/net/sf/hibernate/mapping/MetaAttribute.java	Wed Apr 21 16:07:54 2004
@@ -1,6 +1,8 @@
 //$Id: hibernate.patch,v 1.1 2004/04/26 16:08:48 luish Exp $
 package net.sf.hibernate.mapping;
 
+import java.io.Serializable;
+
 import java.util.ArrayList;
 import java.util.Collections;
 
@@ -8,7 +10,7 @@
  * A meta attribute is a named value or values.
  * @author Gavin King
  */
-public class MetaAttribute {
+public class MetaAttribute implements Serializable {
 	private String name;
 	private java.util.List values = new ArrayList();
 	
diff -ur hibernate-2.1/src/net/sf/hibernate/mapping/NamedSQLQuery.java hibernate-2.1-new/src/net/sf/hibernate/mapping/NamedSQLQuery.java
--- hibernate-2.1/src/net/sf/hibernate/mapping/NamedSQLQuery.java	Wed Feb  4 22:46:31 2004
+++ hibernate-2.1-new/src/net/sf/hibernate/mapping/NamedSQLQuery.java	Wed Apr 21 16:07:12 2004
@@ -4,6 +4,7 @@
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
+import java.io.Serializable;
 
 import net.sf.hibernate.util.ArrayHelper;
 
@@ -12,7 +13,7 @@
  * 
  * @author Max Andersen
  */
-public class NamedSQLQuery {
+public class NamedSQLQuery implements Serializable {
 	
 	private String query;
 	private java.util.Map aliasedClasses;
diff -ur hibernate-2.1/src/net/sf/hibernate/mapping/PersistentClass.java hibernate-2.1-new/src/net/sf/hibernate/mapping/PersistentClass.java
--- hibernate-2.1/src/net/sf/hibernate/mapping/PersistentClass.java	Wed Feb  4 22:46:31 2004
+++ hibernate-2.1-new/src/net/sf/hibernate/mapping/PersistentClass.java	Wed Apr 21 15:51:39 2004
@@ -4,6 +4,7 @@
 import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.Map;
+import java.io.Serializable;
 
 import org.apache.commons.collections.SequencedHashMap;
 
@@ -18,7 +19,7 @@
  * Mapping for an entity class.
  * @author Gavin King
  */
-public abstract class PersistentClass {
+public abstract class PersistentClass implements Serializable {
 	
 	private static final Alias PK_ALIAS = new Alias(15, "PK");
 	
diff -ur hibernate-2.1/src/net/sf/hibernate/mapping/Property.java hibernate-2.1-new/src/net/sf/hibernate/mapping/Property.java
--- hibernate-2.1/src/net/sf/hibernate/mapping/Property.java	Wed Feb  4 22:46:32 2004
+++ hibernate-2.1-new/src/net/sf/hibernate/mapping/Property.java	Wed Apr 21 15:59:57 2004
@@ -2,6 +2,7 @@
 package net.sf.hibernate.mapping;
 
 import java.util.Iterator;
+import java.io.Serializable;
 
 import net.sf.hibernate.MappingException;
 import net.sf.hibernate.PropertyNotFoundException;
@@ -19,7 +20,7 @@
  * or component)
  * @author Gavin King
  */
-public class Property {
+public class Property implements Serializable {
 	
 	private String name;
 	private Value value;
diff -ur hibernate-2.1/src/net/sf/hibernate/mapping/RelationalModel.java hibernate-2.1-new/src/net/sf/hibernate/mapping/RelationalModel.java
--- hibernate-2.1/src/net/sf/hibernate/mapping/RelationalModel.java	Wed Feb  4 22:46:32 2004
+++ hibernate-2.1-new/src/net/sf/hibernate/mapping/RelationalModel.java	Wed Apr 21 15:58:32 2004
@@ -5,11 +5,13 @@
 import net.sf.hibernate.HibernateException;
 import net.sf.hibernate.dialect.Dialect;
 
+import java.io.Serializable;
+
 /**
  * A relational object which may be created using DDL
  * @author Gavin King
  */
-public interface RelationalModel {
+public interface RelationalModel extends Serializable {
 	public String sqlCreateString(Dialect dialect, Mapping p) throws HibernateException;
 	public String sqlDropString(Dialect dialect);
 }
diff -ur hibernate-2.1/src/net/sf/hibernate/mapping/Value.java hibernate-2.1-new/src/net/sf/hibernate/mapping/Value.java
--- hibernate-2.1/src/net/sf/hibernate/mapping/Value.java	Wed Feb  4 22:46:32 2004
+++ hibernate-2.1-new/src/net/sf/hibernate/mapping/Value.java	Wed Apr 21 15:58:24 2004
@@ -2,6 +2,7 @@
 package net.sf.hibernate.mapping;
 
 import java.util.Iterator;
+import java.io.Serializable;
 
 import net.sf.hibernate.MappingException;
 import net.sf.hibernate.engine.Mapping;
@@ -16,7 +17,7 @@
  * 
  * @author Gavin King
  */
-public interface Value {
+public interface Value extends Serializable {
 	public int getColumnSpan();
 	public Iterator getColumnIterator();
 	public Type getType();
@@ -28,4 +29,4 @@
 	public void createForeignKey();
 	public boolean isSimpleValue();
 	public boolean isValid(Mapping mapping) throws MappingException;
-}
\ No newline at end of file
+}
