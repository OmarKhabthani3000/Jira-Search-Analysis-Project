Index: ForeignGenerator.java
===================================================================
RCS file: /cvsroot/hibernate/Hibernate2/src/net/sf/hibernate/id/ForeignGenerator.java,v
retrieving revision 1.6
diff -u -r1.6 ForeignGenerator.java
--- ForeignGenerator.java	20 Jul 2003 03:10:13 -0000	1.6
+++ ForeignGenerator.java	3 Sep 2003 07:39:15 -0000
@@ -1,58 +1,60 @@
-package net.sf.hibernate.id;
-
-import java.io.Serializable;
-import java.sql.SQLException;
-import java.util.Properties;
-
-import net.sf.hibernate.HibernateException;
-import net.sf.hibernate.MappingException;
-import net.sf.hibernate.dialect.Dialect;
-import net.sf.hibernate.engine.SessionImplementor;
-import net.sf.hibernate.type.Type;
-
-/**
- * <b>foreign</b><br>
- * <br>
- * An <tt>Identifier</tt> generator that uses the value of the id property of an
- * associated object<br>
- * <br>
- * One mapping parameter is required: property.
- * 
- * @author Gavin King
- */
-public class ForeignGenerator implements IdentifierGenerator, Configurable {
-	
-	private String propertyName;
-	
-	/**
-	 * @see net.sf.hibernate.id.IdentifierGenerator#generate(net.sf.hibernate.engine.SessionImplementor, java.lang.Object)
-	 */
-	public Serializable generate(SessionImplementor session, Object object)
-		throws SQLException, HibernateException {
-		
-		Object associatedObject = session.getFactory()
-			.getClassMetadata( object.getClass() )
-			.getPropertyValue(object,  propertyName);		
-		//return session.getEntityIdentifierIfNotUnsaved(associatedObject);
-		Serializable id = session.save(associatedObject);
-		if ( session.contains(object) ) {
-			//abort the save (the object is already saved by a circular cascade)
-			return IdentifierGeneratorFactory.SHORT_CIRCUIT_INDICATOR; 
-			//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");
-		}
-		return id;
-	}
-
-	/**
-	 * @see net.sf.hibernate.id.Configurable#configure(net.sf.hibernate.type.Type, java.util.Properties, net.sf.hibernate.dialect.Dialect)
-	 */
-	public void configure(Type type, Properties params, Dialect d)
-		throws MappingException {
-		
-		propertyName = params.getProperty("property");
-		if (propertyName==null) throw new MappingException(
-			"param named \"property\" is required for foreign id generation strategy"
-		);
-	}
-
-}
+package net.sf.hibernate.id;
+
+import java.io.Serializable;
+import java.sql.SQLException;
+import java.util.Properties;
+
+import net.sf.hibernate.HibernateException;
+import net.sf.hibernate.MappingException;
+import net.sf.hibernate.dialect.Dialect;
+import net.sf.hibernate.engine.SessionImplementor;
+import net.sf.hibernate.type.Type;
+
+/**
+ * <b>foreign</b><br>
+ * <br>
+ * An <tt>Identifier</tt> generator that uses the value of the id property of an
+ * associated object<br>
+ * <br>
+ * One mapping parameter is required: property.
+ * 
+ * @author Gavin King
+ */
+public class ForeignGenerator implements IdentifierGenerator, Configurable {
+	
+	private String propertyName;
+	
+	/**
+	 * @see net.sf.hibernate.id.IdentifierGenerator#generate(net.sf.hibernate.engine.SessionImplementor, java.lang.Object)
+	 */
+	public Serializable generate(SessionImplementor session, Object object)
+		throws SQLException, HibernateException {
+		
+		Object associatedObject = session.getFactory()
+			.getClassMetadata( object.getClass() )
+			.getPropertyValue(object,  propertyName);		
+		//return session.getEntityIdentifierIfNotUnsaved(associatedObject);
+        if (associatedObject == null)
+            throw new NullPointerException("attempted to save with null one-to-one mapping "+propertyName);
+		Serializable id = session.save(associatedObject);
+		if ( session.contains(object) ) {
+			//abort the save (the object is already saved by a circular cascade)
+			return IdentifierGeneratorFactory.SHORT_CIRCUIT_INDICATOR; 
+			//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");
+		}
+		return id;
+	}
+
+	/**
+	 * @see net.sf.hibernate.id.Configurable#configure(net.sf.hibernate.type.Type, java.util.Properties, net.sf.hibernate.dialect.Dialect)
+	 */
+	public void configure(Type type, Properties params, Dialect d)
+		throws MappingException {
+		
+		propertyName = params.getProperty("property");
+		if (propertyName==null) throw new MappingException(
+			"param named \"property\" is required for foreign id generation strategy"
+		);
+	}
+
+}
