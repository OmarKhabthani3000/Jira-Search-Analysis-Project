diff -rc C:\java\hibernate-2.1beta2\src\net\sf\hibernate\hql\OrderByParser.java C:\java\hibernate-2.1beta2-rst\src\net\sf\hibernate\hql\OrderByParser.java
*** C:\java\hibernate-2.1beta2\src\net\sf\hibernate\hql\OrderByParser.java      Wed Aug 27 15:32:36 2003
--- C:\java\hibernate-2.1beta2-rst\src\net\sf\hibernate\hql\OrderByParser.java  Fri Aug 29 12:51:06 2003
***************
*** 31,36 ****
--- 31,40 ----
                        q.appendOrderByToken( pathExpressionParser.getWhereColumn() );
                        pathExpressionParser.addAssociation(q);
                }
+               else if ( token.startsWith(ParserHelper.HQL_VARIABLE_PREFIX) ) { //named query parameter
+                       q.addNamedParameter( token.substring(1) );
+                       q.appendOrderByToken("?");
+               }
                else {
                        q.appendOrderByToken(token);
                }
diff -rc C:\java\hibernate-2.1beta2\src\net\sf\hibernate\test\FooBarTest.java C:\java\hibernate-2.1beta2-rst\src\net\sf\hibernate\test\FooBarTest.java
*** C:\java\hibernate-2.1beta2\src\net\sf\hibernate\test\FooBarTest.java        Wed Aug 27 15:32:36 2003
--- C:\java\hibernate-2.1beta2-rst\src\net\sf\hibernate\test\FooBarTest.java    Fri Aug 29 12:59:11 2003
***************
*** 717,722 ****
--- 717,724 ----
                Bar bar2 = new Bar();
                bar.setName("Bar");
                bar2.setName("Bar Two");
+               bar.setX(10);
+               bar2.setX(1000);
                Baz baz = new Baz();
                baz.setCascadingBars( new HashSet() );
                baz.getCascadingBars().add(bar);
***************
*** 755,760 ****
--- 757,772 ----
                }
                list = q.list();
                assertTrue( list.size()==1 );
+
+               // This test added for issue HB-297 - there is an named parameter in the Order By clause
+               q = s.createQuery("select bar from Bar bar order by ((bar.x - :valueX)*(bar.x - :valueX))");
+               q.setInteger("valueX", bar.getX()+1);
+               list = q.list();
+               assertTrue( ((Bar)list.get(0)).getX() == bar.getX());
+               q.setInteger("valueX", bar2.getX()+1);
+               list = q.list();
+               assertTrue( ((Bar)list.get(0)).getX() == bar2.getX());
+
                s.delete(baz);
                s.delete(bar2);
                s.flush();
