Index: testsuite/src/test/java/org/hibernate/test/connections/StatementLeakTest.java
===================================================================
--- testsuite/src/test/java/org/hibernate/test/connections/StatementLeakTest.java	(revision 0)
+++ testsuite/src/test/java/org/hibernate/test/connections/StatementLeakTest.java	(revision 0)
@@ -0,0 +1,52 @@
+/*
+ * Copyright 2008 Entero Corporation. All Rights Reserved.
+ * www.entero.com
+ */
+package org.hibernate.test.connections;
+
+import org.hibernate.Session;
+import org.hibernate.junit.functional.FunctionalTestCase;
+
+import java.sql.Connection;
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+
+public class StatementLeakTest extends FunctionalTestCase {
+	public StatementLeakTest(String string) {
+		super(string);
+	}
+
+	public String[] getMappings() {
+		return new String[0];
+	}
+
+	public void testLeakCursors() throws Exception {
+		//the max number of cursors configured for your Hibernate environment
+		int maxNumberOfCursors = 500;
+		for (int i = 0; i < maxNumberOfCursors + 1; i++) {
+			Session session = openSession();
+			if (i % 100 == 0) {
+				System.out.println("Leaking the connections " + i);
+			}
+			session.beginTransaction();
+			PreparedStatement statement = null;
+			ResultSet rs = null;
+			try {
+				Connection connection = session.connection();
+				statement = connection.prepareStatement("select 1 from dual");
+				rs = statement.executeQuery();
+			}
+			finally {
+				if (rs != null) {
+					rs.close();
+				}
+				if (statement != null) {
+					//closing the statement allows the test to pass in 3.3 but is not required in 3.2.6
+//					statement.close();
+				}
+				session.getTransaction().commit();
+				session.close();
+			}
+		}
+	}
+}
