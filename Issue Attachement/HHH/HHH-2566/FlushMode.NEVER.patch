Index: D:/dev/workspace/hibernate3/eg/org/hibernate/auction/Main.java
===================================================================
--- D:/dev/workspace/hibernate3/eg/org/hibernate/auction/Main.java	(revision 11406)
+++ D:/dev/workspace/hibernate3/eg/org/hibernate/auction/Main.java	(working copy)
@@ -81,7 +81,7 @@
 		Session s = factory.openSession();
 		Transaction tx=null;
 		try {
-			s.setFlushMode(FlushMode.NEVER); //entirely optional!!
+			s.setFlushMode(FlushMode.MANUAL); //entirely optional!!
 			tx = s.beginTransaction();
 
 			List auctions = s.createQuery(
Index: D:/dev/workspace/hibernate3/src/org/hibernate/cfg/HbmBinder.java
===================================================================
--- D:/dev/workspace/hibernate3/src/org/hibernate/cfg/HbmBinder.java	(revision 11406)
+++ D:/dev/workspace/hibernate3/src/org/hibernate/cfg/HbmBinder.java	(working copy)
@@ -2540,9 +2540,6 @@
 		else if ( "commit".equals( flushMode ) ) {
 			return FlushMode.COMMIT;
 		}
-		else if ( "never".equals( flushMode ) ) {
-			return FlushMode.NEVER;
-		}
 		else if ( "manual".equals( flushMode ) ) {
 			return FlushMode.MANUAL;
 		}
Index: D:/dev/workspace/hibernate3/src/org/hibernate/FlushMode.java
===================================================================
--- D:/dev/workspace/hibernate3/src/org/hibernate/FlushMode.java	(revision 11406)
+++ D:/dev/workspace/hibernate3/src/org/hibernate/FlushMode.java	(working copy)
@@ -32,15 +32,6 @@
 	}
 
 	/**
-	 * The {@link Session} is never flushed unless {@link Session#flush}
-	 * is explicitly called by the application. This mode is very
-	 * efficient for read only transactions.
-	 *
-	 * @deprecated use {@link #MANUAL} instead.
-	 */
-	public static final FlushMode NEVER = new FlushMode( 0, "NEVER" );
-
-	/**
 	 * The {@link Session} is only ever flushed when {@link Session#flush}
 	 * is explicitly called by the application. This mode is very
 	 * efficient for read only transactions.
@@ -71,7 +62,6 @@
 	}
 
 	static {
-		INSTANCES.put( NEVER.name, NEVER );
 		INSTANCES.put( MANUAL.name, MANUAL );
 		INSTANCES.put( AUTO.name, AUTO );
 		INSTANCES.put( ALWAYS.name, ALWAYS );
Index: D:/dev/workspace/hibernate3/src/org/hibernate/Transaction.java
===================================================================
--- D:/dev/workspace/hibernate3/src/org/hibernate/Transaction.java	(revision 11406)
+++ D:/dev/workspace/hibernate3/src/org/hibernate/Transaction.java	(working copy)
@@ -32,7 +32,7 @@
 
 	/**
 	 * Flush the associated <tt>Session</tt> and end the unit of work (unless
-	 * we are in {@link FlushMode#NEVER}.
+	 * we are in {@link FlushMode#MANUAL}.
 	 * </p>
 	 * This method will commit the underlying transaction if and only
 	 * if the underlying transaction was initiated by this object.
Index: D:/dev/workspace/hibernate3/test/org/hibernate/test/legacy/FooBarTest.java
===================================================================
--- D:/dev/workspace/hibernate3/test/org/hibernate/test/legacy/FooBarTest.java	(revision 11406)
+++ D:/dev/workspace/hibernate3/test/org/hibernate/test/legacy/FooBarTest.java	(working copy)
@@ -4442,7 +4442,7 @@
 		s.connection().commit();
 		s.close();
 		s = openSession();
-		s.setFlushMode(FlushMode.NEVER);
+		s.setFlushMode(FlushMode.MANUAL);
 		l = (Location) s.find("from Location l where l.countryCode = 'AU' and l.description='foo bar'").get(0);
 		assertTrue( l.getCountryCode().equals("AU") );
 		assertTrue( l.getCity().equals("Melbourne") );
@@ -4758,7 +4758,7 @@
  		s.close();
 
  		s = openSession();
- 		s.setFlushMode(FlushMode.NEVER);
+ 		s.setFlushMode(FlushMode.MANUAL);
 		t = s.beginTransaction();
 		Foo foo = (Foo) s.get(Foo.class, id);
 		t.commit();
Index: D:/dev/workspace/hibernate3/test/org/hibernate/test/legacy/FumTest.java
===================================================================
--- D:/dev/workspace/hibernate3/test/org/hibernate/test/legacy/FumTest.java	(revision 11406)
+++ D:/dev/workspace/hibernate3/test/org/hibernate/test/legacy/FumTest.java	(working copy)
@@ -720,7 +720,7 @@
 		///////////////////////////////////////////////////////////////////////////
 		// Test insertions across serializations
 		Session s = getSessions().openSession();
-		s.setFlushMode(FlushMode.NEVER);
+		s.setFlushMode(FlushMode.MANUAL);
 
 		Simple simple = new Simple();
 		simple.setAddress("123 Main St. Anytown USA");
@@ -752,7 +752,7 @@
 		///////////////////////////////////////////////////////////////////////////
 		// Test updates across serializations
 		s = getSessions().openSession();
-		s.setFlushMode(FlushMode.NEVER);
+		s.setFlushMode(FlushMode.MANUAL);
 
 		simple = (Simple) s.get( Simple.class, new Long(10) );
 		assertTrue("Not same parent instances", check.getName().equals( simple.getName() ) );
@@ -774,7 +774,7 @@
 		///////////////////////////////////////////////////////////////////////////
 		// Test deletions across serializations
 		s = getSessions().openSession();
-		s.setFlushMode(FlushMode.NEVER);
+		s.setFlushMode(FlushMode.MANUAL);
 
 		simple = (Simple) s.get( Simple.class, new Long(10) );
 		assertTrue("Not same parent instances", check.getName().equals( simple.getName() ) );
@@ -796,7 +796,7 @@
 		///////////////////////////////////////////////////////////////////////////
 		// Test collection actions across serializations
 		s = getSessions().openSession();
-		s.setFlushMode(FlushMode.NEVER);
+		s.setFlushMode(FlushMode.MANUAL);
 
 		Fum fum = new Fum( fumKey("uss-fum") );
 		fum.setFo( new Fum( fumKey("uss-fo") ) );
@@ -825,7 +825,7 @@
 		s.close();
 
 		s = getSessions().openSession();
-		s.setFlushMode(FlushMode.NEVER);
+		s.setFlushMode(FlushMode.MANUAL);
 		fum = (Fum) s.load( Fum.class, fum.getId() );
 
 		assertTrue("the Fum.friends did not get saved", fum.getFriends().size() == 2);
@@ -843,7 +843,7 @@
 		s.close();
 
 		s = getSessions().openSession();
-		s.setFlushMode(FlushMode.NEVER);
+		s.setFlushMode(FlushMode.MANUAL);
 		fum = (Fum) s.load( Fum.class, fum.getId() );
 		assertTrue("the Fum.friends is not empty", fum.getFriends() == null || fum.getFriends().size() == 0);
 		s.connection().commit();
Index: D:/dev/workspace/hibernate3/test/org/hibernate/test/proxy/ProxyTest.java
===================================================================
--- D:/dev/workspace/hibernate3/test/org/hibernate/test/proxy/ProxyTest.java	(revision 11406)
+++ D:/dev/workspace/hibernate3/test/org/hibernate/test/proxy/ProxyTest.java	(working copy)
@@ -325,7 +325,7 @@
 		s.close();
 
 		s = openSession();
-		s.setFlushMode( FlushMode.NEVER );
+		s.setFlushMode( FlushMode.MANUAL );
 		t = s.beginTransaction();
 		// load the last container as a proxy
 		Container proxy = ( Container ) s.load( Container.class, lastContainerId );
