Index: src/test/java/org/hibernate/ejb/test/metadata/MetadataTest.java
===================================================================
--- src/test/java/org/hibernate/ejb/test/metadata/MetadataTest.java	(revision 19206)
+++ src/test/java/org/hibernate/ejb/test/metadata/MetadataTest.java	(working copy)
@@ -345,7 +345,8 @@
 				Flower.class,
 				JoinedManyToOneOwner.class,
 				Parent.class,
-				Child.class
+				Child.class,
+				WithGenericCollection.class
 		};
 	}
 
Index: src/test/java/org/hibernate/ejb/test/metadata/WithGenericCollection.java
===================================================================
--- src/test/java/org/hibernate/ejb/test/metadata/WithGenericCollection.java	(revision 0)
+++ src/test/java/org/hibernate/ejb/test/metadata/WithGenericCollection.java	(revision 0)
@@ -0,0 +1,86 @@
+/*
+* Hibernate, Relational Persistence for Idiomatic Java
+*
+* Copyright (c) 2009, Red Hat Inc. or third-party contributors as
+* indicated by the @author tags or express copyright attribution
+* statements applied by the authors.  All third-party contributions are
+* distributed under license by Red Hat Inc.
+*
+* This copyrighted material is made available to anyone wishing to use, modify,
+* copy, or redistribute it subject to the terms and conditions of the GNU
+* Lesser General Public License, as published by the Free Software Foundation.
+*
+* This program is distributed in the hope that it will be useful,
+* but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
+* or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
+* for more details.
+*
+* You should have received a copy of the GNU Lesser General Public License
+* along with this distribution; if not, write to:
+* Free Software Foundation, Inc.
+* 51 Franklin Street, Fifth Floor
+* Boston, MA  02110-1301  USA
+*/
+package org.hibernate.ejb.test.metadata;
+
+import java.util.Collection;
+import java.util.List;
+import java.util.ArrayList;
+import javax.persistence.*;
+
+/**
+* This class has a List of mapped entity objects that are themselves parameterized.
+* This class was added for JIRA issue #HHH-
+*
+* @author Kahli Burke
+*/
+@Entity
+@Table(name = "WITH_GENERIC_COLLECTION")
+public class WithGenericCollection<T> implements java.io.Serializable {
+    @Id
+    @Column(name = "ID")
+    private String id;
+
+    @Basic(optional=false)
+    private double d;
+
+    @ManyToOne(optional=false)
+    @JoinColumn(name="PARENT_ID", insertable=false, updatable=false)
+    private WithGenericCollection<? extends Object> parent = null;
+
+    @OneToMany(cascade = CascadeType.ALL)
+    @JoinColumn(name="PARENT_ID")
+    private List<WithGenericCollection<? extends Object>> children = new ArrayList<WithGenericCollection<? extends Object>>();
+
+    public WithGenericCollection() {
+    }
+
+    //====================================================================
+    // getters and setters for State fields
+
+    public String getId() {
+        return id;
+    }
+
+    public void setId(String id) {
+        this.id = id;
+    }
+
+    public void setD(double d) {
+        this.d = d;
+    }
+
+    public double getD() {
+        return d;
+    }
+
+    public List<WithGenericCollection<? extends Object>> getChildren() {
+        return children;
+    }
+
+    public void setChildren(List<WithGenericCollection<? extends Object>> children) {
+        this.children = children;
+    }
+
+
+}
\ No newline at end of file
Index: src/main/java/org/hibernate/ejb/metamodel/AttributeFactory.java
===================================================================
--- src/main/java/org/hibernate/ejb/metamodel/AttributeFactory.java	(revision 19206)
+++ src/main/java/org/hibernate/ejb/metamodel/AttributeFactory.java	(working copy)
@@ -832,6 +832,10 @@
 				final java.lang.reflect.Type upperBound = ( ( TypeVariable ) unsafeElementType ).getBounds()[0];
 				javaType = getClassFromGenericArgument( upperBound );
 			}
+			else if ( unsafeElementType instanceof ParameterizedType ) {
+				final java.lang.reflect.Type rawType = ( ( ParameterizedType ) unsafeElementType ).getRawType();
+				javaType = getClassFromGenericArgument( rawType );
+			}
 			else {
 				throw new AssertionFailure("Fail to process type argument in a generic declaration. Type: "
 						+ type.getClass() );
