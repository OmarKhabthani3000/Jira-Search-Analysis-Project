Index: test/org/hibernate/test/reattachment/ProxyReattachmentTest.java
===================================================================
--- test/org/hibernate/test/reattachment/ProxyReattachmentTest.java	(revision 12774)
+++ test/org/hibernate/test/reattachment/ProxyReattachmentTest.java	(working copy)
@@ -6,6 +6,11 @@
 import org.hibernate.junit.functional.FunctionalTestClassTestSuite;
 import org.hibernate.Session;
 
+import java.util.Set;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.Collections;
+
 /**
  * Test of proxy reattachment semantics
  *
@@ -73,4 +78,69 @@
 		s.getTransaction().commit();
 		s.close();
 	}
+
+	public void testIterateWithClear() {
+		Session s = openSession();
+		s.beginTransaction();
+		Set parents = new HashSet();
+		for (int i=0; i<10; i++) {
+			Parent p = new Parent( String.valueOf( i ) );
+			s.save( p );
+		}
+		s.getTransaction().commit();
+		s.close();
+
+		s = openSession();
+		s.beginTransaction();
+		int i = 0;
+		for (Iterator it = s.createQuery( "from Parent" ).iterate(); it.hasNext(); ) {
+			Parent p = (Parent) it.next();
+			p.getChildren();
+			i++;
+			if (i % 2 == 0) {
+				s.flush();
+				s.clear();
+			}
+		}
+		s.getTransaction().commit();
+		s.close();
+
+		s = openSession();
+		s.beginTransaction();
+		for (Iterator it=parents.iterator(); it.hasNext(); ) {
+			s.delete(it.next());
+		}
+		s.getTransaction().commit();
+		s.close();
+	}
+
+	public void testIterateWithEvict() {
+		Session s = openSession();
+		s.beginTransaction();
+		Set parents = new HashSet();
+		for (int i=0; i<10; i++) {
+			Parent p = new Parent( String.valueOf( i + 100 ) );
+			s.save( p );
+		}
+		s.getTransaction().commit();
+		s.close();
+
+		s = openSession();
+		s.beginTransaction();
+		for (Iterator it = s.createQuery( "from Parent" ).iterate(); it.hasNext(); ) {
+			Parent p = (Parent) it.next();
+			p.getChildren();
+			s.evict(p);
+		}
+		s.getTransaction().commit();
+		s.close();
+
+		s = openSession();
+		s.beginTransaction();
+		for (Iterator it=parents.iterator(); it.hasNext(); ) {
+			s.delete(it.next());
+		}
+		s.getTransaction().commit();
+		s.close();
+	}
 }
