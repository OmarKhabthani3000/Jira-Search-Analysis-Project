Index: documentation/manual/src/main/docbook/en-US/content/basic_mapping.xml
===================================================================
--- documentation/manual/src/main/docbook/en-US/content/basic_mapping.xml	(revision 17474)
+++ documentation/manual/src/main/docbook/en-US/content/basic_mapping.xml	(working copy)
@@ -2788,7 +2788,7 @@
 
         </sect2>
 
-        <sect2 id="mapping-column" revision="4">
+        <sect2 id="mapping-column" revision="5">
            <title>Column and formula elements</title>
            <para>
                Mapping elements which accept a <literal>column</literal> attribute will alternatively
@@ -2807,12 +2807,22 @@
         index="index_name"
         sql-type="sql_type_name"
         check="SQL expression"
-        default="SQL expression"/>]]></programlisting>
+        default="SQL expression"
+        read="SQL expression"
+        write="SQL expression"/>]]></programlisting>
 
             <programlisting><![CDATA[<formula>SQL expression</formula>]]></programlisting>
 
             <para>
-                <literal>column</literal> and <literal>formula</literal> attributes can even be combined
+                Most of the attributes on <literal>column</literal> provide a means of tailoring the
+                DDL during automatic schema generation. The <literal>read</literal> and <literal>write</literal>
+                attributes allow you to specify custom SQL that Hibernate will use to access the column's value.
+                For more on this, see the discussion of 
+                <link linkend="mapping-column-read-and-write">column read and write expressions</link>.
+            </para>
+
+            <para>
+                The <literal>column</literal> and <literal>formula</literal> elements can even be combined
                 within the same property or association mapping to express, for example, exotic join
                 conditions.
             </para>
@@ -3544,6 +3554,44 @@
 	    </para>
     </sect1>
 
+    <sect1 id="mapping-column-read-and-write" revision="1">
+        <title>Column read and write expressions</title>
+        <para>
+            Hibernate allows you to customize the SQL it uses to read and write the values
+            of columns mapped to <link linkend="mapping-declaration-property">simple properties</link>.
+            For example, if your database provides a set of data encryption functions, you can
+            invoke them for individual columns like this:
+            <programlisting><![CDATA[<property name="creditCardNumber">
+        <column 
+          name="credit_card_num"
+          read="decrypt(credit_card_num)"
+          write="encrypt(?)"/>
+</property>]]></programlisting>
+        </para>
+        <para>
+            Hibernate applies the custom expressions automatically whenever the property is
+            referenced in a query. This functionality is similar to a derived-property
+            <literal>formula</literal> with two differences:
+            <itemizedlist spacing="compact">
+                <listitem>
+                    <para>
+                        The property is backed by one or more columns that are exported as part of automatic
+                        schema generation.
+                    </para>
+                </listitem>
+                <listitem>
+                    <para>
+                        The property is read-write, not read-only.
+                    </para>
+                </listitem>
+            </itemizedlist>
+        </para>
+        <para>
+            The <literal>write</literal> expression, if specified, must contain exactly one '?' placeholder
+            for the value.
+        </para>
+    </sect1>
+
     <sect1 id="mapping-database-object">
         <title>Auxiliary database objects</title>
         <para>
Index: documentation/manual/src/main/docbook/en-US/content/query_sql.xml
===================================================================
--- documentation/manual/src/main/docbook/en-US/content/query_sql.xml	(revision 17474)
+++ documentation/manual/src/main/docbook/en-US/content/query_sql.xml	(working copy)
@@ -662,10 +662,15 @@
   <sect1 id="querysql-cud">
     <title>Custom SQL for create, update and delete</title>
 
-    <para>Hibernate3 can use custom SQL statements for create, update, and
-    delete operations. The class and collection persisters in Hibernate
-    already contain a set of configuration time generated strings (insertsql,
-    deletesql, updatesql etc.). The mapping tags
+    <para>Hibernate3 can use custom SQL for create, update, and delete operations.
+    The SQL can be overridden at the statement level or inidividual column level. This
+    section describes statement overrides. For columns, see
+    <xref linkend="mapping-column-read-and-write"/>.
+    </para>
+    <para>
+    The class and collection persisters in Hibernate already contain a set of 
+    configuration time generated strings (insertsql, deletesql, updatesql etc.). 
+    The mapping tags
     <literal>&lt;sql-insert&gt;</literal>,
     <literal>&lt;sql-delete&gt;</literal>, and
     <literal>&lt;sql-update&gt;</literal> override these strings:</para>
@@ -732,7 +737,11 @@
     <title>Custom SQL for loading</title>
 
     <para>You can also declare your own SQL (or HQL) queries for entity
-    loading:</para>
+    loading. As with inserts, updates, and deletes, this can be done at the
+    individual column level as described in
+    <xref linkend="mapping-column-read-and-write"/>
+    or at the statement level. Here is an example of a statement level override:
+    </para>
 
     <programlisting><![CDATA[<sql-query name="person">
     <return alias="pers" class="Person" lock-mode="upgrade"/>
