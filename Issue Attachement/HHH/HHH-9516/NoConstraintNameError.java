package org.hibernate.demo;

import java.io.File;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;

import org.hibernate.dialect.DerbyTenSevenDialect;
import org.hibernate.exception.spi.ViolatedConstraintNameExtracter;

public class NoConstraintNameError {
	private static final String[] statements = new String[]{
		"create table Application (id bigint generated by default as identity, name varchar(255), shortName varchar(32), userId varchar(32), primary key (id))",
		"create unique index UK_APPLICATION_SHORTNAME on Application (shortName)",
		"create unique index UK_APPLICATION_NAME on Application (name)",
		"insert into Application (name, shortName, userId) VALUES ('fooApp', 'Foo Application 0', 'me')",
		"insert into Application (name, shortName, userId) VALUES ('fooApp', 'Foo Application 1', 'me')"
	};
	public static void main(String[] args) throws Exception {
		String tmpDirPath = System.getProperty("java.io.tmpdir");
		if (args != null  &&  args.length > 0) {
			tmpDirPath = args[0];
		}
		final File dbDir = new File(tmpDirPath, "NoConstraintNameErr");
		remove(dbDir);
		System.err.print("Db Directory = " + tmpDirPath);
		DriverManager.registerDriver(new org.apache.derby.jdbc.EmbeddedDriver());
		Connection conn = DriverManager.getConnection("jdbc:derby:" + dbDir.getPath() + "/derbydb;create=true", "sa", "sa");
		PreparedStatement stmt = null;
		Throwable th = null;
		try {
			System.err.println("Connection = " + tmpDirPath);
			for (String s : statements) {
				stmt = conn.prepareStatement(s);
				System.err.println("Executing Statement: " + s);
				stmt.executeUpdate();
			}
		} catch (Throwable t) {
			th = t;
		}
		if (th == null) {
			throw new NullPointerException("Expected exception, because constraint UK_APPLICATION_NAME was violated.");
		}
		final DerbyTenSevenDialect dialect = new DerbyTenSevenDialect();
		final ViolatedConstraintNameExtracter extractor = dialect.getViolatedConstraintNameExtracter();
		System.err.println("Got extractor " + extractor + " for exception: " + th.getMessage());
		final String constraintName = extractor.extractConstraintName((SQLException) th);
		System.err.println("Got constraintName = " + constraintName + " for exception: " + th.getMessage());
		
		conn.close();
	}

	private static void remove(File pDbDir) {
		if (pDbDir.exists()) {
			if (pDbDir.isDirectory()) {
				final File[] files = pDbDir.listFiles();
				for (File f : files) {
					remove(f);
				}
			}
			if (!pDbDir.delete()) {
				throw new IllegalStateException("Unable to delete: " + pDbDir.getAbsolutePath());
			}
		}
	}

}
