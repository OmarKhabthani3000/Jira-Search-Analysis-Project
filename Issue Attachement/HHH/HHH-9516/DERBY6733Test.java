import java.lang.reflect.UndeclaredThrowableException;
import java.sql.*;

import org.apache.derby.shared.common.error.DerbySQLIntegrityConstraintViolationException;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

/** 
 * Client template starts its own NetworkServer and runs some SQL against it. 
 * The SQL or JDBC API calls can be modified to reproduce issues 
 * 
 */
public class DERBY6733Test {
	private interface ConnRunnable {
		public void run(Connection pConnection);
	}
	private static final String JDBC_URL = "jdbc:derby:memory:DERBY6773DB";
	private static final String JDBC_USER = "sa";
	private static final String JDBC_PWD = "sa";
	private static final String[] statements = new String[]{
			"create table Application (id bigint generated by default as identity, name varchar(255), shortName varchar(32), userId varchar(32), primary key (id))",
			"create unique index UK_APPLICATION_SHORTNAME on Application (shortName)",
			"create unique index UK_APPLICATION_NAME on Application (name)",
			"insert into Application (name, shortName, userId) VALUES ('fooApp', 'Foo Application 0', 'me')",
			"insert into Application (name, shortName, userId) VALUES ('fooApp', 'Foo Application 1', 'me')"
		};
	private static boolean dbCreated = false;

	@BeforeClass
	public static void createDb() throws Exception {
        Class.forName("org.apache.derby.jdbc.EmbeddedDriver");
        runWithDb(JDBC_URL + ";create=true", null);
        dbCreated = true;
	}
	
	@Test
	public void testUniqueIndexConstraintName() throws Exception {
		final ConnRunnable runnable = new ConnRunnable(){
			public void run(Connection pConnection) {
				PreparedStatement stmt = null;
				try {
					for (String s : statements) {
						stmt = pConnection.prepareStatement(s);
						System.err.println("Executing Statement: " + s);
						try {
							stmt.executeUpdate();
						} catch (DerbySQLIntegrityConstraintViolationException e) {
							final String constraintName = e.getConstraintName();
							if (constraintName == null
									||  (!"UK_APPLICATION_NAME".equals(constraintName)
										 &&  !"UK_APPLICATION_SHORTNAME".equals(constraintName))) {
								throw e;
							}
						}
					}
				} catch (Throwable t) {
					t.printStackTrace();
				}
			}
		};
		runWithDb(JDBC_URL, runnable);
    }

	@AfterClass
	public static void shutdownDB() throws Exception {
		if (dbCreated) {
			runWithDb(JDBC_URL + ";shutdown=true", null);
		}
	}

    private static void runWithDb(String pJdbcUrl, ConnRunnable pRunnable) throws SQLException {
        Connection conn = null;
        Exception ex = null;
        try {
        	conn = DriverManager.getConnection(pJdbcUrl, JDBC_USER, JDBC_PWD);
        	if (pRunnable != null) {
        		pRunnable.run(conn);
        	}
        	conn.close();
        	conn = null;
        } catch (Exception e) {
        	ex = e;
        } finally {
        	if (conn != null) {
        		try {
        			conn.close();
        		} catch (Exception e) {
        			if (ex == null) {
        				e = ex;
        			}
        		}
        	}
        }
        if (ex != null) {
        	if (ex instanceof SQLException) {
        		throw (SQLException) ex;
        	}
        	if (ex instanceof RuntimeException) {
        		throw (RuntimeException) ex;
        	}
        	throw new UndeclaredThrowableException(ex);
        }
    }
}