Index: src/org/hibernate/hibernate-mapping-3.0.dtd
===================================================================
RCS file: /cvsroot/hibernate/Hibernate3/src/org/hibernate/hibernate-mapping-3.0.dtd,v
retrieving revision 1.51
diff -u -r1.51 hibernate-mapping-3.0.dtd
--- src/org/hibernate/hibernate-mapping-3.0.dtd 10 Jan 2005 01:08:38 -0000      1.51
+++ src/org/hibernate/hibernate-mapping-3.0.dtd 21 Jan 2005 00:48:20 -0000
@@ -791,7 +791,8 @@
        <!ATTLIST return class CDATA #IMPLIED>
        <!ATTLIST return collection CDATA #IMPLIED>
        <!ATTLIST return role CDATA #IMPLIED>
        <!ATTLIST return lock-mode (none|read|upgrade|upgrade-nowait|write) "read"> 
+       <!ATTLIST return type CDATA #IMPLIED>
 
 <!ELEMENT synchronize EMPTY>
        <!ATTLIST synchronize table CDATA #REQUIRED>
        
        
Index: src/org/hibernate/cfg/HbmBinder.java
===================================================================
RCS file: /cvsroot/hibernate/Hibernate3/src/org/hibernate/cfg/HbmBinder.java,v
retrieving revision 1.33
diff -u -r1.33 HbmBinder.java
--- src/org/hibernate/cfg/HbmBinder.java        13 Jan 2005 15:55:53 -0000      1.33
+++ src/org/hibernate/cfg/HbmBinder.java        21 Jan 2005 00:48:22 -0000
@@ -18,6 +18,7 @@
 import org.hibernate.engine.SQLQueryReturn;
 import org.hibernate.engine.SQLQueryRoleReturn;
 import org.hibernate.engine.SQLQueryRootReturn;
+import org.hibernate.engine.SQLQueryTypeReturn;
 import org.hibernate.engine.Versioning;
 import org.hibernate.id.PersistentIdentifierGenerator;
 import org.hibernate.mapping.Any;
@@ -1917,6 +1918,7 @@
                        String classAttribute = getClassName( returnElem.attribute( "class" ), mappings );
                        String roleAttribute = returnElem.attributeValue( "role" );
                        String collectionAttribute = returnElem.attributeValue( "collection" );
+                       String typeAttribute = returnElem.attributeValue("type");
                        LockMode lockMode = getLockMode( returnElem.attributeValue( "lock-mode" ) );
 
                        if ( StringHelper.isNotEmpty( classAttribute ) ) {
@@ -1930,6 +1932,13 @@
                                }
                                queryReturns.add( new SQLQueryRootReturn( alias, clazz, lockMode ) );
                        }
+                       else if ( StringHelper.isNotEmpty( typeAttribute ) ) {
+                               Type type = TypeFactory.heuristicType( typeAttribute );
+                               if (type == null) {
+                                       throw new MappingException( "could not determine type " + type );
+                               }
+                               queryReturns.add( new SQLQueryTypeReturn( alias, type, lockMode ) );
+                       }
                        else if ( StringHelper.isNotEmpty( roleAttribute ) ) {
                                int dot = roleAttribute.lastIndexOf( '.' );
                                if ( dot == -1 ) {
                                
                                
Index: src/org/hibernate/loader/SQLLoader.java
===================================================================
RCS file: /cvsroot/hibernate/Hibernate3/src/org/hibernate/loader/SQLLoader.java,v
retrieving revision 1.27
diff -u -r1.27 SQLLoader.java
--- src/org/hibernate/loader/SQLLoader.java     22 Dec 2004 18:11:31 -0000      1.27
+++ src/org/hibernate/loader/SQLLoader.java     21 Jan 2005 00:48:24 -0000
@@ -6,6 +6,7 @@
 import java.sql.SQLException;
 import java.util.ArrayList;
 import java.util.Collection;
+import java.util.HashMap;
 import java.util.HashSet;
 import java.util.Iterator;
 import java.util.List;
@@ -20,6 +21,7 @@
 import org.hibernate.collection.QueryableCollection;
 import org.hibernate.engine.QueryParameters;
 import org.hibernate.engine.SQLQueryReturn;
+import org.hibernate.engine.SQLQueryTypeReturn;
 import org.hibernate.engine.SessionFactoryImplementor;
 import org.hibernate.engine.SessionImplementor;
 import org.hibernate.engine.TypedValue;
@@ -40,6 +42,7 @@
        private final String sql;
 
        private final String[] aliases;
+       private final String[] typeAndOtherAliases;
        private final SQLLoadable[] entityPersisters;
        private final int[] owners;
        private final LockMode[] lockModeArray;
@@ -50,6 +53,8 @@
        private final Set querySpaces = new HashSet();
        private final Type[] resultTypes;
        private final String[] suffixes;
+       
+       private final Map aliasesToTypes;
 
        private final Map namedParameters;
 
@@ -105,7 +110,9 @@
                collectionOwner = processor.getCollectionOwner();
                collectionPersister = processor.getCollectionPersister();
                aliases = ArrayHelper.toStringArray( processor.getAliases() );
+               typeAndOtherAliases = ArrayHelper.toStringArray( processor.getTypeAndOtherAliases() );
                entityPersisters = (SQLLoadable[]) processor.getPersisters().toArray( new SQLLoadable[0] );
+               aliasesToTypes = processor.getTypeAliasesToTypes();
         lockModeArray = (LockMode[]) processor.getLockModes().toArray( new LockMode[0] );
 
                suffixes = generateSuffixes(entityPersisters.length);
@@ -114,7 +121,8 @@
                                sqlQuery, 
                                processor.getAlias2Persister(), 
                                aliases, 
-                               processor.getCollectionAlias(),
+                               processor.getCollectionAlias(),                         
+                               aliasesToTypes,
                                collectionPersister,
                                suffixes
                );
@@ -170,12 +178,18 @@
 
        protected Object getResultColumnOrRow(Object[] row, ResultSet rs, SessionImplementor session) 
        throws SQLException, HibernateException {
-               if (entityPersisters.length == 1) {
-                       return row[row.length - 1];
-               }
-               else {
-                       return row;
+               Object[] resultRow = new Object[typeAndOtherAliases.length];
+               int entityPos = 0;
+               for (int i = 0; i < typeAndOtherAliases.length; i++) {
+                       if (aliasesToTypes.containsKey(typeAndOtherAliases[i])) {
+                               Type type = (Type) aliasesToTypes.get(typeAndOtherAliases[i]);
+                               Object result = type.nullSafeGet(rs, typeAndOtherAliases[i], session, null);
+                               resultRow[i] = result;
+                       } else {
+                               resultRow[i] = row[entityPos++];
+                       }
                }
+               return resultRow.length == 1 ? resultRow[0] : resultRow;                
        }
 
        protected int[] getNamedParameterLocs(String name) throws QueryException {
        
        
Index: src/org/hibernate/loader/SQLQueryParser.java
===================================================================
RCS file: /cvsroot/hibernate/Hibernate3/src/org/hibernate/loader/SQLQueryParser.java,v
retrieving revision 1.1
diff -u -r1.1 SQLQueryParser.java
--- src/org/hibernate/loader/SQLQueryParser.java        22 Dec 2004 18:11:31 -0000      1.1
+++ src/org/hibernate/loader/SQLQueryParser.java        21 Jan 2005 00:48:24 -0000
@@ -26,12 +26,14 @@
 
        private int parameterCount = 0;
        private final Map namedParameters = new HashMap();
+       private Map typeAliasesToTypes;
        
        public SQLQueryParser(
                        String sqlQuery,
                        Map alias2Persister,
                        String[] aliases,
                        String collectionAlias,
+                       Map typeAliasesToTypes,
                        QueryableCollection collectionPersister,
                        String[] suffixes
        ) {
@@ -41,6 +43,7 @@
                this.collectionPersister = collectionPersister;
                this.suffixes = suffixes;
                this.aliases = aliases;
+               this.typeAliasesToTypes = typeAliasesToTypes;
        }
        
        private SQLLoadable getPersisterByResultAlias(String aliasName) {
@@ -89,6 +92,9 @@
                                if ( getPersisterByResultAlias(aliasPath)!=null ) {
                                        // it is a simple table alias {foo}
                                        result.append(aliasPath);
+                               } 
+                               else if (typeAliasesToTypes.containsKey(aliasPath)) {
+                                       result.append(aliasPath);
                                }
                                else {
                                        // passing through anything we do not know to support jdbc escape sequences HB-898
                                        
                                        
Index: src/org/hibernate/loader/SQLQueryReturnProcessor.java
===================================================================
RCS file: /cvsroot/hibernate/Hibernate3/src/org/hibernate/loader/SQLQueryReturnProcessor.java,v
retrieving revision 1.1
diff -u -r1.1 SQLQueryReturnProcessor.java
--- src/org/hibernate/loader/SQLQueryReturnProcessor.java       22 Dec 2004 18:11:31 -0000      1.1
+++ src/org/hibernate/loader/SQLQueryReturnProcessor.java       21 Jan 2005 00:48:25 -0000
@@ -13,6 +13,7 @@
 import org.hibernate.engine.SQLQueryReturn;
 import org.hibernate.engine.SQLQueryRoleReturn;
 import org.hibernate.engine.SQLQueryRootReturn;
+import org.hibernate.engine.SQLQueryTypeReturn;
 import org.hibernate.engine.SessionFactoryImplementor;
 import org.hibernate.persister.EntityPersister;
 import org.hibernate.persister.SQLLoadable;
@@ -28,11 +29,13 @@
        private SQLQueryReturn[] queryReturns;
 
        private final List aliases = new ArrayList();
+       private final List typeAndOtherAliases = new ArrayList();
        private final List persisters = new ArrayList();
        private final List lockModes = new ArrayList();
        private final Map alias2Persister = new HashMap();
        private final Map alias2Return = new HashMap();
        private final Map alias2OwnerAlias = new HashMap();
+       private final Map typeAliasesToTypes = new HashMap();
 
        private final SessionFactoryImplementor factory;
 
@@ -88,10 +91,18 @@
                else if (rtn instanceof SQLQueryCollectionReturn) {
                        processCollectionReturn( (SQLQueryCollectionReturn) rtn );
                }
+               else if (rtn instanceof SQLQueryTypeReturn) {
+                       processTypeReturn( (SQLQueryTypeReturn) rtn );
+               }
                else {
                        processRoleReturn( (SQLQueryRoleReturn) rtn );
                }
        }
+       
+       private void processTypeReturn(SQLQueryTypeReturn typeReturn) {
+               typeAndOtherAliases.add(typeReturn.getAlias());
+               typeAliasesToTypes.put(typeReturn.getAlias(), typeReturn.getType());
+       }
 
        private void processRootReturn(SQLQueryRootReturn rootReturn) {
                if ( alias2Persister.containsKey( rootReturn.getAlias() ) ) {
@@ -101,6 +112,7 @@
 
                SQLLoadable persister = getSQLLoadable( rootReturn.getReturnClass().getName() );
                aliases.add( rootReturn.getAlias() );
+               typeAndOtherAliases.add( rootReturn.getAlias() );
                persisters.add(persister);
                alias2Persister.put( rootReturn.getAlias(), persister );
                lockModes.add( rootReturn.getLockMode() );
@@ -155,6 +167,7 @@
                        String returnEntityName = ( (AssociationType) returnType ).getAssociatedEntityName( getFactory() );
                        SQLLoadable persister = getSQLLoadable(returnEntityName);
                        aliases.add( roleReturn.getAlias() );
+                       typeAndOtherAliases.add( roleReturn.getAlias() );
                        persisters.add(persister);
                        lockModes.add( roleReturn.getLockMode() );
                        alias2Persister.put( roleReturn.getAlias(), persister );
@@ -163,6 +176,7 @@
                        String returnEntityName = ( (EntityType) returnType ).getAssociatedEntityName();
                        SQLLoadable persister = (SQLLoadable) getFactory().getEntityPersister(returnEntityName);
                        aliases.add( roleReturn.getAlias() );
+                       typeAndOtherAliases.add( roleReturn.getAlias() );
                        persisters.add(persister);
                        lockModes.add( roleReturn.getLockMode() );
                        alias2Persister.put( roleReturn.getAlias(), persister );
@@ -208,4 +222,10 @@
        public Map getAlias2OwnerAlias() {
                return alias2OwnerAlias;
        }
+       public Map getTypeAliasesToTypes() {
+               return typeAliasesToTypes;
+       }
+       public List getTypeAndOtherAliases() {
+               return typeAndOtherAliases;
+       }
 }
 
 
Index: test/org/hibernate/test/sql/Employment.hbm.xml
===================================================================
RCS file: /cvsroot/hibernate/Hibernate3/test/org/hibernate/test/sql/Employment.hbm.xml,v
retrieving revision 1.11
diff -u -r1.11 Employment.hbm.xml
--- test/org/hibernate/test/sql/Employment.hbm.xml      27 Sep 2004 10:18:14 -0000      1.11
+++ test/org/hibernate/test/sql/Employment.hbm.xml      21 Jan 2005 00:48:26 -0000
@@ -90,7 +90,36 @@
                FROM ORGANIZATION org
                INNER JOIN EMPLOYMENT e ON e.EMPLOYER = org.ID
        </sql-query>
+       
+       <sql-query name="orgNamesOnly">
+               <return alias="name" type="string"/>
+               SELECT org.NAME AS {name} FROM ORGANIZATION org
+       </sql-query>    
+       
+       <sql-query name="orgNamesAndOrgs">
+               <return alias="thename" type="string"/>
+               <return alias="org" class="Organization"/>
+               SELECT org.NAME AS {thename} , org.NAME AS {org.name}, org.ID AS {org.id} 
+               FROM ORGANIZATION org
+               ORDER BY {thename}
+       </sql-query>
+       
+       <sql-query name="orgsAndOrgNames">
+               <return alias="org" class="Organization"/>
+               <return alias="thename" type="string"/>
+               SELECT org.NAME AS {thename} , org.NAME AS {org.name}, org.ID AS {org.id} 
+               FROM ORGANIZATION org
+               ORDER BY {thename}
+       </sql-query>    
 
+       <sql-query name="orgIdsAndOrgNames">
+               <return alias="orgid" type="long"/>
+               <return alias="thename" type="string"/>
+               SELECT org.NAME AS {thename} , org.ID AS {orgid} 
+               FROM ORGANIZATION org
+               ORDER BY {thename}
+       </sql-query>
+       
        <sql-query name="employment">
                <return alias="emp" class="Employment"/>
                SELECT EMPLOYEE AS {emp.employee}, EMPLOYER AS {emp.employer}, 
                
                
Index: test/org/hibernate/test/sql/SQLTest.java
===================================================================
RCS file: /cvsroot/hibernate/Hibernate3/test/org/hibernate/test/sql/SQLTest.java,v
retrieving revision 1.8
diff -u -r1.8 SQLTest.java
--- test/org/hibernate/test/sql/SQLTest.java    30 Sep 2004 16:46:29 -0000      1.8
+++ test/org/hibernate/test/sql/SQLTest.java    21 Jan 2005 00:48:26 -0000
@@ -4,6 +4,7 @@
 import java.io.Serializable;
 import java.util.Date;
 import java.util.Iterator;
+import java.util.List;
 
 import junit.framework.Test;
 import junit.framework.TestSuite;
@@ -23,7 +24,7 @@
        public SQLTest(String str) {
                super(str);
        }
-       
+               
        public void testHandSQL() {
                
                if ( getDialect() instanceof DB2Dialect ) return;
@@ -104,6 +105,68 @@
                s.close();
        }
 
+       public void testScalarValues() throws Exception {               
+               Session s = openSession();
+               Transaction t = s.beginTransaction();
+               
+               Organization ifa = new Organization("IFA");
+               Organization jboss = new Organization("JBoss");
+               
+               Serializable idIfa = s.save(ifa);
+               Serializable idJBoss = s.save(jboss);
+               
+               s.flush();
+               
+               List result = s.getNamedQuery("orgNamesOnly").list();
+               assertTrue(result.contains("IFA"));
+               assertTrue(result.contains("JBOSS"));
+               
+               t.commit();
+               s.close();              
+
+               s = openSession();
+               t = s.beginTransaction();
+               
+               Iterator iter = s.getNamedQuery("orgNamesAndOrgs").list().iterator();
+               Object[] o = (Object[]) iter.next();
+               assertEquals(o[0], "IFA");
+               assertEquals(((Organization)o[1]).getName(), "IFA"); 
+               o = (Object[]) iter.next();
+               assertEquals(o[0], "JBOSS");
+               assertEquals(((Organization)o[1]).getName(), "JBOSS");
+                               
+               t.commit();
+               s.close();
+
+               s = openSession();
+               t = s.beginTransaction();
+               
+               iter = s.getNamedQuery("orgsAndOrgNames").list().iterator();
+               o = (Object[]) iter.next();
+               assertEquals(o[1], "IFA");
+               assertEquals(((Organization)o[0]).getName(), "IFA");
+               o = (Object[]) iter.next();
+               assertEquals(o[1], "JBOSS");
+               assertEquals(((Organization)o[0]).getName(), "JBOSS");
+                               
+               t.commit();
+               s.close();
+               
+               s = openSession();
+               t = s.beginTransaction();
+               
+               iter = s.getNamedQuery("orgIdsAndOrgNames").list().iterator();
+               o = (Object[]) iter.next();
+               assertEquals(o[1], "IFA");
+               assertEquals(o[0], idIfa);
+               o = (Object[]) iter.next();
+               assertEquals(o[1], "JBOSS");
+               assertEquals(o[0], idJBoss);
+                               
+               t.commit();
+               s.close();
+       }
+       
        
        protected String[] getMappings() {
                return new String[] { "sql/Employment.hbm.xml" };
                
                
Index: src/org/hibernate/engine/SQLQueryTypeReturn.java
===================================================================
RCS file: src/org/hibernate/engine/SQLQueryTypeReturn.java
diff -N src/org/hibernate/engine/SQLQueryTypeReturn.java
--- /dev/null   1 Jan 1970 00:00:00 -0000
+++ src/org/hibernate/engine/SQLQueryTypeReturn.java    1 Jan 1970 00:00:00 -0000
@@ -0,0 +1,22 @@
+package org.hibernate.engine;
+
+import org.hibernate.LockMode;
+import org.hibernate.type.Type;
+
+/**
+ * @author gloegl
+ */
+public class SQLQueryTypeReturn extends SQLQueryReturn {
+
+       private Type type;
+       
+       public SQLQueryTypeReturn(String alias, Type type, LockMode lockMode) {
+               super(alias, lockMode);
+               this.type = type;
+       }
+       
+       public Type getType() {
+               return type;
+       }
+
+}
