--- //depot/ThirdParty/main/hibernate4/project/hibernate-core/src/main/java/org/hibernate/engine/spi/CascadingAction.java	2012-04-06 20:11:16.000000000 -0700
+++ c:\commander\ThirdParty\main\hibernate4\project\hibernate-core\src\main\java\org\hibernate\engine\spi\CascadingAction.java	2012-04-06 20:11:16.000000000 -0700
--- C:\cygwin\tmp\t16336t56.tmp	2012-06-26 18:32:18.089433000 -0700
+++ c:\commander\ThirdParty\main\hibernate4\project\hibernate-core\src\main\java\org\hibernate\engine\spi\CascadingAction.java	2012-06-26 18:22:49.920621800 -0700
@@ -62,20 +62,22 @@
 	/**
 	 * Cascade the action to the child object.
 	 *
-	 * @param session The session within which the cascade is occuring.
-	 * @param child The child to which cascading should be performed.
-	 * @param entityName The child's entity name
-	 * @param anything Anything ;)  Typically some form of cascade-local cache
-	 * which is specific to each CascadingAction type
-	 * @param isCascadeDeleteEnabled Are cascading deletes enabled.
-	 * @throws HibernateException
+	 *
+     * @param session The session within which the cascade is occuring.
+     * @param parent
+     *@param child The child to which cascading should be performed.
+     * @param entityName The child's entity name
+     * @param anything Anything ;)  Typically some form of cascade-local cache
+* which is specific to each CascadingAction type
+     * @param isCascadeDeleteEnabled Are cascading deletes enabled.     @throws HibernateException
 	 */
 	public abstract void cascade(
-			EventSource session,
-			Object child,
-			String entityName,
-			Object anything,
-			boolean isCascadeDeleteEnabled) throws HibernateException;
+            EventSource session,
+            Object parent,
+            Object child,
+            String entityName,
+            Object anything,
+            boolean isCascadeDeleteEnabled) throws HibernateException;
 
 	/**
 	 * Given a collection, get an iterator of the children upon which the
@@ -136,7 +138,7 @@
 	 */
 	public static final CascadingAction DELETE = new CascadingAction() {
 		@Override
-        public void cascade(EventSource session, Object child, String entityName, Object anything, boolean isCascadeDeleteEnabled)
+        public void cascade(EventSource session, Object parent, Object child, String entityName, Object anything, boolean isCascadeDeleteEnabled)
 		throws HibernateException {
 			LOG.tracev( "Cascading to delete: {0}", entityName );
 			session.delete( entityName, child, isCascadeDeleteEnabled, ( Set ) anything );
@@ -162,7 +164,7 @@
 	 */
 	public static final CascadingAction LOCK = new CascadingAction() {
 		@Override
-        public void cascade(EventSource session, Object child, String entityName, Object anything, boolean isCascadeDeleteEnabled)
+        public void cascade(EventSource session, Object parent, Object child, String entityName, Object anything, boolean isCascadeDeleteEnabled)
 		throws HibernateException {
 			LOG.tracev( "Cascading to lock: {0}", entityName );
 			LockMode lockMode = LockMode.NONE;
@@ -198,7 +200,7 @@
 	 */
 	public static final CascadingAction REFRESH = new CascadingAction() {
 		@Override
-        public void cascade(EventSource session, Object child, String entityName, Object anything, boolean isCascadeDeleteEnabled)
+        public void cascade(EventSource session, Object parent, Object child, String entityName, Object anything, boolean isCascadeDeleteEnabled)
 		throws HibernateException {
 			LOG.tracev( "Cascading to refresh: {0}", entityName );
 			session.refresh( child, (Map) anything );
@@ -223,7 +225,7 @@
 	 */
 	public static final CascadingAction EVICT = new CascadingAction() {
 		@Override
-        public void cascade(EventSource session, Object child, String entityName, Object anything, boolean isCascadeDeleteEnabled)
+        public void cascade(EventSource session, Object parent, Object child, String entityName, Object anything, boolean isCascadeDeleteEnabled)
 		throws HibernateException {
 			LOG.tracev( "Cascading to evict: {0}", entityName );
 			session.evict(child);
@@ -252,10 +254,11 @@
 	 */
 	public static final CascadingAction SAVE_UPDATE = new CascadingAction() {
 		@Override
-        public void cascade(EventSource session, Object child, String entityName, Object anything, boolean isCascadeDeleteEnabled)
+        public void cascade(EventSource session, Object parent, Object child, String entityName, Object anything, boolean isCascadeDeleteEnabled)
 		throws HibernateException {
 			LOG.tracev( "Cascading to save or update: {0}", entityName );
-			session.saveOrUpdate(entityName, child);
+            session.getPersistenceContext().addChildParent(child, parent);
+            session.saveOrUpdate(entityName, child);
 		}
 		@Override
         public Iterator getCascadableChildrenIterator(EventSource session, CollectionType collectionType, Object collection) {
@@ -282,7 +285,7 @@
 	 */
 	public static final CascadingAction MERGE = new CascadingAction() {
 		@Override
-        public void cascade(EventSource session, Object child, String entityName, Object anything, boolean isCascadeDeleteEnabled)
+        public void cascade(EventSource session, Object parent, Object child, String entityName, Object anything, boolean isCascadeDeleteEnabled)
 		throws HibernateException {
 			LOG.tracev( "Cascading to merge: {0}", entityName );
 			session.merge( entityName, child, (Map) anything );
@@ -309,7 +312,7 @@
 	 */
 	public static final CascadingAction PERSIST = new CascadingAction() {
 		@Override
-        public void cascade(EventSource session, Object child, String entityName, Object anything, boolean isCascadeDeleteEnabled)
+        public void cascade(EventSource session, Object parent, Object child, String entityName, Object anything, boolean isCascadeDeleteEnabled)
 		throws HibernateException {
 			LOG.tracev( "Cascading to persist: {0}" + entityName );
 			session.persist( entityName, child, (Map) anything );
@@ -340,7 +343,7 @@
 	 */
 	public static final CascadingAction PERSIST_ON_FLUSH = new CascadingAction() {
 		@Override
-        public void cascade(EventSource session, Object child, String entityName, Object anything, boolean isCascadeDeleteEnabled)
+        public void cascade(EventSource session, Object parent, Object child, String entityName, Object anything, boolean isCascadeDeleteEnabled)
 		throws HibernateException {
 			LOG.tracev( "Cascading to persist on flush: {0}", entityName );
 			session.persistOnFlush( entityName, child, (Map) anything );
@@ -413,7 +416,7 @@
 	 */
 	public static final CascadingAction REPLICATE = new CascadingAction() {
 		@Override
-        public void cascade(EventSource session, Object child, String entityName, Object anything, boolean isCascadeDeleteEnabled)
+        public void cascade(EventSource session, Object parent, Object child, String entityName, Object anything, boolean isCascadeDeleteEnabled)
 		throws HibernateException {
 			LOG.tracev( "Cascading to replicate: {0}", entityName );
 			session.replicate( entityName, child, (ReplicationMode) anything );
