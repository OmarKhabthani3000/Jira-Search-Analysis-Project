Index: src/test/java/org/hibernate/test/hql/HqlParserTest.java
===================================================================
--- src/test/java/org/hibernate/test/hql/HqlParserTest.java	(revision 18126)
+++ src/test/java/org/hibernate/test/hql/HqlParserTest.java	(working copy)
@@ -4,6 +4,7 @@
 
 import java.io.ByteArrayOutputStream;
 import java.io.PrintStream;
+import java.util.Stack;
 
 import antlr.RecognitionException;
 import antlr.TokenStreamException;
@@ -12,6 +13,7 @@
 import junit.framework.TestCase;
 import junit.framework.TestSuite;
 
+import org.hibernate.hql.antlr.HqlTokenTypes;
 import org.hibernate.hql.ast.HqlParser;
 import org.hibernate.hql.ast.tree.Node;
 import org.hibernate.hql.ast.util.ASTIterator;
@@ -1053,6 +1055,49 @@
 		assertTrue(foundName);
 	}
 
+	public void testHHH1780() throws Exception
+    {
+        // verifies the tree contains a NOT->EXISTS subtree
+        class Verifier
+        {
+            public boolean verify(AST root)
+            {
+                Stack<AST> queue = new Stack<AST>();
+                queue.push(root);
+                while (!queue.isEmpty())
+                {
+                    AST parent = queue.pop();
+                    AST child = parent.getFirstChild();
+                    while (child != null)
+                    {
+                        if (parent.getType() == HqlTokenTypes.NOT &&
+                                child.getType() == HqlTokenTypes.EXISTS)
+                        {
+                            return true;
+                        }
+                        queue.push(child);
+                        child = child.getNextSibling();
+                    }
+                }
+                return false;
+            }
+        }
+
+        // test inversion of AND
+        AST ast = doParse(
+                "from Person p where not ( p.name is null and exists(select a.id from Address a where a.id=p.id))",
+                false);
+
+        assertTrue(new Verifier().verify(ast));
+
+        // test inversion of OR
+        ast = doParse(
+                "from Person p where not ( p.name is null or exists(select a.id from Address a where a.id=p.id))",
+                false);
+
+        assertTrue(new Verifier().verify(ast));
+    }
+	
 	private void parseFilter(String input) throws TokenStreamException, RecognitionException {
 		doParse( input, true );
 	}
