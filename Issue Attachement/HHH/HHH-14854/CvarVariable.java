package com.epsilon.metadater.domain;

import javax.persistence.*;

import org.hibernate.annotations.NamedNativeQueries;
import org.hibernate.annotations.NamedNativeQuery;

//static final int knSDD_QuestionStyle_DNU = 4;

/**
 * A fake entity for the CvarVariable queries.
 */
@Entity
@NamedNativeQueries({
    @NamedNativeQuery(name = "CvarVariable.findByProgrammeId",
        query=""
            + "WITH SASSQL AS ("
            + "    SELECT gf.Fact_Id, gf.Script_Variable_Nm, nus.New_Script_Variable_Nm"
            + "      FROM GREF_Facts gf"
            + "      LEFT OUTER JOIN GREF_Not_Used_Scripts nus"
            + "        ON gf.Script_Variable_Nm = nus.Script_Variable_Nm"
            + "), ANSSQL AS ("
            + "    SELECT gf.Fact_Id, a.Answer_Id AS AnswerID"
            + "      FROM GREF_Facts gf,"
            + "           GREF_Answers a"
            + "     WHERE gf.Answer_Id = a.Answer_Id"
            + ")"
            + "    SELECT DISTINCT NVL(p.Prog_Short_Nm, ' ') AS programmeName,"
            + "           p.Programme_Id AS programmeId, "
            + "           c.CatID AS catID,"
            + "           NVL(c.S_Name, NVL(c.L_Name, ' ')) AS catName,"
            + "           NVL(c.QVRoot, ' ') AS qvRoot,"
            + "           NVL(UPPER(c.QVRoot), ' ') AS qvRootUpper,"
            + "           s.ScatID AS scatID,"
            + "           NVL(s.S_Name, NVL(s.L_Name, ' ')) AS scatName,"
            + "           s.SeqNo AS scatSeqNo,"
            + "           g.GroupID AS groupId,"
            + "           NVL(g.S_Name, NVL(g.L_Name, ' ')) AS groupName,"
            + "           g.SeqNo AS groupSeqNo,"
            + "           q.QuestID AS questionId,"
            + "           NVL(q.S_Name, NVL(q.L_Name, ' ')) AS questionName,"
            + "           q.SeqNo AS questionSeqNo,"
            + "           r.RespID AS responseId,"
            + "           NVL(r.S_Name, NVL(r.L_Name, ' ')) AS responseName,"
            + "           r.SeqNo AS responseSeqNo,"
            + "           q.TKWord AS tkWord,"
            + "           (q.TKBit+(r.SeqNo-1)) AS tkBit,"
            + "           NVL(w.QVSufx, ' ') AS qvSuffix,"
            + "           NVL(UPPER(w.QVSufx), ' ') AS qvSuffixUpper,"
            + "           NVL(sas.Script_Variable_Nm, ' ') AS sasName,"
            + "           NVL(sas.New_Script_Variable_Nm, ' ') AS sasPName,"
            + "           NVL(ans.AnswerID, -1) AS answerId"
            + "      FROM GREF_Programmes p,"
            + "           CIS_Survey_Sets ss,"
            + "           SDD_TC tc,"
            + "           SDD_C c,"
            + "           SDD_S s,"
            + "           SDD_G g,"
            + "           SDD_Q q,"
            + "           SDD_R r,"
            + "           SDD_W w,"
            + "           SDDE_Facts sf1 LEFT OUTER JOIN SASSQL sas ON sf1.Fact_Id = sas.Fact_Id,"
            + "           SDDE_Facts sf2 LEFT OUTER JOIN ANSSQL ans ON sf2.Fact_Id = ans.Fact_Id"
            + "     WHERE p.Programme_Id = ss.Programme_Id"
            + "       AND ss.Set_Id = tc.SetID"
            + "       AND tc.CatID = c.CatID"
            + "       AND c.CatID = s.CatID"
            + "       AND s.CatID = g.CatID"
            + "       AND g.CatID = q.CatID"
            + "       AND q.CatID = r.CatID"
            + "       AND r.CatID = w.CatID"
            + "       AND s.ScatID = g.ScatID"
            + "       AND tc.GroupID >= g.GroupID"
            + "       AND g.GroupID = q.GroupID"
            + "       AND q.GroupID = r.GroupID"
            + "       AND tc.QuestID >= q.QuestID"
            + "       AND q.TKWord = w.TKWord"
            + "       AND w.CatID = sf1.Cat_Id"
            + "       AND w.TKWord = sf1.TK_Word"
            + "       AND (q.TKBit+(r.SeqNo-1)) = sf1.TK_Bit"
            + "       AND w.CatID = sf2.Cat_Id"
            + "       AND w.TKWord = sf2.TK_Word"
            + "       AND (q.TKBit+(r.SeqNo-1)) = sf2.TK_Bit"
            + "       AND p.Programme_Id = :programmeId"
            + "       AND (EXISTS (SELECT * FROM SDD_TCQ tcq WHERE tcq.SetID = tc.SetID AND tcq.CatID = c.CatID AND tcq.QuestID = q.QuestID)"
            + "                   OR NOT EXISTS (SELECT * FROM SDD_TCQ tcq WHERE tcq.CatID = c.CatID AND tcq.QuestID = q.QuestID)) "
            + "UNION"
            + "    SELECT DISTINCT NVL(p.Prog_Short_Nm, ' ') AS programmeName,"
            + "           p.Programme_Id AS programmeId,"
            + "           c.CatID AS catId,"
            + "           NVL(c.S_Name, NVL(c.L_Name, ' ')) AS catName,"
            + "           NVL(c.QVRoot, ' ') AS qvRoot,"
            + "           NVL(UPPER(c.QVRoot), ' ') AS qvRootUpper,"
            + "           s.ScatID AS scatId,"
            + "           NVL(s.S_Name, NVL(s.L_Name, ' ')) AS scatName,"
            + "           s.SeqNo AS scatSeqNo,"
            + "           g.GroupID AS groupId,"
            + "           NVL(g.S_Name, NVL(g.L_Name, ' ')) AS groupName,"
            + "           g.SeqNo AS groupSeqNo,"
            + "           -1 AS questionId,"
            + "           ' ' AS questionName,"
            + "           -1 AS questionSeqNo,"
            + "           -1 AS responseId,"
            + "           ' ' AS responseName,"
            + "           -1 AS responseSeqNo,"
            + "           0 AS tkWord,"
            + "           0 AS tkBit,"
            + "           NVL(w.QVSufx, ' ') AS qvSuffix,"
            + "           NVL(UPPER(w.QVSufx), ' ') AS qvSuffixUpper,"
            + "           NVL(sas.Script_Variable_Nm, ' ') AS sasName,"
            + "           NVL(sas.New_Script_Variable_Nm, ' ') AS sasPName,"
            + "           NVL(ans.AnswerID, -1) AS answerId"
            + "      FROM GREF_Programmes p,"
            + "           CIS_Survey_Sets ss,"
            + "           SDD_TC tc,"
            + "           SDD_C c,"
            + "           SDD_S s,"
            + "           SDD_G g,"
            + "           SDD_W w,"
            + "           SDDE_Facts sf1 LEFT OUTER JOIN SASSQL sas ON sf1.Fact_Id = sas.Fact_Id,"
            + "           SDDE_Facts sf2 LEFT OUTER JOIN ANSSQL ans ON sf2.Fact_Id = ans.Fact_Id"
            + "     WHERE p.Programme_Id = ss.Programme_Id"
            + "       AND ss.Set_Id = tc.SetID"
            + "       AND tc.CatID = c.CatID"
            + "       AND c.CatID = s.CatID"
            + "       AND s.CatID = g.CatID"
            + "       AND g.CatID = w.CatID"
            + "       AND s.ScatID = g.ScatID"
            + "       AND tc.GroupID >= g.GroupID"
            + "       AND g.QuestStyle = 4" //+ String.valueOf(knSDD_QuestionStyle_DNU)
            + "       AND 0 = w.TKWord"
            + "       AND w.CatID = sf1.Cat_Id"
            + "       AND w.TKWord = sf1.TK_Word"
            + "       AND 0 = sf1.TK_Bit"
            + "       AND w.CatID = sf2.Cat_Id"
            + "       AND w.TKWord = sf2.TK_Word"
            + "       AND 0 = sf2.TK_Bit"
            + "       AND p.Programme_Id = :programmeId "
            + "ORDER BY 6 ASC, 22 ASC, 19 ASC NULLS LAST, 20 ASC NULLS LAST"
            + "",
            resultSetMapping="CvarMapping"),
    @NamedNativeQuery(name = "CvarVariable.findByProgrammeId.count",
        query="SELECT COUNT(*) FROM ("
            + "WITH SASSQL AS ("
            + "    SELECT gf.Fact_Id, gf.Script_Variable_Nm, nus.New_Script_Variable_Nm"
            + "      FROM GREF_Facts gf"
            + "      LEFT OUTER JOIN GREF_Not_Used_Scripts nus"
            + "        ON gf.Script_Variable_Nm = nus.Script_Variable_Nm"
            + "), ANSSQL AS ("
            + "    SELECT gf.Fact_Id, a.Answer_Id AS AnswerID"
            + "      FROM GREF_Facts gf,"
            + "           GREF_Answers a"
            + "     WHERE gf.Answer_Id = a.Answer_Id"
            + ")"
            + "    SELECT DISTINCT NVL(p.Prog_Short_Nm, ' ') AS programmeName,"
            + "           p.Programme_Id AS programmeId, "
            + "           c.CatID AS catID,"
            + "           NVL(c.S_Name, NVL(c.L_Name, ' ')) AS catName,"
            + "           NVL(c.QVRoot, ' ') AS qvRoot,"
            + "           NVL(UPPER(c.QVRoot), ' ') AS qvRootUpper,"
            + "           s.ScatID AS scatID,"
            + "           NVL(s.S_Name, NVL(s.L_Name, ' ')) AS scatName,"
            + "           s.SeqNo AS scatSeqNo,"
            + "           g.GroupID AS groupId,"
            + "           NVL(g.S_Name, NVL(g.L_Name, ' ')) AS groupName,"
            + "           g.SeqNo AS groupSeqNo,"
            + "           q.QuestID AS questionId,"
            + "           NVL(q.S_Name, NVL(q.L_Name, ' ')) AS questionName,"
            + "           q.SeqNo AS questionSeqNo,"
            + "           r.RespID AS responseId,"
            + "           NVL(r.S_Name, NVL(r.L_Name, ' ')) AS responseName,"
            + "           r.SeqNo AS responseSeqNo,"
            + "           q.TKWord AS tkWord,"
            + "           (q.TKBit+(r.SeqNo-1)) AS tkBit,"
            + "           NVL(w.QVSufx, ' ') AS qvSuffix,"
            + "           NVL(UPPER(w.QVSufx), ' ') AS qvSuffixUpper,"
            + "           NVL(sas.Script_Variable_Nm, ' ') AS sasName,"
            + "           NVL(sas.New_Script_Variable_Nm, ' ') AS sasPName,"
            + "           NVL(ans.AnswerID, -1) AS answerId"
            + "      FROM GREF_Programmes p,"
            + "           CIS_Survey_Sets ss,"
            + "           SDD_TC tc,"
            + "           SDD_C c,"
            + "           SDD_S s,"
            + "           SDD_G g,"
            + "           SDD_Q q,"
            + "           SDD_R r,"
            + "           SDD_W w,"
            + "           SDDE_Facts sf1 LEFT OUTER JOIN SASSQL sas ON sf1.Fact_Id = sas.Fact_Id,"
            + "           SDDE_Facts sf2 LEFT OUTER JOIN ANSSQL ans ON sf2.Fact_Id = ans.Fact_Id"
            + "     WHERE p.Programme_Id = ss.Programme_Id"
            + "       AND ss.Set_Id = tc.SetID"
            + "       AND tc.CatID = c.CatID"
            + "       AND c.CatID = s.CatID"
            + "       AND s.CatID = g.CatID"
            + "       AND g.CatID = q.CatID"
            + "       AND q.CatID = r.CatID"
            + "       AND r.CatID = w.CatID"
            + "       AND s.ScatID = g.ScatID"
            + "       AND tc.GroupID >= g.GroupID"
            + "       AND g.GroupID = q.GroupID"
            + "       AND q.GroupID = r.GroupID"
            + "       AND tc.QuestID >= q.QuestID"
            + "       AND q.TKWord = w.TKWord"
            + "       AND w.CatID = sf1.Cat_Id"
            + "       AND w.TKWord = sf1.TK_Word"
            + "       AND (q.TKBit+(r.SeqNo-1)) = sf1.TK_Bit"
            + "       AND w.CatID = sf2.Cat_Id"
            + "       AND w.TKWord = sf2.TK_Word"
            + "       AND (q.TKBit+(r.SeqNo-1)) = sf2.TK_Bit"
            + "       AND p.Programme_Id = :programmeId"
            + "       AND (EXISTS (SELECT * FROM SDD_TCQ tcq WHERE tcq.SetID = tc.SetID AND tcq.CatID = c.CatID AND tcq.QuestID = q.QuestID)"
            + "                   OR NOT EXISTS (SELECT * FROM SDD_TCQ tcq WHERE tcq.CatID = c.CatID AND tcq.QuestID = q.QuestID)) "
            + "UNION"
            + "    SELECT DISTINCT NVL(p.Prog_Short_Nm, ' ') AS programmeName,"
            + "           p.Programme_Id AS programmeId,"
            + "           c.CatID AS catId,"
            + "           NVL(c.S_Name, NVL(c.L_Name, ' ')) AS catName,"
            + "           NVL(c.QVRoot, ' ') AS qvRoot,"
            + "           NVL(UPPER(c.QVRoot), ' ') AS qvRootUpper,"
            + "           s.ScatID AS scatId,"
            + "           NVL(s.S_Name, NVL(s.L_Name, ' ')) AS scatName,"
            + "           s.SeqNo AS scatSeqNo,"
            + "           g.GroupID AS groupId,"
            + "           NVL(g.S_Name, NVL(g.L_Name, ' ')) AS groupName,"
            + "           g.SeqNo AS groupSeqNo,"
            + "           -1 AS questionId,"
            + "           ' ' AS questionName,"
            + "           -1 AS questionSeqNo,"
            + "           -1 AS responseId,"
            + "           ' ' AS responseName,"
            + "           -1 AS responseSeqNo,"
            + "           0 AS tkWord,"
            + "           0 AS tkBit,"
            + "           NVL(w.QVSufx, ' ') AS qvSuffix,"
            + "           NVL(UPPER(w.QVSufx), ' ') AS qvSuffixUpper,"
            + "           NVL(sas.Script_Variable_Nm, ' ') AS sasName,"
            + "           NVL(sas.New_Script_Variable_Nm, ' ') AS sasPName,"
            + "           NVL(ans.AnswerID, -1) AS answerId"
            + "      FROM GREF_Programmes p,"
            + "           CIS_Survey_Sets ss,"
            + "           SDD_TC tc,"
            + "           SDD_C c,"
            + "           SDD_S s,"
            + "           SDD_G g,"
            + "           SDD_W w,"
            + "           SDDE_Facts sf1 LEFT OUTER JOIN SASSQL sas ON sf1.Fact_Id = sas.Fact_Id,"
            + "           SDDE_Facts sf2 LEFT OUTER JOIN ANSSQL ans ON sf2.Fact_Id = ans.Fact_Id"
            + "     WHERE p.Programme_Id = ss.Programme_Id"
            + "       AND ss.Set_Id = tc.SetID"
            + "       AND tc.CatID = c.CatID"
            + "       AND c.CatID = s.CatID"
            + "       AND s.CatID = g.CatID"
            + "       AND g.CatID = w.CatID"
            + "       AND s.ScatID = g.ScatID"
            + "       AND tc.GroupID >= g.GroupID"
            + "       AND g.QuestStyle = 4" //+ String.valueOf(knSDD_QuestionStyle_DNU)
            + "       AND 0 = w.TKWord"
            + "       AND w.CatID = sf1.Cat_Id"
            + "       AND w.TKWord = sf1.TK_Word"
            + "       AND 0 = sf1.TK_Bit"
            + "       AND w.CatID = sf2.Cat_Id"
            + "       AND w.TKWord = sf2.TK_Word"
            + "       AND 0 = sf2.TK_Bit"
            + "       AND p.Programme_Id = :programmeId "
            + ")")
        })
        @SqlResultSetMapping(
            name = "CvarMapping", 
            classes = @ConstructorResult(
                targetClass=CvarVariableDTO.class,
                columns={
                    @ColumnResult(name="programmeName",type = String.class),
                    @ColumnResult(name="programmeId", type=Long.class),
                    @ColumnResult(name="catId", type=Long.class),
                    @ColumnResult(name="catName",type = String.class),
                    @ColumnResult(name="qvRoot",type = String.class),
                    @ColumnResult(name="qvRootUpper",type = String.class),
                    @ColumnResult(name="scatId", type=Long.class),
                    @ColumnResult(name="scatName",type = String.class),
                    @ColumnResult(name="scatSeqNo", type=Integer.class),
                    @ColumnResult(name="groupId", type=Long.class),
                    @ColumnResult(name="groupName",type = String.class),
                    @ColumnResult(name="groupSeqNo", type=Integer.class),
                    @ColumnResult(name="questionId", type=Long.class),
                    @ColumnResult(name="questionName",type = String.class),
                    @ColumnResult(name="questionSeqNo", type=Integer.class),
                    @ColumnResult(name="responseId", type=Long.class),
                    @ColumnResult(name="responseName",type = String.class),
                    @ColumnResult(name="responseSeqNo", type=Integer.class),
                    @ColumnResult(name="tkWord", type=Integer.class),
                    @ColumnResult(name="tkBit", type=Integer.class),
                    @ColumnResult(name="qvSuffix",type = String.class),
                    @ColumnResult(name="qvSuffixUpper",type = String.class),
                    @ColumnResult(name="sasName",type = String.class),
                    @ColumnResult(name="sasPName",type = String.class),
                    @ColumnResult(name="answerId", type=Long.class)
        }))
    public class CvarVariable {
    @Id int id;
}
