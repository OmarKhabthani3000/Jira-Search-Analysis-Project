Index: src/main/java/org/hibernate/envers/configuration/AuditEntitiesConfiguration.java
===================================================================
--- src/main/java/org/hibernate/envers/configuration/AuditEntitiesConfiguration.java	(revision 20320)
+++ src/main/java/org/hibernate/envers/configuration/AuditEntitiesConfiguration.java	(working copy)
@@ -25,17 +25,11 @@
 
 import static org.hibernate.envers.tools.Tools.getProperty;
 
-import java.text.DateFormat;
-import java.text.ParseException;
-import java.text.SimpleDateFormat;
-import java.util.Date;
 import java.util.HashMap;
 import java.util.Map;
 import java.util.Properties;
 
-import org.hibernate.MappingException;
 import org.hibernate.envers.strategy.DefaultAuditStrategy;
-import org.hibernate.envers.strategy.ValidTimeAuditStrategy;
 
 /**
  * Configuration of versions entities - names of fields, entities and tables created to store versioning information.
@@ -61,6 +55,9 @@
     private final Map<String, String> customAuditTablesNames;
 
     private final String revisionEndFieldName;
+    
+    private final boolean revisionEndTimestampEnabled;
+    private final String revisionEndTimestampFieldName;
 
     public AuditEntitiesConfiguration(Properties properties, String revisionInfoEntityName) {
         this.revisionInfoEntityName = revisionInfoEntityName;
@@ -97,6 +94,21 @@
                 "org.hibernate.envers.audit_strategy_valid_time_end_name",
                 "REVEND");
 
+        String revisionEndTimestampEnabledStr = getProperty(properties,
+        		"org.hibernate.envers.audit_strategy_valid_time_store_revend_timestamp",
+        		"org.hibernate.envers.audit_strategy_valid_time_store_revend_timestamp",
+        		"false");
+        revisionEndTimestampEnabled = Boolean.parseBoolean(revisionEndTimestampEnabledStr);
+        
+        if (revisionEndTimestampEnabled) {
+            revisionEndTimestampFieldName = getProperty(properties,
+            		"org.hibernate.envers.audit_strategy_valid_time_revend_timestamp_field_name",
+            		"org.hibernate.envers.audit_strategy_valid_time_revend_timestamp_field_name",
+            		"REVEND_TSTMP");
+        } else {
+            revisionEndTimestampFieldName = null;
+        }
+
         customAuditTablesNames = new HashMap<String, String>();
 
         revisionNumberPath = originalIdPropName + "." + revisionFieldName + ".id";
@@ -163,4 +175,13 @@
     public String getRevisionEndFieldName() {
         return revisionEndFieldName;
     }
+
+	public boolean isRevisionEndTimestampEnabled() {
+		return revisionEndTimestampEnabled;
+	}
+
+	public String getRevisionEndTimestampFieldName() {
+		return revisionEndTimestampFieldName;
+	}
+    
 }
Index: src/main/java/org/hibernate/envers/configuration/metadata/AuditMetadataGenerator.java
===================================================================
--- src/main/java/org/hibernate/envers/configuration/metadata/AuditMetadataGenerator.java	(revision 20320)
+++ src/main/java/org/hibernate/envers/configuration/metadata/AuditMetadataGenerator.java	(working copy)
@@ -28,7 +28,6 @@
 import java.util.Map;
 
 import org.dom4j.Element;
-import org.hibernate.envers.configuration.AuditConfiguration;
 import org.hibernate.envers.configuration.GlobalConfiguration;
 import org.hibernate.envers.configuration.AuditEntitiesConfiguration;
 import org.hibernate.envers.configuration.metadata.reader.ClassAuditingData;
@@ -146,10 +145,15 @@
             MetadataTools.addOrModifyColumn(end_rev_mapping, verEntCfg.getRevisionEndFieldName());
 
             any_mapping.add(end_rev_mapping);
+            
+            if (verEntCfg.isRevisionEndTimestampEnabled()) {
+            	// add a column for the timestamp of the end revision
+            	Element timestampProperty = MetadataTools.addProperty(any_mapping, verEntCfg.getRevisionEndTimestampFieldName(), "long", true, false, true);
+            	MetadataTools.addColumn(timestampProperty, verEntCfg.getRevisionEndTimestampFieldName(), 12, 12, 12, null);
+            }
         }
     }
 
-    @SuppressWarnings({"unchecked"})
     void addValue(Element parent, Value value, CompositeMapperBuilder currentMapper, String entityName,
                   EntityXmlMappingData xmlMappingData, PropertyAuditingData propertyAuditingData,
                   boolean insertable, boolean firstPass) {
@@ -197,7 +201,6 @@
         }
     }
 
-    @SuppressWarnings({"unchecked"})
     private void addProperties(Element parent, Iterator<Property> properties, CompositeMapperBuilder currentMapper,
                                ClassAuditingData auditingData, String entityName, EntityXmlMappingData xmlMappingData,
                                boolean firstPass) {
Index: src/main/java/org/hibernate/envers/configuration/metadata/MetadataTools.java
===================================================================
--- src/main/java/org/hibernate/envers/configuration/metadata/MetadataTools.java	(revision 20320)
+++ src/main/java/org/hibernate/envers/configuration/metadata/MetadataTools.java	(working copy)
@@ -49,7 +49,7 @@
         return id_mapping;
     }
 
-    public static Element addProperty(Element parent, String name, String type, boolean insertable, boolean key) {
+    public static Element addProperty(Element parent, String name, String type, boolean insertable, boolean key, boolean update) {
         Element prop_mapping;
         if (key) {
             prop_mapping = parent.addElement("key-property");
@@ -59,7 +59,7 @@
 
         prop_mapping.addAttribute("name", name);
         prop_mapping.addAttribute("insert", Boolean.toString(insertable));
-        prop_mapping.addAttribute("update", "false");
+        prop_mapping.addAttribute("update", Boolean.toString(update));
 
         if (type != null) {
             prop_mapping.addAttribute("type", type);
@@ -68,6 +68,10 @@
         return prop_mapping;
     }
 
+    public static Element addProperty(Element parent, String name, String type, boolean insertable, boolean key) {
+        return addProperty(parent, name, type, insertable, key, false);
+    }
+
     private static void addOrModifyAttribute(Element parent, String name, String value) {
         Attribute attribute = parent.attribute(name);
         if (attribute == null) {
Index: src/main/java/org/hibernate/envers/strategy/ValidTimeAuditStrategy.java
===================================================================
--- src/main/java/org/hibernate/envers/strategy/ValidTimeAuditStrategy.java	(revision 20320)
+++ src/main/java/org/hibernate/envers/strategy/ValidTimeAuditStrategy.java	(working copy)
@@ -1,10 +1,13 @@
 package org.hibernate.envers.strategy;
 
 import java.io.Serializable;
+import java.lang.reflect.Field;
+import java.lang.reflect.Method;
 import java.util.List;
 import java.util.Map;
 
 import org.hibernate.Session;
+import org.hibernate.envers.RevisionTimestamp;
 import org.hibernate.envers.RevisionType;
 import org.hibernate.envers.configuration.AuditConfiguration;
 import org.hibernate.envers.configuration.AuditEntitiesConfiguration;
@@ -53,27 +56,22 @@
     public void performCollectionChange(Session session, AuditConfiguration auditCfg,
                                         PersistentCollectionChangeData persistentCollectionChangeData, Object revision) {
         // Update the end date of the previous row if this operation is expected to have a previous row
-        if (getRevisionType(auditCfg, persistentCollectionChangeData.getData()) != RevisionType.ADD) {
-            /*
-             Constructing a query (there are multiple id fields):
-             select e from audited_middle_ent e where e.end_rev is null and e.id1 = :id1 and e.id2 = :id2 ...
-             */
+        // Constructing a query (there are multiple id fields):
+        // select e from audited_middle_ent e where e.end_rev is null and e.id1 = :id1 and e.id2 = :id2 ...
 
-            QueryBuilder qb = new QueryBuilder(persistentCollectionChangeData.getEntityName(), "e");
+        QueryBuilder qb = new QueryBuilder(persistentCollectionChangeData.getEntityName(), "e");
 
-            // Adding a parameter for each id component, except the rev number
-            String originalIdPropName = auditCfg.getAuditEntCfg().getOriginalIdPropName();
-            Map<String, Object> originalId = (Map<String, Object>) persistentCollectionChangeData.getData().get(
+        // Adding a parameter for each id component, except the rev number
+        String originalIdPropName = auditCfg.getAuditEntCfg().getOriginalIdPropName();
+        Map<String, Object> originalId = (Map<String, Object>) persistentCollectionChangeData.getData().get(
                     originalIdPropName);
-            for (Map.Entry<String, Object> originalIdEntry : originalId.entrySet()) {
-                if (!auditCfg.getAuditEntCfg().getRevisionFieldName().equals(originalIdEntry.getKey())) {
-                    qb.getRootParameters().addWhereWithParam(originalIdPropName + "." + originalIdEntry.getKey(),
-                            true, "=", originalIdEntry.getValue());
-                }
-            }
-
-            updateLastRevision(session, auditCfg, qb, originalId, persistentCollectionChangeData.getEntityName(), revision);
+        for (Map.Entry<String, Object> originalIdEntry : originalId.entrySet()) {
+           if (!auditCfg.getAuditEntCfg().getRevisionFieldName().equals(originalIdEntry.getKey())) {
+              qb.getRootParameters().addWhereWithParam(originalIdPropName + "." + originalIdEntry.getKey(),
+              true, "=", originalIdEntry.getValue());
+           }
         }
+        updateLastRevision(session, auditCfg, qb, originalId, persistentCollectionChangeData.getEntityName(), revision);
 
         // Save the audit data
         session.save(persistentCollectionChangeData.getEntityName(), persistentCollectionChangeData.getData());
@@ -114,7 +112,9 @@
     private void updateLastRevision(Session session, AuditConfiguration auditCfg, QueryBuilder qb,
                                     Object id, String auditedEntityName, Object revision) {
         String revisionEndFieldName = auditCfg.getAuditEntCfg().getRevisionEndFieldName();
-
+        
+        boolean revisionEndTimestampEnabled = auditCfg.getAuditEntCfg().isRevisionEndTimestampEnabled();
+        
         // e.end_rev is null
         qb.getRootParameters().addWhere(revisionEndFieldName, true, "is", "null", false);
 
@@ -126,10 +126,28 @@
             Object previousData = l.get(0);
             ((Map<String, Object>) previousData).put(revisionEndFieldName, revision);
 
+            if (revisionEndTimestampEnabled) {
+            	String revisionEndTimeFieldName = auditCfg.getAuditEntCfg().getRevisionEndTimestampFieldName();
+            	
+                // Find the @RevisionTimestamp
+                for (Field f : revision.getClass().getDeclaredFields()){
+                   if (f.getAnnotation(RevisionTimestamp.class) != null){
+                      try {
+                         Method m = revision.getClass().getMethod("get" + f.getName().substring(0, 1).toUpperCase() + f.getName().substring(1));
+                         long timestamp = (Long)m.invoke(revision);
+                         ((Map<String, Object>) previousData).put(revisionEndTimeFieldName, timestamp);
+                      } catch(Exception e){
+                    	  // ignore
+                      }
+                      break;
+                   }
+                }
+            }
+            
             // Saving the previous version
             session.save(auditedEntityName, previousData);
-        } else {
-            throw new RuntimeException("Cannot find previous revision for entity " + auditedEntityName + " and id " + id);
+        } else if(l.size() > 1) {
+            throw new RuntimeException("Cannot find previous revision for entity " + auditedEntityName + " and id " + id + " received " + l.size() + " rows back");
         }
     }
 }
Index: src/test/java/org/hibernate/envers/test/integration/strategy/ValidTimeAuditStrategyRevEndTsTest.java
===================================================================
--- src/test/java/org/hibernate/envers/test/integration/strategy/ValidTimeAuditStrategyRevEndTsTest.java	(revision 0)
+++ src/test/java/org/hibernate/envers/test/integration/strategy/ValidTimeAuditStrategyRevEndTsTest.java	(revision 0)
@@ -0,0 +1,391 @@
+package org.hibernate.envers.test.integration.strategy;
+
+import java.util.Arrays;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
+import javax.persistence.EntityManager;
+import javax.persistence.Query;
+
+import org.hibernate.Session;
+import org.hibernate.ejb.Ejb3Configuration;
+import org.hibernate.envers.DefaultRevisionEntity;
+import org.hibernate.envers.strategy.ValidTimeAuditStrategy;
+import org.hibernate.envers.test.AbstractEntityTest;
+import org.hibernate.envers.test.entities.manytomany.sametable.Child1Entity;
+import org.hibernate.envers.test.entities.manytomany.sametable.Child2Entity;
+import org.hibernate.envers.test.entities.manytomany.sametable.ParentEntity;
+import org.hibernate.envers.test.tools.TestTools;
+import org.testng.annotations.BeforeClass;
+import org.testng.annotations.Test;
+
+/**
+ * Test which checks that the revision end timestamp is correctly set for {@link ValidTimeAuditStrategy}.
+ * 
+ * @author Erik-Berndt Scheper
+ */
+public class ValidTimeAuditStrategyRevEndTsTest extends AbstractEntityTest {
+	private final String revendTimestampColumName = "REVEND_TIMESTAMP";
+	
+	private Integer p1_id;
+	private Integer p2_id;
+	private Integer c1_1_id;
+	private Integer c1_2_id;
+	private Integer c2_1_id;
+	private Integer c2_2_id;
+	private Map<Number, DefaultRevisionEntity> revisions;
+
+	public void configure(Ejb3Configuration cfg) {
+		cfg.addAnnotatedClass(ParentEntity.class);
+		cfg.addAnnotatedClass(Child1Entity.class);
+		cfg.addAnnotatedClass(Child2Entity.class);
+
+		cfg.setProperty("org.hibernate.envers.audit_strategy",
+				"org.hibernate.envers.strategy.ValidTimeAuditStrategy");
+		cfg
+				.setProperty(
+						"org.hibernate.envers.audit_strategy_valid_time_store_revend_timestamp",
+						"true");
+		cfg
+				.setProperty(
+						"org.hibernate.envers.audit_strategy_valid_time_revend_timestamp_field_name",
+						revendTimestampColumName);
+	}
+
+	@BeforeClass(enabled = true, dependsOnMethods = "init")
+	public void initData() {
+		EntityManager em = getEntityManager();
+
+		// We need first to modify the columns in the middle (join table) to
+		// allow null values. Hbm2ddl doesn't seem
+		// to allow this.
+		em.getTransaction().begin();
+		Session session = (Session) em.getDelegate();
+		session.createSQLQuery("DROP TABLE children").executeUpdate();
+		session
+				.createSQLQuery(
+						"CREATE TABLE children(parent_id integer, child1_id integer NULL, child2_id integer NULL)")
+				.executeUpdate();
+		session.createSQLQuery("DROP TABLE children_AUD").executeUpdate();
+		session
+				.createSQLQuery(
+						"CREATE TABLE children_AUD(REV integer NOT NULL, REVEND integer, " + revendTimestampColumName + " bigint, REVTYPE tinyint, "
+								+ "parent_id integer, child1_id integer NULL, child2_id integer NULL)")
+				.executeUpdate();
+		em.getTransaction().commit();
+		em.clear();
+
+		ParentEntity p1 = new ParentEntity("parent_1");
+		ParentEntity p2 = new ParentEntity("parent_2");
+
+		Child1Entity c1_1 = new Child1Entity("child1_1");
+		Child1Entity c1_2 = new Child1Entity("child1_2");
+
+		Child2Entity c2_1 = new Child2Entity("child2_1");
+		Child2Entity c2_2 = new Child2Entity("child2_2");
+
+		// Revision 1
+		em.getTransaction().begin();
+
+		em.persist(p1);
+		em.persist(p2);
+		em.persist(c1_1);
+		em.persist(c1_2);
+		em.persist(c2_1);
+		em.persist(c2_2);
+
+		em.getTransaction().commit();
+		em.clear();
+
+		// Revision 2 - (p1: c1_1, p2: c2_1)
+
+		em.getTransaction().begin();
+
+		p1 = em.find(ParentEntity.class, p1.getId());
+		p2 = em.find(ParentEntity.class, p2.getId());
+		c1_1 = em.find(Child1Entity.class, c1_1.getId());
+		c2_1 = em.find(Child2Entity.class, c2_1.getId());
+
+		p1.getChildren1().add(c1_1);
+		p2.getChildren2().add(c2_1);
+
+		em.getTransaction().commit();
+		em.clear();
+
+		// Revision 3 - (p1: c1_1, c1_2, c2_2, p2: c1_1, c2_1)
+		em.getTransaction().begin();
+
+		p1 = em.find(ParentEntity.class, p1.getId());
+		p2 = em.find(ParentEntity.class, p2.getId());
+		c1_1 = em.find(Child1Entity.class, c1_1.getId());
+		c1_2 = em.find(Child1Entity.class, c1_2.getId());
+		c2_2 = em.find(Child2Entity.class, c2_2.getId());
+
+		p1.getChildren1().add(c1_2);
+		p1.getChildren2().add(c2_2);
+
+		p2.getChildren1().add(c1_1);
+
+		em.getTransaction().commit();
+		em.clear();
+
+		// Revision 4 - (p1: c1_2, c2_2, p2: c1_1, c2_1, c2_2)
+		em.getTransaction().begin();
+
+		p1 = em.find(ParentEntity.class, p1.getId());
+		p2 = em.find(ParentEntity.class, p2.getId());
+		c1_1 = em.find(Child1Entity.class, c1_1.getId());
+		c2_2 = em.find(Child2Entity.class, c2_2.getId());
+
+		p1.getChildren1().remove(c1_1);
+		p2.getChildren2().add(c2_2);
+
+		em.getTransaction().commit();
+		em.clear();
+
+		// Revision 5 - (p1: c2_2, p2: c1_1, c2_1)
+		em.getTransaction().begin();
+
+		p1 = em.find(ParentEntity.class, p1.getId());
+		p2 = em.find(ParentEntity.class, p2.getId());
+		c1_2 = em.find(Child1Entity.class, c1_2.getId());
+		c2_2 = em.find(Child2Entity.class, c2_2.getId());
+
+		c2_2.getParents().remove(p2);
+		c1_2.getParents().remove(p1);
+
+		em.getTransaction().commit();
+		em.clear();
+
+		//
+
+		p1_id = p1.getId();
+		p2_id = p2.getId();
+		c1_1_id = c1_1.getId();
+		c1_2_id = c1_2.getId();
+		c2_1_id = c2_1.getId();
+		c2_2_id = c2_2.getId();
+
+		Set<Number> revisionNumbers = new HashSet<Number>();
+		revisionNumbers.addAll(Arrays.asList(1, 2, 3, 4, 5));
+		revisions = getAuditReader().findRevisions(DefaultRevisionEntity.class, revisionNumbers);
+		
+		assert revisions.size() == 5;
+	}
+
+	@Test(enabled = true)
+	public void testRevisionsCounts() {
+		assert Arrays.asList(1, 2, 3, 4).equals(
+				getAuditReader().getRevisions(ParentEntity.class, p1_id));
+		assert Arrays.asList(1, 2, 3, 4).equals(
+				getAuditReader().getRevisions(ParentEntity.class, p2_id));
+
+		assert Arrays.asList(1).equals(
+				getAuditReader().getRevisions(Child1Entity.class, c1_1_id));
+		assert Arrays.asList(1, 5).equals(
+				getAuditReader().getRevisions(Child1Entity.class, c1_2_id));
+
+		assert Arrays.asList(1).equals(
+				getAuditReader().getRevisions(Child2Entity.class, c2_1_id));
+		assert Arrays.asList(1, 5).equals(
+				getAuditReader().getRevisions(Child2Entity.class, c2_2_id));
+	}
+
+	@Test(enabled = true)
+	public void testAllRevEndTimeStamps() {
+		List<Map<String, Object>> p1RevList = getRevisions(ParentEntity.class, p1_id);
+		List<Map<String, Object>> p2RevList = getRevisions(ParentEntity.class, p2_id);
+		List<Map<String, Object>> c1_1_List = getRevisions(Child1Entity.class, c1_1_id);
+		List<Map<String, Object>> c1_2_List = getRevisions(Child1Entity.class, c1_2_id);
+		List<Map<String, Object>> c2_1_List = getRevisions(Child2Entity.class, c2_1_id);
+		List<Map<String, Object>> c2_2_List = getRevisions(Child2Entity.class, c2_2_id);
+
+		verifyRevEndTimeStamps("ParentEntity: " + p1_id, p1RevList);
+		verifyRevEndTimeStamps("ParentEntity: " + p2_id, p2RevList);
+		verifyRevEndTimeStamps("Child1Entity: " + c1_1_id, c1_1_List);
+		verifyRevEndTimeStamps("Child1Entity: " + c1_2_id, c1_2_List);
+		verifyRevEndTimeStamps("Child2Entity: " + c2_1_id, c2_1_List);
+		verifyRevEndTimeStamps("Child2Entity: " + c2_2_id, c2_2_List);
+		
+	}
+
+	@Test(enabled = true)
+	public void testHistoryOfParent1() {
+
+		Child1Entity c1_1 = getEntityManager()
+				.find(Child1Entity.class, c1_1_id);
+		Child1Entity c1_2 = getEntityManager()
+				.find(Child1Entity.class, c1_2_id);
+		Child2Entity c2_2 = getEntityManager()
+				.find(Child2Entity.class, c2_2_id);
+
+		ParentEntity rev1 = getAuditReader().find(ParentEntity.class, p1_id, 1);
+		ParentEntity rev2 = getAuditReader().find(ParentEntity.class, p1_id, 2);
+		ParentEntity rev3 = getAuditReader().find(ParentEntity.class, p1_id, 3);
+		ParentEntity rev4 = getAuditReader().find(ParentEntity.class, p1_id, 4);
+		ParentEntity rev5 = getAuditReader().find(ParentEntity.class, p1_id, 5);
+
+		assert TestTools.checkList(rev1.getChildren1());
+		assert TestTools.checkList(rev2.getChildren1(), c1_1);
+		assert TestTools.checkList(rev3.getChildren1(), c1_1, c1_2);
+		assert TestTools.checkList(rev4.getChildren1(), c1_2);
+		assert TestTools.checkList(rev5.getChildren1());
+
+		assert TestTools.checkList(rev1.getChildren2());
+		assert TestTools.checkList(rev2.getChildren2());
+		assert TestTools.checkList(rev3.getChildren2(), c2_2);
+		assert TestTools.checkList(rev4.getChildren2(), c2_2);
+		assert TestTools.checkList(rev5.getChildren2(), c2_2);
+	}
+	
+	@Test(enabled = true)
+	public void testHistoryOfParent2() {
+		Child1Entity c1_1 = getEntityManager()
+				.find(Child1Entity.class, c1_1_id);
+		Child2Entity c2_1 = getEntityManager()
+				.find(Child2Entity.class, c2_1_id);
+		Child2Entity c2_2 = getEntityManager()
+				.find(Child2Entity.class, c2_2_id);
+
+		ParentEntity rev1 = getAuditReader().find(ParentEntity.class, p2_id, 1);
+		ParentEntity rev2 = getAuditReader().find(ParentEntity.class, p2_id, 2);
+		ParentEntity rev3 = getAuditReader().find(ParentEntity.class, p2_id, 3);
+		ParentEntity rev4 = getAuditReader().find(ParentEntity.class, p2_id, 4);
+		ParentEntity rev5 = getAuditReader().find(ParentEntity.class, p2_id, 5);
+
+		assert TestTools.checkList(rev1.getChildren1());
+		assert TestTools.checkList(rev2.getChildren1());
+		assert TestTools.checkList(rev3.getChildren1(), c1_1);
+		assert TestTools.checkList(rev4.getChildren1(), c1_1);
+		assert TestTools.checkList(rev5.getChildren1(), c1_1);
+
+		assert TestTools.checkList(rev1.getChildren2());
+		assert TestTools.checkList(rev2.getChildren2(), c2_1);
+		assert TestTools.checkList(rev3.getChildren2(), c2_1);
+		assert TestTools.checkList(rev4.getChildren2(), c2_1, c2_2);
+		assert TestTools.checkList(rev5.getChildren2(), c2_1);
+	}
+
+	@Test(enabled = true)
+	public void testHistoryOfChild1_1() {
+		ParentEntity p1 = getEntityManager().find(ParentEntity.class, p1_id);
+		ParentEntity p2 = getEntityManager().find(ParentEntity.class, p2_id);
+
+		Child1Entity rev1 = getAuditReader().find(Child1Entity.class, c1_1_id,
+				1);
+		Child1Entity rev2 = getAuditReader().find(Child1Entity.class, c1_1_id,
+				2);
+		Child1Entity rev3 = getAuditReader().find(Child1Entity.class, c1_1_id,
+				3);
+		Child1Entity rev4 = getAuditReader().find(Child1Entity.class, c1_1_id,
+				4);
+		Child1Entity rev5 = getAuditReader().find(Child1Entity.class, c1_1_id,
+				5);
+
+		assert TestTools.checkList(rev1.getParents());
+		assert TestTools.checkList(rev2.getParents(), p1);
+		assert TestTools.checkList(rev3.getParents(), p1, p2);
+		assert TestTools.checkList(rev4.getParents(), p2);
+		assert TestTools.checkList(rev5.getParents(), p2);
+	}
+
+	@Test(enabled = false)
+	public void testHistoryOfChild1_2() {
+		ParentEntity p1 = getEntityManager().find(ParentEntity.class, p1_id);
+
+		Child1Entity rev1 = getAuditReader().find(Child1Entity.class, c1_2_id,
+				1);
+		Child1Entity rev2 = getAuditReader().find(Child1Entity.class, c1_2_id,
+				2);
+		Child1Entity rev3 = getAuditReader().find(Child1Entity.class, c1_2_id,
+				3);
+		Child1Entity rev4 = getAuditReader().find(Child1Entity.class, c1_2_id,
+				4);
+		Child1Entity rev5 = getAuditReader().find(Child1Entity.class, c1_2_id,
+				5);
+
+		assert TestTools.checkList(rev1.getParents());
+		assert TestTools.checkList(rev2.getParents());
+		assert TestTools.checkList(rev3.getParents(), p1);
+		assert TestTools.checkList(rev4.getParents(), p1);
+		assert TestTools.checkList(rev5.getParents());
+	}
+
+	@Test(enabled = true)
+	public void testHistoryOfChild2_1() {
+		ParentEntity p2 = getEntityManager().find(ParentEntity.class, p2_id);
+
+		Child2Entity rev1 = getAuditReader().find(Child2Entity.class, c2_1_id,
+				1);
+		Child2Entity rev2 = getAuditReader().find(Child2Entity.class, c2_1_id,
+				2);
+		Child2Entity rev3 = getAuditReader().find(Child2Entity.class, c2_1_id,
+				3);
+		Child2Entity rev4 = getAuditReader().find(Child2Entity.class, c2_1_id,
+				4);
+		Child2Entity rev5 = getAuditReader().find(Child2Entity.class, c2_1_id,
+				5);
+
+		assert TestTools.checkList(rev1.getParents());
+		assert TestTools.checkList(rev2.getParents(), p2);
+		assert TestTools.checkList(rev3.getParents(), p2);
+		assert TestTools.checkList(rev4.getParents(), p2);
+		assert TestTools.checkList(rev5.getParents(), p2);
+	}
+
+	@Test(enabled = true)
+	public void testHistoryOfChild2_2() {
+		ParentEntity p1 = getEntityManager().find(ParentEntity.class, p1_id);
+		ParentEntity p2 = getEntityManager().find(ParentEntity.class, p2_id);
+
+		Child2Entity rev1 = getAuditReader().find(Child2Entity.class, c2_2_id,
+				1);
+		Child2Entity rev2 = getAuditReader().find(Child2Entity.class, c2_2_id,
+				2);
+		Child2Entity rev3 = getAuditReader().find(Child2Entity.class, c2_2_id,
+				3);
+		Child2Entity rev4 = getAuditReader().find(Child2Entity.class, c2_2_id,
+				4);
+		Child2Entity rev5 = getAuditReader().find(Child2Entity.class, c2_2_id,
+				5);
+
+		assert TestTools.checkList(rev1.getParents());
+		assert TestTools.checkList(rev2.getParents());
+		assert TestTools.checkList(rev3.getParents(), p1);
+		assert TestTools.checkList(rev4.getParents(), p1, p2);
+		assert TestTools.checkList(rev5.getParents(), p1);
+	}
+
+	private List<Map<String, Object>> getRevisions(Class<?> originalEntityClazz, Integer originalEntityId) {
+		// Build the query: 
+		// select auditEntity from org.hibernate.envers.test.entities.manytomany.sametable.ParentEntity_AUD auditEntity where auditEntity.originalId.id = :originalEntityId
+
+		StringBuilder builder = new StringBuilder("select auditEntity from ");
+		builder.append(originalEntityClazz.getName()).append("_AUD auditEntity");  
+		builder.append(" where auditEntity.originalId.id = :originalEntityId");
+		
+		Query qry = getEntityManager().createQuery(builder.toString());
+		qry.setParameter("originalEntityId", originalEntityId);
+		
+		@SuppressWarnings("unchecked")
+		List<Map<String,Object>> resultList = qry.getResultList();
+		return resultList;
+	}
+
+	private void verifyRevEndTimeStamps(String debugInfo, List<Map<String, Object>> revisionEntities) {
+		for (Map<String, Object> revisionEntity : revisionEntities) {
+			
+			Long revendTimestamp = (Long) revisionEntity.get(revendTimestampColumName);
+			DefaultRevisionEntity revEnd =(DefaultRevisionEntity) revisionEntity.get("REVEND"); 
+			
+			if (revendTimestamp == null) {
+				assert revEnd == null;
+			} else {
+				assert revendTimestamp.longValue() == revEnd.getTimestamp();
+			}
+		}
+	}
+
+}
Index: src/test/resources/testng.xml
===================================================================
--- src/test/resources/testng.xml	(revision 20320)
+++ src/test/resources/testng.xml	(working copy)
@@ -69,6 +69,7 @@
             <package name="org.hibernate.envers.test.integration.secondary.ids" />
             <package name="org.hibernate.envers.test.integration.serialization" />
             <package name="org.hibernate.envers.test.integration.superclass" /> 
+            <package name="org.hibernate.envers.test.integration.strategy" />
             <package name="org.hibernate.envers.test.integration.entityNames.auditedEntity" />
             <package name="org.hibernate.envers.test.integration.entityNames.manyToManyAudited" />
             <package name="org.hibernate.envers.test.integration.entityNames.oneToManyAudited" />
