Index: src/main/java/org/hibernate/envers/configuration/AuditEntitiesConfiguration.java
===================================================================
--- src/main/java/org/hibernate/envers/configuration/AuditEntitiesConfiguration.java	(revision 19920)
+++ src/main/java/org/hibernate/envers/configuration/AuditEntitiesConfiguration.java	(working copy)
@@ -61,6 +61,7 @@
     private final Map<String, String> customAuditTablesNames;
 
     private final String revisionEndFieldName;
+    private final String revisionEndTimeFieldName;
 
     public AuditEntitiesConfiguration(Properties properties, String revisionInfoEntityName) {
         this.revisionInfoEntityName = revisionInfoEntityName;
@@ -96,6 +97,11 @@
                 "org.hibernate.envers.audit_strategy_valid_time_end_name",
                 "org.hibernate.envers.audit_strategy_valid_time_end_name",
                 "REVEND");
+        
+        revisionEndTimeFieldName = getProperty(properties,
+        		"org.hibernate.envers.audit_strategy_valid_time_end_time_name",
+        		"org.hibernate.envers.audit_strategy_valid_time_end_time_name",
+        		"REVEND_TSTMP");
 
         customAuditTablesNames = new HashMap<String, String>();
 
@@ -163,4 +169,8 @@
     public String getRevisionEndFieldName() {
         return revisionEndFieldName;
     }
+    
+    public String getRevisionEndTimeFieldName() {
+        return revisionEndTimeFieldName;
+    }
 }
Index: src/main/java/org/hibernate/envers/configuration/metadata/AuditMetadataGenerator.java
===================================================================
--- src/main/java/org/hibernate/envers/configuration/metadata/AuditMetadataGenerator.java	(revision 19920)
+++ src/main/java/org/hibernate/envers/configuration/metadata/AuditMetadataGenerator.java	(working copy)
@@ -28,8 +28,11 @@
 import java.util.Map;
 
 import org.dom4j.Element;
+import org.hibernate.MappingException;
+import org.hibernate.cfg.Configuration;
+import org.hibernate.envers.RelationTargetAuditMode;
+import org.hibernate.envers.configuration.AuditEntitiesConfiguration;
 import org.hibernate.envers.configuration.GlobalConfiguration;
-import org.hibernate.envers.configuration.AuditEntitiesConfiguration;
 import org.hibernate.envers.configuration.metadata.reader.ClassAuditingData;
 import org.hibernate.envers.configuration.metadata.reader.PropertyAuditingData;
 import org.hibernate.envers.entities.EntityConfiguration;
@@ -41,12 +44,17 @@
 import org.hibernate.envers.strategy.ValidTimeAuditStrategy;
 import org.hibernate.envers.tools.StringTools;
 import org.hibernate.envers.tools.Triple;
-import org.hibernate.envers.RelationTargetAuditMode;
-
-import org.hibernate.MappingException;
-import org.hibernate.cfg.Configuration;
-import org.hibernate.mapping.*;
-import org.hibernate.type.*;
+import org.hibernate.mapping.Collection;
+import org.hibernate.mapping.Join;
+import org.hibernate.mapping.PersistentClass;
+import org.hibernate.mapping.Property;
+import org.hibernate.mapping.Table;
+import org.hibernate.mapping.Value;
+import org.hibernate.type.CollectionType;
+import org.hibernate.type.ComponentType;
+import org.hibernate.type.ManyToOneType;
+import org.hibernate.type.OneToOneType;
+import org.hibernate.type.Type;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -141,6 +149,10 @@
             MetadataTools.addOrModifyColumn(end_rev_mapping, verEntCfg.getRevisionEndFieldName());
 
             any_mapping.add(end_rev_mapping);
+            
+            // ENDREV_TIME
+            Element timestampProperty = MetadataTools.addProperty(any_mapping, verEntCfg.getRevisionEndTimeFieldName(), "long", true, false, true);
+            MetadataTools.addColumn(timestampProperty, verEntCfg.getRevisionEndTimeFieldName(), 12, 12, 12, null);
         }
     }
 
Index: src/main/java/org/hibernate/envers/configuration/metadata/MetadataTools.java
===================================================================
--- src/main/java/org/hibernate/envers/configuration/metadata/MetadataTools.java	(revision 19920)
+++ src/main/java/org/hibernate/envers/configuration/metadata/MetadataTools.java	(working copy)
@@ -48,9 +48,9 @@
 
         return id_mapping;
     }
-
-    public static Element addProperty(Element parent, String name, String type, boolean insertable, boolean key) {
-        Element prop_mapping;
+    
+    public static Element addProperty(Element parent, String name, String type, boolean insertable, boolean key, boolean update) {
+    	Element prop_mapping;
         if (key) {
             prop_mapping = parent.addElement("key-property");
         } else {
@@ -59,7 +59,7 @@
 
         prop_mapping.addAttribute("name", name);
         prop_mapping.addAttribute("insert", Boolean.toString(insertable));
-        prop_mapping.addAttribute("update", "false");
+        prop_mapping.addAttribute("update", Boolean.toString(update));
 
         if (type != null) {
             prop_mapping.addAttribute("type", type);
@@ -68,6 +68,10 @@
         return prop_mapping;
     }
 
+    public static Element addProperty(Element parent, String name, String type, boolean insertable, boolean key) {
+        return addProperty(parent, name, type, insertable, key, false);
+    }
+
     private static void addOrModifyAttribute(Element parent, String name, String value) {
         Attribute attribute = parent.attribute(name);
         if (attribute == null) {
Index: src/main/java/org/hibernate/envers/strategy/ValidTimeAuditStrategy.java
===================================================================
--- src/main/java/org/hibernate/envers/strategy/ValidTimeAuditStrategy.java	(revision 19920)
+++ src/main/java/org/hibernate/envers/strategy/ValidTimeAuditStrategy.java	(working copy)
@@ -1,10 +1,14 @@
 package org.hibernate.envers.strategy;
 
 import java.io.Serializable;
+import java.lang.reflect.Field;
+import java.lang.reflect.Method;
 import java.util.List;
 import java.util.Map;
 
 import org.hibernate.Session;
+import org.hibernate.envers.DefaultRevisionEntity;
+import org.hibernate.envers.RevisionTimestamp;
 import org.hibernate.envers.RevisionType;
 import org.hibernate.envers.configuration.AuditConfiguration;
 import org.hibernate.envers.configuration.AuditEntitiesConfiguration;
@@ -48,29 +52,26 @@
     @SuppressWarnings({"unchecked"})
     public void performCollectionChange(Session session, AuditConfiguration auditCfg,
                                         PersistentCollectionChangeData persistentCollectionChangeData, Object revision) {
-        // Update the end date of the previous row if this operation is expected to have a previous row
-        if (getRevisionType(auditCfg, persistentCollectionChangeData.getData()) != RevisionType.ADD) {
-            /*
-             Constructing a query (there are multiple id fields):
-             select e from audited_middle_ent e where e.end_rev is null and e.id1 = :id1 and e.id2 = :id2 ...
-             */
+        /*
+         Constructing a query (there are multiple id fields):
+         select e from audited_middle_ent e where e.end_rev is null and e.id1 = :id1 and e.id2 = :id2 ...
+         */
 
-            QueryBuilder qb = new QueryBuilder(persistentCollectionChangeData.getEntityName(), "e");
+        QueryBuilder qb = new QueryBuilder(persistentCollectionChangeData.getEntityName(), "e");
 
-            // Adding a parameter for each id component, except the rev number
-            String originalIdPropName = auditCfg.getAuditEntCfg().getOriginalIdPropName();
-            Map<String, Object> originalId = (Map<String, Object>) persistentCollectionChangeData.getData().get(
-                    originalIdPropName);
-            for (Map.Entry<String, Object> originalIdEntry : originalId.entrySet()) {
-                if (!auditCfg.getAuditEntCfg().getRevisionFieldName().equals(originalIdEntry.getKey())) {
-                    qb.getRootParameters().addWhereWithParam(originalIdPropName + "." + originalIdEntry.getKey(),
-                            true, "=", originalIdEntry.getValue());
-                }
+        // Adding a parameter for each id component, except the rev number
+        String originalIdPropName = auditCfg.getAuditEntCfg().getOriginalIdPropName();
+        Map<String, Object> originalId = (Map<String, Object>) persistentCollectionChangeData.getData().get(
+                originalIdPropName);
+        for (Map.Entry<String, Object> originalIdEntry : originalId.entrySet()) {
+            if (!auditCfg.getAuditEntCfg().getRevisionFieldName().equals(originalIdEntry.getKey())) {
+                qb.getRootParameters().addWhereWithParam(originalIdPropName + "." + originalIdEntry.getKey(),
+                        true, "=", originalIdEntry.getValue());
             }
-
-            updateLastRevision(session, auditCfg, qb, originalId, persistentCollectionChangeData.getEntityName(), revision);
         }
 
+        updateLastRevision(session, auditCfg, qb, originalId, persistentCollectionChangeData.getEntityName(), revision);
+
         // Save the audit data
         session.save(persistentCollectionChangeData.getEntityName(), persistentCollectionChangeData.getData());
     }
@@ -84,6 +85,7 @@
     private void updateLastRevision(Session session, AuditConfiguration auditCfg, QueryBuilder qb,
                                     Object id, String auditedEntityName, Object revision) {
         String revisionEndFieldName = auditCfg.getAuditEntCfg().getRevisionEndFieldName();
+        String revisionEndTimeFieldName = auditCfg.getAuditEntCfg().getRevisionEndTimeFieldName();
 
         // e.end_rev is null
         qb.getRootParameters().addWhere(revisionEndFieldName, true, "is", "null", false);
@@ -95,11 +97,23 @@
             // Setting the end revision to be the current rev
             Object previousData = l.get(0);
             ((Map<String, Object>) previousData).put(revisionEndFieldName, revision);
+            
+            // Find the @RevisionTimestamp
+            for(Field f : revision.getClass().getDeclaredFields()){
+            	if(f.getAnnotation(RevisionTimestamp.class) != null){
+            		try{
+            			Method m = revision.getClass().getMethod("get" + f.getName().substring(0, 1).toUpperCase() + f.getName().substring(1));
+            			long timestamp = (Long)m.invoke(revision);
+            			((Map<String, Object>) previousData).put(revisionEndTimeFieldName, timestamp);
+            		}catch(Exception e){}
+            		break;
+            	}
+            }
 
             // Saving the previous version
             session.save(auditedEntityName, previousData);
-        } else {
-            throw new RuntimeException("Cannot find previous revision for entity " + auditedEntityName + " and id " + id);
+        } else if(l.size() > 1) {
+        	throw new RuntimeException("Cannot find previous revision for entity " + auditedEntityName + " and id " + id + " received " + l.size() + " rows back");
         }
     }
 }
