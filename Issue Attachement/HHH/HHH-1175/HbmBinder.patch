Index: HbmBinder.java
===================================================================
RCS file: /cvsroot/hibernate/Hibernate3/src/org/hibernate/cfg/HbmBinder.java,v
retrieving revision 1.136
diff -u -r1.136 HbmBinder.java
--- HbmBinder.java	14 Nov 2005 17:04:51 -0000	1.136
+++ HbmBinder.java	21 Nov 2005 08:08:23 -0000
@@ -82,121 +82,95 @@
 																	// <hibernate-mapping>
 		extractRootAttributes( hmNode, mappings );
 
-		Iterator filterDefs = hmNode.elementIterator( "filter-def" );
-		while ( filterDefs.hasNext() ) {
-			parseFilterDef( (Element) filterDefs.next(), mappings );
-		}
-
-		Iterator typeDefs = hmNode.elementIterator( "typedef" );
-		while ( typeDefs.hasNext() ) {
-			Element typeDef = (Element) typeDefs.next();
-			String typeClass = typeDef.attributeValue( "class" );
-			String typeName = typeDef.attributeValue( "name" );
-			Iterator paramIter = typeDef.elementIterator( "param" );
-			Properties parameters = new Properties();
-			while ( paramIter.hasNext() ) {
-				Element param = (Element) paramIter.next();
-				parameters.setProperty( param.attributeValue( "name" ), param.getTextTrim() );
-			}
-
-			mappings.addTypeDef( typeName, typeClass, parameters );
-		}
-
-		Iterator nodes = hmNode.elementIterator( "class" );
-		while ( nodes.hasNext() ) {
-			Element n = (Element) nodes.next();
-			RootClass rootclass = new RootClass();
-			bindRootClass( n, rootclass, mappings, inheritedMetas );
-			mappings.addClass( rootclass );
-		}
-
-		Iterator subclassnodes = hmNode.elementIterator( "subclass" );
-		while ( subclassnodes.hasNext() ) {
-			Element subnode = (Element) subclassnodes.next();
-			PersistentClass superModel = getSuperclass( mappings, subnode );
-			handleSubclass( superModel, mappings, subnode, inheritedMetas );
-		}
-
-		Iterator joinedsubclassnodes = hmNode.elementIterator( "joined-subclass" );
-		while ( joinedsubclassnodes.hasNext() ) {
-			Element subnode = (Element) joinedsubclassnodes.next();
-			PersistentClass superModel = getSuperclass( mappings, subnode );
-			handleJoinedSubclass( superModel, mappings, subnode, inheritedMetas );
-		}
-
-		Iterator unionsubclassnodes = hmNode.elementIterator( "union-subclass" );
-		while ( unionsubclassnodes.hasNext() ) {
-			Element subnode = (Element) unionsubclassnodes.next();
-			PersistentClass superModel = getSuperclass( mappings, subnode );
-			handleUnionSubclass( superModel, mappings, subnode, inheritedMetas );
-		}
-
-		nodes = hmNode.elementIterator( "query" );
-		while ( nodes.hasNext() ) {
-			bindNamedQuery( (Element) nodes.next(), null, mappings );
-		}
-
-		nodes = hmNode.elementIterator( "sql-query" );
-		while ( nodes.hasNext() ) {
-			bindNamedSQLQuery( (Element) nodes.next(), null, mappings );
-		}
-
-		nodes = hmNode.elementIterator( "resultset" );
-		while ( nodes.hasNext() ) {
-			bindResultSetMappingDefinition( (Element) nodes.next(), null, mappings );
-		}
-
-		nodes = hmNode.elementIterator( "import" );
-		while ( nodes.hasNext() ) {
-			Element n = (Element) nodes.next();
-			String className = getClassName( n.attribute( "class" ), mappings );
-			Attribute renameNode = n.attribute( "rename" );
-			String rename = ( renameNode == null ) ? 
-					StringHelper.unqualify( className ) : 
-					renameNode.getValue();
-			log.debug( "Import: " + rename + " -> " + className );
-			mappings.addImport( className, rename );
-		}
-
-		nodes = hmNode.elementIterator( "database-object");
-		while ( nodes.hasNext() ) {
-			Element auxDbObjectNode = ( Element ) nodes.next();
-			AuxiliaryDatabaseObject auxDbObject = null;
-			Element definitionNode = auxDbObjectNode.element( "definition" );
-			if ( definitionNode != null ) {
-				try {
-					auxDbObject = ( AuxiliaryDatabaseObject ) ReflectHelper
-					        .classForName( definitionNode.attributeValue( "class" ) )
-					        .newInstance();
+		Iterator elementIterator = hmNode.elementIterator();
+		while( elementIterator.hasNext() ) {
+			Element element = (Element) elementIterator.next();
+			String elementName = element.getName();
+			if( elementName.equals("class") ) {
+				RootClass rootclass = new RootClass();
+				bindRootClass( element, rootclass, mappings, inheritedMetas );
+				mappings.addClass( rootclass );
+			} else if( elementName.equals("filter-def") ) {
+				parseFilterDef( element, mappings );
+			} else if( elementName.equals("typedef") ) {
+				String typeClass = element.attributeValue( "class" );
+				String typeName = element.attributeValue( "name" );
+				Iterator paramIter = element.elementIterator( "param" );
+				Properties parameters = new Properties();
+				while ( paramIter.hasNext() ) {
+					Element param = (Element) paramIter.next();
+					parameters.setProperty( param.attributeValue( "name" ), param.getTextTrim() );
+				}
+
+				mappings.addTypeDef( typeName, typeClass, parameters );
+			} else if( elementName.equals("class") ) {
+				RootClass rootclass = new RootClass();
+				bindRootClass( element, rootclass, mappings, inheritedMetas );
+				mappings.addClass( rootclass );
+			} else if( elementName.equals("subclass") ) {
+				PersistentClass superModel = getSuperclass( mappings, element );
+				handleSubclass( superModel, mappings, element, inheritedMetas );
+			} else if( elementName.equals("joined-subclass") ) {
+				PersistentClass superModel = getSuperclass( mappings, element );
+				handleJoinedSubclass( superModel, mappings, element, inheritedMetas );
+			} else if( elementName.equals("union-subclass") ) {
+				PersistentClass superModel = getSuperclass( mappings, element );
+				handleUnionSubclass( superModel, mappings, element, inheritedMetas );
+			} else if( elementName.equals("query") ) {
+				bindNamedQuery( element, null, mappings );
+			} else if( elementName.equals("sql-query") ) {
+				bindNamedSQLQuery( element, null, mappings );
+			} else if( elementName.equals("resultset") ) {
+				bindResultSetMappingDefinition( element, null, mappings );
+			} else if( elementName.equals("import") ) {
+				String className = getClassName( element.attribute( "class" ), mappings );
+				Attribute renameNode = element.attribute( "rename" );
+				String rename = ( renameNode == null ) ? 
+						StringHelper.unqualify( className ) : 
+						renameNode.getValue();
+				log.debug( "Import: " + rename + " -> " + className );
+				mappings.addImport( className, rename );
+			} else if( elementName.equals("database-object") ) {
+				AuxiliaryDatabaseObject auxDbObject = null;
+				Element definitionNode = element.element( "definition" );
+				if ( definitionNode != null ) {
+					try {
+						auxDbObject = ( AuxiliaryDatabaseObject ) ReflectHelper
+						        .classForName( definitionNode.attributeValue( "class" ) )
+						        .newInstance();
+					}
+					catch( ClassNotFoundException e ) {
+						throw new MappingException(
+						        "could not locate custom database object class [" +
+						        definitionNode.attributeValue( "class" ) + "]"
+							);
+					}
+					catch( Throwable t ) {
+						throw new MappingException(
+						        "could not instantiate custom database object class [" +
+						        definitionNode.attributeValue( "class" ) + "]"
+							);
+					}
 				}
-				catch( ClassNotFoundException e ) {
-					throw new MappingException(
-					        "could not locate custom database object class [" +
-					        definitionNode.attributeValue( "class" ) + "]"
+				else {
+					auxDbObject = new SimpleAuxiliaryDatabaseObject(
+							element.elementTextTrim( "create" ),
+							element.elementTextTrim( "drop" )
 						);
 				}
-				catch( Throwable t ) {
-					throw new MappingException(
-					        "could not instantiate custom database object class [" +
-					        definitionNode.attributeValue( "class" ) + "]"
-						);
+
+				Iterator dialectScopings = element.elementIterator( "dialect-scope" );
+				while ( dialectScopings.hasNext() ) {
+					Element dialectScoping = ( Element ) dialectScopings.next();
+					auxDbObject.addDialectScope( dialectScoping.attributeValue( "name" ) );
 				}
-			}
-			else {
-				auxDbObject = new SimpleAuxiliaryDatabaseObject(
-				        auxDbObjectNode.elementTextTrim( "create" ),
-				        auxDbObjectNode.elementTextTrim( "drop" )
-					);
-			}
 
-			Iterator dialectScopings = auxDbObjectNode.elementIterator( "dialect-scope" );
-			while ( dialectScopings.hasNext() ) {
-				Element dialectScoping = ( Element ) dialectScopings.next();
-				auxDbObject.addDialectScope( dialectScoping.attributeValue( "name" ) );
+				mappings.addAuxiliaryDatabaseObject( auxDbObject );
+			} else if( elementName.equals("") ) {
+				// no error message ?
 			}
-
-			mappings.addAuxiliaryDatabaseObject( auxDbObject );
 		}
+
 	}
 
 	private static void extractRootAttributes(Element hmNode, Mappings mappings) {
