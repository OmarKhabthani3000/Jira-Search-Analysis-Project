Index: testsuite/src/test/java/org/hibernate/test/criteria/AliasToBeanTest.java
===================================================================
--- testsuite/src/test/java/org/hibernate/test/criteria/AliasToBeanTest.java	(revision 0)
+++ testsuite/src/test/java/org/hibernate/test/criteria/AliasToBeanTest.java	(revision 0)
@@ -0,0 +1,66 @@
+package org.hibernate.test.criteria;
+
+import org.hibernate.Session;
+import org.hibernate.Transaction;
+import org.hibernate.criterion.*;
+import org.hibernate.junit.functional.FunctionalTestCase;
+import org.hibernate.transform.Transformers;
+
+import java.util.List;
+
+public class AliasToBeanTest extends FunctionalTestCase {
+    public AliasToBeanTest(String string) {
+        super(string);
+    }
+
+    public String[] getMappings() {
+        return new String[]{"criteria/Enrolment.hbm.xml"};
+    }
+
+    public void testAliasToBeanWithAliasesThatDontMatchPropertyNames() throws Exception {
+        Session session = openSession();
+        Transaction t = session.beginTransaction();
+
+        Student axl = new Student();
+        axl.setName("Axl Rose");
+        axl.setStudentNumber(8675309);
+        session.persist(axl);
+
+        List result = session.createCriteria(Student.class)
+                .add(Restrictions.eq("name", axl.getName()))
+                .setProjection(Projections.projectionList().add(Property.forName("name"), "studentName"))
+                .setResultTransformer(Transformers.aliasToBean(StudentDTO.class)).list();
+
+        assertEquals(1, result.size());
+        StudentDTO dto = (StudentDTO) result.get(0);
+
+        assertEquals(axl.getName(), dto.getName());
+        session.delete(axl);
+        t.commit();
+        session.close();
+    }
+
+    public void testAliasToBeanWithAliasesDoMatchPropertyNames() throws Exception {
+        Session session = openSession();
+        Transaction t = session.beginTransaction();
+
+        Student axl = new Student();
+        axl.setName("Axl Rose");
+        axl.setStudentNumber(8675309);
+        session.persist(axl);
+        
+        List result = session.createCriteria(Student.class)
+                .add(Restrictions.eq("name", axl.getName()))
+                .setProjection(Projections.projectionList().add(Property.forName("name"), "name"))
+                .setProjection(Projections.projectionList().add(Property.forName("studentNumber"), "studentNumber"))
+                .setResultTransformer(Transformers.aliasToBean(Student.class)).list();
+
+        assertEquals(1, result.size());
+        StudentDTO dto = (StudentDTO) result.get(0);
+
+        assertEquals(axl.getName(), dto.getName());
+        session.delete(axl);
+        t.commit();
+        session.close();
+    }
+}
\ No newline at end of file
