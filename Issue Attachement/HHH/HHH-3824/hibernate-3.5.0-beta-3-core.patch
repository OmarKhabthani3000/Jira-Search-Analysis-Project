Index: core/src/main/java/org/hibernate/mapping/OneToOne.java
===================================================================
--- core/src/main/java/org/hibernate/mapping/OneToOne.java	Tue Feb 02 16:01:45 CET 2010
+++ core/src/main/java/org/hibernate/mapping/OneToOne.java	Tue Feb 02 16:01:45 CET 2010
@@ -96,7 +96,7 @@
 
 	public void createForeignKey() throws MappingException {
 		if ( constrained && referencedPropertyName==null) {
-			//TODO: handle the case of a foreign key to something other than the pk
+            // the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints
 			createForeignKeyOfEntity( ( (EntityType) getType() ).getAssociatedEntityName() );
 		}
 	}
Index: core/src/main/java/org/hibernate/mapping/ManyToOne.java
===================================================================
--- core/src/main/java/org/hibernate/mapping/ManyToOne.java	Tue Feb 02 16:01:45 CET 2010
+++ core/src/main/java/org/hibernate/mapping/ManyToOne.java	Tue Feb 02 16:01:45 CET 2010
@@ -63,41 +63,6 @@
 		} 
 	}
 
-	public void createPropertyRefConstraints(Map persistentClasses) {
-		if (referencedPropertyName!=null) {
-			PersistentClass pc = (PersistentClass) persistentClasses.get(getReferencedEntityName() );
-			
-			Property property = pc.getReferencedProperty( getReferencedPropertyName() );
-			
-			if (property==null) {
-				throw new MappingException(
-						"Could not find property " + 
-						getReferencedPropertyName() + 
-						" on " + 
-						getReferencedEntityName() 
-					);
-			} 
-			else {
-				if ( !hasFormula() && !"none".equals( getForeignKeyName() ) ) {
-					java.util.List refColumns = new ArrayList();
-					Iterator iter = property.getColumnIterator();
-					while ( iter.hasNext() ) {
-						Column col = (Column) iter.next();
-						refColumns.add( col );							
-					}
-					
-					ForeignKey fk = getTable().createForeignKey( 
-							getForeignKeyName(), 
-							getConstraintColumns(), 
-							( (EntityType) getType() ).getAssociatedEntityName(), 
-							refColumns 
-						);
-					fk.setCascadeDeleteEnabled(isCascadeDeleteEnabled() );
-				}
-			}
-		}
-	}
-	
 	public Object accept(ValueVisitor visitor) {
 		return visitor.accept(this);
 	}
Index: core/src/main/java/org/hibernate/mapping/ToOne.java
===================================================================
--- core/src/main/java/org/hibernate/mapping/ToOne.java	Tue Feb 02 16:01:45 CET 2010
+++ core/src/main/java/org/hibernate/mapping/ToOne.java	Tue Feb 02 16:01:45 CET 2010
@@ -27,8 +27,11 @@
 import org.hibernate.FetchMode;
 import org.hibernate.MappingException;
 import org.hibernate.engine.Mapping;
+import org.hibernate.type.EntityType;
 import org.hibernate.type.Type;
 import org.hibernate.util.ReflectHelper;
+import java.util.ArrayList;
+import java.util.Iterator;
 
 /**
  * A simple-point association (ie. a reference to another entity).
@@ -121,11 +124,39 @@
 		this.unwrapProxy = unwrapProxy;
 	}
 	
-}
+  public void createPropertyRefConstraints(java.util.Map persistentClasses) {
+    if (referencedPropertyName != null) {
+      PersistentClass pc = (PersistentClass) persistentClasses.get(getReferencedEntityName());
 
+      Property property = pc.getReferencedProperty(getReferencedPropertyName());
 
+      if (property == null) {
+        throw new MappingException(
+          "Could not find property " +
+          getReferencedPropertyName() +
+          " on " +
+          getReferencedEntityName());
+      } else {
+        if (!hasFormula() && !"none".equals(getForeignKeyName())) {
+          java.util.List refColumns = new ArrayList();
+          Iterator iter = property.getColumnIterator();
+          while (iter.hasNext()) {
+            Column col = (Column) iter.next();
+            refColumns.add(col);
+          }
 
+          ForeignKey fk = getTable().createForeignKey(
+            getForeignKeyName(),
+            getConstraintColumns(),
+            ((EntityType) getType()).getAssociatedEntityName(),
+            refColumns);
+          fk.setCascadeDeleteEnabled(isCascadeDeleteEnabled());
+        }
+      }
+    }
+  }
 
+}
 
 
 
