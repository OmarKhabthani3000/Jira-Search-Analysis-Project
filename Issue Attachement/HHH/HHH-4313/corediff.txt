Index: core/src/main/java/org/hibernate/cfg/SecondPassQueue.java
===================================================================
--- core/src/main/java/org/hibernate/cfg/SecondPassQueue.java	(revision 0)
+++ core/src/main/java/org/hibernate/cfg/SecondPassQueue.java	(revision 0)
@@ -0,0 +1,80 @@
+package org.hibernate.cfg;
+
+import java.util.*;
+
+/**
+ * Manages second passes.
+ * @author Daniel Pitts
+ */
+public class SecondPassQueue extends AbstractList implements List{
+    int inSecondPass;
+    final List secondPasses;
+    final Map classes;
+
+    public SecondPassQueue(Map classes) {
+        this.secondPasses = new ArrayList();
+        this.classes = classes;
+    }
+
+    /**
+     * Add or execute a SecondPass.
+     * @param sp the second pass to add.
+     */
+    public void addSecondPass(SecondPass sp) {
+        addSecondPass(sp, false);
+    }
+
+    /**
+     * Add or execute a second pass
+     * @param sp the second pass to add.
+     * @param onTopOfTheQueue where in the queue to add if not executed
+     * immediately.
+     */
+    public void addSecondPass(SecondPass sp, boolean onTopOfTheQueue) {
+        if (onTopOfTheQueue) {
+            add(0, sp);
+        }
+        else {
+            add(sp);
+        }
+    }
+
+
+    public void add(int index, Object element) {
+        if (isInSecondPass()) {
+            ((SecondPass)element).doSecondPass(classes);
+        } else {
+            secondPasses.add(index, element);
+        }
+    }
+
+    /**
+     * Mark that we are starting a second pass.
+     * Any calls to add will execute instead of queue.
+     */
+    public void startSecondPass() {
+        ++inSecondPass;
+    }
+    /**
+     * Mark that we have finished execution a second pass.
+     */
+    public void endSecondPass() {
+        --inSecondPass;
+    }
+
+    public Object get(int index) {
+        return secondPasses.get(index);
+    }
+
+    public Iterator iterator() {
+        return secondPasses.iterator();
+    }
+
+    public int size() {
+        return secondPasses.size();
+    }
+
+    public boolean isInSecondPass() {
+        return inSecondPass > 0;
+    }
+}
Index: core/src/main/java/org/hibernate/cfg/Configuration.java
===================================================================
--- core/src/main/java/org/hibernate/cfg/Configuration.java	(revision 14334)
+++ core/src/main/java/org/hibernate/cfg/Configuration.java	(working copy)
@@ -138,7 +138,8 @@
 	 */
 	protected Map sqlResultSetMappings;
 	protected Map filterDefinitions;
-	protected List secondPasses;
+//	protected List secondPasses;
+    protected SecondPassQueue secondPasses;
 	protected List propertyReferences;
 //	protected List extendsQueue;
 	protected Map extendsQueue;
@@ -158,7 +159,7 @@
 
 	protected final SettingsFactory settingsFactory;
 
-	protected void reset() {
+    protected void reset() {
 		classes = new HashMap();
 		imports = new HashMap();
 		collections = new HashMap();
@@ -169,7 +170,8 @@
 		xmlHelper = new XMLHelper();
 		typeDefs = new HashMap();
 		propertyReferences = new ArrayList();
-		secondPasses = new ArrayList();
+//		secondPasses = new ArrayList();
+        secondPasses = new SecondPassQueue(classes);
 		interceptor = EmptyInterceptor.INSTANCE;
 		properties = Environment.getProperties();
 		entityResolver = XMLHelper.DEFAULT_DTD_RESOLVER;
@@ -191,7 +193,7 @@
 	protected Configuration(SettingsFactory settingsFactory) {
 		this.settingsFactory = settingsFactory;
 		reset();
-	}
+    }
 
 	public Configuration() {
 		this( new SettingsFactory() );
@@ -688,7 +690,7 @@
 				namedSqlQueries,
 				sqlResultSetMappings,
 				imports,
-				secondPasses,
+                secondPasses,
 				propertyReferences,
 				namingStrategy,
 				typeDefs,
@@ -1128,7 +1130,7 @@
 		processExtendsQueue();
 
 		log.debug( "processing collection mappings" );
-
+        secondPasses.startSecondPass();
 		Iterator iter = secondPasses.iterator();
 		while ( iter.hasNext() ) {
 			SecondPass sp = (SecondPass) iter.next();
@@ -1145,6 +1147,7 @@
 			sp.doSecondPass( classes );
 			iter.remove();
 		}
+        secondPasses.endSecondPass();
 
 		log.debug( "processing association property references" );
 
