Index: core/src/org/hibernate/cfg/Configuration.java
===================================================================
--- core/src/org/hibernate/cfg/Configuration.java	(revision 14387)
+++ core/src/org/hibernate/cfg/Configuration.java	Tue Mar 04 11:01:38 EST 2008
@@ -138,7 +138,8 @@
 	 */
 	protected Map sqlResultSetMappings;
 	protected Map filterDefinitions;
-	protected List secondPasses;
+//	protected List secondPasses;
+    protected SecondPassQueue secondPasses;
 	protected List propertyReferences;
 //	protected List extendsQueue;
 	protected Map extendsQueue;
@@ -158,7 +159,7 @@
 
 	protected final SettingsFactory settingsFactory;
 
-	protected void reset() {
+    protected void reset() {
 		classes = new HashMap();
 		imports = new HashMap();
 		collections = new HashMap();
@@ -169,7 +170,8 @@
 		xmlHelper = new XMLHelper();
 		typeDefs = new HashMap();
 		propertyReferences = new ArrayList();
-		secondPasses = new ArrayList();
+//		secondPasses = new ArrayList();
+		secondPasses = new SecondPassQueue(classes);
 		interceptor = EmptyInterceptor.INSTANCE;
 		properties = Environment.getProperties();
 		entityResolver = XMLHelper.DEFAULT_DTD_RESOLVER;
@@ -191,7 +193,7 @@
 	protected Configuration(SettingsFactory settingsFactory) {
 		this.settingsFactory = settingsFactory;
 		reset();
-	}
+    }
 
 	public Configuration() {
 		this( new SettingsFactory() );
@@ -1128,7 +1130,7 @@
 		processExtendsQueue();
 
 		log.debug( "processing collection mappings" );
-
+		secondPasses.startSecondPass();
 		Iterator iter = secondPasses.iterator();
 		while ( iter.hasNext() ) {
 			SecondPass sp = (SecondPass) iter.next();
@@ -1145,6 +1147,7 @@
 			sp.doSecondPass( classes ); 
 			iter.remove();
 		}
+		secondPasses.endSecondPass();
 
 		log.debug( "processing association property references" );
 
@@ -1621,7 +1624,7 @@
 
 	private void parseSecurity(Element secNode) {
 		String contextId = secNode.attributeValue( "context" );
-      setProperty(Environment.JACC_CONTEXTID, contextId);
+		setProperty(Environment.JACC_CONTEXTID, contextId);
 		log.info( "JACC contextID: " + contextId );
 		JACCConfiguration jcfg = new JACCConfiguration( contextId );
 		Iterator grantElements = secNode.elementIterator();
Index: core/src/org/hibernate/cfg/SecondPassQueue.java
===================================================================
--- core/src/org/hibernate/cfg/SecondPassQueue.java	Tue Mar 04 13:12:48 EST 2008
+++ core/src/org/hibernate/cfg/SecondPassQueue.java	Tue Mar 04 13:12:48 EST 2008
@@ -0,0 +1,174 @@
+package org.hibernate.cfg;
+
+import java.io.Serializable;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Iterator;
+import java.util.List;
+import java.util.ListIterator;
+import java.util.Map;
+
+/**
+ * Manages second passes.
+ *
+ * @author Daniel Pitts
+ * @author Emmanuel Bernard
+ */
+public class SecondPassQueue implements List, Serializable {
+	private int inSecondPass;
+	private final List secondPasses;
+	private final Map classes;
+
+	public SecondPassQueue(Map classes) {
+		this.secondPasses = new ArrayList();
+		this.classes = classes;
+	}
+
+	/**
+	 * Add or execute a SecondPass.
+	 *
+	 * @param sp the second pass to add.
+	 */
+	public void addSecondPass(SecondPass sp) {
+		addSecondPass( sp, false );
+	}
+
+	/**
+	 * Add or execute a second pass
+	 *
+	 * @param sp			  the second pass to add.
+	 * @param onTopOfTheQueue where in the queue to add if not executed
+	 *                        immediately.
+	 */
+	public void addSecondPass(SecondPass sp, boolean onTopOfTheQueue) {
+		if ( onTopOfTheQueue ) {
+			add( 0, sp );
+		}
+		else {
+			add( sp );
+		}
+	}
+
+
+	public void add(int index, Object element) {
+		if ( isInSecondPass() ) {
+			( (SecondPass) element ).doSecondPass( classes );
+		}
+		else {
+			secondPasses.add( index, element );
+		}
+	}
+
+	public Object remove(int index) {
+		return secondPasses.remove( index );
+	}
+
+	public int indexOf(Object o) {
+		return secondPasses.indexOf( o );
+	}
+
+	public int lastIndexOf(Object o) {
+		return secondPasses.lastIndexOf( o );
+	}
+
+	public ListIterator listIterator() {
+		return secondPasses.listIterator();
+	}
+
+	public ListIterator listIterator(int index) {
+		return secondPasses.listIterator( index );
+	}
+
+	public List subList(int fromIndex, int toIndex) {
+		return secondPasses.subList( fromIndex, toIndex );
+	}
+
+	/**
+	 * Mark that we are starting a second pass.
+	 * Any calls to add will execute instead of queue.
+	 */
+	public void startSecondPass() {
+		inSecondPass++;
+	}
+
+	/**
+	 * Mark that we have finished execution a second pass.
+	 */
+	public void endSecondPass() {
+		inSecondPass--;
+	}
+
+	public Object get(int index) {
+		return secondPasses.get( index );
+	}
+
+	public Object set(int index, Object element) {
+		return secondPasses.set( index, element );
+	}
+
+	public Iterator iterator() {
+		return secondPasses.iterator();
+	}
+
+	public Object[] toArray() {
+		return secondPasses.toArray();
+	}
+
+	public boolean add(Object element) {
+		if ( isInSecondPass() ) {
+			( (SecondPass) element ).doSecondPass( classes );
+			return false;
+		}
+		else {
+			return secondPasses.add( element );
+		}
+	}
+
+	public boolean remove(Object o) {
+		return secondPasses.remove( o );
+	}
+
+	public boolean addAll(Collection c) {
+		return secondPasses.addAll( c );
+	}
+
+	public boolean addAll(int index, Collection c) {
+		return secondPasses.addAll( index, c );
+	}
+
+	public void clear() {
+		secondPasses.clear();
+	}
+
+	public boolean retainAll(Collection c) {
+		return secondPasses.retainAll( c );
+	}
+
+	public boolean removeAll(Collection c) {
+		return secondPasses.removeAll( c );
+	}
+
+	public boolean containsAll(Collection c) {
+		return secondPasses.containsAll( c );
+	}
+
+	public Object[] toArray(Object[] a) {
+		return secondPasses.toArray( a );
+	}
+
+	public int size() {
+		return secondPasses.size();
+	}
+
+	public boolean isEmpty() {
+		return secondPasses.isEmpty();
+	}
+
+	public boolean contains(Object o) {
+		return secondPasses.contains( o );
+	}
+
+	public boolean isInSecondPass() {
+		return inSecondPass > 0;
+	}
+}
