Index: D:/dev/workspace/hibernate3/doc/reference/en/modules/basic_mapping.xml
===================================================================
--- D:/dev/workspace/hibernate3/doc/reference/en/modules/basic_mapping.xml	(revision 11406)
+++ D:/dev/workspace/hibernate3/doc/reference/en/modules/basic_mapping.xml	(working copy)
@@ -640,11 +640,6 @@
             </programlistingco>
 
             <para>
-                If the <literal>name</literal> attribute is missing, it is assumed that the class has no
-                identifier property.
-            </para>
-
-            <para>
                 The <literal>unsaved-value</literal> attribute is almost never needed in Hibernate3.
             </para>
 
Index: D:/dev/workspace/hibernate3/doc/reference/en/modules/best_practices.xml
===================================================================
--- D:/dev/workspace/hibernate3/doc/reference/en/modules/best_practices.xml	(revision 11406)
+++ D:/dev/workspace/hibernate3/doc/reference/en/modules/best_practices.xml	(working copy)
@@ -13,16 +13,6 @@
             </listitem>
         </varlistentry>
         <varlistentry>
-            <term>Declare identifier properties on persistent classes.</term>
-            <listitem>
-                <para>
-                    Hibernate makes identifier properties optional. There are all sorts of reasons why
-                    you should use them. We recommend that identifiers be 'synthetic' (generated, with
-                    no business meaning).
-                </para>
-            </listitem>
-        </varlistentry>
-        <varlistentry>
             <term>Identify natural keys.</term>
             <listitem>
                 <para>
Index: D:/dev/workspace/hibernate3/doc/reference/en/modules/persistent_classes.xml
===================================================================
--- D:/dev/workspace/hibernate3/doc/reference/en/modules/persistent_classes.xml	(revision 11406)
+++ D:/dev/workspace/hibernate3/doc/reference/en/modules/persistent_classes.xml	(working copy)
@@ -120,7 +120,7 @@
         </sect2>
 
         <sect2 id="persistent-classes-pojo-identifier" revision="2">
-            <title>Provide an identifier property (optional)</title>
+            <title>Provide an identifier property</title>
 
             <para>
                 <literal>Cat</literal> has a property called <literal>id</literal>. This property 
@@ -132,35 +132,6 @@
             </para>
 
             <para>
-                The identifier property is strictly optional. You can leave them off and let Hibernate 
-                keep track of object identifiers internally. We do not recommend this, however.
-            </para>
-
-            <para>
-                In fact, some functionality is available only to classes which declare an
-                identifier property:
-            </para>
-
-            <itemizedlist spacing="compact">
-                <listitem>
-                    <para>
-                        Transitive reattachment for detached objects (cascade update or cascade
-                        merge) - see <xref linkend="objectstate-transitive"/>
-                    </para>
-                </listitem>
-                <listitem>
-                    <para>
-                        <literal>Session.saveOrUpdate()</literal>
-                    </para>
-                </listitem>
-                <listitem>
-                    <para>
-                        <literal>Session.merge()</literal>
-                    </para>
-                </listitem>
-            </itemizedlist>
-
-            <para>
                 We recommend you declare consistently-named identifier properties on persistent
                 classes. We further recommend that you use a nullable (ie. non-primitive) type.
             </para>
Index: D:/dev/workspace/hibernate3/doc/reference/en/modules/tutorial.xml
===================================================================
--- D:/dev/workspace/hibernate3/doc/reference/en/modules/tutorial.xml	(revision 11406)
+++ D:/dev/workspace/hibernate3/doc/reference/en/modules/tutorial.xml	(working copy)
@@ -125,13 +125,13 @@
             <para>
                 The <literal>id</literal> property holds a unique identifier value for a particular event.
                 All persistent entity classes (there are less important dependent classes as well) will need
-                such an identifier property if we want to use the full feature set of Hibernate. In fact,
-                most applications (esp. web applications) need to distinguish objects by identifier, so you
-                should consider this a feature rather than a limitation. However, we usually don't manipulate
-                the identity of an object, hence the setter method should be private. Only Hibernate will assign
-                identifiers when an object is saved. You can see that Hibernate can access public, private,
-                and protected accessor methods, as well as (public, private, protected) fields directly. The
-                choice is up to you and you can match it to fit your application design.
+                such an identifier property. In fact, most applications (esp. web applications) need to 
+                distinguish objects by identifier, so you should consider this a feature rather than a limitation.
+                However, we usually don't manipulate the identity of an object, hence the setter method should be 
+                private. Only Hibernate will assign identifiers when an object is saved. You can see that 
+                Hibernate can access public, private, and protected accessor methods, as well as 
+                (public, private, protected) fields directly. The choice is up to you and you can match it to 
+                fit your application design.
             </para>
 
             <para>
