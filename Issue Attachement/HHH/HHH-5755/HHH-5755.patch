From 3f14ed48ead36239898657700aefc9571a68c856 Mon Sep 17 00:00:00 2001
From: Guy Veraghtert <guy.veraghtert@gmail.com>
Date: Mon, 4 Apr 2011 21:31:11 +0200
Subject: [PATCH] HINO-5755

---
 .../ejb/criteria/CriteriaQueryCompiler.java        |    9 +--
 .../org/hibernate/ejb/criteria/basic/CastTest.java |   76 ++++++++++++++++++++
 2 files changed, 77 insertions(+), 8 deletions(-)
 create mode 100644 hibernate-entitymanager/src/test/java/org/hibernate/ejb/criteria/basic/CastTest.java

diff --git a/hibernate-entitymanager/src/main/java/org/hibernate/ejb/criteria/CriteriaQueryCompiler.java b/hibernate-entitymanager/src/main/java/org/hibernate/ejb/criteria/CriteriaQueryCompiler.java
index a6f5317..d63f5e4 100644
--- a/hibernate-entitymanager/src/main/java/org/hibernate/ejb/criteria/CriteriaQueryCompiler.java
+++ b/hibernate-entitymanager/src/main/java/org/hibernate/ejb/criteria/CriteriaQueryCompiler.java
@@ -209,14 +209,7 @@ public class CriteriaQueryCompiler implements Serializable {
 							"Could not convert java type [" + javaType.getName() + "] to Hibernate type"
 					);
 				}
-				int[] sqlTypeCodes = hibernateType.sqlTypes( factory );
-				if ( sqlTypeCodes.length != 1 ) {
-					throw new IllegalArgumentException(
-							"Invalid Hibernate Type [" + hibernateType.getName() +
-									"] for cast : more than one column spanned"
-					);
-				}
-				return factory.getDialect().getCastTypeName( sqlTypeCodes[0] );
+				return hibernateType.getName();
 			}
 		};
 
diff --git a/hibernate-entitymanager/src/test/java/org/hibernate/ejb/criteria/basic/CastTest.java b/hibernate-entitymanager/src/test/java/org/hibernate/ejb/criteria/basic/CastTest.java
new file mode 100644
index 0000000..9c6cb27
--- /dev/null
+++ b/hibernate-entitymanager/src/test/java/org/hibernate/ejb/criteria/basic/CastTest.java
@@ -0,0 +1,76 @@
+/*
+ * Hibernate, Relational Persistence for Idiomatic Java
+ *
+ * Copyright (c) 2010, Red Hat Inc. or third-party contributors as
+ * indicated by the @author tags or express copyright attribution
+ * statements applied by the authors.  All third-party contributions are
+ * distributed under license by Red Hat Inc.
+ *
+ * This copyrighted material is made available to anyone wishing to use, modify,
+ * copy, or redistribute it subject to the terms and conditions of the GNU
+ * Lesser General Public License, as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
+ * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
+ * for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with this distribution; if not, write to:
+ * Free Software Foundation, Inc.
+ * 51 Franklin Street, Fifth Floor
+ * Boston, MA  02110-1301  USA
+ */
+package org.hibernate.ejb.criteria.basic;
+
+import java.math.BigDecimal;
+import java.math.BigInteger;
+import java.util.List;
+
+import javax.persistence.EntityManager;
+import javax.persistence.criteria.CriteriaBuilder;
+import javax.persistence.criteria.CriteriaQuery;
+import javax.persistence.criteria.Root;
+
+import org.hibernate.ejb.metamodel.AbstractMetamodelSpecificTest;
+import org.hibernate.ejb.metamodel.Product;
+import org.hibernate.ejb.metamodel.Product_;
+
+public class CastTest extends AbstractMetamodelSpecificTest {
+	
+	private static final int QUANTITY = 2;
+	private CriteriaBuilder builder;
+
+	@Override
+	public void setUp() throws Exception {
+		super.setUp();
+		builder = factory.getCriteriaBuilder();
+		EntityManager em = getOrCreateEntityManager();
+		em.getTransaction().begin();
+		Product product = new Product();
+		product.setId( "product1" );
+		product.setPrice( 1.23d );
+		product.setQuantity( QUANTITY );
+		product.setPartNumber( ((long)Integer.MAX_VALUE) + 1 );
+		product.setRating( 1.999f );
+		product.setSomeBigInteger( BigInteger.valueOf( 987654321 ) );
+		product.setSomeBigDecimal( BigDecimal.valueOf( 987654.321 ) );
+		em.persist( product );
+		em.getTransaction().commit();
+		em.close();
+	}
+
+	public void testCastToString() {
+		EntityManager em = getOrCreateEntityManager();
+		em.getTransaction().begin();
+		CriteriaQuery<Product> criteria = builder.createQuery( Product.class );
+		Root<Product> root = criteria.from( Product.class );
+		criteria.where( builder.equal(root.get(Product_.quantity).as(String.class), builder.literal(String.valueOf(QUANTITY))) );
+		List<Product> result = em.createQuery( criteria ).getResultList();
+		assertEquals( 1, result.size() );
+		em.getTransaction().commit();
+		em.close();
+	}
+
+	
+}
-- 
1.7.4.1

