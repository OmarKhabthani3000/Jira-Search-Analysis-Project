Index: org/hibernate/engine/SessionFactoryImplementor.java
===================================================================
--- org/hibernate/engine/SessionFactoryImplementor.java	(revision 14030)
+++ org/hibernate/engine/SessionFactoryImplementor.java	(working copy)
@@ -156,6 +156,27 @@
 			final ConnectionReleaseMode connectionReleaseMode) throws HibernateException;
 
 	/**
+	 * Open a session conforming to the given parameters.  Used mainly by
+	 * {@link org.hibernate.context.JTASessionContext} for current session processing.
+	 *
+	 * @param connection The external jdbc connection to use, if one (i.e., optional).
+	 * @param flushBeforeCompletionEnabled Should the session be auto-flushed
+	 * prior to transaction completion?
+	 * @param autoCloseSessionEnabled Should the session be auto-closed after
+	 * transaction completion?
+	 * @param connectionReleaseMode The release mode for managed jdbc connections.
+	 * @param interceptor an optional Interceptor
+	 * @return An appropriate session.
+	 * @throws HibernateException
+	 */
+	public org.hibernate.classic.Session openSession(
+			final Connection connection,
+			final boolean flushBeforeCompletionEnabled,
+			final boolean autoCloseSessionEnabled,
+			final ConnectionReleaseMode connectionReleaseMode,
+			final Interceptor interceptor) throws HibernateException;
+
+	/**
 	 * Retrieves a set of all the collection roles in which the given entity
 	 * is a participant, as either an index or an element.
 	 *
Index: org/hibernate/impl/SessionFactoryImpl.java
===================================================================
--- org/hibernate/impl/SessionFactoryImpl.java	(revision 14030)
+++ org/hibernate/impl/SessionFactoryImpl.java	(working copy)
@@ -524,12 +524,27 @@
 	        final boolean flushBeforeCompletionEnabled,
 	        final boolean autoCloseSessionEnabled,
 	        final ConnectionReleaseMode connectionReleaseMode) throws HibernateException {
+		return openSession(
+				connection,
+		        flushBeforeCompletionEnabled,
+		        autoCloseSessionEnabled,
+		        connectionReleaseMode,
+		        interceptor
+			);
+	}
+
+	public org.hibernate.classic.Session openSession(
+			final Connection connection,
+	        final boolean flushBeforeCompletionEnabled,
+	        final boolean autoCloseSessionEnabled,
+	        final ConnectionReleaseMode connectionReleaseMode,
+		final Interceptor interceptor) throws HibernateException {
 		return new SessionImpl(
 				connection,
 		        this,
 		        true,
 		        settings.getCacheProvider().nextTimestamp(),
-		        interceptor,
+		        interceptor != null ? interceptor : this.interceptor,
 		        settings.getDefaultEntityMode(),
 		        flushBeforeCompletionEnabled,
 		        autoCloseSessionEnabled,
