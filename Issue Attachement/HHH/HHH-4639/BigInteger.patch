Index: hibernate_firebird/IdentifierGeneratorHelper.java
===================================================================
--- hibernate_firebird/IdentifierGeneratorHelper.java	(revision ???)
+++ hibernate_firebird/IdentifierGeneratorHelper.java	(working copy)
@@ -25,6 +25,7 @@
 package org.hibernate.id;
 
 import java.io.Serializable;
+import java.math.BigInteger;
 import java.sql.ResultSet;
 import java.sql.SQLException;
 
@@ -119,6 +120,9 @@
 		else if ( clazz == String.class ) {
 			return rs.getString( 1 );
 		}
+		else if ( clazz == BigInteger.class ) {
+			return rs.getBigDecimal( 1 ).toBigInteger();
+		}
 		else {
 			throw new IdentifierGenerationException( "this id generator generates long, integer, short or string" );
 		}
Index: hibernate_firebird/SequenceHiLoGenerator.java
===================================================================
--- hibernate_firebird/SequenceHiLoGenerator.java	(revision ???)
+++ hibernate_firebird/SequenceHiLoGenerator.java	(working copy)
@@ -25,6 +25,7 @@
 package org.hibernate.id;
 
 import java.io.Serializable;
+import java.math.BigInteger;
 import java.util.Properties;
 
 import org.slf4j.Logger;
@@ -71,6 +72,9 @@
 
 	public synchronized Serializable generate(SessionImplementor session, Object obj) 
 	throws HibernateException {
+		if (BigInteger.class == returnClass)
+			//BigInteger can not be cast to long and generated by SequenceGenerator
+			return super.generate(session, obj);
 		if (maxLo < 1) {
 			//keep the behavior consistent even for boundary usages
 			long val = ( (Number) super.generate(session, obj) ).longValue();
