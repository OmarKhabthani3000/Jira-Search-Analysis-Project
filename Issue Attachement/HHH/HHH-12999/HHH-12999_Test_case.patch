Index: hibernate-core/src/test/java/org/hibernate/jpa/test/criteria/ProjectionJoinTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- hibernate-core/src/test/java/org/hibernate/jpa/test/criteria/ProjectionJoinTest.java	(date 1538153999000)
+++ hibernate-core/src/test/java/org/hibernate/jpa/test/criteria/ProjectionJoinTest.java	(date 1538153999000)
@@ -0,0 +1,64 @@
+package org.hibernate.jpa.test.criteria;
+
+import org.hibernate.jpa.test.metamodel.AbstractMetamodelSpecificTest;
+import org.hibernate.jpa.test.metamodel.Address;
+import org.hibernate.jpa.test.metamodel.Customer;
+import org.junit.Test;
+
+import javax.persistence.EntityManager;
+import javax.persistence.TypedQuery;
+import javax.persistence.criteria.CriteriaBuilder;
+import javax.persistence.criteria.CriteriaQuery;
+import javax.persistence.criteria.Root;
+
+/**
+ * Created on 27/09/18.
+ *
+ * @author Reda.Housni-Alaoui
+ */
+public class ProjectionJoinTest extends AbstractMetamodelSpecificTest {
+
+    @Test
+    public void testCriteriaQuery() {
+        EntityManager em = entityManagerFactory().createEntityManager();
+        em.getTransaction().begin();
+        Customer customer = new Customer();
+        customer.setId("c1");
+        em.persist(customer);
+        em.getTransaction().commit();
+        em.close();
+
+        em = entityManagerFactory().createEntityManager();
+        em.getTransaction().begin();
+        CriteriaBuilder cb = em.getCriteriaBuilder();
+        CriteriaQuery<CustomerProjection> cq = cb.createQuery(CustomerProjection.class);
+        Root<Customer> customerRoot = cq.from(Customer.class);
+        cq.multiselect(customerRoot.get("id"), customerRoot.get("home"))
+                .where(cb.equal(customerRoot.get("id"), customer.getId()));
+
+        TypedQuery<CustomerProjection> typedQuery = em.createQuery(cq);
+        typedQuery.getSingleResult();
+        em.getTransaction().commit();
+        em.close();
+    }
+
+    static class CustomerProjection {
+
+        private final String id;
+        private final Address home;
+
+        public CustomerProjection(String id, Address home) {
+            this.id = id;
+            this.home = home;
+        }
+
+        public String getId() {
+            return id;
+        }
+
+        public Address getAddress() {
+            return home;
+        }
+    }
+
+}
