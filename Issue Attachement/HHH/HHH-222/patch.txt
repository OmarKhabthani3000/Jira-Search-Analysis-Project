Index: CGLIBLazyInitializer.java
===================================================================
RCS file: /cvsroot/hibernate/Hibernate3/src/org/hibernate/proxy/CGLIBLazyInitializer.java,v
retrieving revision 1.7
diff -u -r1.7 CGLIBLazyInitializer.java
--- CGLIBLazyInitializer.java	12 Feb 2005 07:19:45 -0000	1.7
+++ CGLIBLazyInitializer.java	15 Mar 2005 16:08:29 -0000
@@ -3,6 +3,7 @@
 
 import java.io.Serializable;
 import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
 
 import net.sf.cglib.proxy.Enhancer;
 import net.sf.cglib.proxy.Factory;
@@ -127,21 +128,45 @@
 		final Object[] args,
 		final MethodProxy proxy)
 	throws Throwable {
-		if (constructed) {
-			Object result = invoke(method, args, obj);
-			if (result==INVOKE_IMPLEMENTATION) {
-				Object target = getImplementation();
-				Object retval = proxy.invoke(target, args);
-				return retval==target ? obj : retval;
-			}
-			else {
-				return result;
-			}
-		}
-		else {
-			//while constructor is running
-			return proxy.invokeSuper(obj, args);
-		}
+	    if (constructed) {
+	        
+	        Object result = invoke(method, args, obj);
+	        
+	        if (result == INVOKE_IMPLEMENTATION) {
+	            
+	            Object target = getImplementation();
+	            Object retval;
+	            
+	            if( ! Modifier.isProtected(method.getModifiers()) ){
+	                
+	                retval = proxy.invoke(target, args);
+	                
+	            }else{
+	                
+	                if(!method.isAccessible()){
+	                    method.setAccessible(true);
+	                    try{
+	                        
+	                        retval = method.invoke(target, args);
+	                        
+	                    }finally{
+	                        method.setAccessible(false);
+	                    }
+	                }else{
+	                    retval = method.invoke(target, args);
+	                }
+	                
+	            }
+	            return (retval == target) ? obj : retval;
+	        }
+	        else {
+	            return result;
+	        }
+	    }
+	    else {
+	        //while constructor is running
+	        return proxy.invokeSuper(obj, args);
+	    }
 	}
 
 	protected Object serializableProxy() {
