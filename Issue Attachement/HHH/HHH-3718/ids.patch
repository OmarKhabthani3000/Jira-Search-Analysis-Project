diff -wru src/org/hibernate/property/DirectPropertyAccessor.java orig-src/org/hibernate/property/DirectPropertyAccessor.java
--- src/org/hibernate/property/DirectPropertyAccessor.java	2009-06-02 13:44:23.000000000 -0400
+++ orig-src/org/hibernate/property/DirectPropertyAccessor.java	2008-09-10 14:19:54.000000000 -0400
@@ -24,12 +24,6 @@
  */
 package org.hibernate.property;
 
-import static java.util.Locale.ENGLISH;
-
-import java.beans.BeanInfo;
-import java.beans.FeatureDescriptor;
-import java.beans.Introspector;
-import java.beans.PropertyDescriptor;
 import java.lang.reflect.Field;
 import java.lang.reflect.Method;
 import java.util.Map;
@@ -39,7 +33,6 @@
 import org.hibernate.PropertyNotFoundException;
 import org.hibernate.engine.SessionFactoryImplementor;
 import org.hibernate.engine.SessionImplementor;
-import org.hibernate.hql.NameGenerator;
 import org.hibernate.util.ReflectHelper;
 
 /**
@@ -52,8 +45,6 @@
     private final transient Field field;
     private final Class clazz;
     private final String name;
-    private Method method;
-    private boolean methodLookedUp = false;
     DirectGetter(Field field, Class clazz, String name) {
       this.field = field;
       this.clazz = clazz;
@@ -73,15 +64,7 @@
     }
 
     public Method getMethod() {
-      if ( !methodLookedUp ) {
-        try {
-          String readMethodName = "get" + name.substring(0, 1).toUpperCase(ENGLISH) + name.substring(1);
-          method = clazz.getMethod( readMethodName );
-        }
-        catch ( Exception e ) { /* ignore */ }
-        methodLookedUp = true;
-      }
-      return method;
+			return null;
     }
     public String getMethodName() {
       return null;
diff -wru src/org/hibernate/proxy/pojo/BasicLazyInitializer.java orig-src/org/hibernate/proxy/pojo/BasicLazyInitializer.java
--- src/org/hibernate/proxy/pojo/BasicLazyInitializer.java	2009-06-02 15:03:30.000000000 -0400
+++ orig-src/org/hibernate/proxy/pojo/BasicLazyInitializer.java	2008-09-10 14:19:54.000000000 -0400
@@ -34,8 +34,6 @@
 import org.hibernate.util.ReflectHelper;
 import org.hibernate.proxy.AbstractLazyInitializer;
 
-import edu.emory.mathcs.backport.java.util.Arrays;
-
 /**
  * Lazy initializer for POJOs
  *
@@ -83,7 +81,7 @@
       else if ( !overridesEquals && "hashCode".equals(methodName) ) {
         return new Integer( System.identityHashCode(proxy) );
       }
-      else if ( isUninitialized() && isEquivilentToGetIdentifierMethod(method) ) {
+			else if ( isUninitialized() && method.equals(getIdentifierMethod) ) {
         return getIdentifier();
       }
 
@@ -115,16 +113,6 @@
 
   }
 
-  public boolean isEquivilentToGetIdentifierMethod (Method method)
-  {
-    // We only need to compare the names, since the identifier get method can have no arguments,
-    // and the return types of methods with the same name and same arguments must be compatible.
-    return getIdentifierMethod != null &&
-           method != null &&
-           method.getParameterTypes().length == 0 &&
-           getIdentifierMethod.getName().equals( method.getName() );
-  }
-
   private Object getReplacement() {
 
     final SessionImplementor session = getSession();
