Index: D:/dev/workspace/hibernate3/eg/org/hibernate/auction/Main.java
===================================================================
--- D:/dev/workspace/hibernate3/eg/org/hibernate/auction/Main.java	(revision 11406)
+++ D:/dev/workspace/hibernate3/eg/org/hibernate/auction/Main.java	(working copy)
@@ -16,8 +16,8 @@
 import org.hibernate.cfg.Configuration;
 import org.hibernate.cfg.Environment;
 import org.hibernate.criterion.Example;
-import org.hibernate.criterion.Expression;
 import org.hibernate.criterion.MatchMode;
+import org.hibernate.criterion.Restrictions;
 
 
 /**
@@ -209,7 +209,7 @@
 			tx = s.beginTransaction();
 
 			List list = s.createCriteria(User.class)
-				.add( Expression.eq("id", sellerId) )
+				.add( Restrictions.eq("id", sellerId) )
 				.setFetchMode("auctions", FetchMode.JOIN)
 				.list();
 
Index: D:/dev/workspace/hibernate3/src/org/hibernate/criterion/Expression.java
===================================================================
--- D:/dev/workspace/hibernate3/src/org/hibernate/criterion/Expression.java	(revision 11406)
+++ D:/dev/workspace/hibernate3/src/org/hibernate/criterion/Expression.java	(working copy)
@@ -6,8 +6,7 @@
 
 
 /**
- * This class is semi-deprecated. Use <tt>Restrictions</tt>.
- *
+ * @deprecated Use <tt>Restrictions</tt>.
  * @see Restrictions
  * @author Gavin King
  */
Index: D:/dev/workspace/hibernate3/test/org/hibernate/test/criteria/CriteriaQueryTest.java
===================================================================
--- D:/dev/workspace/hibernate3/test/org/hibernate/test/criteria/CriteriaQueryTest.java	(revision 11406)
+++ D:/dev/workspace/hibernate3/test/org/hibernate/test/criteria/CriteriaQueryTest.java	(working copy)
@@ -16,7 +16,6 @@
 import org.hibernate.cfg.Environment;
 import org.hibernate.criterion.DetachedCriteria;
 import org.hibernate.criterion.Example;
-import org.hibernate.criterion.Expression;
 import org.hibernate.criterion.MatchMode;
 import org.hibernate.criterion.Order;
 import org.hibernate.criterion.Projection;
@@ -398,8 +397,8 @@
 					.add( Projections.property("studentNumber"), "stNumber" )
 					.add( Projections.property("courseCode"), "cCode" ) )
 			)
-		    .add( Expression.gt( "studentNumber", new Long(665) ) )
-		    .add( Expression.lt( "studentNumber", new Long(668) ) )
+		    .add( Restrictions.gt( "studentNumber", new Long(665) ) )
+		    .add( Restrictions.lt( "studentNumber", new Long(668) ) )
 		    .addOrder( Order.asc("stNumber") )
 			.setResultTransformer(Criteria.ALIAS_TO_ENTITY_MAP)
 			.list();
Index: D:/dev/workspace/hibernate3/test/org/hibernate/test/filter/DynamicFilterTest.java
===================================================================
--- D:/dev/workspace/hibernate3/test/org/hibernate/test/filter/DynamicFilterTest.java	(revision 11406)
+++ D:/dev/workspace/hibernate3/test/org/hibernate/test/filter/DynamicFilterTest.java	(working copy)
@@ -18,9 +18,6 @@
 import org.hibernate.Hibernate;
 import org.hibernate.Session;
 import org.hibernate.Transaction;
-import org.hibernate.engine.SessionImplementor;
-import org.hibernate.junit.functional.FunctionalTestCase;
-import org.hibernate.junit.functional.FunctionalTestClassTestSuite;
 import org.hibernate.cache.CacheKey;
 import org.hibernate.cache.entry.CollectionCacheEntry;
 import org.hibernate.cfg.Configuration;
@@ -25,8 +22,11 @@
 import org.hibernate.cache.entry.CollectionCacheEntry;
 import org.hibernate.cfg.Configuration;
 import org.hibernate.cfg.Environment;
-import org.hibernate.criterion.Expression;
+import org.hibernate.criterion.Restrictions;
+import org.hibernate.engine.SessionImplementor;
 import org.hibernate.impl.SessionFactoryImpl;
+import org.hibernate.junit.functional.FunctionalTestCase;
+import org.hibernate.junit.functional.FunctionalTestClassTestSuite;
 import org.hibernate.persister.collection.CollectionPersister;
 import org.hibernate.transform.DistinctRootEntityResultTransformer;
 
@@ -195,7 +195,7 @@
 
 		log.info( "Criteria query against Product..." );
 		List products = session.createCriteria( Product.class )
-		        .add( Expression.eq( "stockNumber", new Integer( 124 ) ) )
+		        .add( Restrictions.eq( "stockNumber", new Integer( 124 ) ) )
 		        .list();
 		assertEquals( "Incorrect product count", 1, products.size() );
 
@@ -273,7 +273,7 @@
 
 		Product prod = ( Product ) session.createCriteria( Product.class )
 		        .setResultTransformer( new DistinctRootEntityResultTransformer() )
-		        .add( Expression.eq( "id", testData.prod1Id ) )
+		        .add( Restrictions.eq( "id", testData.prod1Id ) )
 		        .uniqueResult();
 
 		assertNotNull( prod );
@@ -413,7 +413,7 @@
 		Session session = openSession();
 
 		List result = session.createCriteria( Product.class )
-		        .add( Expression.eq( "id", testData.prod1Id ) )
+		        .add( Restrictions.eq( "id", testData.prod1Id ) )
 		        .list();
 
 		Product prod = ( Product ) result.get( 0 );
Index: D:/dev/workspace/hibernate3/test/org/hibernate/test/joinedsubclass/JoinedSubclassTest.java
===================================================================
--- D:/dev/workspace/hibernate3/test/org/hibernate/test/joinedsubclass/JoinedSubclassTest.java	(revision 11406)
+++ D:/dev/workspace/hibernate3/test/org/hibernate/test/joinedsubclass/JoinedSubclassTest.java	(working copy)
@@ -11,8 +11,8 @@
 import org.hibernate.LockMode;
 import org.hibernate.Session;
 import org.hibernate.Transaction;
-import org.hibernate.criterion.Expression;
 import org.hibernate.criterion.Property;
+import org.hibernate.criterion.Restrictions;
 import org.hibernate.junit.functional.FunctionalTestCase;
 import org.hibernate.junit.functional.FunctionalTestClassTestSuite;
 
@@ -96,7 +96,7 @@
 
 		if ( supportsRowValueConstructorSyntaxInInList() ) {
 			s.createCriteria(Person.class).add(
-					Expression.in("address", new Address[] { mark.getAddress(), joe.getAddress() } )
+				Restrictions.in("address", new Address[] { mark.getAddress(), joe.getAddress() } )
 			).list();
 		}
 
Index: D:/dev/workspace/hibernate3/test/org/hibernate/test/unionsubclass2/UnionSubclassTest.java
===================================================================
--- D:/dev/workspace/hibernate3/test/org/hibernate/test/unionsubclass2/UnionSubclassTest.java	(revision 11406)
+++ D:/dev/workspace/hibernate3/test/org/hibernate/test/unionsubclass2/UnionSubclassTest.java	(working copy)
@@ -10,8 +10,8 @@
 import org.hibernate.Hibernate;
 import org.hibernate.Session;
 import org.hibernate.Transaction;
-import org.hibernate.criterion.Expression;
 import org.hibernate.criterion.Property;
+import org.hibernate.criterion.Restrictions;
 import org.hibernate.dialect.HSQLDialect;
 import org.hibernate.junit.functional.FunctionalTestCase;
 import org.hibernate.junit.functional.FunctionalTestClassTestSuite;
@@ -96,7 +96,7 @@
 
 		if ( supportsRowValueConstructorSyntaxInInList() ) {
 			s.createCriteria(Person.class).add( 
-					Expression.in("address", new Address[] { mark.getAddress(), joe.getAddress() } ) 
+					Restrictions.in("address", new Address[] { mark.getAddress(), joe.getAddress() } ) 
 			).list();
 		}
 		
