Index: C:/Vladimirov/workspace-hibernate/Hibernate3/src/org/hibernate/engine/BatchFetchQueue.java
===================================================================
--- C:/Vladimirov/workspace-hibernate/Hibernate3/src/org/hibernate/engine/BatchFetchQueue.java	(revision 9811)
+++ C:/Vladimirov/workspace-hibernate/Hibernate3/src/org/hibernate/engine/BatchFetchQueue.java	(working copy)
@@ -11,6 +11,7 @@
 import org.hibernate.collection.PersistentCollection;
 import org.hibernate.persister.collection.CollectionPersister;
 import org.hibernate.persister.entity.EntityPersister;
+import org.hibernate.util.IdentityMap;
 import org.hibernate.util.MarkerObject;
 
 /**
@@ -104,10 +105,16 @@
 		// this only works because collection entries are kept in a sequenced
 		// map by persistence context (maybe we should do like entities and
 		// keep a separate sequences set...)
-		Iterator iter = context.getCollectionEntries().entrySet().iterator(); //TODO: calling entrySet on an IdentityMap is SLOW!!
-		while ( iter.hasNext() ) {
-			Map.Entry me = (Map.Entry) iter.next();
-			
+		
+        // TODO: calling entrySet on an IdentityMap is SLOW!!
+		// Iterator iter = context.getCollectionEntries().entrySet().iterator();
+        // while ( iter.hasNext() ) {
+        //     Map.Entry me = (Map.Entry) iter.next();
+        final Map.Entry[] entries =
+                IdentityMap.concurrentEntries(context.getCollectionEntries());
+		for (int k = 0; k < entries.length; k++) {
+            Map.Entry me = entries[k];
+            
 			CollectionEntry ce = (CollectionEntry) me.getValue();
 			PersistentCollection collection = (PersistentCollection) me.getKey();
 			if ( !collection.wasInitialized() && ce.getLoadedPersister() == collectionPersister ) {
