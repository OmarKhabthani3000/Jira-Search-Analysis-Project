Index: InstrumentTask.java
===================================================================
RCS file: /cvsroot/hibernate/Hibernate3/src/org/hibernate/tool/instrument/InstrumentTask.java,v
retrieving revision 1.2
diff -u -r1.2 InstrumentTask.java
--- InstrumentTask.java	22 Feb 2005 10:50:11 -0000	1.2
+++ InstrumentTask.java	1 Mar 2005 12:29:30 -0000
@@ -1,113 +1,36 @@
 //$Id: InstrumentTask.java,v 1.2 2005/02/22 10:50:11 maxcsaucdk Exp $
 package org.hibernate.tool.instrument;
 
-import java.io.BufferedInputStream;
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.InputStream;
+import java.util.Arrays;
 
-import org.apache.tools.ant.Project;
-import org.logicalcobwebs.asm.ClassAdapter;
-import org.objectweb.asm.Attribute;
-import org.objectweb.asm.ClassReader;
-import org.objectweb.asm.ClassVisitor;
-import org.objectweb.asm.CodeVisitor;
 import org.objectweb.asm.Type;
 
 import net.sf.cglib.transform.AbstractTransformTask;
 import net.sf.cglib.transform.ClassTransformer;
-import net.sf.cglib.transform.NullClassVisitor;
+import net.sf.cglib.transform.impl.*;
 import net.sf.cglib.transform.impl.InterceptFieldFilter;
 import net.sf.cglib.transform.impl.InterceptFieldTransformer;
 
 /**
  * An Ant task for instrumenting persistent classes with
  * CGLIB field interception.<br>
- * <br>
- * <em>Due to a bug in CGLIB, this task will fail with array 
- * out of bounds if the passed fileset contains things
- * that are not compiled java classes. Also, it appears
- * that there is a problem with instrumenting classes
- * twice, if the ant task is re-run!</em>
- * 
  * @author Gavin King
  */
 public class InstrumentTask extends AbstractTransformTask {
 
-	protected ClassTransformer getClassTransformer(String name) {
-
-			return new InterceptFieldTransformer(
-					new InterceptFieldFilter() {
-						public boolean acceptRead(Type owner, String name) {
-							return true;
-						}
-						public boolean acceptWrite(Type owner, String name) {
-							return true;
-						}
+    protected ClassTransformer getClassTransformer(String[] classInfo) {
+        if( Arrays.asList(classInfo).contains(InterceptFieldEnabled.class.getName()) ){
+            return null;
+        }
+        return new InterceptFieldTransformer(
+				new InterceptFieldFilter() {
+					public boolean acceptRead(Type owner, String name) {
+						return true;
 					}
-			);
-
-	}
-	
-	protected void processFile(File clazzFile) throws Exception {
-		if(clazzFile.getName().endsWith(".class")) {
-			MatchingInterfaceClassVisitor mic = new MatchingInterfaceClassVisitor("net/sf/cglib/transform/impl/InterceptFieldEnabled");
-			getClassReader(clazzFile).accept(mic,true);
-			if(mic.found) {
-				log(clazzFile.getCanonicalPath() + " already instrumented.", Project.MSG_WARN);
-			} else {
-				super.processFile(clazzFile);
-			}
-		} else {
-			log("Skipping non .class file: " + clazzFile, Project.MSG_VERBOSE);
-		}
-	}
-	
-
-    private static ClassReader getClassReader(File file) throws Exception {
-        InputStream in = new BufferedInputStream(new FileInputStream(file));
-        ClassReader r = new ClassReader(in);
-        in.close();
-        return r;
-    }
-
-	static public class MatchingInterfaceClassVisitor implements ClassVisitor {
-		
-			private final String interfacename;
-			private boolean found;
-
-			public MatchingInterfaceClassVisitor(String interfacename) {
-				this.interfacename = interfacename;
-				this.found = false;
-			}
-			
-			public void visitEnd() { }
-		
-			public void visitAttribute(Attribute attr) { }
-		
-			public CodeVisitor visitMethod(int arg0, String arg1, String arg2,
-					String[] arg3, Attribute arg4) { return null; }
-		
-			public void visitField(int arg0, String arg1, String arg2, Object arg3,
-					Attribute arg4) { }
-		
-			public void visitInnerClass(String name, String outerName,
-					String innerName, int access) { }
-		
-			public void visit(int version,
-				    String name,
-				    String signature,	
-				    String[] interfaces,
-				    String x) {
-				for (int i = 0; i < interfaces.length; i++) {
-					String string = interfaces[i];
-					if(interfacename.equals(string)) {
-						found = true;
+					public boolean acceptWrite(Type owner, String name) {
+						return true;
 					}
 				}
-				
-		
-			}
-		
-		}
+		);	
+  }
 }
