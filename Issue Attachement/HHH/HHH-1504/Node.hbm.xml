<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC
    "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
    "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd" >
<hibernate-mapping>
    <typedef class="com.j2fe.hibernate.ClassType" name="java.lang.Class">
        <param name="NotFoundClass">com.j2fe.workflow.handler.impl.HandlerNotFoundHandler</param>
    </typedef>
    <typedef class="com.j2fe.hibernate.EnumType" name="com.j2fe.workflow.definition.NodeType">
        <param name="type">com.j2fe.workflow.definition.NodeType</param>
    </typedef>
    <typedef class="com.j2fe.hibernate.EnumType" name="com.j2fe.workflow.runtime.Activation">
        <param name="type">com.j2fe.workflow.runtime.Activation</param>
    </typedef>
    <class name="com.j2fe.workflow.definition.Node" table="FT_O_WFND" mutable="true" >
        <meta attribute="class-code" inherit="false">
    public boolean equals(Object other) {
        if ( (this == other ) ) return true;
        if ( !(other instanceof Node) ) return false;
        Node castOther = (Node) other;
        if (getId() == null || castOther.getId() == null)
            return false;
        return getId().equals(castOther.getId());
    }
    public int hashCode() {
        return new org.apache.commons.lang.builder.HashCodeBuilder()
            .append(getId())
            .toHashCode();
    }
    
        </meta>
        <!-- Cached internally already my workflow framework
        <cache usage="read-only"/>-->
        <id name="id" type="string">
            <generator class="com.j2fe.hibernate.OIDGenerator">
                <param name="TemplateGenerator">TransactionIdTemplateGenerator</param>
            </generator>
        </id>
        <property column="type" type="com.j2fe.workflow.definition.NodeType" not-null="false" name="type" update="false"/>

<!--
        <discriminator column="type" type="string" not-null="true" force="true"/>
-->
        <property name="name" type="string" not-null="true" update="false"/>
        <property name="description" type="string" not-null="false"/>
        <property name="NodeHandler" type="java.lang.Class" column="classname" not-null="false" update="false"/>
        <property name="clusteredCall" type="yes_no" not-null="true" column="clustered" update="false"/>
        <property name="activation" type="com.j2fe.workflow.runtime.Activation" not-null="true" column="activation" update="false"/>

        <set name="persistentVariables" table="FT_O_WFNV" cascade="save-update,evict" fetch="join"  >
            <meta attribute="property-type">Set&lt;String></meta>
            <!-- Cached internally already my workflow framework
            <cache usage="nonstrict-read-write"/>-->
            <key column="id" not-null="true"/>
            <element type="string" not-null="true" column="name"/>
        </set>
        <set name="parameters" cascade="save-update,evict,delete-orphan" batch-size="10" >
            <meta attribute="property-type">Set&lt;Parameter></meta>
            <!-- Cached internally already my workflow framework
            <cache usage="nonstrict-read-write"/>-->
            <key column="node_id" not-null="true"/>
<!--
            <map-key type="string" column="name"/>
-->
            <one-to-many class="com.j2fe.workflow.definition.Parameter"/>
        </set>

        <set name="targets" cascade="save-update,evict,delete-orphan" fetch="join" inverse="true">
            <meta attribute="property-type">Set&lt;Transition></meta>
            <!--
                        <meta attribute="scope-get"></meta>
            -->
            <!-- Cached internally already my workflow framework
            <cache usage="nonstrict-read-write"/>-->
            <key column="from_node" />
            <one-to-many class="com.j2fe.workflow.definition.Transition"/>
        </set>
        <set name="sources" lazy="true" cascade="save-update,evict,delete-orphan" inverse="true">
            <!--
            todo might be replaced by transient variables. not needed at runtime
                        <meta attribute="scope-get"></meta>
            -->
            <meta attribute="property-type">Set&lt;Transition></meta>
            <key column="to_node"/>
            <one-to-many class="com.j2fe.workflow.definition.Transition"/>
        </set>

        <set name="joinNodes" batch-size="5" where="type = 'ANDJOIN'" fetch="join" inverse="true">
            <meta attribute="property-type">Set&lt;Node></meta>
            <!-- Cached internally already my workflow framework
            <cache usage="nonstrict-read-write"/>-->
            <key column="split_node"/>
            <one-to-many class="com.j2fe.workflow.definition.Node"/>
        </set>
        <!--<set name="childForkNodes" batch-size="5" where="type = 'ANDSPLIT'" >
            <meta attribute="property-type">Set&lt;Join></meta>
            <cache usage="nonstrict-read-write"/>
            <key column="split_node"/>
            <one-to-many class="com.j2fe.workflow.definition.Node"/>
        </set>-->
        <property name="directJoin" type="yes_no" column="direct" not-null="true" update="false"/>
        <many-to-one name="splitNode" column="split_node" class="com.j2fe.workflow.definition.Node" not-null="false" update="false">
            <!--<meta attribute="field-description">If this is a join node, the splitNode is the corresponding Split. If this is a Fork, it is the parent fork.</meta>-->
        </many-to-one>

        <many-to-one name="workflow" class="com.j2fe.workflow.definition.Workflow" column="workflow_id" not-null="true" update="false">
            <meta attribute="scope-set"></meta>
        </many-to-one>
    </class>
</hibernate-mapping>