Index: core/src/main/java/org/hibernate/proxy/pojo/BasicLazyInitializer.java
===================================================================
--- core/src/main/java/org/hibernate/proxy/pojo/BasicLazyInitializer.java	(revision 21102)
+++ core/src/main/java/org/hibernate/proxy/pojo/BasicLazyInitializer.java	(working copy)
@@ -81,7 +81,7 @@
 			else if ( !overridesEquals && "hashCode".equals(methodName) ) {
 				return new Integer( System.identityHashCode(proxy) );
 			}
-			else if ( isUninitialized() && method.equals(getIdentifierMethod) ) {
+			else if ( isUninitialized() && equalsIgnoringReturnType(method, getIdentifierMethod) ) {
 				return getIdentifier();
 			}
 
@@ -113,6 +113,27 @@
 
 	}
 
+    private boolean equalsIgnoringReturnType(Method invokedMethod, Method identifierMethod) {
+        if (identifierMethod != null) {
+            if (invokedMethod.getReturnType().equals(identifierMethod.getReturnType())) {
+                return invokedMethod.equals(identifierMethod);
+            }
+            if ((invokedMethod.getDeclaringClass() == identifierMethod.getDeclaringClass()) && (invokedMethod.getName() == identifierMethod.getName())) {
+                /* Avoid unnecessary cloning */
+                Class[] params1 = invokedMethod.getParameterTypes();
+                Class[] params2 = identifierMethod.getParameterTypes();
+                if (params1.length == params2.length) {
+                    for (int i = 0; i < params1.length; i++) {
+                        if (params1[i] != params2[i])
+                            return false;
+                    }
+                    return true;
+                }
+            }
+        }
+        return false;
+    }
+
 	private Object getReplacement() {
 
 		final SessionImplementor session = getSession();
