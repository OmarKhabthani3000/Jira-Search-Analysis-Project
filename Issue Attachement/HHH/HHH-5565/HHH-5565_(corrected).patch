Index: src/main/java/org/hibernate/envers/event/AuditEventListener.java
===================================================================
--- src/main/java/org/hibernate/envers/event/AuditEventListener.java	(revision 67890)
+++ src/main/java/org/hibernate/envers/event/AuditEventListener.java	(revision )
@@ -107,7 +107,7 @@
                     	    HibernateProxy hibernateProxy = (HibernateProxy) newValue;
                     	    toEntityName = session.bestGuessEntityName(newValue);
                     	    id = hibernateProxy.getHibernateLazyInitializer().getIdentifier();
-							// We've got to initialize the object from the proxy to later read its state.   
+							// We've got to initialize the object from the proxy to later read its state.
 							newValue = Tools.getTargetFromProxy(session.getFactory(), hibernateProxy);
                     	} else {
                     		toEntityName =  session.guessEntityName(newValue);
@@ -135,7 +135,7 @@
 							IdMapper idMapper = verCfg.getEntCfg().get(toEntityName).getIdMapper();
 							id = (Serializable) idMapper.mapToIdFromEntity(oldValue);
                     	}
-						
+
                         verSync.addWorkUnit(new CollectionChangeWorkUnit(session, toEntityName, verCfg, id, oldValue));
                     }
                 }
@@ -146,8 +146,8 @@
     public void onPostInsert(PostInsertEvent event) {
         String entityName = event.getPersister().getEntityName();
 
-        if (event.getSession().isTransactionInProgress()) {
-            if (verCfg.getEntCfg().isVersioned(entityName)) {
+        if (verCfg.getEntCfg().isVersioned(entityName)) {
+            if (event.getSession().isTransactionInProgress()) {
                 AuditSync verSync = verCfg.getSyncManager().get(event.getSession());
 
                 verSync.addWorkUnit(new AddWorkUnit(event.getSession(), event.getPersister().getEntityName(), verCfg,
@@ -155,17 +155,17 @@
 
                 generateBidirectionalCollectionChangeWorkUnits(verSync, event.getPersister(), entityName, event.getState(),
                         null, event.getSession());
-            }
-        } else {
-            log.warn("Couldn't create revision for entity " + entityName + " because transaction is not active.");
-        }
-    }
+            } else {
+                log.warn("Couldn't create revision for entity " + entityName + " because transaction is not active.");
+            }
+        }
+    }
 
     public void onPostUpdate(PostUpdateEvent event) {
         String entityName = event.getPersister().getEntityName();
 
-        if (event.getSession().isTransactionInProgress()) {
-            if (verCfg.getEntCfg().isVersioned(entityName)) {
+        if (verCfg.getEntCfg().isVersioned(entityName)) {
+            if (event.getSession().isTransactionInProgress()) {
                 AuditSync verSync = verCfg.getSyncManager().get(event.getSession());
 
                 verSync.addWorkUnit(new ModWorkUnit(event.getSession(), event.getPersister().getEntityName(), verCfg,
@@ -173,17 +173,17 @@
 
                 generateBidirectionalCollectionChangeWorkUnits(verSync, event.getPersister(), entityName, event.getState(),
                         event.getOldState(), event.getSession());
-            }
-        } else {
-            log.warn("Couldn't create revision for entity " + entityName + " because transaction is not active.");
-        }
-    }
+            } else {
+                log.warn("Couldn't create revision for entity " + entityName + " because transaction is not active.");
+            }
+        }
+    }
 
     public void onPostDelete(PostDeleteEvent event) {
         String entityName = event.getPersister().getEntityName();
 
-        if (event.getSession().isTransactionInProgress()) {
-            if (verCfg.getEntCfg().isVersioned(entityName)) {
+        if (verCfg.getEntCfg().isVersioned(entityName)) {
+            if (event.getSession().isTransactionInProgress()) {
                 AuditSync verSync = verCfg.getSyncManager().get(event.getSession());
 
                 verSync.addWorkUnit(new DelWorkUnit(event.getSession(), event.getPersister().getEntityName(), verCfg,
@@ -191,11 +191,11 @@
 
                 generateBidirectionalCollectionChangeWorkUnits(verSync, event.getPersister(), entityName, null,
                         event.getDeletedState(), event.getSession());
-            }
-        } else {
-            log.warn("Couldn't create revision for entity " + entityName + " because transaction is not active.");
-        }
-    }
+            } else {
+                log.warn("Couldn't create revision for entity " + entityName + " because transaction is not active.");
+            }
+        }
+    }
 
     private void generateBidirectionalCollectionChangeWorkUnits(AuditSync verSync, AbstractCollectionEvent event,
                                                                 PersistentCollectionChangeWorkUnit workUnit) {
@@ -213,7 +213,7 @@
         if (relDesc != null && relDesc.isBidirectional()) {
             String relatedEntityName = relDesc.getToEntityName();
             IdMapper relatedIdMapper = verCfg.getEntCfg().get(relatedEntityName).getIdMapper();
-            
+
             for (PersistentCollectionChangeData changeData : workUnit.getCollectionChanges()) {
                 Object relatedObj = changeData.getChangedElement();
                 Serializable relatedId = (Serializable) relatedIdMapper.mapToIdFromEntity(relatedObj);
@@ -228,8 +228,8 @@
                                     CollectionEntry collectionEntry) {
         String entityName = event.getAffectedOwnerEntityName();
 
-        if (event.getSession().isTransactionInProgress()) {
-            if (verCfg.getEntCfg().isVersioned(entityName)) {
+        if (verCfg.getEntCfg().isVersioned(entityName)) {
+            if (event.getSession().isTransactionInProgress()) {
                 AuditSync verSync = verCfg.getSyncManager().get(event.getSession());
 
                 PersistentCollectionChangeWorkUnit workUnit = new PersistentCollectionChangeWorkUnit(event.getSession(),
@@ -243,11 +243,11 @@
 
                     generateBidirectionalCollectionChangeWorkUnits(verSync, event, workUnit);
                 }
-            }
-        } else {
-            log.warn("Couldn't create revision for entity " + entityName + " because transaction is not active.");
-        }
-    }
+            } else {
+                log.warn("Couldn't create revision for entity " + entityName + " because transaction is not active.");
+            }
+        }
+    }
 
     private CollectionEntry getCollectionEntry(AbstractCollectionEvent event) {
         return event.getSession().getPersistenceContext().getCollectionEntry(event.getCollection());
