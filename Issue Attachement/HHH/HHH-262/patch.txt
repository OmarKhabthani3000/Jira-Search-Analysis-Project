Index: CGLIBLazyInitializer.java
===================================================================
RCS file: /cvsroot/hibernate/Hibernate3/src/org/hibernate/proxy/CGLIBLazyInitializer.java,v
retrieving revision 1.8
diff -u -r1.8 CGLIBLazyInitializer.java
--- CGLIBLazyInitializer.java	17 Mar 2005 20:57:02 -0000	1.8
+++ CGLIBLazyInitializer.java	21 Mar 2005 13:39:36 -0000
@@ -3,6 +3,7 @@
 
 import java.io.Serializable;
 import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
 
 import net.sf.cglib.proxy.Enhancer;
 import net.sf.cglib.proxy.Factory;
@@ -88,15 +89,80 @@
 		return proxy;
 	}
 
-	public static Factory getProxyFactory(Class persistentClass, Class[] interfaces) throws HibernateException {
+	public static Factory getProxyFactory(final Class persistentClass, Class[] interfaces) throws HibernateException {
 		//note: interfaces is assumed to already contain HibernateProxy.class
 		try {
+		    //interceptor for factory object with fake LazyInitializer
+		    MethodInterceptor interceptor = new MethodInterceptor(){
+
+                public Object intercept(final Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable {
+                    
+                    if(method.getName().equals("getHibernateLazyInitializer")){
+                        
+                        return new  LazyInitializer(){
+
+                            public void initialize() throws HibernateException {
+                            }
+
+                            public Serializable getIdentifier() {
+                                
+                                return null;
+                            }
+
+                            public void setIdentifier(Serializable id) {
+                                
+                                
+                            }
+
+                            public String getEntityName() {
+                                
+                                return "<<" + persistentClass.getName() +  " TEMPLATE >>";
+                            }
+
+                            public Class getPersistentClass() {
+                                
+                                return persistentClass;
+                            }
+
+                            public boolean isUninitialized() {
+                                
+                                return false;
+                            }
+
+                            public SessionImplementor getSession() {
+                                
+                                return null;
+                            }
+
+                            public void setSession(SessionImplementor s) throws HibernateException {
+                                
+                                
+                            }
+
+                            public Object getImplementation() {
+                                
+                                return obj;
+                            }
+
+                            public Object getImplementation(SessionImplementor s) throws HibernateException {
+                                
+                                return obj;
+                            }
+                            
+                        };
+                    }
+                    return proxy.invokeSuper(obj,args);
+                }
+		        
+		    
+		    };
+		    
 			return (Factory) Enhancer.create(
 				(interfaces.length==1) ?
 					persistentClass :
 					null,
 				interfaces,
-				NULL_METHOD_INTERCEPTOR
+				interceptor
 			);
 		}
 		catch (Throwable t) {
@@ -135,8 +201,9 @@
 				if ( !ReflectHelper.isPublic(persistentClass, method) ) {
 					if ( !method.isAccessible() ) method.setAccessible(true);
 				}
-				Object retval = proxy.invoke(target, args);
-				return retval==target ? obj : retval;
+				//call using reflection
+				Object retval = method.invoke(target, args);
+				return retval == target ? obj : retval;
 			}
 			else {
 				return result;
@@ -144,8 +211,15 @@
 		}
 		else {
 			//while constructor is running
+		    
+		    if(method.getName().equals("getHibernateLazyInitializer")){
+		    
+		        return this;
+		    }
+		    
 			return proxy.invokeSuper(obj, args);
 		}
+
 	}
 
 	protected Object serializableProxy() {
@@ -160,9 +234,5 @@
 		);
 	}
 
-	private static final MethodInterceptor NULL_METHOD_INTERCEPTOR = new MethodInterceptor() {
-		public Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable {
-			return proxy.invokeSuper(obj, args);
-		}
-	};
+	
 }
