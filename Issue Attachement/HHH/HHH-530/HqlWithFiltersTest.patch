Index: test/org/hibernate/test/filter/hql2/Country.hbm.xml
===================================================================
--- test/org/hibernate/test/filter/hql2/Country.hbm.xml	(revision 0)
+++ test/org/hibernate/test/filter/hql2/Country.hbm.xml	(revision 0)
@@ -0,0 +1,32 @@
+<?xml version="1.0"?>
+<!DOCTYPE hibernate-mapping
+        SYSTEM
+        "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd" >
+
+<hibernate-mapping package="org.hibernate.test.filter.hql2">
+
+    <class name="Country" table="country">
+        <id name="id" column="id">
+            <generator class="native"/>
+        </id>
+        
+        <property name="lid" column="lid" type="long" not-null="false" />
+        <property name="validFrom" column="valid_from" type="java.util.Date"/>
+        <property name="validTo" column="valid_to" type="java.util.Date"/>
+        
+        <component name="i18nSupport" class="I18nSupport">
+        	<property name="shorttext" type="string"/>
+        	<property name="defaulttext" type="string"/>
+        	<property name="longtext" type="string"/>
+        	<property name="defaultlanguage" type="long"/>
+        	<set name="foreigntexts">
+        		<key column="refid"/>
+        		<one-to-many class="Foreigntext"/>
+        	</set>
+	    </component>
+
+        <filter name="histFilter" condition=":asOfDate BETWEEN valid_from and valid_to"/>
+        <filter name="histFilter2" condition="(valid_from &lt;= :validFrom) and (valid_to &gt;= :validTo)"/>
+    </class>
+
+</hibernate-mapping>\ No newline at end of file
Index: test/org/hibernate/test/filter/hql2/Country.java
===================================================================
--- test/org/hibernate/test/filter/hql2/Country.java	(revision 0)
+++ test/org/hibernate/test/filter/hql2/Country.java	(revision 0)
@@ -0,0 +1,93 @@
+// $Id$
+package org.hibernate.test.filter.hql2;
+
+import java.util.Date;
+
+/**
+ * Implementation of Country.
+ * 
+ * @author Heiko Burchard
+ */
+public class Country {
+	private Long id;
+
+	private Long lid = new Long(-1);
+
+	private Date validFrom;
+
+	private Date validTo;
+
+	private I18nSupport i18nSupport = new I18nSupport();
+
+	public Long getId() {
+		return id;
+	}
+
+	public void setId(Long id) {
+		this.id = id;
+	}
+
+	public Long getLid() {
+		return lid;
+	}
+
+	public void setLid(Long lid) {
+		this.lid = lid;
+	}
+
+	public Date getValidFrom() {
+		return validFrom;
+	}
+
+	public void setValidFrom(Date validFrom) {
+		this.validFrom = validFrom;
+	}
+
+	public Date getValidTo() {
+		return validTo;
+	}
+
+	public void setValidTo(Date validTo) {
+		this.validTo = validTo;
+	}
+
+	public Long getDefaultlanguage() {
+		return i18nSupport.getDefaultlanguage();
+	}
+
+	public String getLongtext() {
+		return i18nSupport.getLongtext();
+	}
+
+	public String getShorttext() {
+		return i18nSupport.getShorttext();
+	}
+
+	public void setDefaultlanguage(Long defaultlanguage) {
+		i18nSupport.setDefaultlanguage(defaultlanguage);
+	}
+
+	public void setLongtext(String longtext) {
+		i18nSupport.setLongtext(longtext);
+	}
+
+	public void setShorttext(String shorttext) {
+		i18nSupport.setShorttext(shorttext);
+	}
+
+	public String getDefaulttext() {
+		return i18nSupport.getDefaulttext();
+	}
+
+	public void setDefaulttext(String defaulttext) {
+		i18nSupport.setDefaulttext(defaulttext);
+	}
+
+	public I18nSupport getI18nSupport() {
+		return i18nSupport;
+	}
+
+	public void setI18nSupport(I18nSupport support) {
+		i18nSupport = support;
+	}
+}
Index: test/org/hibernate/test/filter/hql2/Foreigntext.hbm.xml
===================================================================
--- test/org/hibernate/test/filter/hql2/Foreigntext.hbm.xml	(revision 0)
+++ test/org/hibernate/test/filter/hql2/Foreigntext.hbm.xml	(revision 0)
@@ -0,0 +1,20 @@
+<?xml version="1.0"?>
+<!DOCTYPE hibernate-mapping
+        SYSTEM
+        "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd" >
+
+<hibernate-mapping package="org.hibernate.test.filter.hql2">
+
+    <class name="Foreigntext" table="foreigntext">
+    	<id name="id" column="id" >
+    		<generator class="native"/>
+    	</id>
+    	
+	    <property name="table" column="reftable" type="string"/>
+    	<property name="column" column="refcolumn" type="string"/>
+    	<property name="value" column="fieldvalue" type="string"/>
+    	<property name="objectid" column="refid" type="long"/>
+    	<property name="language" column="language" type="long"/>
+	</class>
+
+</hibernate-mapping>\ No newline at end of file
Index: test/org/hibernate/test/filter/hql2/Foreigntext.java
===================================================================
--- test/org/hibernate/test/filter/hql2/Foreigntext.java	(revision 0)
+++ test/org/hibernate/test/filter/hql2/Foreigntext.java	(revision 0)
@@ -0,0 +1,70 @@
+// $Id$
+package org.hibernate.test.filter.hql2;
+
+/**
+ * Implementation of Foreigntext.
+ * 
+ * @author Heiko Burchard
+ */
+public class Foreigntext {
+	private Long id;
+
+	private String table;
+
+	private String column;
+
+	private Long objectid;
+
+	private Long language;
+
+	private String value;
+
+	public String getTable() {
+		return table;
+	}
+
+	public void setTable(String table) {
+		this.table = table;
+	}
+
+	public String getColumn() {
+		return column;
+	}
+
+	public void setColumn(String column) {
+		this.column = column;
+	}
+
+	public Long getObjectid() {
+		return objectid;
+	}
+
+	public void setObjectid(Long objectid) {
+		this.objectid = objectid;
+	}
+
+	public Long getLanguage() {
+		return language;
+	}
+
+	public void setLanguage(Long lang) {
+		this.language = lang;
+	}
+
+	public String getValue() {
+		return value;
+	}
+
+	public void setValue(String value) {
+		this.value = value;
+	}
+
+	public Long getId() {
+		return id;
+	}
+
+	public void setId(Long id) {
+		this.id = id;
+	}
+
+}
Index: test/org/hibernate/test/filter/hql2/HqlFilterTest.java
===================================================================
--- test/org/hibernate/test/filter/hql2/HqlFilterTest.java	(revision 0)
+++ test/org/hibernate/test/filter/hql2/HqlFilterTest.java	(revision 0)
@@ -0,0 +1,165 @@
+// $Id$
+package org.hibernate.test.filter.hql2;
+
+import java.util.ArrayList;
+import java.util.Calendar;
+import java.util.GregorianCalendar;
+import java.util.Iterator;
+import java.util.List;
+
+import junit.framework.Test;
+
+import org.hibernate.Query;
+import org.hibernate.Session;
+import org.hibernate.Transaction;
+import org.hibernate.cfg.Configuration;
+import org.hibernate.cfg.Environment;
+import org.hibernate.junit.functional.FunctionalTestCase;
+import org.hibernate.junit.functional.FunctionalTestClassTestSuite;
+
+/**
+ * Implementation of HqlFilterTest.
+ * 
+ * @author Heiko Burchard
+ */
+public class HqlFilterTest extends FunctionalTestCase {
+
+	public HqlFilterTest(String testName) {
+		super(testName);
+	}
+
+	public String[] getMappings() {
+		return new String[] { "filter/hql2/defs.hbm.xml",
+				"filter/hql2/Person.hbm.xml", "filter/hql2/Personinfo.hbm.xml",
+				"filter/hql2/Country.hbm.xml", "filter/hql2/Foreigntext.hbm.xml" };
+	}
+
+	public void configure(Configuration cfg) {
+		cfg.setProperty(Environment.MAX_FETCH_DEPTH, "1");
+		cfg.setProperty(Environment.GENERATE_STATISTICS, "true");
+		cfg.setProperty(Environment.USE_QUERY_CACHE, "true");
+	}
+
+	public static Test suite() {
+		return new FunctionalTestClassTestSuite(HqlFilterTest.class);
+	}
+
+	public void testHqlFilters() {
+		TestData testData = new TestData();
+		testData.prepare();
+		String hql = "select"
+				+ " person.id,"
+				+ " person.firstname,"
+				+ " person.lastname,"
+				+ " _i18nSupport_foreigntexts.value,"
+				+ " _i18nSupport_foreigntexts2.value"
+				+ " from Person as person"
+				+ " left join person.personinfo as _personinfo"
+				+ " left join _personinfo.nationality as _nationality"
+				+ " left join _nationality.i18nSupport.foreigntexts as _i18nSupport_foreigntexts with ((_i18nSupport_foreigntexts.table = :param1) and (_i18nSupport_foreigntexts.language = 12) and (_i18nSupport_foreigntexts.column = :param2))"
+				+ " left join _personinfo.secondNationality as _secondNationality"
+				+ " left join _secondNationality.i18nSupport.foreigntexts as _i18nSupport_foreigntexts2 with ((_i18nSupport_foreigntexts2.table = :param1) and (_i18nSupport_foreigntexts2.language = 12) and (_i18nSupport_foreigntexts2.column = :param2))";
+
+		Session session = openSession();
+		// session.enableFilter( "histFilter" ).setParameter( "asOfDate",
+		// testData.lastMonth.getTime() );
+		session.enableFilter("histFilter2").setParameter("validFrom",
+				testData.lastMonth.getTime()).setParameter("validTo",
+				testData.lastMonth.getTime());
+
+		Query query = session.createQuery(hql);
+		query.setString("param1", "country");
+		query.setString("param2", "defaulttext");
+
+		List results = query.list();
+
+		session.close();
+		testData.release();
+	}
+
+	private class TestData {
+		private Long steveId;
+		private Long deptId;
+		private Long prod1Id;
+		private Calendar lastMonth;
+		private Calendar nextMonth;
+		private Calendar sixMonthsAgo;
+		private Calendar fourMonthsAgo;
+
+		private List entitiesToCleanUp = new ArrayList();
+
+		private void prepare() {
+			Session session = openSession();
+			Transaction transaction = session.beginTransaction();
+
+			lastMonth = new GregorianCalendar();
+			lastMonth.add(Calendar.MONTH, -1);
+
+			nextMonth = new GregorianCalendar();
+			nextMonth.add(Calendar.MONTH, 1);
+
+			sixMonthsAgo = new GregorianCalendar();
+			sixMonthsAgo.add(Calendar.MONTH, -6);
+
+			fourMonthsAgo = new GregorianCalendar();
+			fourMonthsAgo.add(Calendar.MONTH, -4);
+
+			Country country = new Country();
+			country.setDefaulttext("DE");
+			country.setLongtext("Deutschland");
+			country.setShorttext("BRD");
+			country.setDefaultlanguage(Long.valueOf(12));
+			country.setValidFrom(sixMonthsAgo.getTime());
+			country.setValidTo(fourMonthsAgo.getTime());
+			session.save(country);
+			country.setLid(country.getId());
+			entitiesToCleanUp.add(country);
+
+			Country country2 = new Country();
+			country2.setDefaulttext("DE1");
+			country2.setLongtext("Deutschland1");
+			country2.setShorttext("BRD1");
+			country2.setDefaultlanguage(Long.valueOf(12));
+			country2.setValidFrom(lastMonth.getTime());
+			country2.setValidTo(nextMonth.getTime());
+			session.save(country2);
+			country2.setLid(country.getId());
+			entitiesToCleanUp.add(country);
+
+			Person steve = new Person();
+			steve.setFirstname("steve");
+			steve.setLastname("lastname");
+			Personinfo info = new Personinfo();
+			info.setNationality(country);
+			steve.setPersoninfo(info);
+			session.save(steve);
+			entitiesToCleanUp.add(steve);
+			steveId = steve.getId();
+
+			Foreigntext ft = new Foreigntext();
+			ft.setTable("country");
+			ft.setColumn("defaulttext");
+			ft.setValue("Deutschland");
+			ft.setObjectid(country.getLid());
+			ft.setLanguage(Long.valueOf(12));
+			session.save(ft);
+			entitiesToCleanUp.add(ft);
+
+			transaction.commit();
+			session.close();
+		}
+
+		private void release() {
+			Session session = openSession();
+			Transaction transaction = session.beginTransaction();
+
+			Iterator itr = entitiesToCleanUp.iterator();
+			while (itr.hasNext()) {
+				session.delete(itr.next());
+			}
+
+			transaction.commit();
+			session.close();
+		}
+	}
+}
Index: test/org/hibernate/test/filter/hql2/I18nSupport.java
===================================================================
--- test/org/hibernate/test/filter/hql2/I18nSupport.java	(revision 0)
+++ test/org/hibernate/test/filter/hql2/I18nSupport.java	(revision 0)
@@ -0,0 +1,63 @@
+// $Id$
+package org.hibernate.test.filter.hql2;
+
+import java.util.List;
+
+/**
+ * Implementation of I18nSupport.
+ * 
+ * @author Heiko Burchard
+ */
+public class I18nSupport {
+
+	private String shorttext;
+
+	private String defaulttext;
+
+	private String longtext;
+
+	protected Long defaultlanguage;
+
+	private List<Foreigntext> foreigntexts;
+
+	public String getShorttext() {
+		return shorttext;
+	}
+
+	public void setShorttext(String shorttext) {
+		this.shorttext = shorttext;
+	}
+
+	public String getDefaulttext() {
+		return defaulttext;
+	}
+
+	public void setDefaulttext(String defaulttext) {
+		this.defaulttext = defaulttext;
+	}
+
+	public String getLongtext() {
+		return longtext;
+	}
+
+	public void setLongtext(String longtext) {
+		this.longtext = longtext;
+	}
+
+	public Long getDefaultlanguage() {
+		return defaultlanguage;
+	}
+
+	public void setDefaultlanguage(Long defaultlanguage) {
+		this.defaultlanguage = defaultlanguage;
+	}
+
+	public void setForeigntexts(List<Foreigntext> foreigntexts) {
+		this.foreigntexts = foreigntexts;
+	}
+
+	public List<Foreigntext> getForeigntexts() {
+		return foreigntexts;
+	}
+
+}
Index: test/org/hibernate/test/filter/hql2/Person.hbm.xml
===================================================================
--- test/org/hibernate/test/filter/hql2/Person.hbm.xml	(revision 0)
+++ test/org/hibernate/test/filter/hql2/Person.hbm.xml	(revision 0)
@@ -0,0 +1,19 @@
+<?xml version="1.0"?>
+<!DOCTYPE hibernate-mapping
+        SYSTEM
+        "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd" >
+
+<hibernate-mapping package="org.hibernate.test.filter.hql2">
+
+    <class name="Person" table="person">
+    	<id name="id" column="id" >
+    		<generator class="native"/>
+    	</id>
+
+	    <property name="firstname" column="fname" type="string"/>
+    	<property name="lastname" column="lname" type="string"/>
+
+	    <one-to-one name="personinfo" cascade="all" class="Personinfo"/>
+	</class>
+
+</hibernate-mapping>\ No newline at end of file
Index: test/org/hibernate/test/filter/hql2/Person.java
===================================================================
--- test/org/hibernate/test/filter/hql2/Person.java	(revision 0)
+++ test/org/hibernate/test/filter/hql2/Person.java	(revision 0)
@@ -0,0 +1,49 @@
+// $Id$
+package org.hibernate.test.filter.hql2;
+
+/**
+ * Implementation of Person.
+ * 
+ * @author Heiko Burchard
+ */
+public class Person {
+	private Long id;
+
+	private String firstname;
+
+	private String lastname;
+
+	private Personinfo personinfo;
+
+	public Long getId() {
+		return id;
+	}
+
+	public void setId(Long id) {
+		this.id = id;
+	}
+
+	public String getFirstname() {
+		return firstname;
+	}
+
+	public void setFirstname(String firstname) {
+		this.firstname = firstname;
+	}
+
+	public String getLastname() {
+		return lastname;
+	}
+
+	public void setLastname(String lastname) {
+		this.lastname = lastname;
+	}
+
+	public Personinfo getPersoninfo() {
+		return personinfo;
+	}
+
+	public void setPersoninfo(Personinfo personinfo) {
+		this.personinfo = personinfo;
+	}
+}
Index: test/org/hibernate/test/filter/hql2/Personinfo.hbm.xml
===================================================================
--- test/org/hibernate/test/filter/hql2/Personinfo.hbm.xml	(revision 0)
+++ test/org/hibernate/test/filter/hql2/Personinfo.hbm.xml	(revision 0)
@@ -0,0 +1,17 @@
+<?xml version="1.0"?>
+<!DOCTYPE hibernate-mapping
+        SYSTEM
+        "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd" >
+
+<hibernate-mapping package="org.hibernate.test.filter.hql2">
+
+    <class name="Personinfo" table="personinfo">
+    	<id name="id" column="id" >
+    		<generator class="native"/>
+    	</id>
+
+	    <many-to-one name="nationality" cascade="none" class="Country" column="nationality_lid" property-ref="lid"/>
+	    <many-to-one name="secondNationality" cascade="none" class="Country" column="secondnationality_lid" property-ref="lid"/>
+	</class>
+
+</hibernate-mapping>\ No newline at end of file
Index: test/org/hibernate/test/filter/hql2/Personinfo.java
===================================================================
--- test/org/hibernate/test/filter/hql2/Personinfo.java	(revision 0)
+++ test/org/hibernate/test/filter/hql2/Personinfo.java	(revision 0)
@@ -0,0 +1,39 @@
+// $Id$
+package org.hibernate.test.filter.hql2;
+
+/**
+ * Implementation of Personinfo.
+ * 
+ * @author Heiko Burchard
+ */
+public class Personinfo {
+	private Long id;
+
+	private Country nationality;
+
+	private Country secondNationality;
+
+	public Long getId() {
+		return id;
+	}
+
+	public void setId(Long id) {
+		this.id = id;
+	}
+
+	public Country getNationality() {
+		return nationality;
+	}
+
+	public void setNationality(Country nationality) {
+		this.nationality = nationality;
+	}
+
+	public Country getSecondNationality() {
+		return secondNationality;
+	}
+
+	public void setSecondNationality(Country secondNationality) {
+		this.secondNationality = secondNationality;
+	}
+}
Index: test/org/hibernate/test/filter/hql2/defs.hbm.xml
===================================================================
--- test/org/hibernate/test/filter/hql2/defs.hbm.xml	(revision 0)
+++ test/org/hibernate/test/filter/hql2/defs.hbm.xml	(revision 0)
@@ -0,0 +1,14 @@
+<?xml version="1.0"?>
+<!DOCTYPE hibernate-mapping
+        SYSTEM
+        "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd" >
+
+<hibernate-mapping>
+	<filter-def name="histFilter">
+		<filter-param name="asOfDate" type="date"/>
+	</filter-def>
+	<filter-def name="histFilter2">
+		<filter-param name="validFrom" type="date"/>
+		<filter-param name="validTo" type="date"/>
+	</filter-def>
+</hibernate-mapping>\ No newline at end of file
