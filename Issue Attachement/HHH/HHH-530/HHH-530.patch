Index: QueryParameters.java
===================================================================
--- QueryParameters.java	(revision 14032)
+++ QueryParameters.java	(working copy)
@@ -46,13 +46,13 @@
 	private boolean callable = false;
 	private boolean autodiscovertypes = false;
 	private boolean isNaturalKeyLookup;
-	
+
 	private final ResultTransformer resultTransformer; // why is all others non final ?
-	
+
 	private String processedSQL;
 	private Type[] processedPositionalParameterTypes;
 	private Object[] processedPositionalParameterValues;
-	
+
 	public QueryParameters() {
 		this( ArrayHelper.EMPTY_TYPE_ARRAY, ArrayHelper.EMPTY_OBJECT_ARRAY );
 	}
@@ -81,13 +81,13 @@
 	) {
 		this(
 			positionalParameterTypes,
-			postionalParameterValues, 
-			null, 
-			null, 
-			false, 
-			null, 
+			postionalParameterValues,
 			null,
+			null,
 			false,
+			null,
+			null,
+			false,
 			null
 		);
 	}
@@ -119,8 +119,8 @@
 				null,
 				false,
 				false,
-				null, 
 				null,
+				null,
 				collectionKeys,
 				null
 			);
@@ -146,7 +146,7 @@
 			rowSelection,
 			false,
 			cacheable,
-			cacheRegion, 
+			cacheRegion,
 			comment,
 			null,
 			transformer
@@ -166,7 +166,7 @@
 			//final boolean forceCacheRefresh,
 			final String comment,
 			final Serializable[] collectionKeys,
-			ResultTransformer transformer			
+			ResultTransformer transformer
 	) {
 		this.positionalParameterTypes = positionalParameterTypes;
 		this.positionalParameterValues = positionalParameterValues;
@@ -181,7 +181,7 @@
 		this.readOnly = readOnly;
 		this.resultTransformer = transformer;
 	}
-	
+
 	public QueryParameters(
 		final Type[] positionalParameterTypes,
 		final Object[] positionalParameterValues,
@@ -200,13 +200,13 @@
 		final ResultTransformer transformer
 	) {
 		this(
-			positionalParameterTypes, 
-			positionalParameterValues, 
-			namedParameters, 
-			lockModes, 
-			rowSelection, 
-			readOnly, 
-			cacheable, 
+			positionalParameterTypes,
+			positionalParameterValues,
+			namedParameters,
+			lockModes,
+			rowSelection,
+			readOnly,
+			cacheable,
 			cacheRegion,
 			comment,
 			collectionKeys,
@@ -236,7 +236,7 @@
 	public RowSelection getRowSelection() {
 		return rowSelection;
 	}
-	
+
 	public ResultTransformer getResultTransformer() {
 		return resultTransformer;
 	}
@@ -269,8 +269,8 @@
 		Printer print = new Printer(factory);
 		if (positionalParameterValues.length!=0) {
 			log.trace(
-					"parameters: " + 
-					print.toString(positionalParameterTypes, positionalParameterValues) 
+					"parameters: " +
+					print.toString(positionalParameterTypes, positionalParameterValues)
 				);
 		}
 		if (namedParameters!=null) {
@@ -299,7 +299,7 @@
 		int values = positionalParameterValues==null ? 0 : positionalParameterValues.length;
 		if (types!=values) {
 			throw new QueryException(
-					"Number of positional parameter types:" + types + 
+					"Number of positional parameter types:" + types +
 					" does not match number of positional parameters: " + values
 				);
 		}
@@ -362,19 +362,19 @@
 	}
 
 	public void setCallable(boolean callable) {
-		this.callable = callable;		
+		this.callable = callable;
 	}
 
 	public boolean isCallable() {
 		return callable;
 	}
-	
+
 	public boolean hasAutoDiscoverScalarTypes() {
 		return autodiscovertypes;
 	}
 
 	public void processFilters(String sql, SessionImplementor session) {
-		
+
 		if ( session.getEnabledFilters().size()==0 || sql.indexOf(ParserHelper.HQL_VARIABLE_PREFIX)<0 ) {
 			// HELLA IMPORTANT OPTIMIZATION!!!
 			processedPositionalParameterValues = getPositionalParameterValues();
@@ -382,7 +382,7 @@
 			processedSQL = sql;
 		}
 		else {
-			
+
 			Dialect dialect = session.getFactory().getDialect();
 			String symbols = new StringBuffer().append( ParserHelper.HQL_SEPARATORS )
 					.append( dialect.openQuote() )
@@ -390,11 +390,12 @@
 					.toString();
 			StringTokenizer tokens = new StringTokenizer( sql, symbols, true );
 			StringBuffer result = new StringBuffer();
-		
+
 			List parameters = new ArrayList();
 			List parameterTypes = new ArrayList();
-		
-			while ( tokens.hasMoreTokens() ) {
+
+            int positionalIndex = 0;
+            while ( tokens.hasMoreTokens() ) {
 				final String token = tokens.nextToken();
 				if ( token.startsWith( ParserHelper.HQL_VARIABLE_PREFIX ) ) {
 					String filterParameterName = token.substring( 1 );
@@ -419,16 +420,18 @@
 					}
 				}
 				else {
-					result.append( token );
+                    if (token.equals( "?" ) && positionalIndex < getPositionalParameterValues().length) {
+                        parameters.add( getPositionalParameterValues()[positionalIndex] );
+                        parameterTypes.add( getPositionalParameterTypes()[positionalIndex] );
+                        positionalIndex++;
+                    }
+                    result.append( token );
 				}
 			}
-			parameters.addAll( Arrays.asList( getPositionalParameterValues() ) );
-			parameterTypes.addAll( Arrays.asList( getPositionalParameterTypes() ) );
 			processedPositionalParameterValues = parameters.toArray();
 			processedPositionalParameterTypes = ( Type[] ) parameterTypes.toArray( new Type[0] );
 			processedSQL = result.toString();
-			
-		}
+        }
 	}
 
 	public String getFilteredSQL() {
@@ -478,5 +481,5 @@
 		return copy;
 	}
 
-	
+
 }
