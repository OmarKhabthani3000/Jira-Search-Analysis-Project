Index: src/org/hibernate/event/EventListeners.java
===================================================================
--- src/org/hibernate/event/EventListeners.java	(revision 10462)
+++ src/org/hibernate/event/EventListeners.java	(working copy)
@@ -6,6 +6,7 @@
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.Map;
+import java.util.Set;
 
 import org.hibernate.AssertionFailure;
 import org.hibernate.MappingException;
@@ -39,6 +40,135 @@
  */
 public class EventListeners extends Cloneable implements Serializable {
 
+	private static final long serialVersionUID = -4892103537205364833L;
+
+	/** Type constant requiring instance of {@link AutoFlushEventListener} */
+	public static final String AUTO_FLUSH = "auto-flush";
+	
+	/** Type constant requiring instance of {@link MergeEventListener} */
+	public static final String MERGE = "merge";
+	
+	/** Type constant requiring instance of {@link PersistEventListener} */
+	public static final String CREATE = "create";
+	
+	/** Type constant requiring instance of {@link PersistEventListener} */
+	public static final String CREATE_ONFLUSH = "create-onflush";
+	
+	/** Type constant requiring instance of {@link DeleteEventListener} */
+	public static final String DELETE = "delete";
+	
+	/** Type constant requiring instance of {@link DirtyCheckEventListener}*/
+	public static final String DIRTY_CHECK = "dirty-check";
+	
+	/** Type constant requiring instance of {@link EvictEventListener} */
+	public static final String EVICT = "evict";
+	
+	/** Type constant requiring instance of {@link FlushEventListener} */
+	public static final String FLUSH = "flush";
+	
+	/** Type constant requiring instance of {@link FlushEntityEventListener} */
+	public static final String FLUSH_ENTITY = "flush-entity";
+	
+	/** Type constant requiring instance of {@link LoadEventListener} */
+	public static final String LOAD = "load";
+	
+	/** Type constant requiring instance of {@link InitializeCollectionEventListener} */
+	public static final String LOAD_COLLECTION = "load-collection";
+	
+	/** Type constant requiring instance of {@link LockEventListener} */
+	public static final String LOCK = "lock";
+	
+	/** Type constant requiring instance of {@link RefreshEventListener} */
+	public static final String REFRESH = "refresh";
+	
+	/** Type constant requiring instance of {@link ReplicateEventListener} */
+	public static final String REPLICATE = "replicate";
+	
+	/** Type constant requiring instance of {@link SaveOrUpdateEventListener} */
+	public static final String SAVE_UPDATE = "save-update";
+
+	/** Type constant requiring instance of {@link SaveOrUpdateEventListener} */
+	public static final String SAVE = "save";
+	
+	/** Type constant requiring instance of {@link SaveOrUpdateEventListener} */
+	public static final String UPDATE = "update";
+
+	/** Type constant requiring instance of {@link PreLoadEventListener} */
+	public static final String PRE_LOAD = "pre-load";
+
+	/** Type constant requiring instance of {@link PreUpdateEventListener} */
+	public static final String PRE_UPDATE = "pre-update";
+
+	/** Type constant requiring instance of {@link PreDeleteEventListener} */
+	public static final String PRE_DELETE = "pre-delete";
+
+	/** Type constant requiring instance of {@link PreInsertEventListener} */
+	public static final String PRE_INSERT = "pre-insert";
+
+	/** Type constant requiring instance of {@link PostLoadEventListener} */
+	public static final String POST_LOAD = "post-load";
+
+	/** Type constant requiring instance of {@link PostUpdateEventListener} */
+	public static final String POST_UPDATE = "post-update";
+
+	/** Type constant requiring instance of {@link PostDeleteEventListener} */
+	public static final String POST_DELETE = "post-delete";
+
+	/** Type constant requiring instance of {@link PostInsertEventListener} */
+	public static final String POST_INSERT = "post-insert";
+
+	/** Type constant requiring instance of {@link PostUpdateEventListener} */
+	public static final String POST_COMMIT_UPDATE = "post-commit-update";
+
+	/** Type constant requiring instance of {@link PostDeleteEventListener} */
+	public static final String POST_COMMIT_DELETE = "post-commit-delete";
+
+	/** Type constant requiring instance of {@link PostInsertEventListener} */
+	public static final String POST_COMMIT_INSERT = "post-commit-insert";
+	
+	private static Map eventInterfaceFromType;
+
+	static {
+		eventInterfaceFromType = new HashMap();
+
+		eventInterfaceFromType.put(AUTO_FLUSH, AutoFlushEventListener.class);
+		eventInterfaceFromType.put(MERGE, MergeEventListener.class);
+		eventInterfaceFromType.put(CREATE, PersistEventListener.class);
+		eventInterfaceFromType.put(CREATE_ONFLUSH, PersistEventListener.class);
+		eventInterfaceFromType.put(DELETE, DeleteEventListener.class);
+		eventInterfaceFromType.put(DIRTY_CHECK, DirtyCheckEventListener.class);
+		eventInterfaceFromType.put(EVICT, EvictEventListener.class);
+		eventInterfaceFromType.put(FLUSH, FlushEventListener.class);
+		eventInterfaceFromType.put(FLUSH_ENTITY, FlushEntityEventListener.class);
+		eventInterfaceFromType.put(LOAD, LoadEventListener.class);
+		eventInterfaceFromType.put(LOAD_COLLECTION, InitializeCollectionEventListener.class);
+		eventInterfaceFromType.put(LOCK, LockEventListener.class);
+		eventInterfaceFromType.put(REFRESH, RefreshEventListener.class);
+		eventInterfaceFromType.put(REPLICATE, ReplicateEventListener.class);
+		eventInterfaceFromType.put(SAVE_UPDATE, SaveOrUpdateEventListener.class);
+		eventInterfaceFromType.put(SAVE, SaveOrUpdateEventListener.class);
+		eventInterfaceFromType.put(UPDATE, SaveOrUpdateEventListener.class);
+		eventInterfaceFromType.put(PRE_LOAD, PreLoadEventListener.class);
+		eventInterfaceFromType.put(PRE_UPDATE, PreUpdateEventListener.class);
+		eventInterfaceFromType.put(PRE_DELETE, PreDeleteEventListener.class);
+		eventInterfaceFromType.put(PRE_INSERT, PreInsertEventListener.class);
+		eventInterfaceFromType.put(POST_LOAD, PostLoadEventListener.class);
+		eventInterfaceFromType.put(POST_UPDATE, PostUpdateEventListener.class);
+		eventInterfaceFromType.put(POST_DELETE, PostDeleteEventListener.class);
+		eventInterfaceFromType.put(POST_INSERT, PostInsertEventListener.class);
+		eventInterfaceFromType.put(POST_COMMIT_UPDATE, PostUpdateEventListener.class);
+		eventInterfaceFromType.put(POST_COMMIT_DELETE, PostDeleteEventListener.class);
+		eventInterfaceFromType.put(POST_COMMIT_INSERT, PostInsertEventListener.class);
+		eventInterfaceFromType = Collections.unmodifiableMap( eventInterfaceFromType );
+	}
+
+	/** returns all valid type constants such that {@link #getListenerClassFor(String)} 
+	 * will not throw a {@link MappingException}. 
+	 */
+	public static Set getEventTypes() {
+		return Collections.unmodifiableSet(  eventInterfaceFromType.keySet() );
+	}
+	
 	private LoadEventListener[] loadEventListeners = { new DefaultLoadEventListener() };
 	private SaveOrUpdateEventListener[] saveOrUpdateEventListeners = { new DefaultSaveOrUpdateEventListener() };
 	private MergeEventListener[] mergeEventListeners = { new DefaultMergeEventListener() };
@@ -72,43 +202,7 @@
 	private SaveOrUpdateEventListener[] saveEventListeners = { new DefaultSaveEventListener() };
 	private SaveOrUpdateEventListener[] updateEventListeners = { new DefaultUpdateEventListener() };
 	private MergeEventListener[] saveOrUpdateCopyEventListeners = { new DefaultSaveOrUpdateCopyEventListener() };//saveOrUpdateCopy() is deprecated!
-
-	private static Map eventInterfaceFromType;
-
-	static {
-		eventInterfaceFromType = new HashMap();
-
-		eventInterfaceFromType.put("auto-flush", AutoFlushEventListener.class);
-		eventInterfaceFromType.put("merge", MergeEventListener.class);
-		eventInterfaceFromType.put("create", PersistEventListener.class);
-		eventInterfaceFromType.put("create-onflush", PersistEventListener.class);
-		eventInterfaceFromType.put("delete", DeleteEventListener.class);
-		eventInterfaceFromType.put("dirty-check", DirtyCheckEventListener.class);
-		eventInterfaceFromType.put("evict", EvictEventListener.class);
-		eventInterfaceFromType.put("flush", FlushEventListener.class);
-		eventInterfaceFromType.put("flush-entity", FlushEntityEventListener.class);
-		eventInterfaceFromType.put("load", LoadEventListener.class);
-		eventInterfaceFromType.put("load-collection", InitializeCollectionEventListener.class);
-		eventInterfaceFromType.put("lock", LockEventListener.class);
-		eventInterfaceFromType.put("refresh", RefreshEventListener.class);
-		eventInterfaceFromType.put("replicate", ReplicateEventListener.class);
-		eventInterfaceFromType.put("save-update", SaveOrUpdateEventListener.class);
-		eventInterfaceFromType.put("save", SaveOrUpdateEventListener.class);
-		eventInterfaceFromType.put("update", SaveOrUpdateEventListener.class);
-		eventInterfaceFromType.put("pre-load", PreLoadEventListener.class);
-		eventInterfaceFromType.put("pre-update", PreUpdateEventListener.class);
-		eventInterfaceFromType.put("pre-delete", PreDeleteEventListener.class);
-		eventInterfaceFromType.put("pre-insert", PreInsertEventListener.class);
-		eventInterfaceFromType.put("post-load", PostLoadEventListener.class);
-		eventInterfaceFromType.put("post-update", PostUpdateEventListener.class);
-		eventInterfaceFromType.put("post-delete", PostDeleteEventListener.class);
-		eventInterfaceFromType.put("post-insert", PostInsertEventListener.class);
-		eventInterfaceFromType.put("post-commit-update", PostUpdateEventListener.class);
-		eventInterfaceFromType.put("post-commit-delete", PostDeleteEventListener.class);
-		eventInterfaceFromType.put("post-commit-insert", PostInsertEventListener.class);
-		eventInterfaceFromType = Collections.unmodifiableMap( eventInterfaceFromType );
-	}
-
+	
 	public Class getListenerClassFor(String type) {
 		Class clazz = (Class) eventInterfaceFromType.get(type);
 		
