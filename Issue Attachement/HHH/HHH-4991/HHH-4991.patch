Index: core/src/main/java/org/hibernate/loader/JoinWalker.java
===================================================================
--- core/src/main/java/org/hibernate/loader/JoinWalker.java	(revision 19296)
+++ core/src/main/java/org/hibernate/loader/JoinWalker.java	(working copy)
@@ -473,7 +473,7 @@
 	 * {@link JoinFragment#LEFT_OUTER_JOIN}, or -1 to indicate no joining.
 	 * @throws MappingException ??
 	 */
-	private int getJoinType(
+	protected int getJoinType(
 			AssociationType associationType,
 			FetchMode config,
 			String path,
Index: core/src/main/java/org/hibernate/loader/criteria/CriteriaJoinWalker.java
===================================================================
--- core/src/main/java/org/hibernate/loader/criteria/CriteriaJoinWalker.java	(revision 19283)
+++ core/src/main/java/org/hibernate/loader/criteria/CriteriaJoinWalker.java	(working copy)
@@ -170,7 +170,31 @@
 			}
 		}
 	}
-	
+
+	protected int getJoinType(
+			AssociationType associationType,
+			FetchMode config,
+			String path,
+			String lhsTable,
+			String[] lhsColumns,
+			boolean nullable,
+			int currentDepth,
+			CascadeStyle cascadeStyle) throws MappingException {
+		return ( translator.isJoin( path ) ?
+				translator.getJoinType( path ) :
+				super.getJoinType(
+						associationType,
+						config,
+						path,
+						lhsTable,
+						lhsColumns,
+						nullable,
+						currentDepth,
+						cascadeStyle
+				)
+		);
+	}
+
 	private static boolean isDefaultFetchMode(FetchMode fetchMode) {
 		return fetchMode==null || fetchMode==FetchMode.DEFAULT;
 	}
