Index: envers/src/test/java/org/hibernate/envers/test/entities/ids/EmbStringId.java
===================================================================
--- envers/src/test/java/org/hibernate/envers/test/entities/ids/EmbStringId.java	(revision 0)
+++ envers/src/test/java/org/hibernate/envers/test/entities/ids/EmbStringId.java	(working copy)
@@ -0,0 +1,43 @@
+package org.hibernate.envers.test.entities.ids;
+
+import org.hibernate.envers.Audited;
+
+import javax.persistence.Embeddable;
+import java.io.Serializable;
+
+@Embeddable
+@Audited
+public class EmbStringId implements Serializable{
+
+    String id;
+
+    protected EmbStringId(){
+        // for JPA
+    }
+
+    public EmbStringId(String aId){
+        id = aId;
+    }
+
+    public String toString() {
+        return id;
+    }
+
+    public boolean equals(Object o) {
+    if (this == o) {
+      return true;
+    }
+    if (o == null || getClass() != o.getClass()) {
+      return false;
+    }
+
+    EmbStringId that = (EmbStringId) o;
+
+    return !(id != null ? !id.equals(that.id) : that.id != null);
+
+  }
+
+  public int hashCode() {
+    return id != null ? id.hashCode() : 0;
+  }
+}
Index: envers/src/test/java/org/hibernate/envers/test/entities/ids/EmbStringIdTestEntity.java
===================================================================
--- envers/src/test/java/org/hibernate/envers/test/entities/ids/EmbStringIdTestEntity.java	(revision 0)
+++ envers/src/test/java/org/hibernate/envers/test/entities/ids/EmbStringIdTestEntity.java	(working copy)
@@ -0,0 +1,60 @@
+package org.hibernate.envers.test.entities.ids;
+
+import org.hibernate.envers.Audited;
+
+import javax.persistence.EmbeddedId;
+import javax.persistence.Entity;
+
+@Entity
+@Audited
+public class EmbStringIdTestEntity {
+
+    @EmbeddedId
+    private EmbStringId embStringId;
+
+    private String str1;
+
+    protected EmbStringIdTestEntity(){
+        // for JPA
+    }
+
+    public EmbStringIdTestEntity(EmbStringId aEmbStringId, String aStr1){
+        embStringId = aEmbStringId;
+        str1 = aStr1;
+    }
+
+     public EmbStringId getEmbStringId() {
+        return embStringId;
+    }
+
+    public void setEmbStringId(EmbStringId aEmpStringId) {
+        embStringId = aEmpStringId;
+    }
+
+    public String getStr1() {
+        return str1;
+    }
+
+    public void setStr1(String aStr1) {
+        str1 = aStr1;
+    }
+
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (!(o instanceof EmbStringIdTestEntity)) return false;
+
+        EmbStringIdTestEntity that = (EmbStringIdTestEntity) o;
+
+        if (embStringId != null ? !embStringId.equals(that.embStringId) : that.embStringId != null) return false;
+        if (str1 != null ? !str1.equals(that.str1) : that.str1 != null) return false;
+
+        return true;
+    }
+
+    public int hashCode() {
+        int result;
+        result = (embStringId != null ? embStringId.hashCode() : 0);
+        result = 31 * result + (str1 != null ? str1.hashCode() : 0);
+        return result;
+    }
+}
Index: envers/src/test/java/org/hibernate/envers/test/integration/query/SimpleQueryEmbeddedId.java
===================================================================
--- envers/src/test/java/org/hibernate/envers/test/integration/query/SimpleQueryEmbeddedId.java	(revision 0)
+++ envers/src/test/java/org/hibernate/envers/test/integration/query/SimpleQueryEmbeddedId.java	(working copy)
@@ -0,0 +1,38 @@
+package org.hibernate.envers.test.integration.query;
+
+import org.hibernate.ejb.Ejb3Configuration;
+import org.hibernate.envers.AuditReader;
+import org.hibernate.envers.AuditReaderFactory;
+import org.hibernate.envers.test.AbstractEntityTest;
+import org.hibernate.envers.test.entities.ids.EmbStringId;
+import org.hibernate.envers.test.entities.ids.EmbStringIdTestEntity;
+import org.testng.annotations.BeforeClass;
+import org.testng.annotations.Test;
+
+import javax.persistence.EntityManager;
+import java.util.HashSet;
+import java.util.List;
+
+public class SimpleQueryEmbeddedId extends AbstractEntityTest {
+
+    public void configure(Ejb3Configuration cfg) {
+        cfg.addAnnotatedClass(EmbStringIdTestEntity.class);
+    }
+
+    @BeforeClass(dependsOnMethods = "init")
+    public void initData() {
+        // Revision 1
+        EntityManager em = getEntityManager();
+        em.getTransaction().begin();
+        EmbStringIdTestEntity embStringIdTestEntity = new EmbStringIdTestEntity(new EmbStringId("embeddedStringId"), "string");
+        em.persist(embStringIdTestEntity);
+        em.getTransaction().commit();
+    }
+
+    @Test
+    public void testProtectedEmbeddedId(){
+        AuditReader auditReader = AuditReaderFactory.get(getEntityManager());
+        List embStringIdTestEntities = auditReader.createQuery().forEntitiesAtRevision(EmbStringIdTestEntity.class, 1).getResultList();
+        assert new HashSet(embStringIdTestEntities).equals(new EmbStringIdTestEntity(new EmbStringId("embeddedStringId"), "string"));
+    }
+}
\ No newline at end of file
