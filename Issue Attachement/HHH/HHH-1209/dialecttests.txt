---

if ( getDialect() instanceof PostgreSQLDialect ) return; //doesn't like boolean=1
---

if ( getDialect() instanceof Oracle9Dialect ) return; //ora doesn't like exists() in the select clause

---

if ( getDialect() instanceof PostgreSQLDialect ) return; //postgres got no year() function
if ( getDialect() instanceof Oracle9Dialect ) return; //oracle got no year() function

---

if ( ! (getDialect() instanceof HSQLDialect) ) {
	s.createQuery("from User u where u.person = ('gavin', :dob, 'Peachtree Rd', 'Karbarook Ave', 1974, 'Peachtree Rd')")
		.setDate("dob", new Date("March 25, 1974")).list();
	s.createQuery("from User where person = ('gavin', :dob, 'Peachtree Rd', 'Karbarook Ave', 1974, 'Peachtree Rd')")
		.setDate("dob", new Date("March 25, 1974")).list();
}

---

if ( !(getDialect() instanceof HSQLDialect) && ! (getDialect() instanceof Oracle9Dialect) ) {

	result = s.createQuery("from Transaction txn where txn.value = (1.5, 'AUD')").list();
	assertEquals( result.size(), 1 );
	result = s.createQuery("from Transaction where value = (1.5, 'AUD')").list();
	assertEquals( result.size(), 1 );

}

---

public void testIntegrityViolation() throws Exception {
if ( getDialect() instanceof MySQLMyISAMDialect ) return;

---

public void testFormulaJoin() {
if ( getDialect() instanceof PostgreSQLDialect ) return;
		
---
		
public class TimestampGeneratedValuesWithCachingTest extends AbstractGeneratedPropertyTest {
	protected boolean acceptsCurrentDialect() {
		return ( getDialect() instanceof SybaseDialect );
	}

---

public class TriggerGeneratedValuesWithCachingTest extends AbstractGeneratedPropertyTest {
	protected boolean acceptsCurrentDialect() {
		// TODO : add more triggers for dialects whicg allow mods in triggers...
		return ( getDialect() instanceof Oracle9Dialect );
	}

---

public class TriggerGeneratedValuesWithoutCachingTest extends AbstractGeneratedPropertyTest {
	protected boolean acceptsCurrentDialect() {
		// TODO : add more triggers for dialects whicg allow mods in triggers...
		return ( getDialect() instanceof Oracle9Dialect );
	}

---

public void testJDBC3GetGeneratedKeysSupportOnOracle() {
	if ( !( getDialect() instanceof Oracle9Dialect ) ) return;

---

an.setBodyWeight(123.45f);
session.persist(an);
String str = (String) session.createQuery("select str(an.bodyWeight) from Animal an where str(an.bodyWeight) like '123%' or str(an.bodyWeight) like '1.23%'").uniqueResult();
if ( getDialect() instanceof DB2Dialect ) {
	assertTrue( str.startsWith("1.234") );
}
else {
	assertTrue( str.startsWith("123.4") );
}

---

String dateStr1 = (String) session.createQuery("select str(current_date) from Animal").uniqueResult();
String dateStr2 = (String) session.createQuery("select str(year(current_date))||'-'||str(month(current_date))||'-'||str(day(current_date)) from Animal").uniqueResult();
System.out.println(dateStr1 + '=' + dateStr2);
if ( ! ( getDialect() instanceof Oracle9Dialect ) ) { //Oracle renders the name of the month :(
	String[] dp1 = StringHelper.split("-", dateStr1);
	String[] dp2 = StringHelper.split("-", dateStr2);
	for (int i=0; i<3; i++) {
		if ( dp1[i].startsWith("0") ) dp1[i] = dp1[i].substring(1);
		assertEquals( dp1[i], dp2[i] );
	}
}

---

if ( (getDialect() instanceof MySQLDialect) || (getDialect() instanceof DB2Dialect) ) return;
session.createQuery("from Human h where h.nickName like 'G%'").list();
session.createQuery("from Animal a where cast(a.bodyWeight as string) like '1.%'").list();
session.createQuery("from Animal a where cast(a.bodyWeight as integer) = 1").list();

---

if ( !(getDialect() instanceof DB2Dialect) ) { //no ANSI extract
session.createQuery("select extract(second from current_timestamp()), extract(minute from current_timestamp()), extract(hour from current_timestamp()) from Mammal m").list();
session.createQuery("select extract(day from m.birthdate), extract(month from m.birthdate), extract(year from m.birthdate) from Mammal m").list();
}

---

if ( !( getDialect() instanceof DB2Dialect ) ) {
hql = "from Animal a where trim(trailing '_' from a.description) = 'cat'";
hql = "select trim(trailing '_' from a.description) from Animal a";
hql = "from Animal a where trim(leading '_' from a.description) = 'cat'";
hql = "from Animal a where trim(both from a.description) = 'cat'";
}

---

if ( !(getDialect() instanceof HSQLDialect) ) { //HSQL doesn't like trim() without specification
hql = "from Animal a where trim(a.description) = 'cat'";

---

if ( getDialect() instanceof MySQLDialect ) return;
assertTranslation("from Animal where lower(upper('foo') || upper(:bar)) like 'f%'");

---

if ( getDialect() instanceof PostgreSQLDialect ) return;
assertTranslation("from Animal where abs(cast(1 as float) - cast(:param as float)) = 1.0");

---

if ( getDialect() instanceof MySQLDialect ) return; //MySQL uses concat(x, y, z)
assertTranslation("from Human h where h.nickName = '1' || 'ov' || 'tha' || 'few'");

---

if ( getDialect() instanceof HSQLDialect || getDialect() instanceof DB2Dialect ) {
	assertTranslation( "from Human h order by sqrt(h.bodyWeight), year(h.birthdate)" );
}

---

if ( getDialect() instanceof Oracle9Dialect ) return;
if ( getDialect() instanceof PostgreSQLDialect ) return;
assertTranslation( "select count(*) from Human h group by year(h.birthdate)" );
assertTranslation( "select count(*) from Human h group by trunc( sqrt(h.bodyWeight*4)/2 )" );
assertTranslation( "select count(*) from Human h group by year(sysdate)" );

---

public void testSelectDialectFunction() throws Exception {
if ( getDialect() instanceof HSQLDialect ) {
	assertTranslation( "select mod(s.count, 2) from org.hibernate.test.legacy.Simple as s where s.id = 10" );
	//assertTranslation( "from org.hibernate.test.legacy.Simple as s where mod(s.count, 2) = 0" );
}

---

public void testInterfaceProxies() {
if ( getDialect() instanceof PostgreSQLDialect ) return;

---

if ( !(getDialect() instanceof HSQLDialect) && !( getDialect() instanceof PostgreSQLDialect ) && !( getDialect() instanceof MySQLDialect ) && !( getDialect() instanceof DB2Dialect ) ) {
	s.createCriteria(Person.class).add( 
			Expression.in("address", new Address[] { mark.getAddress(), joe.getAddress() } ) 
	).list();
}

---

public void testDiscriminatorFiltering() throws Exception {
	if ( ( getDialect() instanceof HSQLDialect ) ) return;
Caused by: java.sql.SQLException: not allowed in OUTER JOIN condition in statement [select c1x0_.identifier_column as identifier1_0_0_, c2s1_.identifier_column as identifier1_0_1_, c1x0_.name as name0_0_, c1x0_.forward as forward0_0_, c1x0_.count_ as count5_0_0_, c1x0_.c1 as c6_0_0_, c1x0_.c as c0_0_, c2s1_.name as name0_1_, c2s1_.forward as forward0_1_, c2s1_.count_ as count5_0_1_, c2s1_.c2 as c8_0_1_, c2s1_.c as c0_1_ from AP c1x0_ left outer join AP c2s1_ on c1x0_.identifier_column=c2s1_.c and c2s1_.identifier_column is not null and c2s1_.clazz_discriminata=2 where c1x0_.clazz_discriminata=1]

---

public void testInsert() throws HibernateException, SQLException {

	if ( getDialect() instanceof HSQLDialect ) return;
	if ( getDialect() instanceof MySQLDialect ) return;

---

public void testCollectionCUD() throws HibernateException, SQLException {

	if ( getDialect() instanceof HSQLDialect ) return;
	if ( getDialect() instanceof MySQLDialect ) return;

---

public void testCRUD() throws HibernateException, SQLException {

	if ( getDialect() instanceof HSQLDialect ) return;
	if ( getDialect() instanceof MySQLDialect ) return;

---

public void testOnCascadeDelete() throws Exception {

	if (getDialect() instanceof MySQLDialect) return;

---

if ( ! (getDialect() instanceof HSQLDialect) ) s.find("select foo.string from Foo foo where foo.foo.foo.foo = foo.foo.foo");

---

if ( (getDialect() instanceof DB2Dialect) && !(getDialect() instanceof DerbyDialect) ) {
	s.find("from Foo foo where lower( foo.foo.string ) = 'foo'");
	s.find("from Foo foo where lower( (foo.foo.string || 'foo') || 'bar' ) = 'foo'");
	s.find("from Foo foo where repeat( (foo.foo.string || 'foo') || 'bar', 2 ) = 'foo'");
	s.find("from Bar foo where foo.foo.integer is not null and repeat( (foo.foo.string || 'foo') || 'bar', (5+5)/2 ) = 'foo'");
	s.find("from Bar foo where foo.foo.integer is not null or repeat( (foo.foo.string || 'foo') || 'bar', (5+5)/2 ) = 'foo'");
}

---

if (getDialect() instanceof SybaseDialect) {
	s.iterate("select baz from Baz as baz join baz.fooArray foo group by baz order by sum(foo.float)");
}

---

//The following test is disabled for databases with no subselects...also for Interbase (not sure why).
if ( 
		!(getDialect() instanceof MySQLDialect) && 
		!(getDialect() instanceof HSQLDialect) && 
		!(getDialect() instanceof MckoiDialect) && 
		!(getDialect() instanceof SAPDBDialect) && 
		!(getDialect() instanceof PointbaseDialect) &&
		!(getDialect() instanceof DerbyDialect)
)  {

---

if ( !( getDialect() instanceof InterbaseDialect ) ) {
	list = s.find("from Foo foo where ? = some elements(foo.component.importantDates)", new Date(), Hibernate.DATE);
	assertTrue( "component query", list.size()==2 );
}

---

if( !( getDialect() instanceof TimesTenDialect)) {
	list = s.find("from Foo foo where size(foo.component.importantDates) = 3"); //WAS: 4
	assertTrue( "component query", list.size()==2 );
	list = s.find("from Foo foo where 0 = size(foo.component.importantDates)");
	assertTrue( "component query", list.size()==0 );
}

---

if ( !( getDialect() instanceof TimesTenDialect)) {
	s.find("select foo.foo from Foo foo where foo.long = some( select max(x.long) from Foo x where (x.long > foo.foo.long) group by x.foo )");
}

---

list = s.find(
	"select foo.foo.foo.foo from Foo foo, Foo foo2 where"
	+ " foo = foo2.foo and not not ( not foo.string='fizard' )"
	+ " and foo2.string between 'a' and (foo.foo.string)"
	+ ( ( getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect)?
		" and ( foo2.string in ( 'fiz', 'blah') or 1=1 )"
		:
		" and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )"
	)
);

---

if ( !(getDialect() instanceof HSQLDialect) ) {
	assertTrue(cnt==2);
	assertTrue( s.find("from Named n0, Named n1 where n0.name = n1.name").size()==7 );
}

---

if ( !(getDialect() instanceof MySQLDialect) && !(getDialect() instanceof MckoiDialect) && !(getDialect() instanceof SAPDBDialect) && !(getDialect() instanceof PointbaseDialect) /*&& !(dialect instanceof Oracle9Dialect)*/ )  {
	s.find("from Baz baz inner join baz.fooSet where '1' in (from baz.fooSet foo where foo.string is not null)");
	s.find("from Baz baz where 'a' in elements(baz.collectionComponent.nested.foos) and 1.0 in elements(baz.collectionComponent.nested.floats)");
	s.find("from Baz baz where 'b' in elements(baz.collectionComponent.nested.foos) and 1.0 in elements(baz.collectionComponent.nested.floats)");
}

---

if ( !(getDialect() instanceof HSQLDialect) ) s.find("from Foo foo left join foo.foo where foo.foo in ('1','2','3')");

---

if ( !(getDialect() instanceof MySQLDialect) && !(getDialect() instanceof HSQLDialect) /*&& !(dialect instanceof MckoiDialect)*/ && !(getDialect() instanceof SAPDBDialect) && !(getDialect() instanceof PointbaseDialect) && !(getDialect() instanceof TimesTenDialect) ) {
	s.filter( baz.getFooArray(), "where size(this.bytes) > 0");
	s.filter( baz.getFooArray(), "where 0 in elements(this.bytes)");
}

---

if ( !(getDialect() instanceof DB2Dialect) ) {
	q.setLockMode("bar", LockMode.UPGRADE);
}
if ( !(getDialect() instanceof DB2Dialect) ) {
	q.setLockMode("bar", LockMode.UPGRADE);
}
if ( !(getDialect() instanceof DB2Dialect) ) {
	assertTrue( s.getCurrentLockMode( result[0] )==LockMode.UPGRADE && s.getCurrentLockMode( result[1] )==LockMode.UPGRADE );
}
---

if ( !(getDialect() instanceof HSQLDialect) ) assertTrue( Hibernate.isInitialized( baz.getFooBag().iterator().next() ) );

---

if ( !(getDialect() instanceof SAPDBDialect) ) assertTrue( list.size()==2 );

---

if ( !(getDialect() instanceof SAPDBDialect) ) assertTrue( list.size()==2 );

---

if (
	!( getDialect() instanceof Oracle9Dialect) &&
	!( getDialect() instanceof MySQLDialect) &&
	!( getDialect() instanceof DB2Dialect) &&
	!( getDialect() instanceof HSQLDialect) &&
	!( getDialect() instanceof SQLServerDialect) &&
	!( getDialect() instanceof SybaseDialect) &&
	!( getDialect() instanceof PostgreSQLDialect) &&
	!( getDialect() instanceof TimesTenDialect)
) { // oracle barfs on "x in ()"
		q.setParameterList("nameList", Collections.EMPTY_LIST);
	list = q.list();
	assertTrue( list.size()==0 );
}

---

public void testFindByCriteria() throws Exception {
if ( getDialect() instanceof DB2Dialect ) return;

---

if(!(getDialect() instanceof TimesTenDialect)) {
	list = s.createCriteria(Foo.class).setMaxResults(0).list();
	assertTrue( list.size()==0 );
}

---

if ( !(getDialect() instanceof MySQLDialect) && !(getDialect() instanceof HSQLDialect)
  && !(getDialect() instanceof SAPDBDialect) && !(getDialect() instanceof PointbaseDialect) )  {
	s.find("select count(*) from Baz as baz where 1 in indices(baz.fooArray)");
	s.find("select count(*) from Bar as bar where 'abc' in elements(bar.baz.fooArray)");
	s.find("select count(*) from Bar as bar where 1 in indices(bar.baz.fooArray)");
	if ( !(getDialect() instanceof DB2Dialect) &&  !(getDialect() instanceof Oracle9Dialect)  ) {
		s.find("select count(*) from Bar as bar, bar.component.glarch.proxyArray as g where g.id in indices(bar.baz.fooArray)");
		s.find("select max( elements(bar.baz.fooArray) ) from Bar as bar, bar.component.glarch.proxyArray as g where g.id in indices(bar.baz.fooArray)");
	}
	s.find("select count(*) from Bar as bar where '1' in (from bar.component.glarch.proxyArray g where g.name='foo')");
	s.find("select count(*) from Bar as bar where '1' in (from bar.component.glarch.proxyArray g where g.name='foo')");
	s.find("select count(*) from Bar as bar left outer join bar.component.glarch.proxyArray as pg where '1' in (from bar.component.glarch.proxyArray)");
}

---

if ( !( getDialect() instanceof HSQLDialect ) ) s.find("select baz.name from Bar bar join bar.baz baz left outer join baz.fooSet foo where baz.name = bar.string");

---

if ( !( getDialect() instanceof HSQLDialect ) ) {
	s.find("select baz.name from Bar bar left join bar.baz baz left join baz.fooSet foo where baz.name = bar.string");
	s.find("select foo.string from Bar bar left join bar.baz.fooSet foo where bar.string = foo.string");
}

---

if ( getDialect() instanceof DB2Dialect || getDialect() instanceof PostgreSQLDialect ) {
	s.iterate("select one from One one join one.manies many group by one order by count(many)");
	s.iterate("select one from One one join one.manies many group by one having count(many) < 5");
}

---

if ( !(getDialect() instanceof MySQLDialect) && !(getDialect() instanceof HSQLDialect) && !(getDialect() instanceof PointbaseDialect) )  {
	List list = s.find("select foo from Foo foo, Baz baz where foo in elements(baz.fooArray) and 3 = some elements(baz.intArray) and 4 > all indices(baz.intArray)");
	assertTrue( "collection.elements find", list.size()==2 );
}

---

if (!(getDialect() instanceof SAPDBDialect) ) { // SAPDB doesn't like distinct with binary type
	List list = s.find("select distinct foo from Baz baz join baz.fooArray foo");
	assertTrue( "collection.elements find", list.size()==2 );
}

---

public void testScrollableIterator() throws Exception {
if ( getDialect() instanceof DB2Dialect || getDialect() instanceof OracleDialect || getDialect() instanceof SybaseDialect || getDialect() instanceof HSQLDialect ) {
Session s = openSession();

---

if ( !(getDialect() instanceof MySQLDialect) && !(getDialect() instanceof HSQLDialect) && !(getDialect() instanceof PointbaseDialect) )  {
	foo.setBytes( "osama".getBytes() );
	assertTrue( "autoflush collection update", s.find("from Foo foo where 111 in elements(foo.bytes)").size()==1 );
	foo.getBytes()[0] = 69;
	assertTrue( "autoflush collection update", s.find("from Foo foo where 69 in elements(foo.bytes)").size()==1 );
}

---

if ( !(getDialect() instanceof MySQLDialect) && !(getDialect() instanceof HSQLDialect) && !(getDialect() instanceof InterbaseDialect) && !(getDialect() instanceof PointbaseDialect) && !(getDialect() instanceof SAPDBDialect) )  {
	baz.getFooArray()[0] = null;
	i = s.iterate(
		"from Baz baz where ? in elements(baz.fooArray)",
		foo, Hibernate.entity(Foo.class)
	);
	assertTrue( !i.hasNext() );
	baz.getFooArray()[0] = foo;
	i = s.iterate(
		"select foo from Foo foo where foo in "
		+ "(select elt from Baz baz join baz.fooArray elt)"
	);
	assertTrue( i.hasNext() );
}

---

if ( getDialect() instanceof OracleDialect ) {
	( (RootClass) cfg.getClassMapping("org.hibernate.test.legacy.Foo") ).setForceDiscriminator(false);
}

---

if ( getDialect() instanceof MckoiDialect ) {
	GregorianCalendar now = new GregorianCalendar();
	GregorianCalendar cal = new GregorianCalendar(
		now.get(java.util.Calendar.YEAR),
		now.get(java.util.Calendar.MONTH),
		now.get(java.util.Calendar.DATE)
	);
	id.setDate( cal.getTime() );
}
else {
	id.setDate( new Date() );
}

---

if ( !(getDialect() instanceof MySQLDialect) && !(getDialect() instanceof HSQLDialect) && !(getDialect() instanceof MckoiDialect) && !(getDialect() instanceof PointbaseDialect) ) {
	s.find("from Fum fum1 where exists elements(fum1.friends)");
	if(!(getDialect() instanceof TimesTenDialect)) { // can't execute because TimesTen can't do subqueries combined with aggreations
		s.find("from Fum fum1 where size(fum1.friends) = 0");
	}
}

---

public void testFormulaDiscriminator() throws Exception {
if ( ( getDialect() instanceof OracleDialect ) || ( getDialect() instanceof HSQLDialect ) ) return;

---

public void testMap() throws Exception {
if ( (getDialect() instanceof HSQLDialect) ) return;

---

if (getDialect() instanceof HSQLDialect) { m.setOtherMaster(null); s.flush(); }

---

if (getDialect() instanceof HSQLDialect) { m1.setOtherMaster(null); s.flush(); }

---

if ( !(getDialect() instanceof MySQLDialect) && !(getDialect() instanceof SAPDBDialect) && !(getDialect() instanceof MckoiDialect) ) {
	s.iterate("FROM Master m WHERE NOT EXISTS ( FROM m.details d WHERE NOT d.i=5 )");
	s.iterate("FROM Master m WHERE NOT 5 IN ( SELECT d.i FROM m.details AS d )");
}

---

if ( !(getDialect() instanceof MySQLDialect) && !(getDialect() instanceof Oracle9Dialect) && !(getDialect() instanceof SAPDBDialect) && !(getDialect() instanceof MckoiDialect) && !(getDialect() instanceof org.hibernate.dialect.TimesTenDialect)) {
	assertTrue(
		"query",
		s.find("from Detail d, Master m where m = d.master and size(m.outgoing) = 0 and size(m.incoming) = 0").size()==2
	);
}

---

if ( (getDialect() instanceof SybaseDialect) || (getDialect() instanceof DerbyDialect) ) {
	s.save(d1);

---

if ( (getDialect() instanceof SybaseDialect) || (getDialect() instanceof DerbyDialect) ) {
	s.save(d1);	s.save(d2);
}

---

if ( (getDialect() instanceof MySQLDialect) ) s.connection().setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);

---

Long id = new Long(1);
if (getDialect() instanceof SybaseDialect) {
	id = (Long) s.save( new TrivialClass() );
}
else{
	s.save( new TrivialClass(), id );
}

---

if ( getDialect() instanceof SybaseDialect ) {
	s.save(sm);
}
else {
	s.save( sm, new Long(2) );
}

---

if ( getDialect() instanceof SybaseDialect ) {
	mid = s.save(multi);
	sid = s.save(simp);
}
else {
	mid = new Long(123);
	s.save(multi, mid);
	sid = new Long(1234);
	s.save(simp, sid);
}

---

if (getDialect() instanceof SybaseDialect) {
	smid = s.save(sm);
}
else {
	smid = new Long(2);
	s.save(sm, smid);
}

---

if ( !(getDialect() instanceof MySQLDialect) ) s.find("from SubMulti sm where exists elements(sm.children)");

---

if ( getDialect() instanceof SybaseDialect ) {
	mid = s.save(multi);
	sid = s.save(simp);
}
else {
	mid = new Long(123);
	sid = new Long(1234);
	s.save(multi, mid);
	s.save(simp, sid);
}

---

if ( getDialect() instanceof SybaseDialect ) {
	id = s.save(ls);
}
else {
	id = new Long(2);
	s.save( ls, new Long(2) );
}

---

if ( getDialect() instanceof SybaseDialect ) {
	mid = s.save(multi);
}
else {
	mid = new Long(123);
	s.save(multi, mid);
}

---

if ( getDialect() instanceof SybaseDialect ) {
	id = s.save(ls);
}
else {
	id = new Long(2);
	s.save( ls, new Long(2) );
}

---

LockMode lockMode = (getDialect() instanceof DB2Dialect) ? LockMode.READ : LockMode.UPGRADE;

---

if ( ! ( getDialect() instanceof MySQLDialect ) && !(getDialect() instanceof org.hibernate.dialect.TimesTenDialect) ) {
	assertTrue(
		s.find("select c from ContainerX c where c.manyToMany[ maxindex(c.manyToMany) ].count = 2")
		.size() == 1
	);
}


---

if ( !(getDialect() instanceof MySQLDialect) && !(getDialect() instanceof HSQLDialect) )  {
	s.filter( c.getBag(), "where 0 in elements(this.bag)" );
	s.filter( c.getBag(), "where 0 in elements(this.lazyBag)" );
}

---

if ( (getDialect() instanceof MySQLDialect) ) {
	session.connection().setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);
}

---

Iterator iter = s.iterate("select max(s.count) from Simple s");
if ( getDialect() instanceof MySQLDialect ) assertTrue( iter.hasNext() && iter.next()==null );

---

if ( getDialect() instanceof OracleDialect) {
	// Check Oracle Dialect mix of dialect functions - no args (no parenthesis and single arg functions
	java.util.List rset = s.find("select s.name, sysdate(), trunc(s.pay), round(s.pay) from Simple s");
	assertNotNull("Name string should have been returned",(((Object[])rset.get(0))[0]));
	assertNotNull("Todays Date should have been returned",(((Object[])rset.get(0))[1]));
	assertEquals("trunc(45.8) result was incorrect ", new Float(45), ( (Object[]) rset.get(0) )[2] );
	assertEquals("round(45.8) result was incorrect ", new Float(46), ( (Object[]) rset.get(0) )[3] );

	simple.setPay(new Float(-45.8));
	s.update(simple);

	// Test type conversions while using nested functions (Float to Int).
	rset = s.find("select abs(round(s.pay)) from Simple s");
	assertEquals("abs(round(-45.8)) result was incorrect ", new Float(46), rset.get(0));

	// Test a larger depth 3 function example - Not a useful combo other than for testing
	assertTrue(
		s.find("select trunc(round(sysdate())) from Simple s").size() == 1
	);

	// Test the oracle standard NVL funtion as a test of multi-param functions...
	simple.setPay(null);
	s.update(simple);
	Integer value = (Integer) s.find("select MOD( NVL(s.pay, 5000), 2 ) from Simple as s where s.id = 10").get(0);
	assertTrue( 0 == value.intValue() );
}

---

if ( (getDialect() instanceof HSQLDialect) ) {
	// Test the hsql standard MOD funtion as a test of multi-param functions...
	Integer value = (Integer) s.find("select MOD(s.count, 2) from Simple as s where s.id = 10" ).get(0);
	assertTrue( 0 == value.intValue() );
}

---

public void testBroken() throws Exception {
if (getDialect() instanceof Oracle9Dialect) return;

---

if ( getDialect() instanceof DB2Dialect) {
	s.find("from Simple s where repeat('foo', 3) = 'foofoofoo'");
	s.find("from Simple s where repeat(s.name, 3) = 'foofoofoo'");
	s.find("from Simple s where repeat( lower(s.name), 3 + (1-1) / 2) = 'foofoofoo'");
}

---

if ( !(getDialect() instanceof HSQLDialect) ) {
	assertTrue(
		s.find("from Simple s where not( upper( s.name ) ='yada' or 1=2 or 'foo'='bar' or not('foo'='foo') or 'foo' like 'bar' )").size()==1
	);
}
if ( !(getDialect() instanceof MySQLDialect) && !(getDialect() instanceof SybaseDialect) && !(getDialect() instanceof MckoiDialect) && !(getDialect() instanceof InterbaseDialect) && !(getDialect() instanceof TimesTenDialect) ) { //My SQL has a funny concatenation operator
	assertTrue(
		s.find("from Simple s where lower( s.name || ' foo' ) ='simple 1 foo'").size()==1
	);
}
if ( (getDialect() instanceof SybaseDialect) ) {
	assertTrue(
		s.find("from Simple s where lower( s.name + ' foo' ) ='simple 1 foo'").size()==1
	);
}
if ( (getDialect() instanceof MckoiDialect) || (getDialect() instanceof TimesTenDialect)) {
	assertTrue(
		s.find("from Simple s where lower( concat(s.name, ' foo') ) ='simple 1 foo'").size()==1
	);
}

---

if ( ! (getDialect() instanceof MySQLDialect) && ! (getDialect() instanceof HSQLDialect) ) { //My SQL has no subqueries
	assertTrue(
		s.find("from Simple s where s.count > ( select min(sim.count) from Simple sim )").size()==2
	);
	t.commit();
	t = s.beginTransaction();
	assertTrue(
		s.find("from Simple s where s = some( select sim from Simple sim where sim.count>=0 ) and s.count >= 0").size()==2
	);
	assertTrue(
		s.find("from Simple s where s = some( select sim from Simple sim where sim.other.count=s.other.count ) and s.other.count > 0").size()==1
	);
}

---

if ( ! (getDialect() instanceof MySQLDialect) ) {
	iter = s.iterate("select s.count from Simple s group by s.count having s.count = 12");
	assertTrue( iter.hasNext() );
}

---

if ( ! (getDialect() instanceof MySQLDialect) ) {
	iter = s.iterate("select s.count from Simple s group by s.count having s.count = 12");
	assertTrue( iter.hasNext() );
}

---

public void testTS() throws Exception {
if (getDialect() instanceof Oracle9Dialect) return;
Query q = session.createSQLQuery("select {sim.*} from Simple {sim} where {sim}.date_ = ?", "sim", Simple.class);

---

if ( getDialect() instanceof MySQLDialect ) return;
if ( getDialect() instanceof OracleDialect ) return; // todo : this fails on Oracle8 also
Query query = s.getNamedQuery("namedsql");

---

if ( getDialect() instanceof MySQLDialect ) return;
Query query = s.getNamedQuery("nonaliasedsql");

---

if ( getDialect() instanceof MySQLDialect ) return;
List list = s.createSQLQuery("select {category.*}, {assignable.*} from Category {category}, \"assign-able\" {assignable}", new String[] { "category", "assignable" }, new Class[] { Category.class, Assignable.class }).list();

---

public void testEscapedJDBC() throws HibernateException, SQLException {
if ( 
		getDialect() instanceof HSQLDialect || 
		getDialect() instanceof SQLServerDialect || 
		getDialect() instanceof PostgreSQLDialect
) return;

---

if ( getDialect() instanceof OracleDialect ) {
	// Oracle8 does not support X/Open extension functions :)
	query = session.createSQLQuery("select identifier_column as {a.id}, clazz_discriminata as {a.class}, count_ as {a.count}, name as {a.name} from TA where upper(name) like upper('max')", "a", A.class);
}
else if( getDialect() instanceof TimesTenDialect) {
// TimesTen does not permit general expressions (like UPPER) in the second part of a LIKE expression,
// so we execute a similar test 
query = session.createSQLQuery("select identifier_column as {a.id}, clazz_discriminata as {a.class}, count_ as {a.count}, name as {a.name} from TA where {fn ucase(name)} like 'MAX'", "a", A.class);
} else {
query = session.createSQLQuery("select identifier_column as {a.id}, clazz_discriminata as {a.class}, count_ as {a.count}, name as {a.name} from TA where {fn ucase(name)} like {fn ucase('max')}", "a", A.class);
}

---

public void testDoubleAliasing() throws HibernateException, SQLException {
	if ( getDialect() instanceof SQLServerDialect ) return;

---

if ( getDialect() instanceof MySQLDialect ) return;
Query query = session.createSQLQuery("select s.category_key_col as {category.id}, s.name as {category.name}, s.\"assign-able-id\" as {category.assignable} from {category} s", "category", Category.class);

---

if ( getDialect() instanceof MySQLDialect ) return;
Query query = session.createSQLQuery("select s.category_key_col as {category.id}, s.name as {category.name}, s.\"assign-able-id\" as {category.assignable} from {category} s", "category", Category.class);

---

if ( getDialect() instanceof PostgreSQLDialect ) return;
s = openSession( new DocumentInterceptor() );

---

if ( !(getDialect() instanceof MySQLDialect) || (getDialect() instanceof MySQLInnoDBDialect) ) {
	assertEquals( statistics.getPrepareStatementCount(), 1 );
}

---

if ( (!(getDialect() instanceof MySQLDialect)) && (!(getDialect() instanceof SQLServerDialect)) ) assertEquals( result.size(), 0 ); //MySQL and SQLServer is case insensitive on strings

---

RowIdTest
if ( !( getDialect() instanceof Oracle9Dialect ) ) return;

---

public void testHandSQL() {
if ( ! ( getDialect() instanceof SybaseDialect ) ) return;

public void testSQLQueryInterface() {
if ( ! ( getDialect() instanceof SybaseDialect ) ) return;

---

public void testScalarValues() throws Exception {		
if ( getDialect() instanceof DB2Dialect ) return; //DB2 no like upper(?)

---

public void testScalarStoredProcedure() throws HibernateException, SQLException {
if ( !(getDialect() instanceof SybaseDialect) ) return;

---

public void testParameterHandling() throws HibernateException, SQLException {
if ( !(getDialect() instanceof SybaseDialect) ) return;

---

public void testEntityStoredProcedure() throws HibernateException, SQLException {
if ( !(getDialect() instanceof SybaseDialect) ) return;

---

public void testHandSQL() {
if ( getDialect() instanceof DB2Dialect ) return;

---

public void testSQLQueryInterface() {
if ( getDialect() instanceof DB2Dialect ) return; //DB2 no like upper(?)

public void testScalarStoredProcedure() throws HibernateException, SQLException {
if( !(getDialect() instanceof Oracle9Dialect)) return;

---

if ( !(getDialect() instanceof HSQLDialect) && !( getDialect() instanceof PostgreSQLDialect ) && !( getDialect() instanceof MySQLDialect ) && !( getDialect() instanceof DB2Dialect ) ) {
	s.createCriteria(Person.class).add( 
			Expression.in("address", new Address[] { mark.getAddress(), joe.getAddress() } ) 
	).list();
}

---

SybaseTimestampVersioningTest
public boolean isRunnable() {
	return Dialect.getDialect() instanceof SybaseDialect;
}

---





