Index: test/org/hibernate/test/sql/MSSQLTest.java
===================================================================
--- test/org/hibernate/test/sql/MSSQLTest.java	(revision 11398)
+++ test/org/hibernate/test/sql/MSSQLTest.java	(working copy)
@@ -10,7 +10,7 @@
 /**
  * @author Gavin King
  */
-public class MSSQLTest extends HandSQLTest {
+public class MSSQLTest extends HandSQLWithStoredProcsTest {
 
 	public MSSQLTest(String str) {
 		super( str );
Index: test/org/hibernate/test/sql/CustomSQLWithNativeGeneratedIds.hbm.xml
===================================================================
--- test/org/hibernate/test/sql/CustomSQLWithNativeGeneratedIds.hbm.xml	(revision 0)
+++ test/org/hibernate/test/sql/CustomSQLWithNativeGeneratedIds.hbm.xml	(revision 0)
@@ -0,0 +1,101 @@
+<?xml version="1.0"?>
+<!DOCTYPE hibernate-mapping PUBLIC 
+	"-//Hibernate/Hibernate Mapping DTD 3.0//EN"
+	"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
+
+<!-- 
+
+  This mapping demonstrates the use of Hibernate with
+  all-handwritten SQL!
+     
+  This version is for HSQL and MySQL
+-->
+
+<hibernate-mapping 
+	package="org.hibernate.test.sql"
+	default-access="field">
+
+	<class name="Organization">
+		<id name="id" unsaved-value="0" column="orgid">
+			<generator class="native"/>
+		</id>
+		<property name="name" not-null="true"/>
+		<set name="employments" 
+			inverse="true"
+			order-by="DUMMY">
+			<key column="employer"/> <!-- only needed for DDL generation -->
+			<one-to-many class="Employment"/>
+			<loader query-ref="organizationEmployments"/>
+		</set>
+		<!-- query-list name="currentEmployments" 
+			query-ref="organizationCurrentEmployments"-->
+		<loader query-ref="organization"/>
+		<sql-insert>INSERT INTO ORGANIZATION (NAME) VALUES ( UPPER(?) )</sql-insert>
+		<sql-update>UPDATE ORGANIZATION SET NAME=UPPER(?) WHERE ORGID=?</sql-update>
+		<sql-delete>DELETE FROM ORGANIZATION WHERE ORGID=?</sql-delete>
+	</class>
+	
+	<class name="Person">
+		<id name="id" unsaved-value="0" column="perid">
+			<generator class="native"/>
+		</id>
+		<property name="name" not-null="true"/>
+		<loader query-ref="person"/>
+		<sql-insert>INSERT INTO PERSON (NAME) VALUES ( UPPER(?) )</sql-insert>
+		<sql-update>UPDATE PERSON SET NAME=UPPER(?) WHERE PERID=?</sql-update>
+		<sql-delete>DELETE FROM PERSON WHERE PERID=?</sql-delete>
+	</class>
+	
+	<class name="Employment">
+		<id name="employmentId" unsaved-value="0" column="empid">
+			<generator class="native"/>
+		</id>
+		<many-to-one name="employee" not-null="true" update="false"/>
+		<many-to-one name="employer" not-null="true" update="false"/>
+		<property name="startDate" not-null="true" update="false" insert="false"/>
+		<property name="endDate" insert="false"/>
+		<property name="regionCode" update="false"/>
+	  <property name="salary" type="org.hibernate.test.sql.MonetaryAmountUserType"> 
+			<column name="VALUE" sql-type="float"/>
+			<column name="CURRENCY"/>			
+		</property>
+		<loader query-ref="employment"/>
+   		<sql-insert>
+			INSERT INTO EMPLOYMENT 
+				(EMPLOYEE, EMPLOYER, STARTDATE, REGIONCODE, VALUE, CURRENCY)
+				VALUES (?, ?, now(), UPPER(?), ?, ?)
+		</sql-insert>
+		<sql-update>UPDATE EMPLOYMENT SET ENDDATE=?, VALUE=?, CURRENCY=? WHERE EMPID=?</sql-update> 
+		<sql-delete>DELETE FROM EMPLOYMENT WHERE EMPID=?</sql-delete> 
+	</class>
+
+	<sql-query name="person">
+		<return alias="p" class="Person" lock-mode="upgrade"/>
+		SELECT NAME AS {p.name}, PERID AS {p.id} FROM PERSON WHERE PERID=? /*FOR UPDATE*/
+	</sql-query>
+
+	<sql-query name="organization">
+		<return alias="org" class="Organization"/>
+		<return-join alias="emp" property="org.employments"/>
+		SELECT {org.*}, {emp.*}
+		FROM ORGANIZATION org
+			LEFT OUTER JOIN EMPLOYMENT emp ON org.ORGID = emp.EMPLOYER
+		WHERE org.ORGID=?
+	</sql-query>
+	
+	<sql-query name="allOrganizationsWithEmployees" flush-mode="never">
+		<return alias="org" class="Organization"/>
+		SELECT DISTINCT org.NAME AS {org.name}, org.ORGID AS {org.id} 
+		FROM ORGANIZATION org
+		INNER JOIN EMPLOYMENT e ON e.EMPLOYER = org.ORGID
+	</sql-query>
+	
+	<sql-query name="organizationEmployments">
+		<load-collection alias="empcol" role="Organization.employments"/>
+		SELECT {empcol.*}
+		FROM EMPLOYMENT empcol
+		WHERE EMPLOYER = :id
+		ORDER BY STARTDATE ASC, EMPLOYEE ASC
+	</sql-query>
+
+</hibernate-mapping>
Index: test/org/hibernate/test/sql/MySQLTest.java
===================================================================
--- test/org/hibernate/test/sql/MySQLTest.java	(revision 11398)
+++ test/org/hibernate/test/sql/MySQLTest.java	(working copy)
@@ -10,7 +10,7 @@
 /**
  * @author Gavin King
  */
-public class MySQLTest extends HandSQLTest {
+public class MySQLTest extends HandSQLWithStoredProcsTest {
 
 	public MySQLTest(String str) {
 		super(str);
Index: test/org/hibernate/test/sql/DataDirectOracleSQLTest.java
===================================================================
--- test/org/hibernate/test/sql/DataDirectOracleSQLTest.java	(revision 11398)
+++ test/org/hibernate/test/sql/DataDirectOracleSQLTest.java	(working copy)
@@ -10,7 +10,7 @@
 /**
  * @author Max Rydahl Andersen
  */
-public class DataDirectOracleSQLTest extends HandSQLTest {
+public class DataDirectOracleSQLTest extends HandSQLWithStoredProcsTest {
 	
 	public DataDirectOracleSQLTest(String str) {
 		super(str);
Index: test/org/hibernate/test/sql/CustomSQLWithNativeGeneratedIdsTest.java
===================================================================
--- test/org/hibernate/test/sql/CustomSQLWithNativeGeneratedIdsTest.java	(revision 0)
+++ test/org/hibernate/test/sql/CustomSQLWithNativeGeneratedIdsTest.java	(revision 0)
@@ -0,0 +1,31 @@
+package org.hibernate.test.sql;
+
+import junit.framework.Test;
+import org.hibernate.junit.functional.FunctionalTestClassTestSuite;
+import org.hibernate.dialect.Dialect;
+import org.hibernate.dialect.SybaseDialect;
+import org.hibernate.dialect.HSQLDialect;
+import org.hibernate.dialect.MySQLDialect;
+import org.hibernate.id.IdentityGenerator;
+
+/**
+ * @author Gavin King
+ */
+public class CustomSQLWithNativeGeneratedIdsTest extends HandSQLTest {
+
+	public CustomSQLWithNativeGeneratedIdsTest(String str) {
+		super( str );
+	}
+
+	public String[] getMappings() {
+		return new String[] {"sql/CustomSQLWithNativeGeneratedIds.hbm.xml"};
+	}
+
+	public static Test suite() {
+		return new FunctionalTestClassTestSuite( CustomSQLWithNativeGeneratedIdsTest.class );
+	}
+
+	public boolean appliesTo(Dialect dialect) {
+		return ( dialect instanceof HSQLDialect || dialect instanceof MySQLDialect );
+	}
+}
Index: test/org/hibernate/test/sql/NativeSqlSupportSuite.java
===================================================================
--- test/org/hibernate/test/sql/NativeSqlSupportSuite.java	(revision 11398)
+++ test/org/hibernate/test/sql/NativeSqlSupportSuite.java	(working copy)
@@ -19,6 +19,7 @@
 		suite.addTest( MySQLTest.suite() );
 		suite.addTest( GeneralTest.suite() );
 		suite.addTest( OracleCheckStyleTest.suite() );
+		suite.addTest( CustomSQLWithNativeGeneratedIdsTest.suite() );
 		return suite;
 	}
 }
Index: test/org/hibernate/test/sql/HandSQLWithStoredProcsTest.java
===================================================================
--- test/org/hibernate/test/sql/HandSQLWithStoredProcsTest.java	(revision 0)
+++ test/org/hibernate/test/sql/HandSQLWithStoredProcsTest.java	(revision 0)
@@ -0,0 +1,79 @@
+package org.hibernate.test.sql;
+
+import org.hibernate.junit.functional.DatabaseSpecificFunctionalTestCase;
+import org.hibernate.*;
+
+import java.io.Serializable;
+import java.util.Date;
+import java.util.Iterator;
+import java.util.List;
+import java.sql.SQLException;
+
+/**
+ * @author Steve Ebersole
+ */
+public abstract class HandSQLWithStoredProcsTest extends HandSQLTest {
+
+	public HandSQLWithStoredProcsTest(String name) {
+		super( name );
+	}
+
+	public void testScalarStoredProcedure() throws HibernateException, SQLException {
+		Session s = openSession();
+		Query namedQuery = s.getNamedQuery( "simpleScalar" );
+		namedQuery.setLong( "number", 43 );
+		List list = namedQuery.list();
+		Object o[] = ( Object[] ) list.get( 0 );
+		assertEquals( o[0], "getAll" );
+		assertEquals( o[1], new Long( 43 ) );
+		s.close();
+	}
+
+	public void testParameterHandling() throws HibernateException, SQLException {
+		Session s = openSession();
+
+		Query namedQuery = s.getNamedQuery( "paramhandling" );
+		namedQuery.setLong( 0, 10 );
+		namedQuery.setLong( 1, 20 );
+		List list = namedQuery.list();
+		Object[] o = ( Object[] ) list.get( 0 );
+		assertEquals( o[0], new Long( 10 ) );
+		assertEquals( o[1], new Long( 20 ) );
+
+		namedQuery = s.getNamedQuery( "paramhandling_mixed" );
+		namedQuery.setLong( 0, 10 );
+		namedQuery.setLong( "second", 20 );
+		list = namedQuery.list();
+		o = ( Object[] ) list.get( 0 );
+		assertEquals( o[0], new Long( 10 ) );
+		assertEquals( o[1], new Long( 20 ) );
+		s.close();
+	}
+
+	public void testEntityStoredProcedure() throws HibernateException, SQLException {
+		Session s = openSession();
+		Transaction t = s.beginTransaction();
+
+		Organization ifa = new Organization( "IFA" );
+		Organization jboss = new Organization( "JBoss" );
+		Person gavin = new Person( "Gavin" );
+		Employment emp = new Employment( gavin, jboss, "AU" );
+		s.persist( ifa );
+		s.persist( jboss );
+		s.persist( gavin );
+		s.persist( emp );
+
+		Query namedQuery = s.getNamedQuery( "selectAllEmployments" );
+		List list = namedQuery.list();
+		assertTrue( list.get( 0 ) instanceof Employment );
+		s.delete( emp );
+		s.delete( ifa );
+		s.delete( jboss );
+		s.delete( gavin );
+
+		t.commit();
+		s.close();
+	}
+
+
+}
Index: test/org/hibernate/test/sql/OracleSQLTest.java
===================================================================
--- test/org/hibernate/test/sql/OracleSQLTest.java	(revision 11398)
+++ test/org/hibernate/test/sql/OracleSQLTest.java	(working copy)
@@ -11,7 +11,7 @@
 /**
  * @author Gavin King
  */
-public class OracleSQLTest extends HandSQLTest {
+public class OracleSQLTest extends HandSQLWithStoredProcsTest {
 
 	public OracleSQLTest(String str) {
 		super(str);
Index: test/org/hibernate/test/sql/Db2SQLTest.java
===================================================================
--- test/org/hibernate/test/sql/Db2SQLTest.java	(revision 11398)
+++ test/org/hibernate/test/sql/Db2SQLTest.java	(working copy)
@@ -10,7 +10,7 @@
 /**
  * @author Max Rydahl Andersen
  */
-public class Db2SQLTest extends HandSQLTest {
+public class Db2SQLTest extends HandSQLWithStoredProcsTest {
 	
 	public Db2SQLTest(String str) {
 		super(str);
Index: test/org/hibernate/test/sql/HandSQLTest.java
===================================================================
--- test/org/hibernate/test/sql/HandSQLTest.java	(revision 11398)
+++ test/org/hibernate/test/sql/HandSQLTest.java	(working copy)
@@ -55,6 +55,7 @@
 		t = s.beginTransaction();
 		jboss = ( Organization ) s.get( Organization.class, orgId );
 		assertEquals( jboss.getEmployments().size(), 2 );
+		assertEquals( jboss.getName(), "JBOSS" );
 		emp = ( Employment ) jboss.getEmployments().iterator().next();
 		gavin = emp.getEmployee();
 		assertEquals( gavin.getName(), "GAVIN" );
@@ -88,63 +89,4 @@
 		s.close();
 	}
 
-
-	public void testScalarStoredProcedure() throws HibernateException, SQLException {
-		Session s = openSession();
-		Query namedQuery = s.getNamedQuery( "simpleScalar" );
-		namedQuery.setLong( "number", 43 );
-		List list = namedQuery.list();
-		Object o[] = ( Object[] ) list.get( 0 );
-		assertEquals( o[0], "getAll" );
-		assertEquals( o[1], new Long( 43 ) );
-		s.close();
-	}
-
-	public void testParameterHandling() throws HibernateException, SQLException {
-		Session s = openSession();
-
-		Query namedQuery = s.getNamedQuery( "paramhandling" );
-		namedQuery.setLong( 0, 10 );
-		namedQuery.setLong( 1, 20 );
-		List list = namedQuery.list();
-		Object[] o = ( Object[] ) list.get( 0 );
-		assertEquals( o[0], new Long( 10 ) );
-		assertEquals( o[1], new Long( 20 ) );
-
-		namedQuery = s.getNamedQuery( "paramhandling_mixed" );
-		namedQuery.setLong( 0, 10 );
-		namedQuery.setLong( "second", 20 );
-		list = namedQuery.list();
-		o = ( Object[] ) list.get( 0 );
-		assertEquals( o[0], new Long( 10 ) );
-		assertEquals( o[1], new Long( 20 ) );
-		s.close();
-	}
-
-	public void testEntityStoredProcedure() throws HibernateException, SQLException {
-		Session s = openSession();
-		Transaction t = s.beginTransaction();
-
-		Organization ifa = new Organization( "IFA" );
-		Organization jboss = new Organization( "JBoss" );
-		Person gavin = new Person( "Gavin" );
-		Employment emp = new Employment( gavin, jboss, "AU" );
-		s.persist( ifa );
-		s.persist( jboss );
-		s.persist( gavin );
-		s.persist( emp );
-
-		Query namedQuery = s.getNamedQuery( "selectAllEmployments" );
-		List list = namedQuery.list();
-		assertTrue( list.get( 0 ) instanceof Employment );
-		s.delete( emp );
-		s.delete( ifa );
-		s.delete( jboss );
-		s.delete( gavin );
-
-		t.commit();
-		s.close();
-	}
-
-
 }
