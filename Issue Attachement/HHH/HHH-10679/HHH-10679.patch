diff --git a/hibernate-core/src/test/java/org/hibernate/test/subselect/EmployeeGroupSubselect.java b/hibernate-core/src/test/java/org/hibernate/test/subselect/EmployeeGroupSubselect.java
new file mode 100644
index 0000000..7485dac
--- /dev/null
+++ b/hibernate-core/src/test/java/org/hibernate/test/subselect/EmployeeGroupSubselect.java
@@ -0,0 +1,72 @@
+/*
+ * Hibernate, Relational Persistence for Idiomatic Java
+ *
+ * Copyright (c) 2013, Red Hat Inc. or third-party contributors as
+ * indicated by the @author tags or express copyright attribution
+ * statements applied by the authors.  All third-party contributions are
+ * distributed under license by Red Hat Inc.
+ *
+ * This copyrighted material is made available to anyone wishing to use, modify,
+ * copy, or redistribute it subject to the terms and conditions of the GNU
+ * Lesser General Public License, as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
+ * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
+ * for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with this distribution; if not, write to:
+ * Free Software Foundation, Inc.
+ * 51 Franklin Street, Fifth Floor
+ * Boston, MA  02110-1301  USA
+ */
+package org.hibernate.test.subselect;
+
+
+import java.util.ArrayList;
+import java.util.List;
+import javax.persistence.CascadeType;
+import javax.persistence.Entity;
+import javax.persistence.Id;
+import javax.persistence.OneToMany;
+
+import org.hibernate.annotations.BatchSize;
+import org.hibernate.annotations.Fetch;
+import org.hibernate.annotations.FetchMode;
+
+@Entity
+@BatchSize(size = 1000)
+public class EmployeeGroupSubselect {
+	@Id
+	private EmployeeGroupId id;
+
+	@OneToMany(cascade = CascadeType.ALL)
+	@Fetch(FetchMode.SUBSELECT)
+	private List<Employee> employees = new ArrayList<Employee>();
+
+	public EmployeeGroupSubselect(EmployeeGroupId id) {
+		this.id = id;
+	}
+
+	@SuppressWarnings("unused")
+	protected EmployeeGroupSubselect() {
+	}
+
+	public boolean addEmployee(Employee employee) {
+		return employees.add(employee);
+	}
+
+	public List<Employee> getEmployees() {
+		return employees;
+	}
+
+	public EmployeeGroupId getId() {
+		return id;
+	}
+
+	@Override
+	public String toString() {
+		return id.toString();
+	}
+}
diff --git a/hibernate-core/src/test/java/org/hibernate/test/subselect/SubselectTest.java b/hibernate-core/src/test/java/org/hibernate/test/subselect/SubselectTest.java
index 7559ce8..21faec5 100755
--- a/hibernate-core/src/test/java/org/hibernate/test/subselect/SubselectTest.java
+++ b/hibernate-core/src/test/java/org/hibernate/test/subselect/SubselectTest.java
@@ -27,6 +27,10 @@ public class SubselectTest extends BaseCoreFunctionalTestCase {
 		return new String[] { "subselect/Beings.hbm.xml" };
 	}
 
+	public Class<?>[] getAnnotatedClasses() {
+		return new Class<?>[] { EmployeeGroupSubselect.class, Employee.class };
+	}
+
 	@Test
 	@SuppressWarnings( {"unchecked"})
 	public void testEntitySubselect() {
@@ -124,5 +128,38 @@ public class SubselectTest extends BaseCoreFunctionalTestCase {
 		
 	}
 
+	@Test
+	public void testLazyLoadEntityProxy() {
+		Session s = openSession();
+		Transaction t = s.beginTransaction();
+		EmployeeGroupSubselect group1 = new EmployeeGroupSubselect(new EmployeeGroupId("group1", "Department1"));
+		Employee employee1 = new Employee("Jane");
+		Employee employee2 = new Employee("Jeff");
+		group1.addEmployee(employee1);
+		group1.addEmployee(employee2);
+		EmployeeGroupSubselect group2 = new EmployeeGroupSubselect(new EmployeeGroupId("group2", "Department2"));
+		Employee employee3 = new Employee("Joan");
+		Employee employee4 = new Employee("John");
+		group2.addEmployee(employee3);
+		group2.addEmployee(employee4);
+
+		s.save(group1);
+		s.save(group2);
+		s.flush();
+
+		s.clear();
+
+		EmployeeGroupSubselect[] groups = new EmployeeGroupSubselect[] {
+			(EmployeeGroupSubselect) s.load(EmployeeGroupSubselect.class, group1.getId()),
+			(EmployeeGroupSubselect) s.load(EmployeeGroupSubselect.class, group2.getId())
+		};
+
+		for (EmployeeGroupSubselect group : groups) {
+			group.getEmployees().iterator().next();
+		}
+
+		t.rollback();
+		s.close();
+	}
 }
 
diff --git a/hibernate-core/src/test/resources/hibernate.properties b/hibernate-core/src/test/resources/hibernate.properties
index 982c787..46ea7bb 100644
--- a/hibernate-core/src/test/resources/hibernate.properties
+++ b/hibernate-core/src/test/resources/hibernate.properties
@@ -13,7 +13,7 @@ hibernate.connection.username sa
 
 hibernate.connection.pool_size 5
 
-hibernate.show_sql false
+hibernate.show_sql true
 hibernate.format_sql true
 
 hibernate.max_fetch_depth 5
