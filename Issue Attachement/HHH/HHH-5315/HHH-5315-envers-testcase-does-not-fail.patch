
Property changes on: .
___________________________________________________________________
Modified: svn:ignore
   - target
local
*.ipr
*.iws
*.iml
.classpath
.project
.settings
.nbattrs
*.log
*.properties
.clover

   + target
local
*.ipr
*.iws
*.iml
.classpath
.project
.settings
.nbattrs
*.log
*.properties
.clover
.metadata
test-output


Index: src/test/java/org/hibernate/envers/test/entities/collection/CascadeAllCollectionEntity.java
===================================================================
--- src/test/java/org/hibernate/envers/test/entities/collection/CascadeAllCollectionEntity.java	(revision 0)
+++ src/test/java/org/hibernate/envers/test/entities/collection/CascadeAllCollectionEntity.java	(revision 0)
@@ -0,0 +1,133 @@
+/*
+ * Hibernate, Relational Persistence for Idiomatic Java
+ *
+ * Copyright (c) 2008, Red Hat Middleware LLC or third-party contributors as
+ * indicated by the @author tags or express copyright attribution
+ * statements applied by the authors.  All third-party contributions are
+ * distributed under license by Red Hat Middleware LLC.
+ *
+ * This copyrighted material is made available to anyone wishing to use, modify,
+ * copy, or redistribute it subject to the terms and conditions of the GNU
+ * Lesser General Public License, as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
+ * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
+ * for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with this distribution; if not, write to:
+ * Free Software Foundation, Inc.
+ * 51 Franklin Street, Fifth Floor
+ * Boston, MA  02110-1301  USA
+ */
+package org.hibernate.envers.test.entities.collection;
+
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+
+import javax.persistence.CascadeType;
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.FetchType;
+import javax.persistence.GeneratedValue;
+import javax.persistence.GenerationType;
+import javax.persistence.Id;
+import javax.persistence.JoinColumn;
+import javax.persistence.OneToMany;
+
+import org.hibernate.envers.Audited;
+
+/**
+ * @author Erik-Berndt Scheper
+ */
+@Entity(name = "CAN")
+@Audited
+public class CascadeAllCollectionEntity {
+	@Id
+	@GeneratedValue(strategy = GenerationType.IDENTITY)
+	@Column(name = "ID", length = 10)
+	private Integer id;
+
+	private String data;
+
+	@OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, orphanRemoval = true)
+	@JoinColumn(name = "CAN_ID", nullable = false)
+	@org.hibernate.envers.AuditJoinTable(name = "CAN_CCD_AUD", inverseJoinColumns = @JoinColumn(name = "CCD_ID"))
+	private List<CascadedEntity> cascadedEntities = new ArrayList<CascadedEntity>();
+
+	public Integer getId() {
+		return id;
+	}
+
+	public String getData() {
+		return data;
+	}
+
+	public void setData(String data) {
+		this.data = data;
+	}
+
+	public List<CascadedEntity> getCascadedEntities() {
+		return Collections.unmodifiableList(this.cascadedEntities);
+	}
+
+	public void addCascadedEntity(CascadedEntity cascadedEntity) {
+		this.cascadedEntities.add(cascadedEntity);
+		cascadedEntity.setCascadeAllCollectionEntity(this);
+	}
+
+	// ********************** Common Methods ********************** //
+
+	@Override
+	public String toString() {
+		StringBuilder output = new StringBuilder();
+		output.append(this.getClass().getSimpleName()).append(" {");
+		output.append(" id = \"").append(this.id).append("\", ");
+		output.append(" data = \"").append(this.data).append("\", ");
+		output.append(" cascadedEntities = \"").append(this.cascadedEntities)
+				.append("\"}");
+		return output.toString();
+	}
+
+	@Override
+	public int hashCode() {
+		final int prime = 31;
+		int result = 1;
+		result = prime * result + ((id == null) ? 0 : id.hashCode());
+		result = prime * result + ((data == null) ? 0 : data.hashCode());
+		result = prime
+				* result
+				+ ((cascadedEntities == null) ? 0 : cascadedEntities.hashCode());
+		return result;
+	}
+
+	@Override
+	public boolean equals(Object obj) {
+		if (this == obj)
+			return true;
+		if (obj == null)
+			return false;
+		if (getClass() != obj.getClass())
+			return false;
+		CascadeAllCollectionEntity other = (CascadeAllCollectionEntity) obj;
+		if (id == null) {
+			if (other.id != null)
+				return false;
+		} else if (!id.equals(other.id))
+			return false;
+		if (data == null) {
+			if (other.data != null)
+				return false;
+		} else if (!data.equals(other.data))
+			return false;
+		if (cascadedEntities == null) {
+			if (other.cascadedEntities != null)
+				return false;
+		} else if (!cascadedEntities.equals(other.cascadedEntities))
+			return false;
+		return true;
+	}
+
+}
Index: src/test/java/org/hibernate/envers/test/entities/collection/CascadedEntity.java
===================================================================
--- src/test/java/org/hibernate/envers/test/entities/collection/CascadedEntity.java	(revision 0)
+++ src/test/java/org/hibernate/envers/test/entities/collection/CascadedEntity.java	(revision 0)
@@ -0,0 +1,121 @@
+/*
+ * Hibernate, Relational Persistence for Idiomatic Java
+ *
+ * Copyright (c) 2008, Red Hat Middleware LLC or third-party contributors as
+ * indicated by the @author tags or express copyright attribution
+ * statements applied by the authors.  All third-party contributions are
+ * distributed under license by Red Hat Middleware LLC.
+ *
+ * This copyrighted material is made available to anyone wishing to use, modify,
+ * copy, or redistribute it subject to the terms and conditions of the GNU
+ * Lesser General Public License, as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
+ * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
+ * for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with this distribution; if not, write to:
+ * Free Software Foundation, Inc.
+ * 51 Franklin Street, Fifth Floor
+ * Boston, MA  02110-1301  USA
+ */
+package org.hibernate.envers.test.entities.collection;
+
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.GeneratedValue;
+import javax.persistence.Id;
+import javax.persistence.JoinColumn;
+import javax.persistence.ManyToOne;
+
+import org.hibernate.envers.Audited;
+import org.hibernate.envers.NotAudited;
+
+/**
+ * @author Erik-Berndt Scheper
+ */
+@Entity(name="CCD")
+@Audited
+public class CascadedEntity {
+	@Id
+	@GeneratedValue
+	@Column(name = "ID")
+	private Integer id;
+
+	private String data;
+
+	@ManyToOne
+	@JoinColumn(name = "CAN_ID", nullable = false, insertable = false, updatable = false)
+	@NotAudited
+	private CascadeAllCollectionEntity cascadeAllCollectionEntity;
+
+	public Integer getId() {
+		return id;
+	}
+
+	public void setId(Integer id) {
+		this.id = id;
+	}
+
+	public String getData() {
+		return data;
+	}
+
+	public void setData(String data) {
+		this.data = data;
+	}
+
+	public CascadeAllCollectionEntity getCascadeAllCollectionEntity() {
+		return cascadeAllCollectionEntity;
+	}
+
+	public void setCascadeAllCollectionEntity(
+			CascadeAllCollectionEntity cascadeAllCollectionEntity) {
+		this.cascadeAllCollectionEntity = cascadeAllCollectionEntity;
+	}
+
+	// ********************** Common Methods ********************** //
+
+	@Override
+	public String toString() {
+		StringBuilder output = new StringBuilder();
+		output.append(this.getClass().getSimpleName()).append(" {");
+		output.append(" id = \"").append(this.id).append("\", ");
+		output.append(" data = \"").append(this.data).append("\"}");
+		return output.toString();
+	}
+
+	@Override
+	public int hashCode() {
+		final int prime = 31;
+		int result = 1;
+		result = prime * result + ((id == null) ? 0 : id.hashCode());
+		result = prime * result + ((data == null) ? 0 : data.hashCode());
+		return result;
+	}
+
+	@Override
+	public boolean equals(Object obj) {
+		if (this == obj)
+			return true;
+		if (obj == null)
+			return false;
+		if (getClass() != obj.getClass())
+			return false;
+		CascadedEntity other = (CascadedEntity) obj;
+		if (id == null) {
+			if (other.id != null)
+				return false;
+		} else if (!id.equals(other.id))
+			return false;
+		if (data == null) {
+			if (other.data != null)
+				return false;
+		} else if (!data.equals(other.data))
+			return false;
+		return true;
+	}
+
+}
Index: src/test/java/org/hibernate/envers/test/integration/collection/CascadeCollectionEntity.java
===================================================================
--- src/test/java/org/hibernate/envers/test/integration/collection/CascadeCollectionEntity.java	(revision 0)
+++ src/test/java/org/hibernate/envers/test/integration/collection/CascadeCollectionEntity.java	(revision 0)
@@ -0,0 +1,181 @@
+/*
+ * Hibernate, Relational Persistence for Idiomatic Java
+ *
+ * Copyright (c) 2008, Red Hat Middleware LLC or third-party contributors as
+ * indicated by the @author tags or express copyright attribution
+ * statements applied by the authors.  All third-party contributions are
+ * distributed under license by Red Hat Middleware LLC.
+ *
+ * This copyrighted material is made available to anyone wishing to use, modify,
+ * copy, or redistribute it subject to the terms and conditions of the GNU
+ * Lesser General Public License, as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
+ * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
+ * for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with this distribution; if not, write to:
+ * Free Software Foundation, Inc.
+ * 51 Franklin Street, Fifth Floor
+ * Boston, MA  02110-1301  USA
+ */
+package org.hibernate.envers.test.integration.collection;
+
+import static org.testng.Assert.assertEquals;
+import static org.testng.Assert.assertTrue;
+
+import java.math.BigInteger;
+import java.util.Arrays;
+import java.util.List;
+
+import javax.persistence.EntityManager;
+
+import org.hibernate.ejb.Ejb3Configuration;
+import org.hibernate.envers.test.AbstractEntityTest;
+import org.hibernate.envers.test.entities.collection.CascadeAllCollectionEntity;
+import org.hibernate.envers.test.entities.collection.CascadedEntity;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.testng.annotations.BeforeClass;
+import org.testng.annotations.Test;
+
+/**
+ * @author Erik-Berndt Scheper
+ */
+public class CascadeCollectionEntity extends AbstractEntityTest {
+
+	private static final Logger logger = LoggerFactory
+			.getLogger(CascadeCollectionEntity.class);
+
+	private Integer can1_id;
+	private Integer ccd1_id;
+	private Integer ccd2_id;
+
+	public void configure(Ejb3Configuration cfg) {
+		cfg.addAnnotatedClass(CascadeAllCollectionEntity.class);
+		cfg.addAnnotatedClass(CascadedEntity.class);
+	}
+
+	@BeforeClass(dependsOnMethods = "init")
+	public void initData() {
+		// setup test
+		EntityManager entityManager = getEntityManager();
+		entityManager.getTransaction().begin();
+
+		CascadedEntity ccd1 = new CascadedEntity();
+		ccd1.setData("CascadedEntity1_data1");
+
+		CascadedEntity ccd2 = new CascadedEntity();
+		ccd2.setData("CascadedEntity2_data1");
+
+		CascadeAllCollectionEntity can1 = new CascadeAllCollectionEntity();
+		can1.setData("CascadeAllCollectionEntity1_data1");
+		can1.addCascadedEntity(ccd1);
+		can1.addCascadedEntity(ccd2);
+		entityManager.persist(can1);
+
+		// add flush() here to make the test succeed
+		// entityManager.flush();
+
+		entityManager.getTransaction().commit();
+
+		// log info
+		logger.error("persisted entity: " + can1);
+
+		can1_id = can1.getId();
+		ccd1_id = can1.getCascadedEntities().get(0).getId();
+		ccd2_id = can1.getCascadedEntities().get(1).getId();
+	}
+
+	@Test
+	public void testRevisionsCounts() {
+		EntityManager entityManager = getEntityManager();
+		entityManager.getTransaction().begin();
+
+		assertEquals(Arrays.asList(1), getAuditReader().getRevisions(
+				CascadeAllCollectionEntity.class, can1_id));
+		assertEquals(Arrays.asList(1), getAuditReader().getRevisions(
+				CascadedEntity.class, ccd1_id));
+
+		CascadeAllCollectionEntity can1Rev1 = getAuditReader().find(
+				CascadeAllCollectionEntity.class, can1_id, 1);
+		CascadedEntity ccd1Rev1 = getAuditReader().find(CascadedEntity.class,
+				ccd1_id, 1);
+
+		CascadedEntity ccd2Rev1 = getAuditReader().find(CascadedEntity.class,
+				ccd2_id, 1);
+
+		assertEquals(2, can1Rev1.getCascadedEntities().size());
+		assertTrue(can1Rev1.getCascadedEntities().contains(ccd1Rev1));
+		assertTrue(can1Rev1.getCascadedEntities().contains(ccd2Rev1));
+
+		assertEquals("CascadeAllCollectionEntity1_data1", can1Rev1.getData());
+		assertEquals("CascadedEntity1_data1", ccd1Rev1.getData());
+		assertEquals("CascadedEntity2_data1", ccd2Rev1.getData());
+
+		checkAuditJoinTable(can1_id, ccd1_id, ccd2_id);
+
+		entityManager.getTransaction().commit();
+	}
+
+	private void checkAuditJoinTable(Integer canId, Integer ccd1Id,
+			Integer ccd2Id) {
+		// Verify that the entity was correctly persisted
+		EntityManager em = getEntityManager();
+
+		Long canEntCount = (Long) em.createQuery(
+				"select count(can) from CAN can where can.id = "
+						+ canId.toString()).getSingleResult();
+
+		Integer canAuditCount = ((BigInteger) em.createNativeQuery(
+				"select count(1) from CAN_AUD  where id = " + canId.toString())
+				.getSingleResult()).intValue();
+
+		Long ccdEntCount = (Long) em.createQuery(
+				"select count(ccd) from CCD ccd where ccd.id = "
+						+ ccd1Id.toString()).getSingleResult();
+		Integer ccdAuditCount = ((BigInteger) em.createNativeQuery(
+				"select count(1) from CCD_AUD where id = " + ccd1Id.toString())
+				.getSingleResult()).intValue();
+
+		Integer auditJoinCount_canId1 = ((BigInteger) em.createNativeQuery(
+				"select count(1) from CAN_CCD_AUD where CAN_ID = "
+						+ canId.toString()).getSingleResult()).intValue();
+		Integer auditJoinCount_ccdId1 = ((BigInteger) em.createNativeQuery(
+				"select count(1) from CAN_CCD_AUD where CCD_ID = "
+						+ ccd1Id.toString()).getSingleResult()).intValue();
+		Integer auditJoinCount_ccdId2 = ((BigInteger) em.createNativeQuery(
+				"select count(1) from CAN_CCD_AUD where CCD_ID = "
+						+ ccd2Id.toString()).getSingleResult()).intValue();
+
+		@SuppressWarnings("unchecked")
+		List<Integer> auditJoin_canIdList = em.createNativeQuery(
+				"SELECT DISTINCT CAN_ID from CAN_CCD_AUD where CAN_ID = ? ")
+				.setParameter(1, canId).getResultList();
+
+		@SuppressWarnings("unchecked")
+		List<Integer> auditJoin_ccdIdList = em.createNativeQuery(
+				"SELECT DISTINCT CCD_ID from CAN_CCD_AUD where CAN_ID = ? ")
+				.setParameter(1, canId).getResultList();
+
+		// verify
+		assertEquals(Long.valueOf(1L), canEntCount);
+		assertEquals(Long.valueOf(1L), ccdEntCount);
+		assertEquals(Integer.valueOf(1), canAuditCount);
+		assertEquals(Integer.valueOf(1), ccdAuditCount);
+
+		assertEquals(Integer.valueOf(2), auditJoinCount_canId1);
+		assertEquals(Integer.valueOf(1), auditJoinCount_ccdId1);
+		assertEquals(Integer.valueOf(1), auditJoinCount_ccdId2);
+
+		assertEquals(1, auditJoin_canIdList.size());
+		assertTrue(auditJoin_canIdList.contains(canId));
+
+		assertEquals(2, auditJoin_ccdIdList.size());
+		assertTrue(auditJoin_ccdIdList.contains(ccd1Id));
+		assertTrue(auditJoin_ccdIdList.contains(ccd2Id));
+
+	}
+}
\ No newline at end of file
