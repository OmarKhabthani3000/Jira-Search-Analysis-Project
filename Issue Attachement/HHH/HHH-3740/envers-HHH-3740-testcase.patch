Index: org/hibernate/envers/test/entities/components/relations/UnversionedManyToOneAuditedComponent.java
===================================================================
--- org/hibernate/envers/test/entities/components/relations/UnversionedManyToOneAuditedComponent.java	(revision 0)
+++ org/hibernate/envers/test/entities/components/relations/UnversionedManyToOneAuditedComponent.java	(revision 0)
@@ -0,0 +1,64 @@
+package org.hibernate.envers.test.entities.components.relations;
+
+import javax.persistence.Embeddable;
+import javax.persistence.ManyToOne;
+
+import org.hibernate.envers.NotAudited;
+import org.hibernate.envers.test.entities.UnversionedStrTestEntity;
+
+@Embeddable
+public class UnversionedManyToOneAuditedComponent {
+	@ManyToOne
+	@NotAudited
+    private UnversionedStrTestEntity entity;
+
+    private String data;
+
+	public UnversionedManyToOneAuditedComponent(UnversionedStrTestEntity entity, String data) {
+        this.entity = entity;
+        this.data = data;
+    }
+
+    public UnversionedManyToOneAuditedComponent() {
+    }
+
+	public String getData() {
+        return data;
+    }
+
+    public void setData(String data) {
+        this.data = data;
+    }
+
+	public UnversionedStrTestEntity getEntity() {
+		return entity;
+	}
+
+	public void setEntity(UnversionedStrTestEntity entity) {
+		this.entity = entity;
+	}
+
+	@Override
+	public boolean equals(Object o) {
+		if (this == o) return true;
+		if (o == null || getClass() != o.getClass()) return false;
+
+		UnversionedManyToOneAuditedComponent that = (UnversionedManyToOneAuditedComponent) o;
+
+		if (data != null ? !data.equals(that.data) : that.data != null) return false;
+		if (entity != null ? !entity.equals(that.entity) : that.entity != null) return false;
+
+		return true;
+	}
+
+	@Override
+	public int hashCode() {
+		int result = entity != null ? entity.hashCode() : 0;
+		result = 31 * result + (data != null ? data.hashCode() : 0);
+		return result;
+	}
+
+	public String toString() {
+        return "UnversionedManyToOneAuditedComponent(str1 = " + data + ")";
+    }
+}
\ No newline at end of file
Index: org/hibernate/envers/test/entities/components/relations/UnversionedManyToOneAuditedComponentTestEntity.java
===================================================================
--- org/hibernate/envers/test/entities/components/relations/UnversionedManyToOneAuditedComponentTestEntity.java	(revision 0)
+++ org/hibernate/envers/test/entities/components/relations/UnversionedManyToOneAuditedComponentTestEntity.java	(revision 0)
@@ -0,0 +1,71 @@
+package org.hibernate.envers.test.entities.components.relations;
+
+import javax.persistence.Embedded;
+import javax.persistence.Entity;
+import javax.persistence.GeneratedValue;
+import javax.persistence.Id;
+
+import org.hibernate.envers.Audited;
+
+@Entity
+public class UnversionedManyToOneAuditedComponentTestEntity {
+    @Id
+    @GeneratedValue
+    private Integer id;
+
+    @Embedded
+    @Audited
+    private UnversionedManyToOneAuditedComponent comp1;
+
+    public UnversionedManyToOneAuditedComponentTestEntity() {
+    }
+
+    public UnversionedManyToOneAuditedComponentTestEntity(Integer id, UnversionedManyToOneAuditedComponent comp1) {
+        this.id = id;
+        this.comp1 = comp1;
+    }
+
+    public UnversionedManyToOneAuditedComponentTestEntity(UnversionedManyToOneAuditedComponent comp1) {
+        this.comp1 = comp1;
+    }
+
+	public Integer getId() {
+        return id;
+    }
+
+    public void setId(Integer id) {
+        this.id = id;
+    }
+
+    public UnversionedManyToOneAuditedComponent getComp1() {
+        return comp1;
+    }
+
+    public void setComp1(UnversionedManyToOneAuditedComponent comp1) {
+        this.comp1 = comp1;
+    }
+
+	@Override
+	public boolean equals(Object o) {
+		if (this == o) return true;
+		if (o == null || getClass() != o.getClass()) return false;
+
+		UnversionedManyToOneAuditedComponentTestEntity that = (UnversionedManyToOneAuditedComponentTestEntity) o;
+
+		if (comp1 != null ? !comp1.equals(that.comp1) : that.comp1 != null) return false;
+		if (id != null ? !id.equals(that.id) : that.id != null) return false;
+
+		return true;
+	}
+
+	@Override
+	public int hashCode() {
+		int result = id != null ? id.hashCode() : 0;
+		result = 31 * result + (comp1 != null ? comp1.hashCode() : 0);
+		return result;
+	}
+
+	public String toString() {
+        return "UMTOACTE(id = " + id + ", comp1 = " + comp1 + ")";
+    }
+}
\ No newline at end of file
Index: org/hibernate/envers/test/entities/components/relations/UnversionedManyToOneAuditedTestEntity.java
===================================================================
--- org/hibernate/envers/test/entities/components/relations/UnversionedManyToOneAuditedTestEntity.java	(revision 0)
+++ org/hibernate/envers/test/entities/components/relations/UnversionedManyToOneAuditedTestEntity.java	(revision 0)
@@ -0,0 +1,107 @@
+package org.hibernate.envers.test.entities.components.relations;
+
+import javax.persistence.Entity;
+import javax.persistence.GeneratedValue;
+import javax.persistence.Id;
+import javax.persistence.ManyToOne;
+
+import org.hibernate.envers.Audited;
+import org.hibernate.envers.NotAudited;
+import org.hibernate.envers.test.entities.StrTestEntity;
+import org.hibernate.envers.test.entities.UnversionedStrTestEntity;
+
+@Entity
+public class UnversionedManyToOneAuditedTestEntity {
+    @Id
+    @GeneratedValue
+    private Integer id;
+
+    @Audited
+    @ManyToOne
+    private StrTestEntity ste;
+
+    @ManyToOne
+	@NotAudited
+    private UnversionedStrTestEntity uste;
+
+    public UnversionedManyToOneAuditedTestEntity() {
+    }
+
+    public UnversionedManyToOneAuditedTestEntity(Integer id, StrTestEntity str1, UnversionedStrTestEntity str2) {
+        this.id = id;
+        this.ste = str1;
+        this.uste = str2;
+    }
+
+    public UnversionedManyToOneAuditedTestEntity(StrTestEntity str1, UnversionedStrTestEntity str2) {
+        this.ste = str1;
+        this.uste = str2;
+    }
+
+	public Integer getId() {
+        return id;
+    }
+
+    public void setId(Integer id) {
+        this.id = id;
+    }
+
+
+	public StrTestEntity getSte() {
+		return ste;
+	}
+
+	public void setSte(StrTestEntity ste) {
+		this.ste = ste;
+	}
+
+	public UnversionedStrTestEntity getUste() {
+		return uste;
+	}
+
+	public void setUste(UnversionedStrTestEntity uste) {
+		this.uste = uste;
+	}
+
+
+	@Override
+	public int hashCode() {
+		final int prime = 31;
+		int result = 1;
+		result = prime * result + ((id == null) ? 0 : id.hashCode());
+		result = prime * result + ((ste == null) ? 0 : ste.hashCode());
+		result = prime * result + ((uste == null) ? 0 : uste.hashCode());
+		return result;
+	}
+
+	@Override
+	public boolean equals(Object obj) {
+		if (this == obj)
+			return true;
+		if (obj == null)
+			return false;
+		if (getClass() != obj.getClass())
+			return false;
+		UnversionedManyToOneAuditedTestEntity other = (UnversionedManyToOneAuditedTestEntity) obj;
+		if (id == null) {
+			if (other.id != null)
+				return false;
+		} else if (!id.equals(other.id))
+			return false;
+		if (ste == null) {
+			if (other.ste != null)
+				return false;
+		} else if (!ste.equals(other.ste))
+			return false;
+		if (uste == null) {
+			if (other.uste != null)
+				return false;
+		} else if (!uste.equals(other.uste))
+			return false;
+		return true;
+	}
+
+	public String toString() {
+        return "UMTOATE(id = " + id + ", ste = " + ste + ", uste = " + uste + ")";
+    }
+}
\ No newline at end of file
Index: org/hibernate/envers/test/integration/components/relations/UnversionedManyToOneAudited.java
===================================================================
--- org/hibernate/envers/test/integration/components/relations/UnversionedManyToOneAudited.java	(revision 0)
+++ org/hibernate/envers/test/integration/components/relations/UnversionedManyToOneAudited.java	(revision 0)
@@ -0,0 +1,101 @@
+package org.hibernate.envers.test.integration.components.relations;
+
+import static org.testng.Assert.assertEquals;
+
+import java.util.Arrays;
+
+import javax.persistence.EntityManager;
+
+import org.hibernate.ejb.Ejb3Configuration;
+import org.hibernate.envers.test.AbstractEntityTest;
+import org.hibernate.envers.test.entities.StrTestEntity;
+import org.hibernate.envers.test.entities.UnversionedStrTestEntity;
+import org.hibernate.envers.test.entities.components.relations.UnversionedManyToOneAuditedTestEntity;
+import org.testng.annotations.BeforeClass;
+import org.testng.annotations.Test;
+
+public class UnversionedManyToOneAudited extends AbstractEntityTest {
+    private Integer mtocte_id1;
+	private Integer ste_id1;
+	private Integer ste_id2;
+
+    public void configure(Ejb3Configuration cfg) {
+        cfg.addAnnotatedClass(UnversionedManyToOneAuditedTestEntity.class);
+		cfg.addAnnotatedClass(UnversionedStrTestEntity.class);
+		cfg.addAnnotatedClass(StrTestEntity.class);
+    }
+
+    @BeforeClass(dependsOnMethods = "init")
+    public void initData() {
+        // Revision 1
+        EntityManager em = getEntityManager();
+        em.getTransaction().begin();
+
+        StrTestEntity ste1 = new StrTestEntity();
+        ste1.setStr("ste1");
+
+        StrTestEntity ste2 = new StrTestEntity();
+        ste1.setStr("ste2");
+
+		UnversionedStrTestEntity uste1 = new UnversionedStrTestEntity();
+		uste1.setStr("uste1");
+
+		UnversionedStrTestEntity uste2 = new UnversionedStrTestEntity();
+		uste2.setStr("uste2");
+
+        em.persist(ste1);
+        em.persist(ste2);
+		em.persist(uste1);
+		em.persist(uste2);
+
+        em.getTransaction().commit();
+
+        // Revision 2
+        em = getEntityManager();
+        em.getTransaction().begin();
+
+        UnversionedManyToOneAuditedTestEntity mtocte1 = new UnversionedManyToOneAuditedTestEntity(ste1, uste1);
+		em.persist(mtocte1);
+        em.getTransaction().commit();
+
+        // No new revision (unaudited property changed)
+        em = getEntityManager();
+        em.getTransaction().begin();
+
+        mtocte1 = em.find(UnversionedManyToOneAuditedTestEntity.class, mtocte1.getId());
+        mtocte1.setUste(uste2);
+
+        em.getTransaction().commit();
+
+        // Revision 3
+        em = getEntityManager();
+        em.getTransaction().begin();
+
+        mtocte1 = em.find(UnversionedManyToOneAuditedTestEntity.class, mtocte1.getId());
+        mtocte1.setSte(ste2);
+
+        em.getTransaction().commit();
+
+        mtocte_id1 = mtocte1.getId();
+		ste_id1 = ste1.getId();
+		ste_id2 = ste2.getId();
+     }
+
+    @Test
+    public void testRevisionsCounts() {
+    	assertEquals(Arrays.asList(2,3), getAuditReader().getRevisions(UnversionedManyToOneAuditedTestEntity.class, mtocte_id1));
+    }
+
+    @Test
+    public void testHistoryOfId1() {
+		StrTestEntity ste1 = getEntityManager().find(StrTestEntity.class, ste_id1);
+		StrTestEntity ste2 = getEntityManager().find(StrTestEntity.class, ste_id2);
+
+		UnversionedManyToOneAuditedTestEntity ver2 = new UnversionedManyToOneAuditedTestEntity(mtocte_id1, ste1, null);
+		UnversionedManyToOneAuditedTestEntity ver3 = new UnversionedManyToOneAuditedTestEntity(mtocte_id1, ste2, null);
+
+        assert getAuditReader().find(UnversionedManyToOneAuditedTestEntity.class, mtocte_id1, 1) == null;
+        assert getAuditReader().find(UnversionedManyToOneAuditedTestEntity.class, mtocte_id1, 2).equals(ver2);
+        assert getAuditReader().find(UnversionedManyToOneAuditedTestEntity.class, mtocte_id1, 3).equals(ver3);
+	}
+}
Index: org/hibernate/envers/test/integration/components/relations/UnversionedManyToOneAuditedInComponent.java
===================================================================
--- org/hibernate/envers/test/integration/components/relations/UnversionedManyToOneAuditedInComponent.java	(revision 0)
+++ org/hibernate/envers/test/integration/components/relations/UnversionedManyToOneAuditedInComponent.java	(revision 0)
@@ -0,0 +1,74 @@
+package org.hibernate.envers.test.integration.components.relations;
+
+import java.util.Arrays;
+
+import javax.persistence.EntityManager;
+
+import org.hibernate.ejb.Ejb3Configuration;
+import org.hibernate.envers.test.AbstractEntityTest;
+import org.hibernate.envers.test.entities.UnversionedStrTestEntity;
+import org.hibernate.envers.test.entities.components.relations.UnversionedManyToOneAuditedComponent;
+import org.hibernate.envers.test.entities.components.relations.UnversionedManyToOneAuditedComponentTestEntity;
+import org.testng.annotations.BeforeClass;
+import org.testng.annotations.Test;
+
+public class UnversionedManyToOneAuditedInComponent extends AbstractEntityTest {
+    private Integer mtocte_id1;
+
+    public void configure(Ejb3Configuration cfg) {
+        cfg.addAnnotatedClass(UnversionedManyToOneAuditedComponentTestEntity.class);
+		cfg.addAnnotatedClass(UnversionedStrTestEntity.class);
+    }
+
+    @BeforeClass(dependsOnMethods = "init")
+    public void initData() {
+        // Revision 1
+        EntityManager em = getEntityManager();
+        em.getTransaction().begin();
+
+		UnversionedStrTestEntity uste1 = new UnversionedStrTestEntity();
+		uste1.setStr("uste1");
+
+		UnversionedStrTestEntity uste2 = new UnversionedStrTestEntity();
+		uste2.setStr("uste2");
+
+        em.persist(uste1);
+		em.persist(uste2);
+
+        em.getTransaction().commit();
+
+        // Revision 2
+        em = getEntityManager();
+        em.getTransaction().begin();
+
+		UnversionedManyToOneAuditedComponentTestEntity mtocte1 = new UnversionedManyToOneAuditedComponentTestEntity(new UnversionedManyToOneAuditedComponent(uste1, "data1"));
+
+		em.persist(mtocte1);
+
+        em.getTransaction().commit();
+
+        // No new revision (unaudited property changed)
+        em = getEntityManager();
+        em.getTransaction().begin();
+
+        mtocte1 = em.find(UnversionedManyToOneAuditedComponentTestEntity.class, mtocte1.getId());
+        mtocte1.getComp1().setEntity(uste2);
+
+        em.getTransaction().commit();
+
+        mtocte_id1 = mtocte1.getId();
+    }
+
+    @Test
+    public void testRevisionsCounts() {
+        assert Arrays.asList(2, 3).equals(getAuditReader().getRevisions(UnversionedManyToOneAuditedComponentTestEntity.class, mtocte_id1));
+    }
+
+    @Test
+    public void testHistoryOfId1() {
+        UnversionedManyToOneAuditedComponentTestEntity ver2 = new UnversionedManyToOneAuditedComponentTestEntity(mtocte_id1, new UnversionedManyToOneAuditedComponent(null, "data1"));
+
+        assert getAuditReader().find(UnversionedManyToOneAuditedComponentTestEntity.class, mtocte_id1, 1) == null;
+        assert getAuditReader().find(UnversionedManyToOneAuditedComponentTestEntity.class, mtocte_id1, 2).equals(ver2);
+    }
+}
