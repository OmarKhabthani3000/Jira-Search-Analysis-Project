Index: core/src/main/java/org/hibernate/criterion/ExistsSubqueryExpression.java
===================================================================
--- core/src/main/java/org/hibernate/criterion/ExistsSubqueryExpression.java	(revision 14095)
+++ core/src/main/java/org/hibernate/criterion/ExistsSubqueryExpression.java	(working copy)
@@ -4,6 +4,8 @@
 import org.hibernate.Criteria;
 
 /**
+ * Creates a Subquery expression to be used with the 'exists' keyword. 
+ * 
  * @author Gavin King
  */
 public class ExistsSubqueryExpression extends SubqueryExpression {
Index: core/src/main/java/org/hibernate/criterion/Projection.java
===================================================================
--- core/src/main/java/org/hibernate/criterion/Projection.java	(revision 14095)
+++ core/src/main/java/org/hibernate/criterion/Projection.java	(working copy)
@@ -78,4 +78,8 @@
 	 */
 	public boolean isGrouped();
 	
+	/**
+	 * Should this projection specifically be excluded from the select statement?
+	 */
+	public boolean isSelected();
 }
Index: core/src/main/java/org/hibernate/criterion/PropertySubqueryExpression.java
===================================================================
--- core/src/main/java/org/hibernate/criterion/PropertySubqueryExpression.java	(revision 14095)
+++ core/src/main/java/org/hibernate/criterion/PropertySubqueryExpression.java	(working copy)
@@ -5,7 +5,8 @@
 
 /**
  * A comparison between a property value in the outer query and the
- * result of a subquery
+ * result of a subquery.
+ * 
  * @author Gavin King
  */
 public class PropertySubqueryExpression extends SubqueryExpression {
Index: core/src/main/java/org/hibernate/criterion/SimpleSubqueryExpression.java
===================================================================
--- core/src/main/java/org/hibernate/criterion/SimpleSubqueryExpression.java	(revision 14095)
+++ core/src/main/java/org/hibernate/criterion/SimpleSubqueryExpression.java	(working copy)
@@ -7,7 +7,8 @@
 import org.hibernate.engine.TypedValue;
 
 /**
- * A comparison between a constant value and the the result of a subquery
+ * A comparison between a constant value and the the result of a subquery.
+ * 
  * @author Gavin King
  */
 public class SimpleSubqueryExpression extends SubqueryExpression {
Index: core/src/main/java/org/hibernate/criterion/SQLProjection.java
===================================================================
--- core/src/main/java/org/hibernate/criterion/SQLProjection.java	(revision 14095)
+++ core/src/main/java/org/hibernate/criterion/SQLProjection.java	(working copy)
@@ -66,6 +66,10 @@
 	public boolean isGrouped() {
 		return grouped;
 	}
+	
+	public boolean isSelected() {
+		return true;
+	}
 
 	public Type[] getTypes(String alias, Criteria crit, CriteriaQuery criteriaQuery) {
 		return null; //unsupported
Index: core/src/main/java/org/hibernate/criterion/Subqueries.java
===================================================================
--- core/src/main/java/org/hibernate/criterion/Subqueries.java	(revision 14095)
+++ core/src/main/java/org/hibernate/criterion/Subqueries.java	(working copy)
@@ -5,153 +5,261 @@
  * Factory class for criterion instances that represent expressions
  * involving subqueries.
  * 
- * @see Restriction
+ * @see Restrictions
  * @see Projection
  * @see org.hibernate.Criteria
  * @author Gavin King
  */
 public class Subqueries {
-		
+
+	/**
+	 * @see ExistsSubqueryExpression
+	 */
 	public static Criterion exists(DetachedCriteria dc) {
 		return new ExistsSubqueryExpression("exists", dc);
 	}
 	
+	/**
+	 * @see ExistsSubqueryExpression
+	 */
 	public static Criterion notExists(DetachedCriteria dc) {
 		return new ExistsSubqueryExpression("not exists", dc);
 	}
 	
+	/**
+	 * @see PropertySubqueryExpression
+	 */
 	public static Criterion propertyEqAll(String propertyName, DetachedCriteria dc) {
 		return new PropertySubqueryExpression(propertyName, "=", "all", dc);
 	}
 	
+	/**
+	 * @see PropertySubqueryExpression
+	 */
 	public static Criterion propertyIn(String propertyName, DetachedCriteria dc) {
 		return new PropertySubqueryExpression(propertyName, "in", null, dc);
 	}
 	
+	/**
+	 * @see PropertySubqueryExpression
+	 */
 	public static Criterion propertyNotIn(String propertyName, DetachedCriteria dc) {
 		return new PropertySubqueryExpression(propertyName, "not in", null, dc);
 	}
 	
+	/**
+	 * @see PropertySubqueryExpression
+	 */
 	public static Criterion propertyEq(String propertyName, DetachedCriteria dc) {
 		return new PropertySubqueryExpression(propertyName, "=", null, dc);
 	}
 	
+	/**
+	 * @see PropertySubqueryExpression
+	 */
 	public static Criterion propertyNe(String propertyName, DetachedCriteria dc) {
 		return new PropertySubqueryExpression(propertyName, "<>", null, dc);
 	}
 	
+	/**
+	 * @see PropertySubqueryExpression
+	 */
 	public static Criterion propertyGt(String propertyName, DetachedCriteria dc) {
 		return new PropertySubqueryExpression(propertyName, ">", null, dc);
 	}
-	
+
+	/**
+	 * @see PropertySubqueryExpression
+	 */
 	public static Criterion propertyLt(String propertyName, DetachedCriteria dc) {
 		return new PropertySubqueryExpression(propertyName, "<", null, dc);
 	}
-	
+
+	/**
+	 * @see PropertySubqueryExpression
+	 */
 	public static Criterion propertyGe(String propertyName, DetachedCriteria dc) {
 		return new PropertySubqueryExpression(propertyName, ">=", null, dc);
 	}
 	
-	public static Criterion propertyLe(String propertyName, DetachedCriteria dc) {
+	public static Criterion
+	/**
+	 * @see PropertySubqueryExpression
+	 */ propertyLe(String propertyName, DetachedCriteria dc) {
 		return new PropertySubqueryExpression(propertyName, "<=", null, dc);
 	}
-	
+
+	/**
+	 * @see PropertySubqueryExpression
+	 */
 	public static Criterion propertyGtAll(String propertyName, DetachedCriteria dc) {
 		return new PropertySubqueryExpression(propertyName, ">", "all", dc);
 	}
-	
+
+	/**
+	 * @see PropertySubqueryExpression
+	 */
 	public static Criterion propertyLtAll(String propertyName, DetachedCriteria dc) {
 		return new PropertySubqueryExpression(propertyName, "<", "all", dc);
 	}
-	
+
+	/**
+	 * @see PropertySubqueryExpression
+	 */
 	public static Criterion propertyGeAll(String propertyName, DetachedCriteria dc) {
 		return new PropertySubqueryExpression(propertyName, ">=", "all", dc);
 	}
-	
+
+	/**
+	 * @see PropertySubqueryExpression
+	 */
 	public static Criterion propertyLeAll(String propertyName, DetachedCriteria dc) {
 		return new PropertySubqueryExpression(propertyName, "<=", "all", dc);
 	}
-	
+
+	/**
+	 * @see PropertySubqueryExpression
+	 */
 	public static Criterion propertyGtSome(String propertyName, DetachedCriteria dc) {
 		return new PropertySubqueryExpression(propertyName, ">", "some", dc);
 	}
-	
+
+	/**
+	 * @see PropertySubqueryExpression
+	 */
 	public static Criterion propertyLtSome(String propertyName, DetachedCriteria dc) {
 		return new PropertySubqueryExpression(propertyName, "<", "some", dc);
 	}
-	
+
+	/**
+	 * @see PropertySubqueryExpression
+	 */
 	public static Criterion propertyGeSome(String propertyName, DetachedCriteria dc) {
 		return new PropertySubqueryExpression(propertyName, ">=", "some", dc);
 	}
-	
+
+	/**
+	 * @see PropertySubqueryExpression
+	 */
 	public static Criterion propertyLeSome(String propertyName, DetachedCriteria dc) {
 		return new PropertySubqueryExpression(propertyName, "<=", "some", dc);
 	}
-	
+
+	/**
+	 * @see SimpleSubqueryExpression
+	 */
 	public static Criterion eqAll(Object value, DetachedCriteria dc) {
 		return new SimpleSubqueryExpression(value, "=", "all", dc);
 	}
-	
+
+	/**
+	 * @see SimpleSubqueryExpression
+	 */
 	public static Criterion in(Object value, DetachedCriteria dc) {
 		return new SimpleSubqueryExpression(value, "in", null, dc);
 	}
-	
+
+	/**
+	 * @see SimpleSubqueryExpression
+	 */
 	public static Criterion notIn(Object value, DetachedCriteria dc) {
 		return new SimpleSubqueryExpression(value, "not in", null, dc);
 	}
-	
+
+	/**
+	 * @see SimpleSubqueryExpression
+	 */
 	public static Criterion eq(Object value, DetachedCriteria dc) {
 		return new SimpleSubqueryExpression(value, "=", null, dc);
 	}
-	
+
+	/**
+	 * @see SimpleSubqueryExpression
+	 */
 	public static Criterion gt(Object value, DetachedCriteria dc) {
 		return new SimpleSubqueryExpression(value, ">", null, dc);
 	}
-	
+
+	/**
+	 * @see SimpleSubqueryExpression
+	 */
 	public static Criterion lt(Object value, DetachedCriteria dc) {
 		return new SimpleSubqueryExpression(value, "<", null, dc);
 	}
-	
+
+	/**
+	 * @see SimpleSubqueryExpression
+	 */
 	public static Criterion ge(Object value, DetachedCriteria dc) {
 		return new SimpleSubqueryExpression(value, ">=", null, dc);
 	}
-	
+
+	/**
+	 * @see SimpleSubqueryExpression
+	 */
 	public static Criterion le(Object value, DetachedCriteria dc) {
 		return new SimpleSubqueryExpression(value, "<=", null, dc);
 	}
-	
+
+	/**
+	 * @see SimpleSubqueryExpression
+	 */
 	public static Criterion ne(Object value, DetachedCriteria dc) {
 		return new SimpleSubqueryExpression(value, "<>", null, dc);
 	}
-	
+
+	/**
+	 * @see SimpleSubqueryExpression
+	 */
 	public static Criterion gtAll(Object value, DetachedCriteria dc) {
 		return new SimpleSubqueryExpression(value, ">", "all", dc);
 	}
-	
+
+	/**
+	 * @see SimpleSubqueryExpression
+	 */
 	public static Criterion ltAll(Object value, DetachedCriteria dc) {
 		return new SimpleSubqueryExpression(value, "<", "all", dc);
 	}
-	
+
+	/**
+	 * @see SimpleSubqueryExpression
+	 */
 	public static Criterion geAll(Object value, DetachedCriteria dc) {
 		return new SimpleSubqueryExpression(value, ">=", "all", dc);
 	}
-	
+
+	/**
+	 * @see SimpleSubqueryExpression
+	 */
 	public static Criterion leAll(Object value, DetachedCriteria dc) {
 		return new SimpleSubqueryExpression(value, "<=", "all", dc);
 	}
-	
+
+	/**
+	 * @see SimpleSubqueryExpression
+	 */
 	public static Criterion gtSome(Object value, DetachedCriteria dc) {
 		return new SimpleSubqueryExpression(value, ">", "some", dc);
 	}
-	
+
+	/**
+	 * @see SimpleSubqueryExpression
+	 */
 	public static Criterion ltSome(Object value, DetachedCriteria dc) {
 		return new SimpleSubqueryExpression(value, "<", "some", dc);
 	}
-	
+
+	/**
+	 * @see SimpleSubqueryExpression
+	 */
 	public static Criterion geSome(Object value, DetachedCriteria dc) {
 		return new SimpleSubqueryExpression(value, ">=", "some", dc);
 	}
-	
+
+	/**
+	 * @see SimpleSubqueryExpression
+	 */
 	public static Criterion leSome(Object value, DetachedCriteria dc) {
 		return new SimpleSubqueryExpression(value, "<=", "some", dc);
 	}
Index: core/src/main/java/org/hibernate/criterion/SubqueryExpression.java
===================================================================
--- core/src/main/java/org/hibernate/criterion/SubqueryExpression.java	(revision 14095)
+++ core/src/main/java/org/hibernate/criterion/SubqueryExpression.java	(working copy)
@@ -15,6 +15,8 @@
 import org.hibernate.type.Type;
 
 /**
+ * A special case Criterion for Subquery expressions.
+ * 
  * @author Gavin King
  */
 public abstract class SubqueryExpression implements Criterion {
Index: core/src/main/java/org/hibernate/hql/ast/tree/BinaryLogicOperatorNode.java
===================================================================
--- core/src/main/java/org/hibernate/hql/ast/tree/BinaryLogicOperatorNode.java	(revision 14095)
+++ core/src/main/java/org/hibernate/hql/ast/tree/BinaryLogicOperatorNode.java	(working copy)
@@ -153,12 +153,12 @@
 			}
 			String[] splits = StringHelper.split( ", ", nodeText );
 			if ( count != splits.length ) {
-				throw new HibernateException( "SqlNode's text did not reference expected number of columns" );
+				throw new HibernateException( "SqlNode's text ["+nodeText+"] did not reference expected number of columns ["+count+"]" );
 			}
 			return splits;
 		}
 		else {
-			throw new HibernateException( "dont know how to extract row value elements from node : " + operand );
+			throw new HibernateException( "Don't know how to extract row value elements from node : " + operand );
 		}
 	}
 
Index: core/src/main/java/org/hibernate/loader/criteria/CriteriaQueryTranslator.java
===================================================================
--- core/src/main/java/org/hibernate/loader/criteria/CriteriaQueryTranslator.java	(revision 14095)
+++ core/src/main/java/org/hibernate/loader/criteria/CriteriaQueryTranslator.java	(working copy)
@@ -474,7 +474,11 @@
 
 	public Type getType(Criteria subcriteria, String propertyName)
 			throws HibernateException {
-		return getPropertyMapping( getEntityName( subcriteria, propertyName ) )
+		String entityName = getEntityName( subcriteria, propertyName );
+		if (entityName==null) {
+			throw new MappingException( "Cannot find entity name of property: " + propertyName );
+		}
+		return getPropertyMapping( entityName )
 				.toType( getPropertyName( propertyName ) );
 	}
 
Index: core/src/main/java/org/hibernate/transform/ResultTransformer.java
===================================================================
--- core/src/main/java/org/hibernate/transform/ResultTransformer.java	(revision 14095)
+++ core/src/main/java/org/hibernate/transform/ResultTransformer.java	(working copy)
@@ -11,6 +11,28 @@
  * @author Gavin King
  */
 public interface ResultTransformer extends Serializable {
+	
+	/**
+	 * Transforms one result 'row', represented as an array of objects, into a
+	 * single object. The alias names for each column are available in the
+	 * aliases array.
+	 * 
+	 * @param tuple
+	 *            the results represented as an array of objects.
+	 * @param aliases
+	 *            the aliases for each column, matching the tuple array.
+	 * @return An object collecting together in results.
+	 */
 	public Object transformTuple(Object[] tuple, String[] aliases);
+	
+	/**
+	 * Called after each row has been translated, providing a collection of all
+	 * the translated objects. Can be used to do things like eliminate all
+	 * duplicate objects.
+	 * 
+	 * @param collection
+	 *            the transformed objects.
+	 * @return the original collection, or a filtered copy.
+	 */
 	public List transformList(List collection);
 }
