Index: core/src/main/java/org/hibernate/engine/query/sql/NativeSQLQueryScalarReturn.java
===================================================================
--- core/src/main/java/org/hibernate/engine/query/sql/NativeSQLQueryScalarReturn.java	(revision 15383)
+++ core/src/main/java/org/hibernate/engine/query/sql/NativeSQLQueryScalarReturn.java	(working copy)
@@ -34,10 +34,13 @@
 public class NativeSQLQueryScalarReturn implements NativeSQLQueryReturn {
 	private Type type;
 	private String columnAlias;
+	private final int hashCode;
 
 	public NativeSQLQueryScalarReturn(String alias, Type type) {
 		this.type = type;
 		this.columnAlias = alias;
+		// pre-determine and cache the hashcode
+		this.hashCode = determineHashCode();
 	}
 
 	public String getColumnAlias() {
@@ -48,4 +51,43 @@
 		return type;
 	}
 
+	@Override
+	public int hashCode() {
+		return hashCode;
+	}
+
+	private int determineHashCode() {
+		final int prime = 31;
+		int result = 1;
+		String typeName = (type == null ? null : type.getClass().getName());
+		result = prime * result
+				+ ((columnAlias == null) ? 0 : columnAlias.hashCode());
+		result = prime * result + ((typeName == null) ? 0 : typeName.hashCode());
+		return result;
+	}
+
+	@Override
+	public boolean equals(Object obj) {
+		if (this == obj)
+			return true;
+		if (obj == null)
+			return false;
+		if (getClass() != obj.getClass())
+			return false;
+		final NativeSQLQueryScalarReturn other = (NativeSQLQueryScalarReturn) obj;
+		if (columnAlias == null) {
+			if (other.columnAlias != null)
+				return false;
+		} else if (!columnAlias.equals(other.columnAlias))
+			return false;
+		String thisType = (type == null ? null : type.getClass().getName());
+		String otherType = (other.type == null ? null : other.type.getClass().getName());
+		if (thisType == null) {
+			if (otherType != null)
+				return false;
+		} else if (!thisType.equals(otherType))
+			return false;
+		return true;
+	}
 }
+
Index: core/src/main/java/org/hibernate/engine/query/sql/NativeSQLQueryNonScalarReturn.java
===================================================================
--- core/src/main/java/org/hibernate/engine/query/sql/NativeSQLQueryNonScalarReturn.java	(revision 15383)
+++ core/src/main/java/org/hibernate/engine/query/sql/NativeSQLQueryNonScalarReturn.java	(working copy)
@@ -42,6 +42,7 @@
 	private final String alias;
 	private final LockMode lockMode;
 	private final Map propertyResults = new HashMap();
+	int hashCode;
 
 	/**
 	 * Constructs some form of non-scalar return descriptor
@@ -59,6 +60,8 @@
 		if ( propertyResults != null ) {
 			this.propertyResults.putAll( propertyResults );
 		}
+		// pre-determine and cache the hashcode
+		this.hashCode = determineHashCode();
 	}
 
 	/**
@@ -87,4 +90,53 @@
 	public Map getPropertyResultsMap() {
 		return Collections.unmodifiableMap( propertyResults );
 	}
+
+	@Override
+	public int hashCode() {
+		return hashCode;
+	}
+
+	private int determineHashCode() {
+		final int prime = 31;
+		int result = 1;
+		result = prime * result + ((alias == null) ? 0 : alias.hashCode());
+		String lockName = (lockMode == null ? null : lockMode.toString());
+		result = prime * result
+				+ ((lockName == null) ? 0 : lockName.hashCode());
+		result = prime * result
+				+ ((propertyResults == null) ? 0 : propertyResults.hashCode());
+		return result;
+	}
+
+	@Override
+	public boolean equals(Object obj) {
+		if (this == obj)
+			return true;
+		if (obj == null)
+			return false;
+		if (getClass() != obj.getClass())
+			return false;
+		final NativeSQLQueryNonScalarReturn other = (NativeSQLQueryNonScalarReturn) obj;
+		if (alias == null) {
+			if (other.alias != null)
+				return false;
+		} else if (!alias.equals(other.alias))
+			return false;
+		String lockName = (lockMode == null ? null : lockMode.toString());
+		String otherLockName = (other.lockMode == null ? null : other.lockMode.toString());
+		if (lockName == null) {
+			if (otherLockName != null)
+				return false;
+		} else if (!lockName.equals(otherLockName))
+			return false;
+		if (propertyResults == null) {
+			if (other.propertyResults != null)
+				return false;
+		} else if (!propertyResults.equals(other.propertyResults))
+			return false;
+		return true;
+	}
+	
+	
 }
+
