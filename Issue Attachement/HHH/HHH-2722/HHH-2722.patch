diff -ruN original/org/hibernate/type/CustomType.java modified/org/hibernate/type/CustomType.java
--- original/org/hibernate/type/CustomType.java	2007-07-16 18:10:09.000000000 -0500
+++ modified/org/hibernate/type/CustomType.java	2007-07-16 18:10:45.000000000 -0500
@@ -227,7 +227,7 @@
 
 	public boolean[] toColumnNullness(Object value, Mapping mapping) {
 		boolean[] result = new boolean[ getColumnSpan(mapping) ];
-		if (value!=null) Arrays.fill(result, true);
+		if (value!=null && !userType.isFieldNull()) Arrays.fill(result, true);
 		return result;
 	}
 
diff -ruN original/org/hibernate/usertype/AbstractUserType.java modified/org/hibernate/usertype/AbstractUserType.java
--- original/org/hibernate/usertype/AbstractUserType.java	1969-12-31 18:00:00.000000000 -0600
+++ modified/org/hibernate/usertype/AbstractUserType.java	2007-07-16 18:10:45.000000000 -0500
@@ -0,0 +1,23 @@
+package org.hibernate.usertype;
+
+
+/**
+ * A default implementation of UserType that returns null as representation of null database field values.
+ * <p/>
+ * When extending this class, be sure to update the field isFieldNull in the nullSafeGet method so that it accurately reflects what
+ * was found in the database, otherwise you may wind up with invalid SQL when using optimistic-lock="dirty"
+ * 
+ * @see org.hibernate.usertype.UserType
+ * @author Alex McCarrier
+ */
+public abstract class AbstractUserType implements UserType {
+	
+	protected boolean isFieldNull = true;
+
+	/**
+	 * @see org.hibernate.usertype.UserType#isFieldNull()
+	 */
+	public boolean isFieldNull() {
+		return isFieldNull;
+	}
+}
diff -ruN original/org/hibernate/usertype/UserType.java modified/org/hibernate/usertype/UserType.java
--- original/org/hibernate/usertype/UserType.java	2007-07-16 18:10:09.000000000 -0500
+++ modified/org/hibernate/usertype/UserType.java	2007-07-16 18:10:45.000000000 -0500
@@ -151,6 +151,11 @@
 	 * @return the value to be merged
 	 */
 	public Object replace(Object original, Object target, Object owner) throws HibernateException;
+	
+	/**
+	 * @return true if the field value is null, regardless of what the type returns for null values
+	 */
+	public boolean isFieldNull();
 }
 
 
