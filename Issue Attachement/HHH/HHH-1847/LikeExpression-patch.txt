Index: src/org/hibernate/criterion/LikeExpression.java
===================================================================
--- src/org/hibernate/criterion/LikeExpression.java	(revision 0)
+++ src/org/hibernate/criterion/LikeExpression.java	(revision 0)
@@ -0,0 +1,48 @@
+//$Id: $
+package org.hibernate.criterion;
+
+
+import org.hibernate.Criteria;
+import org.hibernate.HibernateException;
+import org.hibernate.dialect.Dialect;
+import org.hibernate.engine.TypedValue;
+
+/**
+ * For "like"
+ * @author Scott Marlow
+ */
+public class LikeExpression implements Criterion {
+
+	private final String propertyName;
+	private final Object value;
+	private final Character escapeChar;
+	private final boolean ignoreCase;
+
+	protected LikeExpression(String propertyName, String value, MatchMode matchMode,Character escapeChar, boolean ignoreCase) {
+		this.propertyName = propertyName;
+		this.value = matchMode.toMatchString(value);
+		this.escapeChar = escapeChar;
+		this.ignoreCase = ignoreCase;
+	}
+
+	public String toSqlString(Criteria criteria, CriteriaQuery criteriaQuery)
+	throws HibernateException {
+		Dialect dialect = criteriaQuery.getFactory().getDialect();
+		String[] columns = criteriaQuery.getColumnsUsingProjection(criteria, propertyName);
+		if (columns.length!=1) throw new HibernateException("Like may only be used with single-column properties");
+			return
+				(this.ignoreCase? dialect.getLowercaseFunction() + '(': "")
+				 + columns[0] + (this.ignoreCase? ")": "") +" like ?"
+				 + (this.escapeChar != null? " escape \'" +this.escapeChar +"\'": "");
+	}
+
+	public TypedValue[] getTypedValues(Criteria criteria, CriteriaQuery criteriaQuery)
+	throws HibernateException {
+		return new TypedValue[] { criteriaQuery.getTypedValue( criteria, propertyName, value.toString().toLowerCase() ) };
+	}
+
+	public String toString() {
+		return propertyName + " like " + value;
+	}
+
+}
