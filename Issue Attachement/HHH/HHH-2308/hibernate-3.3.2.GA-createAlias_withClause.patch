diff -ur org.orig/hibernate/Criteria.java org/hibernate/Criteria.java
--- org.orig/hibernate/Criteria.java	2009-06-24 03:54:36.000000000 -0300
+++ org/hibernate/Criteria.java	2009-07-13 17:50:39.000000000 -0300
@@ -183,6 +183,8 @@
 	 */
 	public Criteria createAlias(String associationPath, String alias, int joinType) throws HibernateException;
 
+	public Criteria createAlias(String associationPath, String alias, int joinType, Criterion withClause) throws HibernateException;
+	
 	/**
 	 * Create a new <tt>Criteria</tt>, "rooted" at the associated entity.
 	 * <p/>
diff -ur org.orig/hibernate/impl/CriteriaImpl.java org/hibernate/impl/CriteriaImpl.java
--- org.orig/hibernate/impl/CriteriaImpl.java	2009-06-24 03:54:32.000000000 -0300
+++ org/hibernate/impl/CriteriaImpl.java	2009-07-13 17:50:39.000000000 -0300
@@ -202,6 +202,11 @@
 		return this;
 	}
 
+	public Criteria createAlias(String associationPath, String alias, int joinType, Criterion withClause) {
+		new Subcriteria( this, associationPath, alias, joinType, withClause );
+		return this;
+	}
+
 	public Criteria createCriteria(String associationPath) {
 		return createCriteria( associationPath, INNER_JOIN );
 	}
@@ -374,10 +379,19 @@
 		private Criteria parent;
 		private LockMode lockMode;
 		private int joinType;
-
+		private Criterion withClause;
 
 		// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
+		private Subcriteria(Criteria parent, String path, String alias, int joinType, Criterion withClause) {
+			this.alias = alias;
+			this.path = path;
+			this.parent = parent;
+			this.joinType = joinType;
+			this.withClause = withClause;
+			CriteriaImpl.this.subcriteriaList.add(this);
+		}
+
 		private Subcriteria(Criteria parent, String path, String alias, int joinType) {
 			this.alias = alias;
 			this.path = path;
@@ -390,6 +404,11 @@
 			this( parent, path, null, joinType );
 		}
 
+		public Criterion getWithClause()
+		{
+			return this.withClause;
+		}
+		
 		public String toString() {
 			return "Subcriteria(" +
 				path + ":" +
@@ -451,6 +470,11 @@
 			return this;
 		}
 
+		public Criteria createAlias(String associationPath, String alias, int joinType, Criterion withClause) throws HibernateException {
+			new Subcriteria( this, associationPath, alias, joinType, withClause );
+			return this;
+		}
+
 		public Criteria createCriteria(String associationPath) {
 			return createCriteria( associationPath, INNER_JOIN );
 		}
diff -ur org.orig/hibernate/loader/AbstractEntityJoinWalker.java org/hibernate/loader/AbstractEntityJoinWalker.java
--- org.orig/hibernate/loader/AbstractEntityJoinWalker.java	2009-06-24 03:54:36.000000000 -0300
+++ org/hibernate/loader/AbstractEntityJoinWalker.java	2009-07-13 17:52:54.000000000 -0300
@@ -75,6 +75,7 @@
 				null,
 				alias,
 				JoinFragment.LEFT_OUTER_JOIN,
+				null,
 				getFactory(),
 				CollectionHelper.EMPTY_MAP
 			) );
diff -ur org.orig/hibernate/loader/collection/BasicCollectionJoinWalker.java org/hibernate/loader/collection/BasicCollectionJoinWalker.java
--- org.orig/hibernate/loader/collection/BasicCollectionJoinWalker.java	2009-06-24 03:54:36.000000000 -0300
+++ org/hibernate/loader/collection/BasicCollectionJoinWalker.java	2009-07-13 17:53:35.000000000 -0300
@@ -77,6 +77,7 @@
 				null, 
 				alias, 
 				JoinFragment.LEFT_OUTER_JOIN, 
+				null,
 				getFactory(), 
 				CollectionHelper.EMPTY_MAP 
 			) );
diff -ur org.orig/hibernate/loader/collection/OneToManyJoinWalker.java org/hibernate/loader/collection/OneToManyJoinWalker.java
--- org.orig/hibernate/loader/collection/OneToManyJoinWalker.java	2009-06-24 03:54:36.000000000 -0300
+++ org/hibernate/loader/collection/OneToManyJoinWalker.java	2009-07-13 17:53:52.000000000 -0300
@@ -87,6 +87,7 @@
 				null, 
 				alias, 
 				JoinFragment.LEFT_OUTER_JOIN, 
+				null,
 				getFactory(), 
 				CollectionHelper.EMPTY_MAP 
 			) );
diff -ur org.orig/hibernate/loader/criteria/CriteriaJoinWalker.java org/hibernate/loader/criteria/CriteriaJoinWalker.java
--- org.orig/hibernate/loader/criteria/CriteriaJoinWalker.java	2009-06-24 03:54:36.000000000 -0300
+++ org/hibernate/loader/criteria/CriteriaJoinWalker.java	2009-07-13 17:50:39.000000000 -0300
@@ -202,4 +202,8 @@
 		return "criteria query";
 	}
 
+	protected String getWithClause(String path) {
+		return translator.getWithClause(path); 
+	}
+	
 }
diff -ur org.orig/hibernate/loader/criteria/CriteriaQueryTranslator.java org/hibernate/loader/criteria/CriteriaQueryTranslator.java
--- org.orig/hibernate/loader/criteria/CriteriaQueryTranslator.java	2009-06-24 03:54:36.000000000 -0300
+++ org/hibernate/loader/criteria/CriteriaQueryTranslator.java	2009-07-13 17:50:39.000000000 -0300
@@ -43,6 +43,7 @@
 import org.hibernate.QueryException;
 import org.hibernate.hql.ast.util.SessionFactoryHelper;
 import org.hibernate.criterion.CriteriaQuery;
+import org.hibernate.criterion.Criterion;
 import org.hibernate.criterion.Projection;
 import org.hibernate.engine.QueryParameters;
 import org.hibernate.engine.RowSelection;
@@ -77,7 +78,8 @@
 	private final Map aliasCriteriaMap = new HashMap();
 	private final Map associationPathCriteriaMap = new LinkedHashMap();
 	private final Map associationPathJoinTypesMap = new LinkedHashMap();
-
+	private final Map withClauseMap = new HashMap();
+	
 	private final SessionFactoryImplementor sessionFactory;
 
 	public CriteriaQueryTranslator(
@@ -169,6 +171,10 @@
 				// TODO : not so sure this is needed...
 				throw new QueryException( "duplicate association path: " + wholeAssociationPath );
 			}
+			if ( crit.getWithClause() != null )
+			{
+				this.withClauseMap.put(wholeAssociationPath, crit.getWithClause());
+			}
 		}
 	}
 
@@ -266,20 +272,6 @@
 	}
 
 	public QueryParameters getQueryParameters() {
-		List values = new ArrayList();
-		List types = new ArrayList();
-		Iterator iter = rootCriteria.iterateExpressionEntries();
-		while ( iter.hasNext() ) {
-			CriteriaImpl.CriterionEntry ce = ( CriteriaImpl.CriterionEntry ) iter.next();
-			TypedValue[] tv = ce.getCriterion().getTypedValues( ce.getCriteria(), this );
-			for ( int i = 0; i < tv.length; i++ ) {
-				values.add( tv[i].getValue() );
-				types.add( tv[i].getType() );
-			}
-		}
-		Object[] valueArray = values.toArray();
-		Type[] typeArray = ArrayHelper.toTypeArray( types );
-
 		RowSelection selection = new RowSelection();
 		selection.setFirstRow( rootCriteria.getFirstResult() );
 		selection.setMaxRows( rootCriteria.getMaxResults() );
@@ -287,12 +279,14 @@
 		selection.setFetchSize( rootCriteria.getFetchSize() );
 
 		Map lockModes = new HashMap();
-		iter = rootCriteria.getLockModes().entrySet().iterator();
+		Iterator iter = rootCriteria.getLockModes().entrySet().iterator();
 		while ( iter.hasNext() ) {
 			Map.Entry me = ( Map.Entry ) iter.next();
 			final Criteria subcriteria = getAliasedCriteria( ( String ) me.getKey() );
 			lockModes.put( getSQLAlias( subcriteria ), me.getValue() );
 		}
+		List values = new ArrayList();
+		List types = new ArrayList();
 		iter = rootCriteria.iterateSubcriteria();
 		while ( iter.hasNext() ) {
 			CriteriaImpl.Subcriteria subcriteria = ( CriteriaImpl.Subcriteria ) iter.next();
@@ -300,8 +294,31 @@
 			if ( lm != null ) {
 				lockModes.put( getSQLAlias( subcriteria ), lm );
 			}
+			if ( subcriteria.getWithClause() != null )
+			{
+				TypedValue[] tv = subcriteria.getWithClause().getTypedValues( subcriteria, this );
+				for ( int i = 0; i < tv.length; i++ ) {
+					values.add( tv[i].getValue() );
+					types.add( tv[i].getType() );
+				}
+			}
 		}
 
+		// Type and value gathering for the WHERE clause needs to come AFTER lock mode gathering,
+		// because the lock mode gathering loop now contains join clauses which can contain
+		// parameter bindings (as in the HQL WITH clause).
+		iter = rootCriteria.iterateExpressionEntries();
+		while ( iter.hasNext() ) {
+			CriteriaImpl.CriterionEntry ce = ( CriteriaImpl.CriterionEntry ) iter.next();
+			TypedValue[] tv = ce.getCriterion().getTypedValues( ce.getCriteria(), this );
+			for ( int i = 0; i < tv.length; i++ ) {
+				values.add( tv[i].getValue() );
+				types.add( tv[i].getType() );
+			}
+		}
+
+		Object[] valueArray = values.toArray();
+		Type[] typeArray = ArrayHelper.toTypeArray( types );
 		return new QueryParameters(
 				typeArray,
 		        valueArray,
@@ -576,4 +593,10 @@
 		return propertyName;
 	}
 
+	public String getWithClause(String path)
+	{
+		final Criterion crit = (Criterion)this.withClauseMap.get(path);
+		return crit == null ? null : crit.toSqlString(getCriteria(path), this);
+	}
+	
 }
diff -ur org.orig/hibernate/loader/JoinWalker.java org/hibernate/loader/JoinWalker.java
--- org.orig/hibernate/loader/JoinWalker.java	2009-06-24 03:54:36.000000000 -0300
+++ org/hibernate/loader/JoinWalker.java	2009-07-13 17:50:39.000000000 -0300
@@ -205,6 +205,10 @@
 
 	}
 
+	protected String getWithClause(String path)	{
+		return "";
+	}
+	
 	/**
 	 * Add on association (one-to-one, many-to-one, or a collection) to a list 
 	 * of associations to be fetched by outerjoin 
@@ -231,7 +235,8 @@
 				alias, 
 				aliasedLhsColumns, 
 				subalias, 
-				joinType, 
+				joinType,
+				getWithClause(path),
 				getFactory(), 
 				enabledFilters
 			);
diff -ur org.orig/hibernate/loader/OuterJoinableAssociation.java org/hibernate/loader/OuterJoinableAssociation.java
--- org.orig/hibernate/loader/OuterJoinableAssociation.java	2009-06-24 03:54:36.000000000 -0300
+++ org/hibernate/loader/OuterJoinableAssociation.java	2009-07-13 17:50:39.000000000 -0300
@@ -44,7 +44,7 @@
 	private final String rhsAlias;
 	private final String[] rhsColumns;
 	private final int joinType;
-	private final String on;
+	private String on;
 	private final Map enabledFilters;
 
 	public OuterJoinableAssociation(
@@ -53,6 +53,7 @@
 		String[] lhsColumns,
 		String rhsAlias,
 		int joinType,
+		String withClause,
 		SessionFactoryImplementor factory,
 		Map enabledFilters)
 	throws MappingException {
@@ -63,7 +64,8 @@
 		this.joinType = joinType;
 		this.joinable = joinableType.getAssociatedJoinable(factory);
 		this.rhsColumns = JoinHelper.getRHSColumnNames(joinableType, factory);
-		this.on = joinableType.getOnCondition(rhsAlias, factory, enabledFilters);
+		this.on = joinableType.getOnCondition(rhsAlias, factory, enabledFilters)
+			+ ( withClause == null ? "" : " and ( " + withClause + " )" );
 		this.enabledFilters = enabledFilters; // needed later for many-to-many/filter application
 	}
 
