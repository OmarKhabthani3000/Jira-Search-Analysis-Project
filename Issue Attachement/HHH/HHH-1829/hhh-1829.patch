Index: src/org/hibernate/cfg/HbmBinder.java
===================================================================
--- src/org/hibernate/cfg/HbmBinder.java	(revision 10864)
+++ src/org/hibernate/cfg/HbmBinder.java	(working copy)
@@ -1125,6 +1125,8 @@
 
 		Attribute fkNode = node.attribute( "foreign-key" );
 		if ( fkNode != null ) simpleValue.setForeignKeyName( fkNode.getValue() );
+		Attribute propertyRefNode = node.attribute( "property-ref" );
+		if ( propertyRefNode != null ) simpleValue.setPropertyRefColumn( propertyRefNode.getValue() );
 	}
 
 	private static void bindSimpleValueType(Element node, SimpleValue simpleValue, Mappings mappings)
Index: src/org/hibernate/mapping/SimpleValue.java
===================================================================
--- src/org/hibernate/mapping/SimpleValue.java	(revision 10864)
+++ src/org/hibernate/mapping/SimpleValue.java	(working copy)
@@ -34,6 +34,7 @@
 	private boolean alternateUniqueKey;
 	private Properties typeParameters;
 	private boolean cascadeDeleteEnabled;
+	private String propertyRefColumn;
 
 	public boolean isCascadeDeleteEnabled() {
 		return cascadeDeleteEnabled;
@@ -85,6 +86,14 @@
 		this.table = table;
 	}
 
+	public String getPropertyRefColumn() {
+		return propertyRefColumn;
+	}
+
+	public void setPropertyRefColumn(String propertyRefColumn) {
+		this.propertyRefColumn = propertyRefColumn;
+	}
+
 	public SimpleValue() {}
 
 	public void createForeignKey() throws MappingException {}
Index: src/org/hibernate/mapping/KeyValue.java
===================================================================
--- src/org/hibernate/mapping/KeyValue.java	(revision 10864)
+++ src/org/hibernate/mapping/KeyValue.java	(working copy)
@@ -28,4 +28,6 @@
 			String defaultCatalog, 
 			String defaultSchema, 
 			RootClass rootClass) throws MappingException;
+
+	public String getPropertyRefColumn();
 }
Index: src/org/hibernate/persister/entity/AbstractEntityPersister.java
===================================================================
--- src/org/hibernate/persister/entity/AbstractEntityPersister.java	(revision 10864)
+++ src/org/hibernate/persister/entity/AbstractEntityPersister.java	(working copy)
@@ -59,6 +59,8 @@
 import org.hibernate.loader.entity.UniqueEntityLoader;
 import org.hibernate.mapping.Column;
 import org.hibernate.mapping.Component;
+import org.hibernate.mapping.Join;
+import org.hibernate.mapping.KeyValue;
 import org.hibernate.mapping.PersistentClass;
 import org.hibernate.mapping.Property;
 import org.hibernate.mapping.Selectable;
@@ -112,6 +114,7 @@
 	// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
 	private final String[] rootTableKeyColumnNames;
+	private final String[] propertyRefColumnNames;
 	private final String[] identifierAliases;
 	private final int identifierColumnSpan;
 	private final String versionColumnName;
@@ -295,6 +298,10 @@
 		return rootTableKeyColumnNames;
 	}
 
+	public String[] getPropertyRefColumnNames() {
+		return propertyRefColumnNames;
+	}
+
 	protected String[] getSQLUpdateByRowIdStrings() {
 		if ( sqlUpdateByRowIdString == null ) {
 			throw new AssertionFailure( "no update by row id" );
@@ -462,6 +469,15 @@
 			i++;
 		}
 
+		// JOINS
+
+		propertyRefColumnNames = new String[persistentClass.getJoinClosureSpan()];
+		int joinCounter = 0;
+		for ( Iterator joinIter = persistentClass.getJoinClosureIterator(); joinIter.hasNext(); ) {
+			Join join = (Join)joinIter.next();
+			propertyRefColumnNames[joinCounter++] = join.getKey().getPropertyRefColumn();
+		}
+
 		// VERSION
 
 		if ( persistentClass.isVersioned() ) {
@@ -2756,7 +2772,11 @@
 	}
 
 	protected JoinFragment createJoin(String name, boolean innerJoin, boolean includeSubclasses) {
-		final String[] idCols = StringHelper.qualify( name, getIdentifierColumnNames() ); //all joins join to the pk of the driving table
+		final String[] idCols = getPropertyRefColumnNames() != null && 
+														getPropertyRefColumnNames().length > 0 && 
+														getPropertyRefColumnNames()[0] != null ?
+			StringHelper.qualify( name, getPropertyRefColumnNames() ) :
+			StringHelper.qualify( name, getIdentifierColumnNames() ); //all joins join to the pk of the driving table
 		final JoinFragment join = getFactory().getDialect().createOuterJoinFragment();
 		final int tableSpan = getSubclassTableSpan();
 		for ( int j = 1; j < tableSpan; j++ ) { //notice that we skip the first table; it is the driving table!
