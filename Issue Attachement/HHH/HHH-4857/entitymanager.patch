Index: src/java/org/hibernate/ejb/Ejb3Configuration.java
===================================================================
--- src/java/org/hibernate/ejb/Ejb3Configuration.java	(revision 18690)
+++ src/java/org/hibernate/ejb/Ejb3Configuration.java	(working copy)
@@ -107,6 +107,7 @@
 	private static Configuration DEFAULT_CONFIGURATION = new AnnotationConfiguration();
 	private String persistenceUnitName;
 	private String cfgXmlResource;
+	private boolean sharingConfig = false;
 
 	private static class Ejb3EntityNotFoundDelegate implements EntityNotFoundDelegate, Serializable {
 		public void handleEntityNotFound(String entityName, Serializable id) {
@@ -135,6 +136,16 @@
 		cfg.setEntityNotFoundDelegate( ejb3EntityNotFoundDelegate );
 		listenerConfigurator = new EventListenerConfigurator( this );
 	}
+	
+	public Ejb3Configuration(AnnotationConfiguration cfg, SettingsFactory settingsFactory) {
+		this.settingsFactory = settingsFactory;
+		this.cfg = cfg;
+		sharingConfig = true;
+		cfg.setEntityNotFoundDelegate( ejb3EntityNotFoundDelegate );
+		listenerConfigurator = new EventListenerConfigurator( this );
+	}
+	
+	
 
 	/**
 	 * Used to inject a datasource object as the connection provider.
@@ -666,8 +677,9 @@
 		try {
 			configure( (Properties)null, null );
 			NamingHelper.bind(this);
+			SessionFactory sf = cfg.buildSessionFactory(sharingConfig);
 			return new EntityManagerFactoryImpl(
-					cfg.buildSessionFactory(),
+					sf,
 					transactionType,
 					discardOnClose,
 					getSessionInterceptorClass( cfg.getProperties() )
@@ -1251,7 +1263,8 @@
 	}
 
 	SessionFactory buildSessionFactory() throws HibernateException {
-		return cfg.buildSessionFactory();
+		return cfg.buildSessionFactory(sharingConfig);
+		
 	}
 
 	public Iterator getTableMappings() {
