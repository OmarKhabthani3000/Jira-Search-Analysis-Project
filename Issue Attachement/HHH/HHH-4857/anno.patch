Index: src/java/org/hibernate/cfg/AnnotationConfiguration.java
===================================================================
--- src/java/org/hibernate/cfg/AnnotationConfiguration.java	(revision 18690)
+++ src/java/org/hibernate/cfg/AnnotationConfiguration.java	(working copy)
@@ -793,6 +793,10 @@
 	}
 
 	public SessionFactory buildSessionFactory() throws HibernateException {
+		return buildSessionFactory(false);
+	}
+	
+	public SessionFactory buildSessionFactory(boolean sharing) throws HibernateException {
 		//add validator events if the jar is available
 		boolean enableValidatorListeners = !"false".equalsIgnoreCase( getProperty( "hibernate.validator.autoregister_listeners" ) );
 		Class validateEventListenerClass = null;
@@ -864,7 +868,7 @@
 		
 		enableHibernateSearch(); 
 		
-		return super.buildSessionFactory();
+		return super.buildSessionFactory(sharing);
 	}
 
 	/**
Index: src/java/org/hibernate/cfg/SharedAnnotationConfig.java
===================================================================
--- src/java/org/hibernate/cfg/SharedAnnotationConfig.java	(revision 0)
+++ src/java/org/hibernate/cfg/SharedAnnotationConfig.java	(revision 0)
@@ -0,0 +1,48 @@
+package org.hibernate.cfg;
+
+import org.hibernate.MappingException;
+import org.hibernate.cfg.AnnotationConfiguration;
+import org.hibernate.cfg.SettingsFactory;
+
+public class SharedAnnotationConfig extends AnnotationConfiguration{
+	private boolean initialized = false;
+	private boolean completedSecondPass = false;
+
+	public SharedAnnotationConfig(SettingsFactory sf) {
+		super(sf);
+	}
+
+	/**
+	 * @return the initialized
+	 */
+	public boolean isInitialized() {
+		return initialized;
+	}
+
+	/**
+	 * @param initialized the initialized to set
+	 */
+	public void setInitialized(boolean initialized) {
+		this.initialized = initialized;
+	}
+	
+	public void buildMappings(){
+		if (!initialized){
+			super.buildMappings();			
+		}
+		initialized = true;
+	}
+
+	/**
+	 * @see org.hibernate.cfg.AnnotationConfiguration#secondPassCompile()
+	 */
+	@Override
+	protected void secondPassCompile() throws MappingException {
+		if (!completedSecondPass){
+			super.secondPassCompile();
+		}
+		completedSecondPass = true;
+	}
+	
+	
+}
