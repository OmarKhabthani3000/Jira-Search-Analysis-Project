Index: core/src/main/java/org/hibernate/loader/Loader.java
===================================================================
--- core/src/main/java/org/hibernate/loader/Loader.java	(revision 20078)
+++ core/src/main/java/org/hibernate/loader/Loader.java	(revision )
@@ -1813,16 +1813,19 @@
 		return hasFirstRow ? 2 : 1;
 	}
 
-	/**
-	 * Use JDBC API to limit the number of rows returned by the SQL query if necessary
-	 */
-	private void setMaxRows(
-			final PreparedStatement st,
-			final RowSelection selection) throws SQLException {
+    /**
+     * Use JDBC API to limit the number of rows returned by the SQL query if necessary
+     */
+    private void setMaxRows(
+            final PreparedStatement st,
+            final RowSelection selection) throws SQLException {
+
-		if ( hasMaxRows( selection ) ) {
+        if (hasMaxRows(selection)) {
-			st.setMaxRows( selection.getMaxRows().intValue() + interpretFirstRow( getFirstRow( selection ) ) );
+            //to prevent integer overflow
+            long maxRows = (long) selection.getMaxRows().intValue() + (long) interpretFirstRow(getFirstRow(selection));
+            st.setMaxRows(maxRows > Integer.MAX_VALUE ? Integer.MAX_VALUE : (int) maxRows);
-		}
-	}
+        }
+    }
 
 	/**
 	 * Bind all parameter values into the prepared statement in preparation
