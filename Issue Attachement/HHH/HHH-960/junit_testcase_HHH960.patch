Index: test/org/hibernate/test/hql/Value.hbm.xml
===================================================================
--- test/org/hibernate/test/hql/Value.hbm.xml	(revision 0)
+++ test/org/hibernate/test/hql/Value.hbm.xml	(revision 0)
@@ -0,0 +1,20 @@
+<?xml version="1.0"?>
+<!DOCTYPE hibernate-mapping PUBLIC
+    "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
+    "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
+
+<hibernate-mapping package="org.hibernate.test.hql">
+        <class name="Value"
+                table="GEN_COMPONENT_VALUE">
+                <composite-id>
+                        <key-many-to-one name="component" column="component_id"
+                                access="field" />
+                        <key-many-to-one name="property" column="property_id"
+                                access="field" />
+                </composite-id>
+
+                <property name="value" access="field" />
+
+        </class>
+
+</hibernate-mapping>
Index: test/org/hibernate/test/hql/Component.java
===================================================================
--- test/org/hibernate/test/hql/Component.java	(revision 0)
+++ test/org/hibernate/test/hql/Component.java	(revision 0)
@@ -0,0 +1,68 @@
+package org.hibernate.test.hql;
+
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.LinkedList;
+import java.util.Map;
+
+public class Component {
+
+	private Long id;
+
+	private String name;
+
+	private Component parent;
+
+	private Collection children = new LinkedList();
+
+	private Map values = new HashMap();
+
+	public Component() {
+
+	}
+
+	public Component(String name) {
+		this.name = name;
+	}
+
+	public Long getId() {
+		return id;
+	}
+
+	public void setId(Long id) {
+		this.id = id;
+	}
+
+	public String getName() {
+		return name;
+	}
+
+	public void setName(String name) {
+		this.name = name;
+	}
+
+	public Map getValues() {
+		return values;
+	}
+
+	public void setValues(Map values) {
+		this.values = values;
+	}
+
+	public Component getParent() {
+		return parent;
+	}
+
+	public void setParent(Component parent) {
+		this.parent = parent;
+	}
+
+	public Collection getChildren() {
+		return children;
+	}
+
+	public void setChildren(Collection children) {
+		this.children = children;
+	}
+
+}
Index: test/org/hibernate/test/hql/Property.java
===================================================================
--- test/org/hibernate/test/hql/Property.java	(revision 0)
+++ test/org/hibernate/test/hql/Property.java	(revision 0)
@@ -0,0 +1,34 @@
+package org.hibernate.test.hql;
+
+public class Property {
+
+	private Long id;
+
+	private String name;
+
+	public Property() {
+	}
+
+	public Property(String name) {
+		this.name = name;
+	}
+
+	public Long getId() {
+		return id;
+	}
+
+	public void setId(Long id) {
+		this.id = id;
+	}
+
+	public String getName() {
+		return name;
+	}
+
+	public void setName(String name) {
+		this.name = name;
+	}
+
+
+
+}
Index: test/org/hibernate/test/hql/Component.hbm.xml
===================================================================
--- test/org/hibernate/test/hql/Component.hbm.xml	(revision 0)
+++ test/org/hibernate/test/hql/Component.hbm.xml	(revision 0)
@@ -0,0 +1,35 @@
+<?xml version="1.0"?>
+<!DOCTYPE hibernate-mapping PUBLIC
+    "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
+    "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
+
+<hibernate-mapping package="org.hibernate.test.hql">
+        <class name="Component"
+                table="GEN_COMPONENT">
+                <id name="id" column="ID" type="long">
+                        <generator class="native" />
+                </id>
+
+                <property name="name" />
+
+
+                <many-to-one name="parent"
+                        column="parent_id" access="field" lazy="proxy"/>
+
+                <bag name="children" lazy="true"
+                        inverse="true" order-by="name" access="field" cascade="all">
+                        <key column="parent_id" on-delete="cascade"/>
+                        <one-to-many class="Component" />
+                </bag>
+
+                <map name="values" lazy="true" access="field" inverse="true"
+                        cascade="all">
+                        <key column="component_id" on-delete="cascade" />
+                        <map-key-many-to-many class="Property">
+                                <column name="property_id" />
+                        </map-key-many-to-many>
+                        <one-to-many class="Value" />
+                </map>
+        </class>
+
+</hibernate-mapping>
Index: test/org/hibernate/test/hql/Property.hbm.xml
===================================================================
--- test/org/hibernate/test/hql/Property.hbm.xml	(revision 0)
+++ test/org/hibernate/test/hql/Property.hbm.xml	(revision 0)
@@ -0,0 +1,17 @@
+<?xml version="1.0"?>
+<!DOCTYPE hibernate-mapping PUBLIC
+    "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
+    "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
+
+<hibernate-mapping package="org.hibernate.test.hql">
+        <class name="Property"
+                table="GEN_COMPONENT_PROPERTY">
+                <id name="id" column="ID" type="java.lang.Long">
+                        <generator class="native" />
+                </id>
+
+                <property name="name"/>
+
+        </class>
+
+</hibernate-mapping>
Index: test/org/hibernate/test/hql/QueryTranslatorTestCase.java
===================================================================
--- test/org/hibernate/test/hql/QueryTranslatorTestCase.java	(revision 9669)
+++ test/org/hibernate/test/hql/QueryTranslatorTestCase.java	(working copy)
@@ -520,7 +520,10 @@
 			"legacy/UpDown.hbm.xml",
 			"compositeelement/Parent.hbm.xml",
 			"onetoone/joined/Person.hbm.xml",
-			"hql/CrazyIdFieldNames.hbm.xml"
+			"hql/CrazyIdFieldNames.hbm.xml",
+			"hql/Component.hbm.xml",
+			"hql/Property.hbm.xml",
+			"hql/Value.hbm.xml",
 		};
 	}
 
Index: test/org/hibernate/test/hql/Value.java
===================================================================
--- test/org/hibernate/test/hql/Value.java	(revision 0)
+++ test/org/hibernate/test/hql/Value.java	(revision 0)
@@ -0,0 +1,51 @@
+package org.hibernate.test.hql;
+
+import java.io.Serializable;
+
+public class Value implements Serializable {
+
+	/**
+	 *
+	 */
+	private static final long serialVersionUID = -2904746587219342825L;
+
+	private Component component;
+
+	private Property property;
+
+	private String value;
+
+	public Value() {
+
+	}
+
+	public Value(Component component, Property property, String value) {
+		this.component = component;
+		this.property = property;
+		this.value = value;
+	}
+
+	public Component getComponent() {
+		return component;
+	}
+
+	public void setComponent(Component component) {
+		this.component = component;
+	}
+
+	public String getValue() {
+		return value;
+	}
+
+	public void setValue(String value) {
+		this.value = value;
+	}
+
+	public Property getProperty() {
+		return property;
+	}
+
+	public void setProperty(Property property) {
+		this.property = property;
+	}
+}
Index: test/org/hibernate/test/hql/ASTQueryTranslatorTest.java
===================================================================
--- test/org/hibernate/test/hql/ASTQueryTranslatorTest.java	(revision 9669)
+++ test/org/hibernate/test/hql/ASTQueryTranslatorTest.java	(working copy)
@@ -1,9 +1,16 @@
 // $Id$
 package org.hibernate.test.hql;
 
+import java.util.Collections;
+
 import junit.framework.Test;
 import junit.framework.TestSuite;
 
+import org.hibernate.hql.ParameterTranslations;
+import org.hibernate.hql.QueryTranslator;
+import org.hibernate.hql.QueryTranslatorFactory;
+import org.hibernate.hql.classic.ClassicQueryTranslatorFactory;
+
 /**
  * Tests cases where the AST based QueryTranslator does not generate identical SQL.
  *
@@ -11,6 +18,13 @@
  */
 public class ASTQueryTranslatorTest extends QueryTranslatorTestCase {
 
+	private String hqlHHH960 =
+			" from Component as library" +
+			" left join library.children as book" +
+			" left join library.values as height with height.property=:height" +
+			" left join book.values as width with width.property=:width";
+
+
 	public ASTQueryTranslatorTest(String x) {
 		super( x );
 	}
@@ -168,9 +182,47 @@
 	}
 
 	public void testImplicitJoin() throws Exception {
-		//old qt generates an exception, the new one doesnt 
+		//old qt generates an exception, the new one doesnt
 		//this is actually invalid HQL, an implicit join on a many-valued association
 		assertTranslation( "from Animal an where an.offspring.mother.bodyWeight > 10" );
 	}
 
+	public void doTestHHH960(QueryTranslator queryTranslator) {
+		// SQL String in the tests with Hibernate 3.1.2 and org.hibernate.dialect.HSQLDialect is:
+		// select ...
+		// from GEN_COMPONENT component0_
+		// left outer join GEN_COMPONENT children1_ on component0_.ID=children1_.parent_id
+		// left outer join GEN_COMPONENT_VALUE values3_ on children1_.ID=values3_.component_id and (values3_.property_id=?)
+		// left outer join GEN_COMPONENT_VALUE values2_ on component0_.ID=values2_.component_id and (values2_.property_id=?)
+		String sql = queryTranslator.getSQLString();
+		int heightSqlPos = sql.indexOf("left outer join GEN_COMPONENT_VALUE values2_ on component0_.ID=values2_.component_id and (values2_.property_id=?)");
+		int widthSqlPos = sql.indexOf("left outer join GEN_COMPONENT_VALUE values3_ on children1_.ID=values3_.component_id and (values3_.property_id=?)");
+		
+		ParameterTranslations parameterTranslations = queryTranslator.getParameterTranslations();
+		int[] heightParamPos = parameterTranslations.getNamedParameterSqlLocations("height");
+		assertEquals(1, heightParamPos.length);
+		int[] widthParamPos = parameterTranslations.getNamedParameterSqlLocations("width");
+		assertEquals(1, widthParamPos.length);
+		
+		// Test that parameters
+		if (widthSqlPos < heightSqlPos) {
+			assertEquals(0, widthParamPos[0]);
+			assertEquals(1, heightParamPos[0]);
+		} else {
+			assertEquals(0, heightParamPos[0]);
+			assertEquals(1, widthParamPos[0]);
+		}
+	}
+	
+	public void testHHH960() {
+		doTestHHH960(createNewQueryTranslator(hqlHHH960));
+	}
+	
+	public void testHHH960ClassicQueryTranslator() {
+		QueryTranslatorFactory classic = new ClassicQueryTranslatorFactory();
+		QueryTranslator queryTranslator = classic.createQueryTranslator( hqlHHH960, hqlHHH960, Collections.EMPTY_MAP, getSessionFactoryImplementor() );
+		queryTranslator.compile(Collections.EMPTY_MAP, false);
+		doTestHHH960(queryTranslator);
+	}
+
 }
