Index: src/test/java/org/hibernate/envers/test/AbstractEntityTest.java
===================================================================
--- src/test/java/org/hibernate/envers/test/AbstractEntityTest.java	(revision 16207)
+++ src/test/java/org/hibernate/envers/test/AbstractEntityTest.java	(working copy)
@@ -89,7 +89,7 @@
         if (audited) {
             initListeners();
         }
-        cfg.configure("hibernate.test.cfg.xml");
+        cfg.configure("src/test/resources/hibernate.test.cfg.xml");
         configure(cfg);
         emf = cfg.buildEntityManagerFactory();
 
Index: src/test/java/org/hibernate/envers/test/entities/Client.hbm.xml
===================================================================
--- src/test/java/org/hibernate/envers/test/entities/Client.hbm.xml	(revision 0)
+++ src/test/java/org/hibernate/envers/test/entities/Client.hbm.xml	(revision 0)
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!DOCTYPE hibernate-mapping PUBLIC
+"-//Hibernate/Hibernate Mapping DTD 3.0//EN"
+"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
+
+<hibernate-mapping>
+
+
+	<class name="org.hibernate.envers.test.entities.ClientVO" table="COM_CLIENT_M"
+		dynamic-update="true"  >
+
+
+		<id column="CLIENTCD" name="clientCd">
+			<generator class="assigned"></generator>
+		</id>
+
+
+		<property name="clientTypeCd" column="CLIENTTYPECD" not-null="true" optimistic-lock="true" />
+		
+		<property type="string" name="createdBy" column="CREATEDBY" update="false" access="org.hibernate.envers.test.entities.LogPropertiesAccessor"/>
+		<property type="date" name="createdDt" column="CREATEDDT" update="false" access="org.hibernate.envers.test.entities.LogPropertiesAccessor"/>
+		<property type="string" name="createdAt" column="CREATEDAT" update="false" access="org.hibernate.envers.test.entities.LogPropertiesAccessor"/>
+
+		
+		
+	</class>
+	
+	
+
+</hibernate-mapping>
Index: src/test/java/org/hibernate/envers/test/entities/ClientVO.java
===================================================================
--- src/test/java/org/hibernate/envers/test/entities/ClientVO.java	(revision 0)
+++ src/test/java/org/hibernate/envers/test/entities/ClientVO.java	(revision 0)
@@ -0,0 +1,40 @@
+package org.hibernate.envers.test.entities;
+
+import java.io.Serializable;
+
+import org.hibernate.envers.Audited;
+
+@Audited
+public class ClientVO implements Serializable
+{
+	private static final long	serialVersionUID	= 1L;
+
+	protected String				clientCd;
+
+	protected String				clientTypeCd;
+
+	public ClientVO()
+	{
+	}
+
+	public String getClientCd()
+	{
+		return clientCd;
+	}
+
+	public void setClientCd(String clientCd)
+	{
+		this.clientCd = clientCd;
+	}
+
+	public String getClientTypeCd()
+	{
+		return clientTypeCd;
+	}
+
+	public void setClientTypeCd(String clientTypeCd)
+	{
+		this.clientTypeCd = clientTypeCd;
+	}
+
+}
Index: src/test/java/org/hibernate/envers/test/entities/LogPropertiesAccessor.java
===================================================================
--- src/test/java/org/hibernate/envers/test/entities/LogPropertiesAccessor.java	(revision 0)
+++ src/test/java/org/hibernate/envers/test/entities/LogPropertiesAccessor.java	(revision 0)
@@ -0,0 +1,119 @@
+package org.hibernate.envers.test.entities;
+
+import java.lang.reflect.Method;
+import java.sql.Date;
+import java.util.HashMap;
+import java.util.Map;
+
+import org.hibernate.HibernateException;
+import org.hibernate.PropertyNotFoundException;
+import org.hibernate.engine.SessionFactoryImplementor;
+import org.hibernate.engine.SessionImplementor;
+import org.hibernate.property.Getter;
+import org.hibernate.property.PropertyAccessor;
+import org.hibernate.property.Setter;
+
+public class LogPropertiesAccessor implements PropertyAccessor
+{
+	private static Map<String, LogPropertiesGetter>	map						= new HashMap<String, LogPropertiesGetter>();
+
+	private static LogPropertiesSetter					logPropertiesSetter	= new LogPropertiesSetter();
+
+	static
+	{
+		map.put("createdBy", new CreatedByGetter());
+		map.put("createdAt", new CreatedAtGetter());
+		map.put("createdDt", new CreatedDateGetter());
+	}
+
+	public Getter getGetter(Class theClass, String propertyName) throws PropertyNotFoundException
+	{
+		return map.get(propertyName);
+	}
+
+	public Setter getSetter(Class theClass, String propertyName) throws PropertyNotFoundException
+	{
+		return logPropertiesSetter;
+	}
+
+	private static class LogPropertiesSetter implements Setter
+	{
+
+		public Method getMethod()
+		{
+			return null;
+		}
+
+		public String getMethodName()
+		{
+			return null;
+		}
+
+		public void set(Object target, Object value, SessionFactoryImplementor factory) throws HibernateException
+		{
+			//Left blank as properties dont need to be set back.
+		}
+
+	}
+
+	private static abstract class LogPropertiesGetter implements Getter
+	{
+		public Object getForInsert(Object owner, Map mergeMap, SessionImplementor session) throws HibernateException
+		{
+			return get(owner);
+		}
+
+		public Method getMethod()
+		{
+			return null;
+		}
+
+		public String getMethodName()
+		{
+			return null;
+		}
+	}
+
+	private static class CreatedByGetter extends LogPropertiesGetter
+	{
+		public Object get(Object owner) throws HibernateException
+		{
+			return "TOM";
+		}
+
+		public Class getReturnType()
+		{
+			return String.class;
+		}
+
+	}
+
+	private static class CreatedAtGetter extends LogPropertiesGetter
+	{
+		public Object get(Object owner) throws HibernateException
+		{
+			return "default";
+		}
+
+		public Class getReturnType()
+		{
+			return String.class;
+		}
+
+	}
+
+	private static class CreatedDateGetter extends LogPropertiesGetter
+	{
+		public Object get(Object owner) throws HibernateException
+		{
+			return new Date(System.currentTimeMillis());
+		}
+
+		public Class getReturnType()
+		{
+			return Date.class;
+		}
+
+	}
+
+}
Index: src/test/java/org/hibernate/envers/test/integration/basic/PropertyAccessorTest.java
===================================================================
--- src/test/java/org/hibernate/envers/test/integration/basic/PropertyAccessorTest.java	(revision 0)
+++ src/test/java/org/hibernate/envers/test/integration/basic/PropertyAccessorTest.java	(revision 0)
@@ -0,0 +1,64 @@
+package org.hibernate.envers.test.integration.basic;
+
+import java.util.Iterator;
+import java.util.List;
+
+import javax.persistence.EntityManager;
+import javax.persistence.Query;
+
+import org.hibernate.ejb.Ejb3Configuration;
+import org.hibernate.envers.test.AbstractEntityTest;
+import org.hibernate.envers.test.entities.ClientVO;
+import org.testng.annotations.Test;
+
+public class PropertyAccessorTest extends AbstractEntityTest
+{
+
+	@Override
+	public void configure(Ejb3Configuration cfg)
+	{
+
+	}
+
+	@Test
+	public void initData()
+	{
+		EntityManager em = getEntityManager();
+		em.getTransaction().begin();
+
+		ClientVO client = createClient();
+
+		em.persist(client);
+		em.getTransaction().commit();
+	}
+
+	@Test(dependsOnMethods = "initData")
+	public void testPropertyAccessors()
+	{
+		EntityManager em = getEntityManager();
+		Query query = em.createQuery("select client from ClientVO as client where client.clientCd like 456");
+
+		List<?> results = em.createNativeQuery("select CREATEDBY from COM_CLIENT_M_AUD where CLIENTCD LIKE '456'").getResultList();
+
+		Iterator itr = results.iterator();
+
+		while (itr.hasNext())
+		{
+			Object value = itr.next();
+
+			System.out.println(value);
+
+		}
+
+	}
+
+	private ClientVO createClient()
+	{
+		ClientVO client = new ClientVO();
+		client.setClientCd("456");
+		client.setClientTypeCd("Person");
+
+		return client;
+	}
+
+}
Index: src/test/resources/hibernate.test.cfg.xml
===================================================================
--- src/test/resources/hibernate.test.cfg.xml	(revision 16207)
+++ src/test/resources/hibernate.test.cfg.xml	(working copy)
@@ -8,14 +8,26 @@
     <session-factory>
         <property name="hbm2ddl.auto">create-drop</property>
 
-        <property name="show_sql">false</property>
+        <property name="show_sql">true</property>
         <property name="format_sql">true</property>
 
-        <property name="dialect">org.hibernate.dialect.H2Dialect</property>
+        <!--<property name="dialect">org.hibernate.dialect.H2Dialect</property>
         <property name="connection.url">jdbc:h2:mem:envers</property>
         <property name="connection.driver_class">org.h2.Driver</property>
         <property name="connection.username">sa</property>
         <property name="connection.password"></property>
+        
+        
+        
+        
+        --><property name="hibernate.dialect">org.hibernate.dialect.HSQLDialect</property>
+        <property name="hibernate.connection.driver_class">org.hsqldb.jdbcDriver</property>
+        <property name="hibernate.connection.username">sa</property>
+        <property name="hibernate.connection.password"></property>
+        <property name="hibernate.connection.url">jdbc:hsqldb:.</property>
+        
+        <mapping resource="org/hibernate/envers/test/entities/Client.hbm.xml"/>
+        
 
         <!--<property name="dialect">org.hibernate.dialect.MySQL5InnoDBDialect</property>
         <property name="connection.url">jdbc:mysql:///hibernate_tests?useUnicode=true&amp;characterEncoding=UTF-8</property>
