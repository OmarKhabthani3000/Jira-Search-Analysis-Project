diff --git a/hibernate-core/src/main/java/org/hibernate/dialect/lock/PessimisticReadUpdateLockingStrategy.java b/hibernate-core/src/main/java/org/hibernate/dialect/lock/PessimisticReadUpdateLockingStrategy.java
index 18bb415..1c02809 100644
--- a/hibernate-core/src/main/java/org/hibernate/dialect/lock/PessimisticReadUpdateLockingStrategy.java
+++ b/hibernate-core/src/main/java/org/hibernate/dialect/lock/PessimisticReadUpdateLockingStrategy.java
@@ -23,24 +23,20 @@
  */
 package org.hibernate.dialect.lock;
 
-import java.io.Serializable;
-import java.sql.PreparedStatement;
-import java.sql.SQLException;
-
+import org.hibernate.*;
 import org.hibernate.engine.SessionFactoryImplementor;
 import org.hibernate.engine.SessionImplementor;
 import org.hibernate.exception.JDBCExceptionHelper;
 import org.hibernate.persister.entity.Lockable;
 import org.hibernate.pretty.MessageHelper;
 import org.hibernate.sql.Update;
-import org.hibernate.LockMode;
-import org.hibernate.HibernateException;
-import org.hibernate.StaleObjectStateException;
-import org.hibernate.JDBCException;
-import org.hibernate.PessimisticLockException;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import java.io.Serializable;
+import java.sql.PreparedStatement;
+import java.sql.SQLException;
+
 /**
  * A pessimistic locking strategy where the locks are obtained through update statements.
  * <p/>
@@ -109,7 +105,9 @@ public class PessimisticReadUpdateLockingStrategy implements LockingStrategy {
 
 				int affected = st.executeUpdate();
 				if ( affected < 0 ) {  // todo:  should this instead check for exactly one row modified?
-					factory.getStatisticsImplementor().optimisticFailure( lockable.getEntityName() );
+					if (factory.getStatistics().isStatisticsEnabled()) {
+						factory.getStatisticsImplementor().optimisticFailure( lockable.getEntityName() );
+					}
 					throw new StaleObjectStateException( lockable.getEntityName(), id );
 				}
 
diff --git a/hibernate-core/src/main/java/org/hibernate/dialect/lock/PessimisticWriteUpdateLockingStrategy.java b/hibernate-core/src/main/java/org/hibernate/dialect/lock/PessimisticWriteUpdateLockingStrategy.java
index ad90d56..038ddca 100644
--- a/hibernate-core/src/main/java/org/hibernate/dialect/lock/PessimisticWriteUpdateLockingStrategy.java
+++ b/hibernate-core/src/main/java/org/hibernate/dialect/lock/PessimisticWriteUpdateLockingStrategy.java
@@ -23,24 +23,20 @@
  */
 package org.hibernate.dialect.lock;
 
-import java.io.Serializable;
-import java.sql.PreparedStatement;
-import java.sql.SQLException;
-
+import org.hibernate.*;
 import org.hibernate.engine.SessionFactoryImplementor;
 import org.hibernate.engine.SessionImplementor;
 import org.hibernate.exception.JDBCExceptionHelper;
 import org.hibernate.persister.entity.Lockable;
 import org.hibernate.pretty.MessageHelper;
 import org.hibernate.sql.Update;
-import org.hibernate.LockMode;
-import org.hibernate.HibernateException;
-import org.hibernate.StaleObjectStateException;
-import org.hibernate.JDBCException;
-import org.hibernate.PessimisticLockException;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import java.io.Serializable;
+import java.sql.PreparedStatement;
+import java.sql.SQLException;
+
 /**
  * A pessimistic locking strategy where the locks are obtained through update statements.
  * <p/>
@@ -109,7 +105,9 @@ public class PessimisticWriteUpdateLockingStrategy implements LockingStrategy {
 
 				int affected = st.executeUpdate();
 				if ( affected < 0 ) {  // todo:  should this instead check for exactly one row modified?
-					factory.getStatisticsImplementor().optimisticFailure( lockable.getEntityName() );
+					if (factory.getStatistics().isStatisticsEnabled()) {
+						factory.getStatisticsImplementor().optimisticFailure( lockable.getEntityName() );
+					}
 					throw new StaleObjectStateException( lockable.getEntityName(), id );
 				}
 
diff --git a/hibernate-core/src/main/java/org/hibernate/dialect/lock/UpdateLockingStrategy.java b/hibernate-core/src/main/java/org/hibernate/dialect/lock/UpdateLockingStrategy.java
index 9f2e850..12058fa 100644
--- a/hibernate-core/src/main/java/org/hibernate/dialect/lock/UpdateLockingStrategy.java
+++ b/hibernate-core/src/main/java/org/hibernate/dialect/lock/UpdateLockingStrategy.java
@@ -23,10 +23,6 @@
  */
 package org.hibernate.dialect.lock;
 
-import java.io.Serializable;
-import java.sql.PreparedStatement;
-import java.sql.SQLException;
-
 import org.hibernate.HibernateException;
 import org.hibernate.JDBCException;
 import org.hibernate.LockMode;
@@ -40,6 +36,10 @@ import org.hibernate.sql.Update;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import java.io.Serializable;
+import java.sql.PreparedStatement;
+import java.sql.SQLException;
+
 /**
  * A locking strategy where the locks are obtained through update statements.
  * <p/>
@@ -107,7 +107,9 @@ public class UpdateLockingStrategy implements LockingStrategy {
 
 				int affected = st.executeUpdate();
 				if ( affected < 0 ) {
-					factory.getStatisticsImplementor().optimisticFailure( lockable.getEntityName() );
+					if (factory.getStatistics().isStatisticsEnabled()) {
+						factory.getStatisticsImplementor().optimisticFailure( lockable.getEntityName() );
+					}
 					throw new StaleObjectStateException( lockable.getEntityName(), id );
 				}
 
diff --git a/hibernate-core/src/main/java/org/hibernate/engine/loading/CollectionLoadContext.java b/hibernate-core/src/main/java/org/hibernate/engine/loading/CollectionLoadContext.java
index 7ba144c..6350f84 100644
--- a/hibernate-core/src/main/java/org/hibernate/engine/loading/CollectionLoadContext.java
+++ b/hibernate-core/src/main/java/org/hibernate/engine/loading/CollectionLoadContext.java
@@ -24,30 +24,21 @@
  */
 package org.hibernate.engine.loading;
 
-import java.sql.ResultSet;
-import java.io.Serializable;
-import java.util.List;
-import java.util.Iterator;
-import java.util.ArrayList;
-import java.util.Set;
-import java.util.HashSet;
-
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
+import org.hibernate.CacheMode;
+import org.hibernate.EntityMode;
 import org.hibernate.HibernateException;
+import org.hibernate.cache.CacheKey;
+import org.hibernate.cache.entry.CollectionCacheEntry;
 import org.hibernate.collection.PersistentCollection;
+import org.hibernate.engine.*;
 import org.hibernate.persister.collection.CollectionPersister;
-import org.hibernate.EntityMode;
-import org.hibernate.CacheMode;
-import org.hibernate.cache.entry.CollectionCacheEntry;
-import org.hibernate.cache.CacheKey;
 import org.hibernate.pretty.MessageHelper;
-import org.hibernate.engine.CollectionKey;
-import org.hibernate.engine.Status;
-import org.hibernate.engine.SessionImplementor;
-import org.hibernate.engine.CollectionEntry;
-import org.hibernate.engine.SessionFactoryImplementor;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.io.Serializable;
+import java.sql.ResultSet;
+import java.util.*;
 
 /**
  * Represents state associated with the processing of a given {@link ResultSet}
