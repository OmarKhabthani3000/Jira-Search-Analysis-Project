Index: U:/workspaces/atn-Standart/Hibernate Core/test/org/hibernate/test/cascade/CascadeSuite.java
===================================================================
--- U:/workspaces/atn-Standart/Hibernate Core/test/org/hibernate/test/cascade/CascadeSuite.java	(revision 14771)
+++ U:/workspaces/atn-Standart/Hibernate Core/test/org/hibernate/test/cascade/CascadeSuite.java	(working copy)
@@ -1,5 +1,7 @@
 package org.hibernate.test.cascade;
 
+import org.hibernate.test.cascade.circle.HHH3046Test;
+
 import junit.framework.Test;
 import junit.framework.TestSuite;
 
@@ -13,6 +15,7 @@
 		suite.addTest( BidirectionalOneToManyCascadeTest.suite() );
 		suite.addTest( RefreshTest.suite() );
 		suite.addTest( MultiPathCascadeTest.suite() );
+		suite.addTest( HHH3046Test.suite() );
 		return suite;
 	}
 }
Index: U:/workspaces/atn-Standart/Hibernate Core/test/org/hibernate/test/cascade/circle/HHH3046.hbm.xml
===================================================================
--- U:/workspaces/atn-Standart/Hibernate Core/test/org/hibernate/test/cascade/circle/HHH3046.hbm.xml	(revision 0)
+++ U:/workspaces/atn-Standart/Hibernate Core/test/org/hibernate/test/cascade/circle/HHH3046.hbm.xml	(revision 0)
@@ -0,0 +1,161 @@
+<?xml version="1.0"?>
+<!DOCTYPE hibernate-mapping SYSTEM "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd" >
+
+<hibernate-mapping package="org.hibernate.test.cascade.circle">
+
+    <class name="Route" table="HB_Route">
+
+        <id name="routeID" type="long"><generator class="native"/></id>
+
+        <property name="name" type="string" not-null="true"/>
+
+        <!--
+            Associations
+            
+			@OneToMany(targetEntity=Node.class, fetch=FetchType.EAGER, cascade=CascadeType.ALL, mappedBy="route")
+			nodeList
+        -->
+        <list name="nodeList" inverse="true" cascade="all">
+            <key column="route_fk"/>
+            <index column="nodeID"></index>
+            <one-to-many class="Node"/>
+        </list>
+    </class>
+
+   <class name="Tour" table="HB_Tour">
+
+        <id name="tourID" type="long"><generator class="native"/></id>
+
+        <property name="name" type="string" not-null="true"/>
+
+        <!--
+            Associations
+            
+			@OneToMany(targetEntity=Node.class, fetch=FetchType.LAZY, cascade={CascadeType.MERGE, CascadeType.REFRESH}, mappedBy="tour")
+			nodeList
+        -->
+        <list name="node" inverse="true" lazy="true" cascade="merge,refresh">
+            <key column="tour_fk"/>
+            <index column="nodeID"></index>
+            <one-to-many class="Node"/>
+        </list>
+    </class>
+    
+    <class name="Transport" table="HB_Transport">
+
+        <id name="transportID" type="long"><generator class="native"/></id>
+
+        <property name="name" type="string" not-null="true"/>
+
+        <!--
+            Associations
+            
+			//@ManyToOne(optional=false, cascade={CascadeType.MERGE, CascadeType.PERSIST, CascadeType.REFRESH}, fetch=FetchType.EAGER)
+			//@JoinColumn(name="PICKUPNODEID", /*nullable=false,*/insertable=true, updatable=true)
+			pickupNode
+			
+			@ManyToOne(optional=false, cascade={CascadeType.MERGE, CascadeType.PERSIST, CascadeType.REFRESH}, fetch=FetchType.EAGER)
+			@JoinColumn(name="DELIVERYNODEID", /*nullable=false,*/ insertable=true, updatable=true)
+			deliveryNode
+        -->
+        <many-to-one name="pickupNode"
+            column="pickupNodeID"
+            unique="true"
+            not-null="true"
+            cascade="merge,persist,refresh"
+            lazy="false"/> 
+
+        <many-to-one name="deliveryNode"
+            column="deliveryNodeID"
+            unique="true"
+            not-null="true"
+            cascade="merge,persist,refresh"
+            lazy="false"/> 
+    </class>
+    
+    <class name="Node" table="HB_Node">
+
+        <id name="nodeID" type="long"><generator class="native"/></id>
+
+        <property name="name" type="string" not-null="true"/>
+
+        <!--
+            Associations
+            
+			//@OneToMany(fetch=FetchType.LAZY, cascade={CascadeType.MERGE, CascadeType.REFRESH}, mappedBy="deliveryNode")
+			deliveryTransport
+			
+			//@OneToMany(fetch=FetchType.LAZY, cascade=CascadeType.ALL, mappedBy="pickupNode")
+			pickupTransport
+
+			//@ManyToOne(targetEntity=Route.class, optional=false, fetch=FetchType.EAGER)
+			//@JoinColumn(name="ROUTEID", nullable=false, insertable=true, updatable=true)
+			route
+			
+			//@ManyToOne(targetEntity=Tour.class, cascade={CascadeType.MERGE, CascadeType.PERSIST, CascadeType.REFRESH}, optional=true, fetch=FetchType.LAZY)
+			//@JoinColumn(name="TOURID", nullable=true, insertable=true, updatable=true)
+			
+        -->
+        <list name="deliveryTransport" inverse="true" lazy="true" cascade="merge,refresh">
+            <key column="node_fk"/>
+            <index column="transportID"></index>
+            <one-to-many class="Transport"/>
+        </list>
+
+        <list name="pickupTransport" inverse="true" lazy="true" cascade="all">
+            <key column="node_fk"/>
+            <index column="transportID"></index>
+            <one-to-many class="Transport"/>
+        </list>
+                
+        <many-to-one name="route"
+            column="routeID"
+            unique="false"
+            not-null="true"
+            cascade=""
+            lazy="false"/> 
+
+        <many-to-one name="tour"
+            column="tourID"
+            unique="false"
+            not-null="false"
+            cascade="merge,persist,refresh"
+            lazy="false"/> 
+    </class>
+    
+    <!-- 
+        <class name="G" table="HB_G">
+
+        <id name="id" type="long"><generator class="native"/></id>
+
+        <property name="data" type="string" not-null="true"/>
+
+        <set name="hs" inverse="true" table="HB_G_H" cascade="all">
+            <key column="g_fk"/>
+            <many-to-many class="H" column="h_fk"/>
+        </set>
+
+        <many-to-one name="a"
+            column="aId"
+            unique="true"
+            not-null="false"/>
+
+    </class>
+
+    <class name="H" table="HB_H">
+
+        <id name="id" type="long"><generator class="native"/></id>
+
+        <property name="data" type="string" not-null="true"/>
+
+        <set name="gs" table="HB_G_H">
+            <key column="h_fk"/>
+            <many-to-many class="G" column="g_fk"/>
+        </set>
+
+        <many-to-one name="a" column="a_fk" class="A"/>
+
+    </class> -->
+
+
+</hibernate-mapping>
\ No newline at end of file
Index: U:/workspaces/atn-Standart/Hibernate Core/test/org/hibernate/test/cascade/circle/HHH3046Test.java
===================================================================
--- U:/workspaces/atn-Standart/Hibernate Core/test/org/hibernate/test/cascade/circle/HHH3046Test.java	(revision 0)
+++ U:/workspaces/atn-Standart/Hibernate Core/test/org/hibernate/test/cascade/circle/HHH3046Test.java	(revision 0)
@@ -0,0 +1,136 @@
+package org.hibernate.test.cascade.circle;
+
+import junit.framework.Test;
+
+import org.hibernate.Session;
+import org.hibernate.junit.functional.FunctionalTestCase;
+import org.hibernate.junit.functional.FunctionalTestClassTestSuite;
+
+/**
+ * See http://opensource.atlassian.com/projects/hibernate/browse/HHH-3046
+ * 
+ * @author pavol.zibrita
+ */
+public class HHH3046Test extends FunctionalTestCase {
+
+	public HHH3046Test(String string) {
+		super(string);
+	}
+
+	public String[] getMappings() {
+		return new String[] {
+				"cascade/circle/HHH3046.hbm.xml"
+		};
+	}
+	
+	public static Test suite() {
+		return new FunctionalTestClassTestSuite( HHH3046Test.class );
+	}
+	
+	protected void cleanupTest() {
+		Session s = openSession();
+		s.beginTransaction();
+		s.createQuery( "delete from Transport" );
+		s.createQuery( "delete from Tour" );
+		s.createQuery( "delete from Node" );
+		s.createQuery( "delete from Route" );
+	}
+	
+	private Node pickupNode;
+	
+	private Node deliveryNode;
+	
+	private Tour tour;
+	
+	private Transport transport;
+	
+
+	private void createObjects(Route route)
+	{
+		tour = new Tour();
+		tour.setName("tourB");
+		
+		transport = new Transport();
+		transport.setName("transportB");
+		
+		pickupNode = new Node();
+		pickupNode.setName("pickupNodeB");
+
+		deliveryNode = new Node();
+		deliveryNode.setName("deliveryNodeB");
+	}
+	
+	private void setRelations(Route route)
+	{
+		pickupNode.setRoute(route);
+		pickupNode.setTour(tour);
+		pickupNode.getPickupTransport().add(transport);
+		
+		deliveryNode.setRoute(route);
+		deliveryNode.setTour(tour);
+		deliveryNode.getDeliveryTransport().add(transport);
+		
+		tour.getNode().add(pickupNode);
+		tour.getNode().add(deliveryNode);
+		
+		route.getNode().add(pickupNode);
+		route.getNode().add(deliveryNode);
+		
+		transport.setPickupNode(pickupNode);
+		transport.setDeliveryNode(deliveryNode);
+	}
+	
+	private void saveData() {
+		Session s = openSession();
+		s.beginTransaction();
+
+		Route route = new Route();
+		route.setName("routeA");
+		
+		s.save( route );
+		s.getTransaction().commit();
+		s.close();
+	}
+	
+	void mergeData()
+	{
+		Session s = openSession();
+		s.beginTransaction();
+		
+		Route route = (Route) s.get(Route.class, new Long(1));
+		//System.out.println(route);
+		
+		route.setTransientField(new String("sfnaouisrbn"));
+		
+		createObjects(route);
+		
+		transport.setTransientField("aaaaaaaaaaaaaa");
+		pickupNode.setTransientField("pickup node aaaaaaaaaaa");
+		deliveryNode.setTransientField("delivery node aaaaaaaaa");
+		
+		setRelations(route);
+		
+		System.out.println(route);
+		
+		Route routeEntity = (Route) s.merge(route);
+		System.out.println("--------------------------------------");
+		System.out.println(routeEntity);
+		System.out.println(((Transport) ((Node) routeEntity.getNode().get(0)).getPickupTransport().get(0)).getTransientField());
+		System.out.println(((Node) routeEntity.getNode().get(0)).getTransientField());
+		System.out.println(((Node) routeEntity.getNode().get(1)).getTransientField());
+		System.out.println("--------------------------------------");
+
+		s.getTransaction().commit();
+		s.close();
+	}
+	
+	
+	/**
+	 * THE test method 
+	 */
+	public void testBug_HHH3046()
+	{
+		saveData();	
+		mergeData();
+	}
+}
Index: U:/workspaces/atn-Standart/Hibernate Core/test/org/hibernate/test/cascade/circle/Node.java
===================================================================
--- U:/workspaces/atn-Standart/Hibernate Core/test/org/hibernate/test/cascade/circle/Node.java	(revision 0)
+++ U:/workspaces/atn-Standart/Hibernate Core/test/org/hibernate/test/cascade/circle/Node.java	(revision 0)
@@ -0,0 +1,109 @@
+package org.hibernate.test.cascade.circle;
+
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
+
+public class Node {
+
+//	@Id
+//	@SequenceGenerator(name="NODE_SEQ", sequenceName="NODE_SEQ", initialValue=1, allocationSize=1)
+//	@GeneratedValue(strategy=GenerationType.SEQUENCE, generator="NODE_SEQ")
+	private Long nodeID;
+	
+	private String name;
+	
+	/** the list of orders that are delivered at this node */
+//	@OneToMany(fetch=FetchType.LAZY, cascade={CascadeType.MERGE, CascadeType.REFRESH}, mappedBy="deliveryNode")
+	private List deliveryTransport = new ArrayList();
+	
+	/** the list of orders that are picked up at this node */
+//	@OneToMany(fetch=FetchType.LAZY, cascade=CascadeType.ALL, mappedBy="pickupNode")
+	private List pickupTransport = new ArrayList();
+	
+	/** the route to which this node belongs */
+//	@ManyToOne(targetEntity=Route.class, optional=false, fetch=FetchType.EAGER)
+//	@JoinColumn(name="ROUTEID", nullable=false, insertable=true, updatable=true)
+	private Route route = null;
+	
+	/** the tour this node belongs to, null if this node does not belong to a tour (e.g first node of a route) */
+//	@ManyToOne(targetEntity=Tour.class, cascade={CascadeType.MERGE, CascadeType.PERSIST, CascadeType.REFRESH}, optional=true, fetch=FetchType.LAZY)
+//	@JoinColumn(name="TOURID", nullable=true, insertable=true, updatable=true)
+	private Tour tour;
+	
+//	@Transient
+	private String transientField = "node original value";
+
+	public List getDeliveryTransport() {
+		return deliveryTransport;
+	}
+
+	public void setDeliveryTransport(List deliveryTransport) {
+		this.deliveryTransport = deliveryTransport;
+	}
+
+	public List getPickupTransport() {
+		return pickupTransport;
+	}
+
+	public void setPickupTransport(List pickupTransport) {
+		this.pickupTransport = pickupTransport;
+	}
+
+	public Long getNodeID() {
+		return nodeID;
+	}
+
+	public String getName() {
+		return name;
+	}
+
+	public void setName(String name) {
+		this.name = name;
+	}
+
+	public Route getRoute() {
+		return route;
+	}
+
+	public void setRoute(Route route) {
+		this.route = route;
+	}
+
+	public Tour getTour() {
+		return tour;
+	}
+	
+	public void setTour(Tour tour) {
+		this.tour = tour;
+	}
+	
+	public String toString()
+	{
+		StringBuffer buffer = new StringBuffer();
+		
+		buffer.append(name + " id: " + nodeID + " route name: " + route.getName() + " tour name: " + tour.getName() + "\n");
+		for (Iterator it = pickupTransport.iterator(); it.hasNext();) {
+			buffer.append("Pickup transport: " + it.next());
+		}
+		
+		for (Iterator it = deliveryTransport.iterator(); it.hasNext();) {
+			buffer.append("Delviery transport: " + it.next());
+		}
+		
+		return buffer.toString();
+	}
+
+	public String getTransientField() {
+		return transientField;
+	}
+
+	public void setTransientField(String transientField) {
+		this.transientField = transientField;
+	}
+
+	protected void setNodeID(Long nodeID) {
+		this.nodeID = nodeID;
+	}
+
+}
Index: U:/workspaces/atn-Standart/Hibernate Core/test/org/hibernate/test/cascade/circle/Route.java
===================================================================
--- U:/workspaces/atn-Standart/Hibernate Core/test/org/hibernate/test/cascade/circle/Route.java	(revision 0)
+++ U:/workspaces/atn-Standart/Hibernate Core/test/org/hibernate/test/cascade/circle/Route.java	(revision 0)
@@ -0,0 +1,75 @@
+package org.hibernate.test.cascade.circle;
+
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
+
+
+public class Route {
+	
+//	@Id
+//	@SequenceGenerator(name="ROUTE_SEQ", sequenceName="ROUTE_SEQ", initialValue=1, allocationSize=1)
+//	@GeneratedValue(strategy=GenerationType.SEQUENCE, generator="ROUTE_SEQ")
+	private Long routeID;
+	
+	/** A List of nodes contained in this route. */
+//	@OneToMany(targetEntity=Node.class, fetch=FetchType.EAGER, cascade=CascadeType.ALL, mappedBy="route")
+	private List nodeList = new ArrayList();
+	
+	private String name;
+	
+//	@Transient
+	private String transientField = null;
+
+	public String getName() {
+		return name;
+	}
+
+	public void setName(String name) {
+		this.name = name;
+	}
+
+	protected List getNodeList() {
+		return nodeList;
+	}
+
+	protected void setNodeList(List nodeList) {
+		this.nodeList = nodeList;
+	}
+
+	protected void setRouteID(Long routeID) {
+		this.routeID = routeID;
+	}
+
+	public List getNode() {
+		return nodeList;
+	}
+
+	public void setNode(List node) {
+		this.nodeList = node;
+	}
+
+	public Long getRouteID() {
+		return routeID;
+	}
+	
+	public String toString()
+	{
+		StringBuffer buffer = new StringBuffer();
+		
+		buffer.append("Route name: " + name + " id: " + routeID + " transientField: " + transientField + "\n");
+		for (Iterator it = nodeList.iterator(); it.hasNext();) {
+			buffer.append("Node: " + (Node)it.next());
+		}
+		
+		return buffer.toString();
+	}
+
+	public String getTransientField() {
+		return transientField;
+	}
+
+	public void setTransientField(String transientField) {
+		this.transientField = transientField;
+	}
+}
Index: U:/workspaces/atn-Standart/Hibernate Core/test/org/hibernate/test/cascade/circle/Tour.java
===================================================================
--- U:/workspaces/atn-Standart/Hibernate Core/test/org/hibernate/test/cascade/circle/Tour.java	(revision 0)
+++ U:/workspaces/atn-Standart/Hibernate Core/test/org/hibernate/test/cascade/circle/Tour.java	(revision 0)
@@ -0,0 +1,43 @@
+package org.hibernate.test.cascade.circle;
+
+import java.util.ArrayList;
+import java.util.List;
+
+
+public class Tour {
+	
+//	@Id
+//	@SequenceGenerator(name="TOUR_SEQ", sequenceName="TOUR_SEQ", initialValue=1, allocationSize=1)
+//	@GeneratedValue(strategy=GenerationType.SEQUENCE, generator="TOUR_SEQ")
+	private Long tourID;
+	
+	private String name;
+
+	/** A List of nodes contained in this tour. */
+//	@OneToMany(targetEntity=Node.class, fetch=FetchType.LAZY, cascade={CascadeType.MERGE, CascadeType.REFRESH}, mappedBy="tour")
+	private List node = new ArrayList(0);
+
+	public String getName() {
+		return name;
+	}
+
+	protected void setTourID(Long tourID) {
+		this.tourID = tourID;
+	}
+
+	public void setName(String name) {
+		this.name = name;
+	}
+
+	public List getNode() {
+		return node;
+	}
+
+	public void setNode(List node) {
+		this.node = node;
+	}
+
+	public Long getTourID() {
+		return tourID;
+	}
+}
Index: U:/workspaces/atn-Standart/Hibernate Core/test/org/hibernate/test/cascade/circle/Transport.java
===================================================================
--- U:/workspaces/atn-Standart/Hibernate Core/test/org/hibernate/test/cascade/circle/Transport.java	(revision 0)
+++ U:/workspaces/atn-Standart/Hibernate Core/test/org/hibernate/test/cascade/circle/Transport.java	(revision 0)
@@ -0,0 +1,74 @@
+package org.hibernate.test.cascade.circle;
+
+
+public class Transport {
+	
+//	@Id
+//	@SequenceGenerator(name="TRANSPORT_SEQ", sequenceName="TRANSPORT_SEQ", initialValue=1, allocationSize=1)
+//	@GeneratedValue(strategy=GenerationType.SEQUENCE, generator="TRANSPORT_SEQ")
+	private Long transportID;
+	
+	private String name;
+	
+	/** node value object at which the order is picked up */
+//	@ManyToOne(optional=false, cascade={CascadeType.MERGE, CascadeType.PERSIST, CascadeType.REFRESH}, fetch=FetchType.EAGER)
+//	@JoinColumn(name="PICKUPNODEID", /*nullable=false,*/insertable=true, updatable=true)
+	private Node pickupNode = null;
+
+	/** node value object at which the order is delivered */
+//	@ManyToOne(optional=false, cascade={CascadeType.MERGE, CascadeType.PERSIST, CascadeType.REFRESH}, fetch=FetchType.EAGER)
+//	@JoinColumn(name="DELIVERYNODEID", /*nullable=false,*/ insertable=true, updatable=true)
+	private Node deliveryNode = null;
+	
+//	@Transient
+	private String transientField = "transport original value";
+
+	public Node getDeliveryNode() {
+		return deliveryNode;
+	}
+
+	public void setDeliveryNode(Node deliveryNode) {
+		this.deliveryNode = deliveryNode;
+	}
+
+	public Node getPickupNode() {
+		return pickupNode;
+	}
+
+	protected void setTransportID(Long transportID) {
+		this.transportID = transportID;
+	}
+
+	public void setPickupNode(Node pickupNode) {
+		this.pickupNode = pickupNode;
+	}
+
+	public Long getTransportID() {
+		return transportID;
+	}
+
+	public String getName() {
+		return name;
+	}
+
+	public void setName(String name) {
+		this.name = name;
+	}
+	
+	public String toString()
+	{
+		StringBuffer buffer = new StringBuffer();
+		
+		buffer.append(name + " id: " + transportID + "\n");
+		
+		return buffer.toString();
+	}
+
+	public String getTransientField() {
+		return transientField;
+	}
+
+	public void setTransientField(String transientField) {
+		this.transientField = transientField;
+	}
+}
