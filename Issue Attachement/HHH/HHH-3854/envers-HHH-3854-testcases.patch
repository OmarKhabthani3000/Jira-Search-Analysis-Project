Index: src/test/java/org/hibernate/envers/test/entities/ontoone/BidirectionalEagerAnnotationRefEdOneToOne.java
===================================================================
--- src/test/java/org/hibernate/envers/test/entities/ontoone/BidirectionalEagerAnnotationRefEdOneToOne.java	(revision 0)
+++ src/test/java/org/hibernate/envers/test/entities/ontoone/BidirectionalEagerAnnotationRefEdOneToOne.java	(revision 0)
@@ -0,0 +1,73 @@
+package org.hibernate.envers.test.entities.ontoone;
+
+import javax.persistence.Entity;
+import javax.persistence.FetchType;
+import javax.persistence.GeneratedValue;
+import javax.persistence.Id;
+import javax.persistence.OneToOne;
+
+import org.hibernate.envers.NotAudited;
+
+@Entity
+@org.hibernate.envers.Audited
+public final class BidirectionalEagerAnnotationRefEdOneToOne {
+
+	/**
+	 * ID column.
+	 */
+	@Id
+	@GeneratedValue
+	private Integer id;
+
+	/**
+	 * Field containting the referring entity.
+	 */
+	@OneToOne(mappedBy = "refedOne", fetch = FetchType.EAGER)
+	@NotAudited
+	private BidirectionalEagerAnnotationRefIngOneToOne refIng;
+
+	/**
+	 * Field containing some data.
+	 */
+	private String data;
+
+	/* ----- Getters and setters ----- */
+
+	/**
+	 * @return the id
+	 */
+	public Integer getId() {
+		return id;
+	}
+
+	/**
+	 * @return the refIng
+	 */
+	public BidirectionalEagerAnnotationRefIngOneToOne getRefIng() {
+		return refIng;
+	}
+
+	/**
+	 * @param refIng
+	 *            the refIng to set
+	 */
+	public void setRefIng(BidirectionalEagerAnnotationRefIngOneToOne refIng) {
+		this.refIng = refIng;
+	}
+
+	/**
+	 * @return the data
+	 */
+	public String getData() {
+		return data;
+	}
+
+	/**
+	 * @param data
+	 *            the data to set
+	 */
+	public void setData(String data) {
+		this.data = data;
+	}
+
+}
Index: src/test/java/org/hibernate/envers/test/entities/ontoone/BidirectionalEagerAnnotationRefIngOneToOne.java
===================================================================
--- src/test/java/org/hibernate/envers/test/entities/ontoone/BidirectionalEagerAnnotationRefIngOneToOne.java	(revision 0)
+++ src/test/java/org/hibernate/envers/test/entities/ontoone/BidirectionalEagerAnnotationRefIngOneToOne.java	(revision 0)
@@ -0,0 +1,95 @@
+package org.hibernate.envers.test.entities.ontoone;
+
+import javax.persistence.CascadeType;
+import javax.persistence.Entity;
+import javax.persistence.FetchType;
+import javax.persistence.GeneratedValue;
+import javax.persistence.Id;
+import javax.persistence.JoinColumn;
+import javax.persistence.OneToOne;
+
+@Entity
+@org.hibernate.envers.Audited
+public final class BidirectionalEagerAnnotationRefIngOneToOne {
+
+	/**
+	 * ID column.
+	 */
+	@Id
+	@GeneratedValue
+	private Integer id;
+
+	/**
+	 * Field with an optional first referred entity.
+	 */
+	@OneToOne(fetch = FetchType.EAGER, cascade = CascadeType.ALL, optional = true)
+	@JoinColumn(name = "REF_ID_ONE")
+	private BidirectionalEagerAnnotationRefEdOneToOne refedOne = null;
+
+	/**
+	 * Field with an optional second referred entity.
+	 */
+	@OneToOne(fetch = FetchType.EAGER, cascade = CascadeType.ALL, optional = true)
+	@JoinColumn(name = "REF_ID_TWO")
+	private BidirectionalEagerAnnotationRefEdOneToOne refedTwo = null;
+
+	/**
+	 * Field containing some data.
+	 */
+	private String data;
+
+	/* ----- Getters and setters ----- */
+
+	/**
+	 * @return the id
+	 */
+	public Integer getId() {
+		return id;
+	}
+
+	/**
+	 * @return the refedOne
+	 */
+	public BidirectionalEagerAnnotationRefEdOneToOne getRefedOne() {
+		return refedOne;
+	}
+
+	/**
+	 * @param refedOne
+	 *            the refedOne to set
+	 */
+	public void setRefedOne(BidirectionalEagerAnnotationRefEdOneToOne refedOne) {
+		this.refedOne = refedOne;
+	}
+
+	/**
+	 * @return the refedTwo
+	 */
+	public BidirectionalEagerAnnotationRefEdOneToOne getRefedTwo() {
+		return refedTwo;
+	}
+
+	/**
+	 * @param refedTwo
+	 *            the refedTwo to set
+	 */
+	public void setRefedTwo(BidirectionalEagerAnnotationRefEdOneToOne refedTwo) {
+		this.refedTwo = refedTwo;
+	}
+
+	/**
+	 * @return the data
+	 */
+	public String getData() {
+		return data;
+	}
+
+	/**
+	 * @param data
+	 *            the data to set
+	 */
+	public void setData(String data) {
+		this.data = data;
+	}
+
+}
Index: src/test/java/org/hibernate/envers/test/entities/ontoone/BidirectionalEagerHbmRefEdPK.java
===================================================================
--- src/test/java/org/hibernate/envers/test/entities/ontoone/BidirectionalEagerHbmRefEdPK.java	(revision 0)
+++ src/test/java/org/hibernate/envers/test/entities/ontoone/BidirectionalEagerHbmRefEdPK.java	(revision 0)
@@ -0,0 +1,74 @@
+package org.hibernate.envers.test.entities.ontoone;
+
+import org.hibernate.envers.Audited;
+
+/**
+ * <b>BidirectionalRefEdPK</b>
+ * <p>
+ *
+ * @author Quartet Financial Systems
+ * @see
+ */
+@Audited
+public class BidirectionalEagerHbmRefEdPK {
+    private long longId;
+    private String data;
+    private BidirectionalEagerHbmRefIngPK referencing;
+
+    public BidirectionalEagerHbmRefEdPK() {}
+
+    public BidirectionalEagerHbmRefEdPK(long id, String data) {
+        this.data = data;
+    }
+
+    public BidirectionalEagerHbmRefEdPK(long id, String data, BidirectionalEagerHbmRefIngPK referencing) {
+        this.data = data;
+        this.referencing = referencing;
+    }
+
+    public long getLongId() {
+        return longId;
+    }
+
+    public void setLongId(Long id) {
+        this.longId = id;
+    }
+
+    public String getData() {
+        return data;
+    }
+
+    public void setData(String data) {
+        this.data = data;
+    }
+
+    public BidirectionalEagerHbmRefIngPK getReferencing() {
+        return referencing;
+    }
+
+    public void setReferencing(BidirectionalEagerHbmRefIngPK referencing) {
+        this.referencing = referencing;
+    }
+
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (!(o instanceof BidirectionalEagerHbmRefEdPK)) return false;
+
+        BidirectionalEagerHbmRefEdPK that = (BidirectionalEagerHbmRefEdPK) o;
+
+        if (data != null ? !data.equals(that.data) : that.data != null) return false;
+        Long longId = new Long(this.longId);
+        Long thatLongId = new Long(that.longId);
+        if (longId != null ? !longId.equals(that.longId) : thatLongId != null) return false;
+
+        return true;
+    }
+
+    public int hashCode() {
+        int result;
+        Long longId = new Long(this.longId);
+        result = (longId != null ? longId.hashCode() : 0);
+        result = 31 * result + (data != null ? data.hashCode() : 0);
+        return result;
+    }
+}
Index: src/test/java/org/hibernate/envers/test/entities/ontoone/BidirectionalEagerHbmRefIngPK.java
===================================================================
--- src/test/java/org/hibernate/envers/test/entities/ontoone/BidirectionalEagerHbmRefIngPK.java	(revision 0)
+++ src/test/java/org/hibernate/envers/test/entities/ontoone/BidirectionalEagerHbmRefIngPK.java	(revision 0)
@@ -0,0 +1,67 @@
+package org.hibernate.envers.test.entities.ontoone;
+
+import org.hibernate.envers.Audited;
+
+@Audited
+public class BidirectionalEagerHbmRefIngPK {
+    private long id;
+    private String data;
+    private BidirectionalEagerHbmRefEdPK reference;
+
+    public BidirectionalEagerHbmRefIngPK() {}
+
+    public BidirectionalEagerHbmRefIngPK(long id, String data) {
+        this.data = data;
+    }
+
+    public BidirectionalEagerHbmRefIngPK(long id, String data, BidirectionalEagerHbmRefEdPK reference) {
+        this.data = data;
+        this.reference = reference;
+    }
+
+    public long getId() {
+        return id;
+    }
+
+    public void setId(long id) {
+        this.id = id;
+    }
+
+    public String getData() {
+        return data;
+    }
+
+    public void setData(String data) {
+        this.data = data;
+    }
+
+    public BidirectionalEagerHbmRefEdPK getReference() {
+        return reference;
+    }
+
+    public void setReference(BidirectionalEagerHbmRefEdPK reference) {
+        this.reference = reference;
+    }
+
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (!(o instanceof BidirectionalEagerHbmRefIngPK)) return false;
+
+        BidirectionalEagerHbmRefIngPK that = (BidirectionalEagerHbmRefIngPK) o;
+
+        if (data != null ? !data.equals(that.data) : that.data != null) return false;
+        Long id = new Long(this.id);
+        Long thatId = new Long(that.id);
+        if (id != null ? !id.equals(that.id) : thatId != null) return false;
+
+        return true;
+    }
+
+    public int hashCode() {
+        int result;
+        Long id = new Long(this.id);
+        result = (id != null ? id.hashCode() : 0);
+        result = 31 * result + (data != null ? data.hashCode() : 0);
+        return result;
+    }
+}
Index: src/test/java/org/hibernate/envers/test/integration/onetoone/bidirectional/BidirectionalEagerAnnotationTest.java
===================================================================
--- src/test/java/org/hibernate/envers/test/integration/onetoone/bidirectional/BidirectionalEagerAnnotationTest.java	(revision 0)
+++ src/test/java/org/hibernate/envers/test/integration/onetoone/bidirectional/BidirectionalEagerAnnotationTest.java	(revision 0)
@@ -0,0 +1,81 @@
+/*
+ * Hibernate, Relational Persistence for Idiomatic Java
+ *
+ * Copyright (c) 2008, Red Hat Middleware LLC or third-party contributors as
+ * indicated by the @author tags or express copyright attribution
+ * statements applied by the authors.  All third-party contributions are
+ * distributed under license by Red Hat Middleware LLC.
+ *
+ * This copyrighted material is made available to anyone wishing to use, modify,
+ * copy, or redistribute it subject to the terms and conditions of the GNU
+ * Lesser General Public License, as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
+ * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
+ * for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with this distribution; if not, write to:
+ * Free Software Foundation, Inc.
+ * 51 Franklin Street, Fifth Floor
+ * Boston, MA  02110-1301  USA
+ */
+package org.hibernate.envers.test.integration.onetoone.bidirectional;
+
+import javax.persistence.EntityManager;
+
+import org.hibernate.ejb.Ejb3Configuration;
+import org.hibernate.envers.test.AbstractEntityTest;
+import org.hibernate.envers.test.entities.ontoone.BidirectionalEagerAnnotationRefEdOneToOne;
+import org.hibernate.envers.test.entities.ontoone.BidirectionalEagerAnnotationRefIngOneToOne;
+import org.testng.annotations.BeforeClass;
+import org.testng.annotations.Test;
+
+/**
+ * @author Erik-Berndt Scheper
+ */
+public class BidirectionalEagerAnnotationTest extends AbstractEntityTest {
+	private Integer refedId1;
+
+	public void configure(Ejb3Configuration cfg) {
+		cfg.addAnnotatedClass(BidirectionalEagerAnnotationRefEdOneToOne.class);
+		cfg.addAnnotatedClass(BidirectionalEagerAnnotationRefIngOneToOne.class);
+	}
+
+	@BeforeClass(dependsOnMethods = "init")
+	public void initData() {
+		BidirectionalEagerAnnotationRefEdOneToOne ed1 = new BidirectionalEagerAnnotationRefEdOneToOne();
+		BidirectionalEagerAnnotationRefIngOneToOne ing1 = new BidirectionalEagerAnnotationRefIngOneToOne();
+		ed1.setData("referredEntity1");
+		ed1.setRefIng(ing1);
+		ing1.setData("referringEntity");
+		ing1.setRefedOne(ed1);
+
+		// Revision 1
+		EntityManager em = getEntityManager();
+		em.getTransaction().begin();
+
+		em.persist(ed1);
+		em.persist(ing1);
+		em.getTransaction().commit();
+
+		// Revision 2
+		em.getTransaction().begin();
+
+		ing1 = em.find(BidirectionalEagerAnnotationRefIngOneToOne.class, ing1
+				.getId());
+		em.getTransaction().commit();
+
+		refedId1 = ed1.getId();
+	}
+
+	@Test
+	public void testRevisionsCounts() {
+		BidirectionalEagerAnnotationRefIngOneToOne referencing = getAuditReader()
+				.find(BidirectionalEagerAnnotationRefIngOneToOne.class,
+						refedId1, 1);
+		assert referencing.getRefedOne().getData() != null;
+	}
+
+}
\ No newline at end of file
Index: src/test/java/org/hibernate/envers/test/integration/onetoone/bidirectional/BidirectionalEagerHbmTest.java
===================================================================
--- src/test/java/org/hibernate/envers/test/integration/onetoone/bidirectional/BidirectionalEagerHbmTest.java	(revision 0)
+++ src/test/java/org/hibernate/envers/test/integration/onetoone/bidirectional/BidirectionalEagerHbmTest.java	(revision 0)
@@ -0,0 +1,53 @@
+package org.hibernate.envers.test.integration.onetoone.bidirectional;
+
+import java.net.URL;
+
+import javax.persistence.EntityManager;
+
+import org.hibernate.ejb.Ejb3Configuration;
+import org.hibernate.envers.test.AbstractEntityTest;
+import org.hibernate.envers.test.entities.ontoone.BidirectionalEagerHbmRefEdPK;
+import org.hibernate.envers.test.entities.ontoone.BidirectionalEagerHbmRefIngPK;
+import org.testng.annotations.BeforeClass;
+import org.testng.annotations.Test;
+
+public class BidirectionalEagerHbmTest extends AbstractEntityTest {
+	private Long ed1_id;
+	
+	@Override
+	public void configure(Ejb3Configuration cfg) {
+    	URL path = Thread.currentThread().getContextClassLoader().getResource("BidirectionalEagerLoading.hbm.xml");
+    	cfg.addFile(path.getFile());
+    }
+	
+	@BeforeClass(dependsOnMethods = "init")
+    public void initData() {
+        BidirectionalEagerHbmRefEdPK ed1 = new BidirectionalEagerHbmRefEdPK(1, "data_ed_1");
+        BidirectionalEagerHbmRefIngPK ing1 = new BidirectionalEagerHbmRefIngPK(3, "data_ing_1");
+
+        // Revision 1
+        EntityManager em = getEntityManager();
+        em.getTransaction().begin();
+
+        ing1.setReference(ed1);
+        
+        em.persist(ed1);
+        em.persist(ing1);
+        em.getTransaction().commit();
+
+        // Revision 2
+        em.getTransaction().begin();
+
+        ing1 = em.find(BidirectionalEagerHbmRefIngPK.class, ing1.getId());
+        em.getTransaction().commit();
+
+        ed1_id = ed1.getLongId();
+    }
+
+    @Test
+    public void testRevisionsCounts() {
+    	BidirectionalEagerHbmRefIngPK referencing = getAuditReader().find(BidirectionalEagerHbmRefIngPK.class, ed1_id, 1);
+    	assert referencing.getReference().getData()!=null;
+    }
+
+}
Index: src/test/resources/BidirectionalEagerLoading.hbm.xml
===================================================================
--- src/test/resources/BidirectionalEagerLoading.hbm.xml	(revision 0)
+++ src/test/resources/BidirectionalEagerLoading.hbm.xml	(revision 0)
@@ -0,0 +1,20 @@
+<?xml version="1.0"?>
+<!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
+                                   "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
+<hibernate-mapping package="org.hibernate.envers.test.entities.ontoone" default-lazy="false">
+<class name="BidirectionalEagerHbmRefIngPK" table="BIDIRECTIONAL_REFERENCING_ENTITY">
+  <id name="id" type="long" column="BIDIRECTIONAL_REFERENCING_ID" >
+   	<generator class="native"/>
+  </id>
+  <property name="data"/>
+  <many-to-one name="reference" cascade="save-update" class="BidirectionalEagerHbmRefEdPK" column="BIDIRECTIONAL_REFERENCED_ID"/>
+ </class>
+ 
+ <class name="BidirectionalEagerHbmRefEdPK" table="BIDIRECTIONAL_REFERENCED_ENTITY">
+  <id name="longId" type="long" column="BIDIRECTIONAL_REFERENCED_ID">
+   <generator class="native"/>
+  </id>
+  <property name="data"/>
+ </class>
+ 
+</hibernate-mapping>
\ No newline at end of file
