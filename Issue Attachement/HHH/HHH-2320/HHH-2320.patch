Index: src/org/hibernate/jdbc/Expectations.java
===================================================================
--- src/org/hibernate/jdbc/Expectations.java	(revision 11393)
+++ src/org/hibernate/jdbc/Expectations.java	(working copy)
@@ -93,7 +93,7 @@
 			return true;
 		}
 
-		protected int determineRowCount(int reportedRowCount, PreparedStatement statement) {
+		public int determineRowCount(int reportedRowCount, PreparedStatement statement) {
 			return reportedRowCount;
 		}
 	}
@@ -114,7 +114,7 @@
 			return false;
 		}
 
-		protected int determineRowCount(int reportedRowCount, PreparedStatement statement) {
+		public int determineRowCount(int reportedRowCount, PreparedStatement statement) {
 			try {
 				return toCallableStatement( statement ).getInt( parameterPosition );
 			}
@@ -147,6 +147,10 @@
 		public boolean canBeBatched() {
 			return true;
 		}
+
+		public int determineRowCount(int reportedRowCount, PreparedStatement statement) {
+			return -2;
+		}
 	};
 
 	public static final Expectation BASIC = new BasicExpectation( USUAL_EXPECTED_COUNT );
Index: src/org/hibernate/jdbc/Expectation.java
===================================================================
--- src/org/hibernate/jdbc/Expectation.java	(revision 11393)
+++ src/org/hibernate/jdbc/Expectation.java	(working copy)
@@ -14,4 +14,5 @@
 	public void verifyOutcome(int rowCount, PreparedStatement statement, int batchPosition) throws SQLException, HibernateException;
 	public int prepare(PreparedStatement statement) throws SQLException, HibernateException;
 	public boolean canBeBatched();
+	public int determineRowCount(int reportedRowCount, PreparedStatement statement);
 }
Index: src/org/hibernate/persister/entity/AbstractEntityPersister.java
===================================================================
--- src/org/hibernate/persister/entity/AbstractEntityPersister.java	(revision 11393)
+++ src/org/hibernate/persister/entity/AbstractEntityPersister.java	(working copy)
@@ -1764,6 +1764,7 @@
 				}
 				throw new StaleObjectStateException( getEntityName(), id );
 			}
+			return expectation.determineRowCount(rows, statement) > 0;
 		}
 		catch( TooManyRowsAffectedException e ) {
 			throw new HibernateException(
