Index: envers/src/test/java/org/hibernate/envers/test/entities/onetomany/IndexedListRefEdEntity.java
===================================================================
--- envers/src/test/java/org/hibernate/envers/test/entities/onetomany/IndexedListRefEdEntity.java	(revision 0)
+++ envers/src/test/java/org/hibernate/envers/test/entities/onetomany/IndexedListRefEdEntity.java	(working copy)
@@ -0,0 +1,83 @@
+package org.hibernate.envers.test.entities.onetomany;
+
+import org.hibernate.envers.Audited;
+
+import javax.persistence.Entity;
+import javax.persistence.Id;
+import javax.persistence.OneToMany;
+import javax.persistence.OrderColumn;
+import java.util.List;
+
+@Entity
+public class IndexedListRefEdEntity {
+
+  @Id
+    private Integer id;
+
+    @Audited
+    private String data;
+
+    @Audited
+    @OneToMany(mappedBy="reference")
+    @OrderColumn
+    private List<IndexedListRefIngEntity> reffering;
+
+    public IndexedListRefEdEntity() {
+    }
+
+    public IndexedListRefEdEntity(Integer id, String data) {
+        this.id = id;
+        this.data = data;
+    }
+
+    public IndexedListRefEdEntity(String data) {
+        this.data = data;
+    }
+
+    public Integer getId() {
+        return id;
+    }
+
+    public void setId(Integer id) {
+        this.id = id;
+    }
+
+    public String getData() {
+        return data;
+    }
+
+    public void setData(String data) {
+        this.data = data;
+    }
+
+    public List<IndexedListRefIngEntity> getReffering() {
+        return reffering;
+    }
+
+    public void setReffering(List<IndexedListRefIngEntity> reffering) {
+        this.reffering = reffering;
+    }
+
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (!(o instanceof IndexedListRefEdEntity)) return false;
+
+        IndexedListRefEdEntity that = (IndexedListRefEdEntity) o;
+
+        if (data != null ? !data.equals(that.data) : that.data != null) return false;
+        if (id != null ? !id.equals(that.id) : that.id != null) return false;
+
+        return true;
+    }
+
+    public int hashCode() {
+        int result;
+        result = (id != null ? id.hashCode() : 0);
+        result = 31 * result + (data != null ? data.hashCode() : 0);
+        return result;
+    }
+
+    public String toString() {
+        return "IndexedListRefEdEntity(id = " + id + ", data = " + data + ")";
+    }
+}
Index: envers/src/test/java/org/hibernate/envers/test/entities/onetomany/IndexedListRefIngEntity.java
===================================================================
--- envers/src/test/java/org/hibernate/envers/test/entities/onetomany/IndexedListRefIngEntity.java	(revision 0)
+++ envers/src/test/java/org/hibernate/envers/test/entities/onetomany/IndexedListRefIngEntity.java	(working copy)
@@ -0,0 +1,81 @@
+package org.hibernate.envers.test.entities.onetomany;
+
+import org.hibernate.envers.Audited;
+
+import javax.persistence.Entity;
+import javax.persistence.Id;
+import javax.persistence.ManyToOne;
+
+@Entity
+public class IndexedListRefIngEntity  {
+
+  @Id
+    private Integer id;
+
+    @Audited
+    private String data;
+
+    @Audited
+    @ManyToOne
+    private IndexedListRefEdEntity reference;
+
+    public IndexedListRefIngEntity() { }
+
+    public IndexedListRefIngEntity(Integer id, String data, IndexedListRefEdEntity reference) {
+        this.id = id;
+        this.data = data;
+        this.reference = reference;
+    }
+
+    public IndexedListRefIngEntity(String data, IndexedListRefEdEntity reference) {
+        this.data = data;
+        this.reference = reference;
+    }
+
+    public Integer getId() {
+        return id;
+    }
+
+    public void setId(Integer id) {
+        this.id = id;
+    }
+
+    public String getData() {
+        return data;
+    }
+
+    public void setData(String data) {
+        this.data = data;
+    }
+
+    public IndexedListRefEdEntity getReference() {
+        return reference;
+    }
+
+    public void setReference(IndexedListRefEdEntity reference) {
+        this.reference = reference;
+    }
+
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (!(o instanceof IndexedListRefIngEntity)) return false;
+
+        IndexedListRefIngEntity that = (IndexedListRefIngEntity) o;
+
+        if (data != null ? !data.equals(that.data) : that.data != null) return false;
+        if (id != null ? !id.equals(that.id) : that.id != null) return false;
+
+        return true;
+    }
+
+    public int hashCode() {
+        int result;
+        result = (id != null ? id.hashCode() : 0);
+        result = 31 * result + (data != null ? data.hashCode() : 0);
+        return result;
+    }
+
+    public String toString() {
+        return "IndexedListRefIngEntity(id = " + id + ", data = " + data + ")";
+    }
+}
Index: envers/src/test/java/org/hibernate/envers/test/integration/onetomany/IndexedBasicList.java
===================================================================
--- envers/src/test/java/org/hibernate/envers/test/integration/onetomany/IndexedBasicList.java	(revision 0)
+++ envers/src/test/java/org/hibernate/envers/test/integration/onetomany/IndexedBasicList.java	(working copy)
@@ -0,0 +1,140 @@
+package org.hibernate.envers.test.integration.onetomany;
+
+import org.hibernate.ejb.Ejb3Configuration;
+import org.hibernate.envers.test.AbstractEntityTest;
+import org.hibernate.envers.test.entities.onetomany.IndexedListRefEdEntity;
+import org.hibernate.envers.test.entities.onetomany.IndexedListRefIngEntity;
+import org.hibernate.envers.test.tools.TestTools;
+import org.testng.annotations.BeforeClass;
+import org.testng.annotations.Test;
+
+import javax.persistence.EntityManager;
+import java.util.Arrays;
+
+public class IndexedBasicList extends AbstractEntityTest {
+
+  private Integer ed1_id;
+    private Integer ed2_id;
+
+    private Integer ing1_id;
+    private Integer ing2_id;
+
+    public void configure(Ejb3Configuration cfg) {
+        cfg.addAnnotatedClass(IndexedListRefEdEntity.class);
+        cfg.addAnnotatedClass(IndexedListRefIngEntity.class);
+    }
+
+    @BeforeClass(dependsOnMethods = "init")
+    public void initData() {
+        EntityManager em = getEntityManager();
+
+        IndexedListRefEdEntity ed1 = new IndexedListRefEdEntity(1, "data_ed_1");
+        IndexedListRefEdEntity ed2 = new IndexedListRefEdEntity(2, "data_ed_2");
+
+        IndexedListRefIngEntity ing1 = new IndexedListRefIngEntity(3, "data_ing_1", ed1);
+        IndexedListRefIngEntity ing2 = new IndexedListRefIngEntity(4, "data_ing_2", ed1);
+
+        // Revision 1
+        em.getTransaction().begin();
+
+        em.persist(ed1);
+        em.persist(ed2);
+
+        em.persist(ing1);
+        em.persist(ing2);
+
+        em.getTransaction().commit();
+
+        // Revision 2
+        em.getTransaction().begin();
+
+        ing1 = em.find(IndexedListRefIngEntity.class, ing1.getId());
+        ed2 = em.find(IndexedListRefEdEntity.class, ed2.getId());
+
+        ing1.setReference(ed2);
+
+        em.getTransaction().commit();
+
+        // Revision 3
+        em.getTransaction().begin();
+
+        ing2 = em.find(IndexedListRefIngEntity.class, ing2.getId());
+        ed2 = em.find(IndexedListRefEdEntity.class, ed2.getId());
+
+        ing2.setReference(ed2);
+
+        em.getTransaction().commit();
+
+        //
+
+        ed1_id = ed1.getId();
+        ed2_id = ed2.getId();
+
+        ing1_id = ing1.getId();
+        ing2_id = ing2.getId();
+    }
+
+    @Test
+    public void testRevisionsCounts() {
+        assert Arrays.asList(1, 2, 3).equals(getAuditReader().getRevisions(IndexedListRefEdEntity.class, ed1_id));
+        assert Arrays.asList(1, 2, 3).equals(getAuditReader().getRevisions(IndexedListRefEdEntity.class, ed2_id));
+
+        assert Arrays.asList(1, 2).equals(getAuditReader().getRevisions(IndexedListRefIngEntity.class, ing1_id));
+        assert Arrays.asList(1, 3).equals(getAuditReader().getRevisions(IndexedListRefIngEntity.class, ing2_id));
+    }
+    @Test
+    public void testHistoryOfEdId1() {
+        IndexedListRefIngEntity ing1 = getEntityManager().find(IndexedListRefIngEntity.class, ing1_id);
+        IndexedListRefIngEntity ing2 = getEntityManager().find(IndexedListRefIngEntity.class, ing2_id);
+
+        IndexedListRefEdEntity rev1 = getAuditReader().find(IndexedListRefEdEntity.class, ed1_id, 1);
+        IndexedListRefEdEntity rev2 = getAuditReader().find(IndexedListRefEdEntity.class, ed1_id, 2);
+        IndexedListRefEdEntity rev3 = getAuditReader().find(IndexedListRefEdEntity.class, ed1_id, 3);
+
+        assert TestTools.checkList(rev1.getReffering(), ing1, ing2);
+        assert TestTools.checkList(rev2.getReffering(), ing2);
+        assert TestTools.checkList(rev3.getReffering());
+    }
+
+    @Test
+    public void testHistoryOfEdId2() {
+        IndexedListRefIngEntity ing1 = getEntityManager().find(IndexedListRefIngEntity.class, ing1_id);
+        IndexedListRefIngEntity ing2 = getEntityManager().find(IndexedListRefIngEntity.class, ing2_id);
+
+        IndexedListRefEdEntity rev1 = getAuditReader().find(IndexedListRefEdEntity.class, ed2_id, 1);
+        IndexedListRefEdEntity rev2 = getAuditReader().find(IndexedListRefEdEntity.class, ed2_id, 2);
+        IndexedListRefEdEntity rev3 = getAuditReader().find(IndexedListRefEdEntity.class, ed2_id, 3);
+
+        assert TestTools.checkList(rev1.getReffering());
+        assert TestTools.checkList(rev2.getReffering(), ing1);
+        assert TestTools.checkList(rev3.getReffering(), ing1, ing2);
+    }
+
+    @Test
+    public void testHistoryOfEdIng1() {
+        IndexedListRefEdEntity ed1 = getEntityManager().find(IndexedListRefEdEntity.class, ed1_id);
+        IndexedListRefEdEntity ed2 = getEntityManager().find(IndexedListRefEdEntity.class, ed2_id);
+
+        IndexedListRefIngEntity rev1 = getAuditReader().find(IndexedListRefIngEntity.class, ing1_id, 1);
+        IndexedListRefIngEntity rev2 = getAuditReader().find(IndexedListRefIngEntity.class, ing1_id, 2);
+        IndexedListRefIngEntity rev3 = getAuditReader().find(IndexedListRefIngEntity.class, ing1_id, 3);
+
+        assert rev1.getReference().equals(ed1);
+        assert rev2.getReference().equals(ed2);
+        assert rev3.getReference().equals(ed2);
+    }
+
+    @Test
+    public void testHistoryOfEdIng2() {
+        IndexedListRefEdEntity ed1 = getEntityManager().find(IndexedListRefEdEntity.class, ed1_id);
+        IndexedListRefEdEntity ed2 = getEntityManager().find(IndexedListRefEdEntity.class, ed2_id);
+
+        IndexedListRefIngEntity rev1 = getAuditReader().find(IndexedListRefIngEntity.class, ing2_id, 1);
+        IndexedListRefIngEntity rev2 = getAuditReader().find(IndexedListRefIngEntity.class, ing2_id, 2);
+        IndexedListRefIngEntity rev3 = getAuditReader().find(IndexedListRefIngEntity.class, ing2_id, 3);
+
+        assert rev1.getReference().equals(ed1);
+        assert rev2.getReference().equals(ed1);
+        assert rev3.getReference().equals(ed2);
+    }
+}
