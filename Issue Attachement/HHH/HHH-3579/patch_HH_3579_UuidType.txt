Index: src/main/java/org/hibernate/type/UuidType.java
===================================================================
--- src/main/java/org/hibernate/type/UuidType.java	(revision 0)
+++ src/main/java/org/hibernate/type/UuidType.java	(revision 0)
@@ -0,0 +1,104 @@
+package org.hibernate.type;
+
+import java.io.Serializable;
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.sql.Types;
+import java.util.Map;
+import java.util.UUID;
+
+import org.dom4j.Node;
+import org.hibernate.EntityMode;
+import org.hibernate.HibernateException;
+import org.hibernate.MappingException;
+import org.hibernate.dialect.Dialect;
+import org.hibernate.engine.Mapping;
+import org.hibernate.engine.SessionFactoryImplementor;
+import org.hibernate.engine.SessionImplementor;
+import org.hibernate.util.ArrayHelper;
+
+
+
+
+
+/**
+ * <tt>uuid</tt>: A type that maps an SQL UUID to a java.util.UUID
+ * @author David Driscoll
+ *
+ */
+public class UuidType extends PrimitiveType implements DiscriminatorType{
+
+	
+   
+   public Serializable getDefaultValue(){
+	   return UUID.fromString("");
+   }
+   
+   public Object get(ResultSet rs, String name) throws SQLException {
+		return rs.getObject(name);
+	}
+   
+   public Class getPrimitiveClass() {
+		return UUID.class;
+	}
+   
+    public Class getReturnedClass() {
+		return UUID.class;
+	}    
+    
+    public void set(PreparedStatement st, Object value, int index)
+	throws SQLException {
+		st.setObject(index, value, Types.OTHER);
+	}
+    
+    public int sqlType() {
+		return Types.OTHER;
+	}
+    
+	public String getName() {
+		return "UUID";
+	}
+	
+		
+	public String objectToSQLString(Object value, Dialect dialect) throws Exception {
+		return "'" + value + "'";
+	}
+	
+	public Object stringToObject(String xml) throws Exception {
+		return fromStringValue(xml);
+	}
+	
+	public Object fromStringValue(String xml) {
+		return xml;
+	}
+	
+	public Object nullSafeGet(ResultSet resultSet, String name) throws HibernateException, SQLException {
+        Object value = resultSet.getObject(name);
+        if (value == null) {
+            return null;
+        } else {
+           
+        	UUID retValue;
+        	
+            if(String.class.isAssignableFrom(value.getClass()))
+            {
+            	retValue = UUID.fromString(value.toString());
+            	
+            }
+            else
+            {
+                retValue = null;
+            }
+            return retValue;
+        }
+    } 
+
+	
+
+	
+
+	
+
+	
+}
