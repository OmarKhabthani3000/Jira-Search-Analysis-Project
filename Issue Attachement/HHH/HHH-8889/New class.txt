package org.hibernate.internal;

import org.hibernate.Interceptor;
import org.hibernate.ObjectNotFoundException;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;
import org.hibernate.proxy.EntityNotFoundDelegate;

import java.io.Serializable;

class MySessionFactoryOptions implements SessionFactory.SessionFactoryOptions {

    private Interceptor interceptor;
    private EntityNotFoundDelegate entityNotFoundDelegate;

    public MySessionFactoryOptions(Configuration cfg) {
        interceptor = cfg.getInterceptor();
        initEntityNotFoundDelegate(cfg);
    }

    private void initEntityNotFoundDelegate(Configuration cfg) {
        if ( cfg.getEntityNotFoundDelegate() != null ) {
            entityNotFoundDelegate = cfg.getEntityNotFoundDelegate();
        }
        else {
            entityNotFoundDelegate = new EntityNotFoundDelegate() {
                public void handleEntityNotFound(String entityName, Serializable id) {
                    throw new ObjectNotFoundException( id, entityName );
                }
            };
        }
    }

    public Interceptor getInterceptor() {
        return interceptor;
    }

    public EntityNotFoundDelegate getEntityNotFoundDelegate() {
        return entityNotFoundDelegate;
    }
}
