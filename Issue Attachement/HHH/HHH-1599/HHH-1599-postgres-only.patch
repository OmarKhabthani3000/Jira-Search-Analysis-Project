Index: src/org/hibernate/dialect/PostgreSQLDialect.java
===================================================================
RCS file: /cvs/hibernate-3.2/src/org/hibernate/dialect/PostgreSQLDialect.java,v
retrieving revision 1.1
diff -u -r1.1 PostgreSQLDialect.java
--- src/org/hibernate/dialect/PostgreSQLDialect.java	9 Jan 2007 17:24:44 -0000	1.1
+++ src/org/hibernate/dialect/PostgreSQLDialect.java	9 Jan 2007 21:33:02 -0000
@@ -272,16 +272,17 @@
 	private static ViolatedConstraintNameExtracter EXTRACTER = new TemplatedViolatedConstraintNameExtracter() {
 		public String extractConstraintName(SQLException sqle) {
 			try {
-				int sqlState = Integer.valueOf( JDBCExceptionHelper.extractSqlState(sqle)).intValue();
+                final SQLException sqlException = JDBCExceptionHelper.extractExceptionUsingSQLState(sqle);
+                int sqlState = Integer.valueOf(JDBCExceptionHelper.extractSqlState(sqlException)).intValue();
 				switch (sqlState) {
 					// CHECK VIOLATION
-					case 23514: return extractUsingTemplate("violates check constraint \"","\"", sqle.getMessage());
+					case 23514: return extractUsingTemplate("violates check constraint \"","\"", sqlException.getMessage());
 					// UNIQUE VIOLATION
-					case 23505: return extractUsingTemplate("violates unique constraint \"","\"", sqle.getMessage());
+					case 23505: return extractUsingTemplate("violates unique constraint \"","\"", sqlException.getMessage());
 					// FOREIGN KEY VIOLATION
-					case 23503: return extractUsingTemplate("violates foreign key constraint \"","\"", sqle.getMessage());
+					case 23503: return extractUsingTemplate("violates foreign key constraint \"","\"", sqlException.getMessage());
 					// NOT NULL VIOLATION
-					case 23502: return extractUsingTemplate("null value in column \"","\" violates not-null constraint", sqle.getMessage());
+					case 23502: return extractUsingTemplate("null value in column \"","\" violates not-null constraint", sqlException.getMessage());
 					// TODO: RESTRICT VIOLATION
 					case 23001: return null;
 					// ALL OTHER
Index: src/org/hibernate/exception/JDBCExceptionHelper.java
===================================================================
RCS file: /cvs/hibernate-3.2/src/org/hibernate/exception/JDBCExceptionHelper.java,v
retrieving revision 1.1
diff -u -r1.1 JDBCExceptionHelper.java
--- src/org/hibernate/exception/JDBCExceptionHelper.java	9 Jan 2007 17:24:35 -0000	1.1
+++ src/org/hibernate/exception/JDBCExceptionHelper.java	9 Jan 2007 21:33:02 -0000
@@ -50,13 +50,8 @@
 	 * @return The error code.
 	 */
 	public static int extractErrorCode(SQLException sqlException) {
-		int errorCode = sqlException.getErrorCode();
-		SQLException nested = sqlException.getNextException();
-		while ( errorCode == 0 && nested != null ) {
-			errorCode = nested.getErrorCode();
-			nested = nested.getNextException();
-		}
-		return errorCode;
+        final SQLException nested = extractExceptionUsingErrorCode(sqlException);
+        return nested == null ? 0 : nested.getErrorCode();
 	}
 
 	/**
@@ -66,13 +61,8 @@
 	 * @return The SQLState code, or null.
 	 */
 	public static String extractSqlState(SQLException sqlException) {
-		String sqlState = sqlException.getSQLState();
-		SQLException nested = sqlException.getNextException();
-		while ( sqlState == null && nested != null ) {
-			sqlState = nested.getSQLState();
-			nested = nested.getNextException();
-		}
-		return sqlState;
+        final SQLException nested = extractExceptionUsingSQLState(sqlException);
+        return nested == null ? null : nested.getSQLState();
 	}
 
 	/**
@@ -91,4 +81,40 @@
 		}
 		return sqlState.substring( 0, 2 );
 	}
+    
+    /**
+     * For a given SQLException, locates the most relevant exception based on
+     * which has an appropriate error code.
+     * 
+     * @param sqlException The exception from which to extract the most relevant exception
+     * @return The most relevant exception, or null if no exception in the chain
+     * have an error code.
+     */
+    public static SQLException extractExceptionUsingErrorCode(SQLException sqlException) {
+        do {
+            final int errorCode = sqlException.getErrorCode();
+            if(errorCode != 0)
+                return sqlException;
+            sqlException = sqlException.getNextException();
+        } while(sqlException != null);
+        return null;
+    }
+    
+    /**
+     * For a given SQLException, locates the most relevant exception based on
+     * the X/Open compliant SQLState
+     * 
+     * @param sqlException The exception from which to extract the most relevant exception
+     * @return The most relevant exception, or null if no exception in the chain
+     * have an SQLState.
+     */
+    public static SQLException extractExceptionUsingSQLState(SQLException sqlException) {
+        do {
+            final String sqlState = sqlException.getSQLState();
+            if(sqlState != null)
+                return sqlException;
+            sqlException = sqlException.getNextException();
+        } while(sqlException != null);
+        return null;
+    }
 }
