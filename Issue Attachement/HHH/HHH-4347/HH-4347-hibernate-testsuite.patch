Index: src/test/java/org/hibernate/test/annotations/cut/Person.java
===================================================================
--- src/test/java/org/hibernate/test/annotations/cut/Person.java	(revision 0)
+++ src/test/java/org/hibernate/test/annotations/cut/Person.java	(revision 0)
@@ -0,0 +1,55 @@
+//$Id: Person.java 14736 2008-06-04 14:23:42Z hardy.ferentschik $
+package org.hibernate.test.annotations.cut;
+
+import java.io.Serializable;
+
+import javax.persistence.Entity;
+import javax.persistence.GeneratedValue;
+import javax.persistence.Id;
+
+/**
+ * @author Frode Carlsen
+ */
+@Entity
+public class Person implements Serializable {
+    @Id
+    @GeneratedValue
+    Integer id;
+
+    String name;
+
+    Address address;
+
+    private Person() {
+    }
+
+    public Person(String name, Address address) {
+        this.name = name;
+        this.address = address;
+    }
+
+    public Address getAddress() {
+        return address;
+    }
+
+    public Integer getId() {
+        return id;
+    }
+
+    public String getName() {
+        return name;
+    }
+
+    public void setAddress(Address address) {
+        this.address = address;
+    }
+
+    public void setId(Integer id) {
+        this.id = id;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+}

Property changes on: src\test\java\org\hibernate\test\annotations\cut\Person.java
___________________________________________________________________
Added: svn:mime-type
   + text/plain

Index: src/test/java/org/hibernate/test/annotations/cut/CompositeUserTypePropertyNameTest.java
===================================================================
--- src/test/java/org/hibernate/test/annotations/cut/CompositeUserTypePropertyNameTest.java	(revision 0)
+++ src/test/java/org/hibernate/test/annotations/cut/CompositeUserTypePropertyNameTest.java	(revision 0)
@@ -0,0 +1,65 @@
+package org.hibernate.test.annotations.cut;
+
+import java.sql.Connection;
+import java.sql.SQLException;
+
+import org.hibernate.Session;
+import org.hibernate.SessionFactory;
+import org.hibernate.cfg.Configuration;
+import org.hibernate.jdbc.Work;
+import org.hibernate.test.annotations.TestCase;
+import org.hibernate.tool.hbm2ddl.SchemaExport;
+
+public class CompositeUserTypePropertyNameTest extends TestCase {
+
+    @Override
+    protected Class<?>[] getAnnotatedClasses() {
+        return new Class[] { Person.class };
+    }
+
+    @Override
+    protected void configure(Configuration cfg) {
+        super.configure(cfg);
+        cfg.registerTypeOverride(AddressCompositeUserType.INSTANCE, new String[] { Address.class.getName() });
+    }
+
+    @Override
+    protected void setUp() throws Exception {
+        super.setUp();
+        exportSchema(cfg, getSessions());
+    }
+
+    private static void exportSchema(final Configuration cfg, SessionFactory sessFact) {
+        org.hibernate.classic.Session session = sessFact.openSession();
+        session.doWork(new Work() {
+            public void execute(final Connection conn) throws SQLException {
+                SchemaExport schemaExport = new SchemaExport(cfg, conn);
+                schemaExport.create(true, true);
+            }
+        });
+        session.close();
+    }
+
+    public void testBasicOps() {
+        Session session = openSession();
+        session.beginTransaction();
+        Person person = new Person("Steve", new Address());
+        person.getAddress().setAddress1("123 Main");
+        person.getAddress().setCity("Anywhere");
+        session.persist(person);
+        session.getTransaction().commit();
+        session.close();
+
+        session = openSession();
+        session.beginTransaction();
+        session.createQuery("from Person p where p.address.addr1 = '123 Main'").list();
+
+        // same query!
+        session.createQuery("from Person p where p.address.city = 'Anywhere'").list();
+        person = (Person) session.load(Person.class, person.getId());
+        session.delete(person);
+
+        session.getTransaction().commit();
+        session.close();
+    }
+}

Property changes on: src\test\java\org\hibernate\test\annotations\cut\CompositeUserTypePropertyNameTest.java
___________________________________________________________________
Added: svn:mime-type
   + text/plain

Index: src/test/java/org/hibernate/test/annotations/cut/Address.java
===================================================================
--- src/test/java/org/hibernate/test/annotations/cut/Address.java	(revision 0)
+++ src/test/java/org/hibernate/test/annotations/cut/Address.java	(revision 0)
@@ -0,0 +1,29 @@
+//$Id: Address.java 14736 2008-06-04 14:23:42Z hardy.ferentschik $
+package org.hibernate.test.annotations.cut;
+
+import java.io.Serializable;
+
+/**
+ * @author Frode Carlsen
+ */
+public class Address implements Serializable {
+    String address1;
+
+    String city;
+
+    public String getAddress1() {
+        return address1;
+    }
+
+    public String getCity() {
+        return city;
+    }
+
+    public void setAddress1(String address1) {
+        this.address1 = address1;
+    }
+
+    public void setCity(String city) {
+        this.city = city;
+    }
+}

Property changes on: src\test\java\org\hibernate\test\annotations\cut\Address.java
___________________________________________________________________
Added: svn:mime-type
   + text/plain

Index: src/test/java/org/hibernate/test/annotations/cut/AddressCompositeUserType.java
===================================================================
--- src/test/java/org/hibernate/test/annotations/cut/AddressCompositeUserType.java	(revision 0)
+++ src/test/java/org/hibernate/test/annotations/cut/AddressCompositeUserType.java	(revision 0)
@@ -0,0 +1,127 @@
+package org.hibernate.test.annotations.cut;
+
+import java.io.Serializable;
+import java.sql.PreparedStatement;
+import java.sql.ResultSet;
+import java.sql.SQLException;
+
+import javax.persistence.Column;
+
+import org.hibernate.HibernateException;
+import org.hibernate.annotations.Columns;
+import org.hibernate.engine.SessionImplementor;
+import org.hibernate.type.StringType;
+import org.hibernate.type.Type;
+import org.hibernate.usertype.CompositeUserType;
+
+/**
+ * @author Frode Carlsen
+ */
+@Columns(columns = { @Column(name = "addressLine1"), @Column(name = "cityName") })
+public class AddressCompositeUserType implements CompositeUserType {
+
+    public static final AddressCompositeUserType INSTANCE = new AddressCompositeUserType();
+    private static final String[] PROPERTY_NAMES = new String[] { "addr1", "city" };
+
+    private static final Type[] TYPES = new Type[] { StringType.INSTANCE, StringType.INSTANCE };
+
+    public Object assemble(Serializable cached, SessionImplementor session, Object owner) throws HibernateException {
+        return cached;
+    }
+
+    public Object deepCopy(Object value) throws HibernateException {
+        return value;
+    }
+
+    public Serializable disassemble(Object value, SessionImplementor session) throws HibernateException {
+        return (Serializable) value;
+    }
+
+    public boolean equals(Object x, Object y) throws HibernateException {
+        if (x == y) {
+            return true;
+        }
+        if (x == null || y == null) {
+            return false;
+        }
+        return x.equals(y);
+    }
+
+    public String[] getPropertyNames() {
+        return PROPERTY_NAMES;
+    }
+
+    public Type[] getPropertyTypes() {
+        return TYPES;
+    }
+
+    public Object getPropertyValue(Object component, int propertyIndex) throws HibernateException {
+        Address address = (Address) component;
+        switch (propertyIndex) {
+        case 0:
+            return address.address1;
+        case 1:
+            return address.city;
+        default:
+            return null;
+        }
+    }
+
+    public int hashCode(Object x) throws HibernateException {
+        return x.hashCode();
+    }
+
+    public boolean isMutable() {
+        return false;
+    }
+
+    public Object nullSafeGet(ResultSet resultSet, String[] names, SessionImplementor session, Object owner)
+            throws HibernateException, SQLException {
+        if (resultSet == null) {
+            return null;
+        }
+        Address address = new Address();
+        String address1 = resultSet.getString(names[0]);
+        String city = resultSet.getString(names[1]);
+        if (address1 == null && city == null) {
+            return null;
+        }
+        address.address1 = address1;
+        address.city = city;
+        return address;
+    }
+
+    public void nullSafeSet(PreparedStatement statement, Object value, int index, SessionImplementor session)
+            throws HibernateException, SQLException {
+        if (value == null) {
+            statement.setNull(index, StringType.INSTANCE.sqlType());
+            statement.setNull(index + 1, StringType.INSTANCE.sqlType());
+            return;
+        }
+        Address address = (Address) value;
+        statement.setString(index, address.address1);
+        statement.setString(index + 1, address.city);
+    }
+
+    public Object replace(Object original, Object target, SessionImplementor session, Object owner)
+            throws HibernateException {
+        return original;
+    }
+
+    public Class returnedClass() {
+        return Address.class;
+    }
+
+    public void setPropertyValue(Object component, int propertyIndex, Object value) throws HibernateException {
+        Address address = (Address) component;
+        switch (propertyIndex) {
+        case 0:
+            address.address1 = (String) value;
+            break;
+        case 1:
+            address.city = (String) value;
+        default:
+            break;
+        }
+    }
+}

Property changes on: src\test\java\org\hibernate\test\annotations\cut\AddressCompositeUserType.java
___________________________________________________________________
Added: svn:mime-type
   + text/plain

