Index: C:/Vladimirov/workspace-hibernate/Hibernate3/src/org/hibernate/hql/ast/util/NodeTraverser.java
===================================================================
--- C:/Vladimirov/workspace-hibernate/Hibernate3/src/org/hibernate/hql/ast/util/NodeTraverser.java	(revision 10140)
+++ C:/Vladimirov/workspace-hibernate/Hibernate3/src/org/hibernate/hql/ast/util/NodeTraverser.java	(working copy)
@@ -30,15 +30,36 @@
 		if ( ast == null ) {
 			throw new IllegalArgumentException( "node to traverse cannot be null!" );
 		}
-		visitDepthFirst( ast.getFirstChild() );
-	}
+		// visitDepthFirst( ast.getFirstChild() );
+        visitDepthChildren( ast );
+    }
 
-	private void visitDepthFirst(AST ast) {
-		if ( ast == null ) {
-			return;
-		}
-		strategy.visit( ast );
-		visitDepthFirst( ast.getFirstChild() );
-		visitDepthFirst( ast.getNextSibling() );
-	}
+	private void visitDepthChildren(AST ast) {
+        // if ( ast == null ) {
+        // return;
+        // }
+        AST[] children = new AST[ast.getNumberOfChildren()];
+        int counter = 0;
+        {
+            // filling children array
+            AST child = ast.getFirstChild();
+            while ( child != null ) {
+                children[counter++] = child;
+                child = child.getNextSibling();
+            }
+        }
+
+        // check
+        if ( counter != children.length )
+            throw new IllegalArgumentException( "Number of children for " + ast
+                    + " is not equal to actual number of them" );
+
+        for (int i = 0; i < children.length; i++) {
+            AST child = children[i];
+            strategy.visit( child );
+            visitDepthChildren( child );
+        }
+        // visitDepthFirst( ast.getFirstChild() );
+        // visitDepthFirst( ast.getNextSibling() );
+    }
 }
