/**
* - Joined Single Table A
*/

JSTA.java

package nl.mad.inheritance.model;

import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Inheritance;
import javax.persistence.InheritanceType;

@Inheritance(strategy=InheritanceType.JOINED)
@Entity
public class JSTA {
    
    @Id
    private long id;

    private String aValue;
    
    public String getAValue() {
        return aValue;
    }
    
    public long getId() {
        return id;
    }

    @Override
    public boolean equals(Object o) {
        if (o == this) { return true; }
        if (o instanceof JSTA) {
            JSTA a = (JSTA)o;
            if (a.getId() == getId() && a.getAValue().equals(getAValue())) {
                return true;
            }
        }
        return false;
    }
    
    public JSTA() {
        
    }
    
    public JSTA(long id, String aValue) {
        this.id = id;
        this.aValue = aValue;
    }
}


JSTB.java

package nl.mad.inheritance.model;

import javax.persistence.Entity;

@Entity
public class JSTB extends JSTA {
    
    private String bValue;
    
    public String getBValue() {
        return bValue;
    }
    
    @Override
    public boolean equals(Object o) {
        if (o == this) { return true; }
        if (o instanceof JSTB) {
            JSTB b = (JSTB)o;
            if (super.equals(o) && b.getBValue().equals(getBValue())) {
                return true;
            }
        }
        return false;
    }
    
    public JSTB() {
        
    }
    
    public JSTB(long id, String aValue, String bValue) {
        super(id, aValue);
        this.bValue = bValue;
    }
}

JSTC.java

package nl.mad.inheritance.model;

import javax.persistence.Entity;
import javax.persistence.Inheritance;
import javax.persistence.InheritanceType;

@Inheritance(strategy=InheritanceType.SINGLE_TABLE)
@Entity
public class JSTC extends JSTA {
    
    private String cValue;
    
    public String getCValue() {
        return cValue;
    }
    
    @Override
    public boolean equals(Object o) {
        if (o == this) { return true; }
        if (o instanceof JSTC) {
            JSTC c = (JSTC)o;
            if (super.equals(o) && c.getCValue().equals(getCValue())) {
                return true;
            }
        }
        return false;
    }
    
    public JSTC() {
        
    }
    
    public JSTC(long id, String aValue, String cValue) {
        super(id, aValue);
        this.cValue = cValue;
    }
}

JSTD.java

package nl.mad.inheritance.model;

import javax.persistence.Entity;

@Entity
public class JSTD extends JSTC {
    
    private String dValue;
    
    public String getDValue() {
        return dValue;
    }
    
    @Override
    public boolean equals(Object o) {
        if (o == this) { return true; }
        if (o instanceof JSTD) {
            JSTD d = (JSTD)o;
            if (super.equals(o) && d.getDValue().equals(getDValue())) {
                return true;
            }
        }
        return false;
    }
    
    public JSTD() {
        
    }
    
    public JSTD(long id, String aValue, String cValue, String dValue) {
        super(id, aValue, cValue);
        this.dValue = dValue;
    }
}

JSTE.java

package nl.mad.inheritance.model;

import javax.persistence.Entity;

@Entity
public class JSTE extends JSTC {
    
    private String eValue;
    
    public String getEValue() {
        return eValue;
    }
    
    @Override
    public boolean equals(Object o) {
        if (o == this) { return true; }
        if (o instanceof JSTE) {
            JSTE e = (JSTE)o;
            if (super.equals(o) && e.getEValue().equals(getEValue())) {
                return true;
            }
        }
        return false;
    }
    
    public JSTE() {
        
    }
    
    public JSTE(long id, String aValue, String cValue, String eValue) {
        super(id, aValue, cValue);
        this.eValue = eValue;
    }
}

TESTING CODE:

private Map<Class, Object> defaultEntities;

@Before
public void createDefaultEntities(){
    defaultEntities = new HashMap<Class, Object>();
    
    defaultEntities.put(JSTA.class, new JSTA(100, "J"));
    defaultEntities.put(JSTB.class, new JSTB(200, "J", "ST"));
    defaultEntities.put(JSTC.class, new JSTC(300, "J", "ST"));
    defaultEntities.put(JSTD.class, new JSTD(400, "J", "ST", "D"));
    defaultEntities.put(JSTE.class, new JSTE(500, "J", "ST", "E"));
}

//There's some more configuration things around here, but they're all defaulted - using <prop key="hibernate.hbm2ddl.auto">create</prop> though
private EntityManagerFactory emf;

/**
* - Missing 
*/
@Test
public void toDB(){
    EntityManager em = getEntityManager(emf);
    EntityTransaction et = em.getTransaction();
    et.begin();
    long sillyid = 0;
    for(Class c : defaultEntities.keySet()){
        Object o = defaultEntities.get(c);
        Object o2 = em.merge(o);
    }
    em.flush();
    et.commit();
    int i = 0;//Put breakpoint here, examine hsqldb log file and see the following:
    /*
create table JSTA (id bigint not null, aValue varchar(255), primary key (id))
create table JSTB (bValue varchar(255), id bigint not null, primary key (id))
create table JSTC (cValue varchar(255), id bigint not null, primary key (id))
create table JSTD (dValue varchar(255), id bigint not null, primary key (id))
create table JSTE (eValue varchar(255), id bigint not null, primary key (id))
---
If it were working as it should be:
create table JSTA (id bigint not null, aValue varchar(255), primary key (id))
create table JSTB (bValue varchar(255), id bigint not null, primary key (id))
create table JSTC (DTYPE varchar(31), dValue varchar(255), eValue varchar(255), cValue varchar(255), id bigint not null, primary key (id))
*/
}


