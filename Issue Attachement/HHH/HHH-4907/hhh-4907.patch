Index: core/src/main/java/org/hibernate/dialect/Oracle9iDialect.java
===================================================================
--- core/src/main/java/org/hibernate/dialect/Oracle9iDialect.java	(revision 18947)
+++ core/src/main/java/org/hibernate/dialect/Oracle9iDialect.java	(working copy)
@@ -127,5 +127,12 @@
 	public String getReadLockString(int timeout) {
 		return getWriteLockString( timeout );
 	}
+	/**
+	 * HHH-4907, I don't know if oracle 8 supports this syntax, so I'd think it is better add this 
+	 * method here. Reopen this issue if you found/know 8 supports it.
+	 */
+    public boolean supportsRowValueConstructorSyntaxInInList() {
+        return true;
+    }
 	
 }
Index: core/src/main/java/org/hibernate/criterion/InExpression.java
===================================================================
--- core/src/main/java/org/hibernate/criterion/InExpression.java	(revision 18947)
+++ core/src/main/java/org/hibernate/criterion/InExpression.java	(working copy)
@@ -50,19 +50,35 @@
 		this.values = values;
 	}
 
-	public String toSqlString(Criteria criteria, CriteriaQuery criteriaQuery)
-	throws HibernateException {
-		String[] columns = criteriaQuery.getColumnsUsingProjection(criteria, propertyName);
-		String singleValueParam = StringHelper.repeat( "?, ", columns.length-1 )  + "?";
-		if ( columns.length>1 ) singleValueParam = '(' + singleValueParam + ')';
-		String params = values.length>0 ?
-			StringHelper.repeat( singleValueParam + ", ", values.length-1 ) + singleValueParam :
-			"";
-		String cols = StringHelper.join(", ", columns);
-		if ( columns.length>1 ) cols = '(' + cols + ')';
-		return cols + " in (" + params + ')';
-	}
+    public String toSqlString( Criteria criteria, CriteriaQuery criteriaQuery )
+            throws HibernateException {
+        String[] columns = criteriaQuery.getColumnsUsingProjection(
+                criteria, propertyName );
+        if ( criteriaQuery.getFactory().getDialect()
+                .supportsRowValueConstructorSyntaxInInList() || columns.length<=1) {
 
+            String singleValueParam = StringHelper.repeat( "?, ",
+                    columns.length - 1 )
+                    + "?";
+            if ( columns.length > 1 )
+                singleValueParam = '(' + singleValueParam + ')';
+            String params = values.length > 0 ? StringHelper.repeat(
+                    singleValueParam + ", ", values.length - 1 )
+                    + singleValueParam : "";
+            String cols = StringHelper.join( ", ", columns );
+            if ( columns.length > 1 )
+                cols = '(' + cols + ')';
+            return cols + " in (" + params + ')';
+        } else {
+           String cols = " ( " + StringHelper.join( " = ? and ", columns ) + "= ? ) ";
+             cols = values.length > 0 ? StringHelper.repeat( cols
+                    + "or ", values.length - 1 )
+                    + cols : "";
+            cols = " ( " + cols + " ) ";
+            return cols;
+        }
+    }
+
 	public TypedValue[] getTypedValues(Criteria criteria, CriteriaQuery criteriaQuery) 
 	throws HibernateException {
 		ArrayList list = new ArrayList();
Index: annotations/src/test/java/org/hibernate/test/annotations/cid/CompositeIdTest.java
===================================================================
--- annotations/src/test/java/org/hibernate/test/annotations/cid/CompositeIdTest.java	(revision 18947)
+++ annotations/src/test/java/org/hibernate/test/annotations/cid/CompositeIdTest.java	(working copy)
@@ -11,6 +11,7 @@
 import org.hibernate.Criteria;
 import org.hibernate.criterion.Disjunction;
 import org.hibernate.criterion.Restrictions;
+import org.hibernate.junit.FailureExpected;
 import org.hibernate.junit.SkipForDialect;
 import org.hibernate.test.annotations.TestCase;
 
@@ -253,46 +254,12 @@
 		s.close();
 	}
 
-	@SkipForDialect(value=org.hibernate.dialect.HSQLDialect.class,
-			comment = "HSQLDB does not support ((..., ...),(..., ...))")
 	public void testQueryInAndComposite() {
 
 		Session s = openSession(  );
 		Transaction transaction = s.beginTransaction();
-
-		SomeEntity someEntity = new SomeEntity();
-		someEntity.setId( new SomeEntityId( ) );
-		someEntity.getId().setId( 1 );
-		someEntity.getId().setVersion( 11 );
-		someEntity.setProp( "aa" );
-		s.persist( someEntity );
-		someEntity = new SomeEntity();
-		someEntity.setId( new SomeEntityId( ) );
-		someEntity.getId().setId( 1 );
-		someEntity.getId().setVersion( 12 );
-		someEntity.setProp( "bb" );
-		s.persist( someEntity );
-		someEntity = new SomeEntity();
-		someEntity.setId( new SomeEntityId( ) );
-		someEntity.getId().setId( 10 );
-		someEntity.getId().setVersion( 21 );
-		someEntity.setProp( "cc1" );
-		s.persist( someEntity );
-		someEntity = new SomeEntity();
-		someEntity.setId( new SomeEntityId( ) );
-		someEntity.getId().setId( 10 );
-		someEntity.getId().setVersion( 22 );
-		someEntity.setProp( "cc2" );
-		s.persist( someEntity );
-		someEntity = new SomeEntity();
-		someEntity.setId( new SomeEntityId( ) );
-		someEntity.getId().setId( 10 );
-		someEntity.getId().setVersion( 23 );
-		someEntity.setProp( "cc3" );
-		s.persist( someEntity );
-
-		s.flush();
-
+		createData( s );
+        s.flush();
         List ids = new ArrayList<SomeEntityId>(2);
         ids.add( new SomeEntityId(1,12) );
         ids.add( new SomeEntityId(10,23) );
@@ -308,7 +275,55 @@
 		transaction.rollback();
 		s.close();
 	}
+	@FailureExpected(jiraKey="HHH-4907")
+    public void testQueryInAndCompositeWithHQL() {
+        Session s = openSession(  );
+        Transaction transaction = s.beginTransaction();
+        createData( s );
+        s.flush();
+        List ids = new ArrayList<SomeEntityId>(2);
+        ids.add( new SomeEntityId(1,12) );
+        ids.add( new SomeEntityId(10,23) );
 
+        Query query=s.createQuery( "select e from SomeEntity e where e.id in (:idList)" );
+        query.setParameterList( "idList", ids );
+        List list=query.list();
+        assertEquals( 2, list.size() );
+        transaction.rollback();
+        s.close();
+    }
+	private void createData(Session s){
+        SomeEntity someEntity = new SomeEntity();
+        someEntity.setId( new SomeEntityId( ) );
+        someEntity.getId().setId( 1 );
+        someEntity.getId().setVersion( 11 );
+        someEntity.setProp( "aa" );
+        s.persist( someEntity );
+        someEntity = new SomeEntity();
+        someEntity.setId( new SomeEntityId( ) );
+        someEntity.getId().setId( 1 );
+        someEntity.getId().setVersion( 12 );
+        someEntity.setProp( "bb" );
+        s.persist( someEntity );
+        someEntity = new SomeEntity();
+        someEntity.setId( new SomeEntityId( ) );
+        someEntity.getId().setId( 10 );
+        someEntity.getId().setVersion( 21 );
+        someEntity.setProp( "cc1" );
+        s.persist( someEntity );
+        someEntity = new SomeEntity();
+        someEntity.setId( new SomeEntityId( ) );
+        someEntity.getId().setId( 10 );
+        someEntity.getId().setVersion( 22 );
+        someEntity.setProp( "cc2" );
+        s.persist( someEntity );
+        someEntity = new SomeEntity();
+        someEntity.setId( new SomeEntityId( ) );
+        someEntity.getId().setId( 10 );
+        someEntity.getId().setVersion( 23 );
+        someEntity.setProp( "cc3" );
+        s.persist( someEntity );
+	}
 	protected Class[] getAnnotatedClasses() {
 		return new Class[] {
 				Parent.class,
