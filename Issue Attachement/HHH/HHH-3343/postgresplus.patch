Index: etc/hibernate.properties
===================================================================
--- etc/hibernate.properties	(revision 14657)
+++ etc/hibernate.properties	(working copy)
@@ -76,7 +76,15 @@
 #hibernate.connection.username pg
 #hibernate.connection.password
 
+## Postgres Plus
 
+#hibernate.dialect org.hibernate.dialect.PostgresPlusDialect
+#hibernate.connection.driver_class com.edb.Driver
+#hibernate.connection.url jdbc:edb://localhost:5444/test
+#hibernate.connection.username enterprisedb
+#hibernate.connection.password password
+
+
 ## DB2
 
 #hibernate.dialect org.hibernate.dialect.DB2Dialect
Index: src/org/hibernate/dialect/DialectFactory.java
===================================================================
--- src/org/hibernate/dialect/DialectFactory.java	(revision 14657)
+++ src/org/hibernate/dialect/DialectFactory.java	(working copy)
@@ -116,6 +116,7 @@
 		MAPPERS.put( "DB2/NT", new VersionInsensitiveMapper( "org.hibernate.dialect.DB2Dialect" ) );
 		MAPPERS.put( "MySQL", new VersionInsensitiveMapper( "org.hibernate.dialect.MySQLDialect" ) );
 		MAPPERS.put( "PostgreSQL", new VersionInsensitiveMapper( "org.hibernate.dialect.PostgreSQLDialect" ) );
+		MAPPERS.put( "Postgres Plus", new VersionInsensitiveMapper("org.hibernate.dialect.PostgresPlus" ) );
 		MAPPERS.put( "Microsoft SQL Server Database", new VersionInsensitiveMapper( "org.hibernate.dialect.SQLServerDialect" ) );
 		MAPPERS.put( "Microsoft SQL Server", new VersionInsensitiveMapper( "org.hibernate.dialect.SQLServerDialect" ) );
 		MAPPERS.put( "Sybase SQL Server", new VersionInsensitiveMapper( "org.hibernate.dialect.SybaseDialect" ) );
Index: src/org/hibernate/dialect/PostgresPlusDialect.java
===================================================================
--- src/org/hibernate/dialect/PostgresPlusDialect.java	(revision 0)
+++ src/org/hibernate/dialect/PostgresPlusDialect.java	(revision 0)
@@ -0,0 +1,72 @@
+package org.hibernate.dialect;
+
+import java.sql.Types;
+import java.sql.SQLException;
+import java.sql.CallableStatement;
+import java.sql.ResultSet;
+
+import org.hibernate.Hibernate;
+import org.hibernate.dialect.function.NoArgSQLFunction;
+import org.hibernate.dialect.function.NvlFunction;
+import org.hibernate.dialect.function.StandardSQLFunction;
+
+/**
+ * An SQL dialect for Postgres Plus
+ */
+public class PostgresPlusDialect extends PostgreSQLDialect {
+
+	public PostgresPlusDialect() {
+		super();
+                         
+		registerFunction( "ltrim", new StandardSQLFunction("ltrim") );
+		registerFunction( "rtrim", new StandardSQLFunction("rtrim") );
+		registerFunction( "soundex", new StandardSQLFunction("soundex") );
+		registerFunction( "sysdate", new NoArgSQLFunction("sysdate", Hibernate.DATE, false) );
+		registerFunction( "rowid", new NoArgSQLFunction("rowid", Hibernate.LONG, false) );
+		registerFunction( "rownum", new NoArgSQLFunction("rownum", Hibernate.LONG, false) );
+		registerFunction( "instr", new StandardSQLFunction("instr", Hibernate.INTEGER) );
+		registerFunction( "lpad", new StandardSQLFunction("lpad", Hibernate.STRING) );
+		registerFunction( "replace", new StandardSQLFunction("replace", Hibernate.STRING) );
+		registerFunction( "rpad", new StandardSQLFunction("rpad", Hibernate.STRING) );
+		registerFunction( "translate", new StandardSQLFunction("translate", Hibernate.STRING) );
+		registerFunction( "substring", new StandardSQLFunction( "substr", Hibernate.STRING ) );
+		registerFunction( "coalesce", new NvlFunction() );
+		registerFunction( "atan2", new StandardSQLFunction("atan2", Hibernate.FLOAT) );
+		registerFunction( "mod", new StandardSQLFunction("mod", Hibernate.INTEGER) );
+		registerFunction( "nvl", new StandardSQLFunction("nvl") );
+		registerFunction( "nvl2", new StandardSQLFunction("nvl2") );
+		registerFunction( "power", new StandardSQLFunction("power", Hibernate.FLOAT) );
+		registerFunction( "add_months", new StandardSQLFunction("add_months", Hibernate.DATE) );
+		registerFunction( "months_between", new StandardSQLFunction("months_between", Hibernate.FLOAT) );
+		registerFunction( "next_day", new StandardSQLFunction("next_day", Hibernate.DATE) );
+                                
+	}
+
+
+	public String getCurrentTimestampSelectString() {
+		return "select sysdate";
+	}
+
+	public String getCurrentTimestampSQLFunctionName() {
+		return "sysdate";
+	}        
+        
+	public int registerResultSetOutParameter(CallableStatement statement, int col) throws SQLException {
+		statement.registerOutParameter(col, Types.REF);
+		col++;
+		return col;
+	}
+
+	public ResultSet getResultSet(CallableStatement ps) throws SQLException {
+		ps.execute();
+                
+		ResultSet rs = (ResultSet) ps.getObject(1);			
+		return rs;		
+	}
+        
+	public String getSelectGUIDString() {
+		return "select uuid_generate_v1";
+	}
+        
+        
+}
Index: test/org/hibernate/test/generated/GeneratedPropertyEntity.hbm.xml
===================================================================
--- test/org/hibernate/test/generated/GeneratedPropertyEntity.hbm.xml	(revision 14657)
+++ test/org/hibernate/test/generated/GeneratedPropertyEntity.hbm.xml	(working copy)
@@ -37,6 +37,7 @@
         </drop>
         <dialect-scope name="org.hibernate.dialect.Oracle9Dialect"/>
         <dialect-scope name="org.hibernate.dialect.OracleDialect"/>
+        <dialect-scope name="org.hibernate.dialect.PostgresPlusDialect"/>
     </database-object>
 
 </hibernate-mapping>
\ No newline at end of file
Index: test/org/hibernate/test/generatedkeys/select/MyEntity.hbm.xml
===================================================================
--- test/org/hibernate/test/generatedkeys/select/MyEntity.hbm.xml	(revision 14657)
+++ test/org/hibernate/test/generatedkeys/select/MyEntity.hbm.xml	(working copy)
@@ -31,6 +31,7 @@
         </drop>
         <dialect-scope name="org.hibernate.dialect.Oracle9Dialect"/>
         <dialect-scope name="org.hibernate.dialect.OracleDialect"/>
+        <dialect-scope name="org.hibernate.dialect.PostgresPlusDialect"/>
     </database-object>
 
 </hibernate-mapping>
\ No newline at end of file
Index: test/org/hibernate/test/legacy/FooBarTest.java
===================================================================
--- test/org/hibernate/test/legacy/FooBarTest.java	(revision 14657)
+++ test/org/hibernate/test/legacy/FooBarTest.java	(working copy)
@@ -55,6 +55,7 @@
 import org.hibernate.dialect.OracleDialect;
 import org.hibernate.dialect.PointbaseDialect;
 import org.hibernate.dialect.PostgreSQLDialect;
+import org.hibernate.dialect.PostgresPlusDialect;
 import org.hibernate.dialect.SAPDBDialect;
 import org.hibernate.dialect.SQLServerDialect;
 import org.hibernate.dialect.SybaseDialect;
@@ -3262,7 +3263,8 @@
 	}
 
 	public void testScrollableIterator() throws Exception {
-		if ( getDialect() instanceof DB2Dialect || getDialect() instanceof OracleDialect || getDialect() instanceof SybaseDialect || getDialect() instanceof HSQLDialect ) {
+		if (getDialect() instanceof DB2Dialect || getDialect() instanceof OracleDialect || getDialect() instanceof PostgresPlusDialect || getDialect() instanceof SybaseDialect || getDialect() instanceof HSQLDialect)
+		{
 			Session s = openSession();
 			Transaction txn = s.beginTransaction();
 			s.save( new Foo() );
Index: test/org/hibernate/test/legacy/IJTest.java
===================================================================
--- test/org/hibernate/test/legacy/IJTest.java	(revision 14657)
+++ test/org/hibernate/test/legacy/IJTest.java	(working copy)
@@ -10,6 +10,7 @@
 import org.hibernate.classic.Session;
 import org.hibernate.dialect.HSQLDialect;
 import org.hibernate.dialect.OracleDialect;
+import org.hibernate.dialect.PostgresPlusDialect;
 
 /**
  * @author Gavin King
@@ -17,7 +18,7 @@
 public class IJTest extends LegacyTestCase {
 
 	public void testFormulaDiscriminator() throws Exception {
-		if ( ( getDialect() instanceof OracleDialect ) || ( getDialect() instanceof HSQLDialect ) ) return;
+		if ((getDialect() instanceof OracleDialect) || (getDialect() instanceof PostgresPlusDialect) || (getDialect() instanceof HSQLDialect)) return;
 		Session s = getSessions().openSession();
 		I i = new I();
 		i.setName( "i" );
Index: test/org/hibernate/test/legacy/SQLFunctionsTest.java
===================================================================
--- test/org/hibernate/test/legacy/SQLFunctionsTest.java	(revision 14657)
+++ test/org/hibernate/test/legacy/SQLFunctionsTest.java	(working copy)
@@ -26,6 +26,7 @@
 import org.hibernate.dialect.MySQLDialect;
 import org.hibernate.dialect.Oracle9Dialect;
 import org.hibernate.dialect.OracleDialect;
+import org.hibernate.dialect.PostgresPlusDialect;
 import org.hibernate.dialect.SybaseDialect;
 import org.hibernate.dialect.TimesTenDialect;
 import org.hibernate.dialect.function.SQLFunction;
@@ -69,7 +70,8 @@
 			s.find("select count(*) from Simple s").size() == 1
 		);
 
-		if ( getDialect() instanceof OracleDialect) {
+		if (getDialect() instanceof OracleDialect || getDialect() instanceof PostgresPlusDialect)
+		{
 			// Check Oracle Dialect mix of dialect functions - no args (no parenthesis and single arg functions
 			java.util.List rset = s.find("select s.name, sysdate(), trunc(s.pay), round(s.pay) from Simple s");
 			assertNotNull("Name string should have been returned",(((Object[])rset.get(0))[0]));
