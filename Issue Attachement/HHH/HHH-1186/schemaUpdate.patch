diff -Naur --binary hibernate-3.1/src/org/hibernate/tool/hbm2ddl/SchemaUpdate.java hibernate-3.1-rc3mod/src/org/hibernate/tool/hbm2ddl/SchemaUpdate.java
--- hibernate-3.1/src/org/hibernate/tool/hbm2ddl/SchemaUpdate.java	2005-11-17 21:43:33.000000000 +0100
+++ hibernate-3.1-rc3mod/src/org/hibernate/tool/hbm2ddl/SchemaUpdate.java	2005-11-22 16:21:18.002754100 +0100
@@ -20,6 +20,9 @@
 import org.hibernate.dialect.Dialect;
 import org.hibernate.util.ReflectHelper;
 
+import java.io.Writer;
+import java.io.FileWriter;
+
 /**
  * A commandline tool to update a database schema. May also be called from
  * inside an application.
@@ -32,7 +35,8 @@
 	private ConnectionProvider connectionProvider;
 	private Configuration configuration;
 	private Dialect dialect;
-    private List exceptions;
+  private List exceptions;
+  private String outputFile;
 
 	public SchemaUpdate(Configuration cfg) throws HibernateException {
 		this( cfg, cfg.getProperties() );
@@ -58,6 +62,7 @@
 	public static void main(String[] args) {
 		try {
 			Configuration cfg = new Configuration();
+			String outFile = null;
 
 			boolean script = true;
 			// If true then execute db updates, otherwise just generate and display updates
@@ -83,6 +88,9 @@
 							(NamingStrategy) ReflectHelper.classForName( args[i].substring(9) ).newInstance()
 						);
 					}
+					else if( args[i].startsWith("--output=") ) {
+						outFile = args[i].substring(9);
+					}
 				}
 				else {
 					cfg.addFile(args[i]);
@@ -97,13 +105,21 @@
 				cfg.setProperties(props);
 			}
 
-			new SchemaUpdate(cfg).execute(script, doUpdate);
+			new SchemaUpdate(cfg).setOutputFile(outFile).execute(script, doUpdate);
 		}
 		catch (Exception e) {
 			log.error( "Error running schema update", e );
 			e.printStackTrace();
 		}
 	}
+	
+  /**
+	 * Set an output filename. The generated script will be written to this file.
+	 */
+	public SchemaUpdate setOutputFile(String filename) {
+		outputFile = filename;
+		return this;
+	}
 
 	/**
 	 * Execute the schema updates
@@ -116,6 +132,7 @@
 		Connection connection=null;
 		Statement stmt=null;
 		boolean autoCommitWasEnabled = true;
+    Writer outputFileWriter = null;
 
         exceptions.clear();
 
@@ -140,13 +157,26 @@
 			}
 
 			log.info("updating schema");
-
+		      
+      if (outputFile != null)
+      {
+				log.info("writing generated schema to file: " + outputFile);
+			  outputFileWriter = new FileWriter(outputFile);
+      }
+			
 			String[] createSQL = configuration.generateSchemaUpdateScript(dialect, meta);
 			for (int j = 0; j < createSQL.length; j++) {
 
 				final String sql = createSQL[j];
 				try {
-					if (script) System.out.println(sql);
+					if (script) 
+          {
+            System.out.println(sql);
+          }
+		      if (outputFile != null)
+          {
+            outputFileWriter.write( sql + "\n" );
+          }
 					if (doUpdate) {
 						log.debug(sql);
 						stmt.executeUpdate(sql);
@@ -159,6 +189,7 @@
 				}
 			}
 
+
 			log.info("schema update complete");
 
 		}
@@ -179,6 +210,19 @@
 				log.error("Error closing connection", e);
 			}
 
+      try
+      {
+        if( outputFileWriter != null )
+        {
+          outputFileWriter.close();
+        }
+      }
+      catch(Exception e)
+      {
+        exceptions.add(e);
+				log.error("Error closing connection", e);
+			}
+
 		}
 	}
 
