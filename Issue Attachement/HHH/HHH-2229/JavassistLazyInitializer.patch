Index: src/org/hibernate/proxy/pojo/javassist/JavassistLazyInitializer.java
===================================================================
--- src/org/hibernate/proxy/pojo/javassist/JavassistLazyInitializer.java	(revision 10779)
+++ src/org/hibernate/proxy/pojo/javassist/JavassistLazyInitializer.java	(working copy)
@@ -153,34 +153,6 @@
 		}
 	}
 
-	private static boolean isCastable(Class caster, Class castee) {
-		if ( castee.equals( caster ) ) {
-			return true;
-		}
-		List list = addCheckingTypes( caster, new ArrayList() );
-		for ( Iterator iter = list.iterator(); iter.hasNext(); ) {
-			Class cl = ( Class ) iter.next();
-			if ( castee.equals( cl ) ) {
-				return true;
-			}
-		}
-		return false;
-	}
-
-	private static List addCheckingTypes(final Class type, final List list) {
-		Class superclass = type.getSuperclass();
-		if ( superclass != null ) {
-			list.add( superclass );
-			addCheckingTypes( superclass, list );
-		}
-		Class[] interfaces = type.getInterfaces();
-		for ( int i = 0; i < interfaces.length; ++i ) {
-			list.add( interfaces[i] );
-			addCheckingTypes( interfaces[i], list );
-		}
-		return list;
-	}
-
 	public Object invoke(
 			final Object proxy,
 			final Method thisMethod,
@@ -199,7 +171,7 @@
 				final Object returnValue;
 				try {
                     if ( ReflectHelper.isPublic( persistentClass, thisMethod ) ) {
-                    	if ( !isCastable( target.getClass(), thisMethod.getDeclaringClass()) ) {
+						   if(! ( thisMethod.getDeclaringClass().isInstance(target) ) ) {
                     		throw new ClassCastException( target.getClass().getName() );
                     	}
                     	returnValue = thisMethod.invoke( target, args );
