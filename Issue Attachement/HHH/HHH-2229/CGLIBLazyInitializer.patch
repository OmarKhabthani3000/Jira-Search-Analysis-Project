Index: src/org/hibernate/proxy/pojo/cglib/CGLIBLazyInitializer.java
===================================================================
--- src/org/hibernate/proxy/pojo/cglib/CGLIBLazyInitializer.java	(revision 10779)
+++ src/org/hibernate/proxy/pojo/cglib/CGLIBLazyInitializer.java	(working copy)
@@ -4,10 +4,6 @@
 import java.io.Serializable;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
-import java.util.List;
-import java.util.ArrayList;
-import java.util.Iterator;
-
 
 import net.sf.cglib.proxy.Callback;
 import net.sf.cglib.proxy.CallbackFilter;
@@ -137,34 +133,6 @@
 		this.interfaces = interfaces;
 	}
 
-	private static boolean isCastable(Class caster, Class castee) {
-		if ( castee.equals( caster ) ) {
-			return true;
-		}
-		List list = addCheckingTypes( caster, new ArrayList() );
-		for ( Iterator iter = list.iterator(); iter.hasNext(); ) {
-			Class cl = ( Class ) iter.next();
-			if ( castee.equals( cl ) ) {
-				return true;
-			}
-		}
-		return false;
-	}
-
-	private static List addCheckingTypes(final Class type, final List list) {
-		Class superclass = type.getSuperclass();
-		if ( superclass != null ) {
-			list.add( superclass );
-			addCheckingTypes( superclass, list );
-		}
-		Class[] interfaces = type.getInterfaces();
-		for ( int i = 0; i < interfaces.length; ++i ) {
-			list.add( interfaces[i] );
-			addCheckingTypes( interfaces[i], list );
-		}
-		return list;
-	}
-
 	public Object invoke(final Object proxy, final Method method, final Object[] args) throws Throwable {
 		if ( constructed ) {
 			Object result = invoke( method, args, proxy );
@@ -173,10 +141,8 @@
 				final Object returnValue;
 				try {
 					if ( ReflectHelper.isPublic( persistentClass, method ) ) {
-						if ( !isCastable(
-								target.getClass(), method
-								.getDeclaringClass()
-						) ) {
+						if(! ( method.getDeclaringClass().isInstance(target) ) )
+						{
 							throw new ClassCastException(
 									target.getClass()
 											.getName()
