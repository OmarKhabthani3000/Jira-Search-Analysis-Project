### Eclipse Workspace Patch 1.0
#P hibernate-annotations-svn
Index: src/main/java/org/hibernate/type/EnumType.java
===================================================================
--- src/main/java/org/hibernate/type/EnumType.java	(revision 19356)
+++ src/main/java/org/hibernate/type/EnumType.java	(working copy)
@@ -97,36 +97,40 @@
 
 	
 	public Object nullSafeGet(ResultSet rs, String[] names, Object owner) throws HibernateException, SQLException {
-		Object object = rs.getObject( names[0] );
-		if ( rs.wasNull() ) {
-			if ( IS_VALUE_TRACING_ENABLED ) {
-				log().debug( "Returning null as column {}", names[0] );
-			}
-			return null;
-		}
-		if ( object instanceof Number ) {
-			initEnumValues();
-			int ordinal = ( (Number) object ).intValue();
-			if ( ordinal < 0 || ordinal >= enumValues.length ) {
-				throw new IllegalArgumentException( "Unknown ordinal value for enum " + enumClass + ": " + ordinal );
-			}
-			if ( IS_VALUE_TRACING_ENABLED ) {
-				log().debug( "Returning '{}' as column {}", ordinal, names[0] );
-			}
-			return enumValues[ordinal];
-		}
-		else {
-			String name = (String) object;
-			if ( IS_VALUE_TRACING_ENABLED ) {
-				log().debug( "Returning '{}' as column {}", name, names[0] );
-			}
-			try {
-				return Enum.valueOf( enumClass, name );
-			}
-			catch (IllegalArgumentException iae) {
-				throw new IllegalArgumentException( "Unknown name value for enum " + enumClass + ": " + name, iae );
-			}
-		}
+        if ( isOrdinal( sqlType ) ) {
+            initEnumValues();
+            final int ordinal = rs.getInt( names[0] );
+            if ( rs.wasNull() ) {
+                if ( IS_VALUE_TRACING_ENABLED ) {
+                    log().debug( "Returning null as column {}", names[0] );
+                }
+                return null;
+            }
+            if ( ordinal < 0 || ordinal >= enumValues.length ) {
+                throw new IllegalArgumentException( "Unknown ordinal value for enum " + enumClass + ": " + ordinal );
+            }
+            if ( IS_VALUE_TRACING_ENABLED ) {
+                log().debug( "Returning '{}' as column {}", Integer.valueOf(ordinal), names[0] );
+            }
+            return enumValues[ordinal];
+        }
+        // else non-ordinal String value
+        final String name = rs.getString( names[0] );
+        if ( rs.wasNull() ) {
+            if ( IS_VALUE_TRACING_ENABLED ) {
+                log().debug( "Returning null as column {}", names[0] );
+            }
+            return null;
+        }
+        if ( IS_VALUE_TRACING_ENABLED ) {
+            log().debug( "Returning '{}' as column {}", name, names[0] );
+        }
+        try {
+            return Enum.valueOf( enumClass, name );
+        }
+        catch (IllegalArgumentException iae) {
+            throw new IllegalArgumentException( "Unknown name value for enum " + enumClass + ": " + name, iae );
+        }
 	}
 
 	public void nullSafeSet(PreparedStatement st, Object value, int index) throws HibernateException, SQLException {
