Index: hibernate-core/src/test/java/org/hibernate/test/joinfetch/JoinFetchTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\n * Hibernate, Relational Persistence for Idiomatic Java\n *\n * Copyright (c) 2006-2011, Red Hat Inc. or third-party contributors as\n * indicated by the @author tags or express copyright attribution\n * statements applied by the authors.  All third-party contributions are\n * distributed under license by Red Hat Inc.\n *\n * This copyrighted material is made available to anyone wishing to use, modify,\n * copy, or redistribute it subject to the terms and conditions of the GNU\n * Lesser General Public License, as published by the Free Software Foundation.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License\n * for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this distribution; if not, write to:\n * Free Software Foundation, Inc.\n * 51 Franklin Street, Fifth Floor\n * Boston, MA  02110-1301  USA\n */\npackage org.hibernate.test.joinfetch;\nimport java.util.List;\n\nimport org.junit.Test;\n\nimport org.hibernate.FetchMode;\nimport org.hibernate.Hibernate;\nimport org.hibernate.Session;\nimport org.hibernate.Transaction;\nimport org.hibernate.cfg.Configuration;\nimport org.hibernate.cfg.Environment;\nimport org.hibernate.criterion.Projections;\nimport org.hibernate.criterion.Restrictions;\nimport org.hibernate.testing.junit4.BaseCoreFunctionalTestCase;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertTrue;\n\n/**\n * @author Gavin King\n */\npublic class JoinFetchTest extends BaseCoreFunctionalTestCase {\n\t@Override\n\tpublic String[] getMappings() {\n\t\treturn new String[] { \"joinfetch/ItemBid.hbm.xml\", \"joinfetch/UserGroup.hbm.xml\" };\n\t}\n\n\t@Override\n\tpublic void configure(Configuration cfg) {\n\t\tcfg.setProperty(Environment.MAX_FETCH_DEPTH, \"10\");\n\t\tcfg.setProperty(Environment.USE_SECOND_LEVEL_CACHE, \"false\");\n\t}\n\n\t@Test\n\tpublic void testProjection() {\n\t\tSession s = openSession();\n\t\tTransaction t = s.beginTransaction();\n\t\ts.createCriteria(Item.class).setProjection( Projections.rowCount() ).uniqueResult();\n\t\ts.createCriteria(Item.class).uniqueResult();\n\t\tt.commit();\n\t\ts.close();\n\t}\n\n\t@Test\n\tpublic void testJoinFetch() {\n\t\tSession s = openSession();\n\t\tTransaction t = s.beginTransaction();\n\t\ts.createQuery( \"delete from Bid\" ).executeUpdate();\n\t\ts.createQuery( \"delete from Comment\" ).executeUpdate();\n\t\ts.createQuery( \"delete from Item\" ).executeUpdate();\n\t\tt.commit();\n\t\ts.close();\n\t\t\n\t\tCategory cat = new Category(\"Photography\");\n\t\tItem i = new Item(cat, \"Camera\");\n\t\tBid b = new Bid(i, 100.0f);\n\t\tnew Bid(i, 105.0f);\n\t\tnew Comment(i, \"This looks like a really good deal\");\n\t\tnew Comment(i, \"Is it the latest version?\");\n\t\tnew Comment(i, \"<comment deleted>\");\n\t\tSystem.out.println( b.getTimestamp() );\n\t\t\n\t\ts = openSession();\n\t\tt = s.beginTransaction();\n\t\ts.persist(cat);\n\t\ts.persist(i);\n\t\tt.commit();\n\t\ts.close();\n\t\t\n\t\tsessionFactory().evict(Item.class);\n\n\t\ts = openSession();\n\t\tt = s.beginTransaction();\n\t\ti = (Item) s.get( Item.class, i.getId() );\n\t\tassertTrue( Hibernate.isInitialized( i.getBids() ) );\n\t\tassertEquals( i.getBids().size(), 2 );\n\t\tassertTrue( Hibernate.isInitialized( i.getComments() ) );\n\t\tassertEquals( i.getComments().size(), 3 );\n\t\tt.commit();\n\t\ts.close();\n\n\t\tsessionFactory().evict(Bid.class);\n\n\t\ts = openSession();\n\t\tt = s.beginTransaction();\n\t\tb = (Bid) s.get( Bid.class, b.getId() );\n\t\tassertTrue( Hibernate.isInitialized( b.getItem() ) );\n\t\tassertTrue( Hibernate.isInitialized( b.getItem().getComments() ) );\n\t\tassertEquals( b.getItem().getComments().size(), 3 );\n\t\tSystem.out.println( b.getTimestamp() );\n\t\tt.commit();\n\t\ts.close();\n\n\t\tsessionFactory().evictCollection(Item.class.getName() + \".bids\");\n\t\t\n\t\ts = openSession();\n\t\tt = s.beginTransaction();\n\t\ti = (Item) s.createCriteria( Item.class )\n\t\t\t.setFetchMode(\"bids\", FetchMode.SELECT)\n\t\t\t.setFetchMode(\"comments\", FetchMode.SELECT)\n\t\t\t.uniqueResult();\n\t\tassertFalse( Hibernate.isInitialized( i.getBids() ) );\n\t\tassertFalse( Hibernate.isInitialized( i.getComments() ) );\n\t\tb = (Bid) i.getBids().iterator().next();\n\t\tassertTrue( Hibernate.isInitialized( b.getItem() ) );\n\t\tt.commit();\n\t\ts.close();\n\t\t\n\t\ts = openSession();\n\t\tt = s.beginTransaction();\n\t\ti = (Item) s.createQuery(\"from Item i left join fetch i.bids left join fetch i.comments\").uniqueResult();\n\t\tassertTrue( Hibernate.isInitialized( i.getBids() ) );\n\t\tassertTrue( Hibernate.isInitialized( i.getComments() ) );\n\t\tassertEquals( i.getComments().size(), 3 );\n\t\tassertEquals( i.getBids().size(), 2 );\n\t\tt.commit();\n\t\ts.close();\n\n\t\ts = openSession();\n\t\tt = s.beginTransaction();\n\t\tObject[] row = (Object[]) s.getNamedQuery(Item.class.getName() + \".all\").list().get(0);\n\t\ti = (Item) row[0];\n\t\tassertTrue( Hibernate.isInitialized( i.getBids() ) );\n\t\tassertTrue( Hibernate.isInitialized( i.getComments() ) );\n\t\tassertEquals( i.getComments().size(), 3 );\n\t\tassertEquals( i.getBids().size(), 2 );\n\t\tt.commit();\n\t\ts.close();\n\n\t\ts = openSession();\n\t\tt = s.beginTransaction();\n\t\ti = (Item) s.createCriteria(Item.class).uniqueResult();\n\t\tassertTrue( Hibernate.isInitialized( i.getBids() ) );\n\t\tassertTrue( Hibernate.isInitialized( i.getComments() ) );\n\t\tassertEquals( i.getComments().size(), 3 );\n\t\tassertEquals( i.getBids().size(), 2 );\n\t\tt.commit();\n\t\ts.close();\n\n\t\ts = openSession();\n\t\tt = s.beginTransaction();\n\t\tList bids = s.createQuery(\"from Bid b left join fetch b.item i left join fetch i.category\").list();\n\t\tBid bid = (Bid) bids.get(0);\n\t\tassertTrue( Hibernate.isInitialized( bid.getItem() ) );\n\t\tassertTrue( Hibernate.isInitialized( bid.getItem().getCategory() ) );\n\t\tt.commit();\n\t\ts.close();\n\n\t\ts = openSession();\n\t\tt = s.beginTransaction();\n\t\tList pairs = s.createQuery(\"from Item i left join i.bids b left join fetch i.category\").list();\n\t\tItem item = (Item) ( (Object[]) pairs.get(0) )[0];\n\t\tassertFalse( Hibernate.isInitialized( item.getBids() ) );\n\t\tassertTrue( Hibernate.isInitialized( item.getCategory() ) );\n\t\ts.clear();\n\t\tpairs = s.createQuery(\"from Item i left join i.bids b left join i.category\").list();\n\t\titem = (Item) ( (Object[]) pairs.get(0) )[0];\n\t\tassertFalse( Hibernate.isInitialized( item.getBids() ) );\n\t\tassertTrue( Hibernate.isInitialized( item.getCategory() ) );\n\t\ts.clear();\n\t\tpairs = s.createQuery(\"from Bid b left join b.item i left join fetch i.category\").list();\n\t\tbid = (Bid) ( (Object[]) pairs.get(0) )[0];\n\t\tassertTrue( Hibernate.isInitialized( bid.getItem() ) );\n\t\tassertTrue( Hibernate.isInitialized( bid.getItem().getCategory() ) );\n\t\ts.clear();\n\t\tpairs = s.createQuery(\"from Bid b left join b.item i left join i.category\").list();\n\t\tbid = (Bid) ( (Object[]) pairs.get(0) )[0];\n\t\tassertTrue( Hibernate.isInitialized( bid.getItem() ) );\n\t\tassertTrue( Hibernate.isInitialized( bid.getItem().getCategory() ) );\n\t\tt.commit();\n\t\ts.close();\n\n\t\ts = openSession();\n\t\tt = s.beginTransaction();\n\t\ts.createQuery( \"delete from Bid\" ).executeUpdate();\n\t\ts.createQuery( \"delete from Comment\" ).executeUpdate();\n\t\ts.createQuery( \"delete from Item\" ).executeUpdate();\n\t\ts.createQuery( \"delete from Category\" ).executeUpdate();\n\t\tt.commit();\n\t\ts.close();\n\n\t}\n\t\n\t@Test\n\tpublic void testCollectionFilter() {\n\t\tSession s = openSession();\n\t\tTransaction t = s.beginTransaction();\n\t\tGroup hb = new Group(\"hibernate\");\n\t\tUser gavin = new User(\"gavin\");\n\t\tUser max = new User(\"max\");\n\t\thb.getUsers().put(\"gavin\", gavin);\n\t\thb.getUsers().put(\"max\", max);\n\t\tgavin.getGroups().put(\"hibernate\", hb);\n\t\tmax.getGroups().put(\"hibernate\", hb);\n\t\ts.persist(hb);\n\t\tt.commit();\n\t\ts.close();\n\t\t\n\t\ts = openSession();\n\t\tt = s.beginTransaction();\n\t\thb = (Group) s.createCriteria(Group.class)\n\t\t\t\t.setFetchMode(\"users\", FetchMode.SELECT)\n\t\t\t\t.add( Restrictions.idEq(\"hibernate\") )\n\t\t\t\t.uniqueResult();\n\t\tassertFalse( Hibernate.isInitialized( hb.getUsers() ) );\n\t\t//gavin = (User) s.createFilter( hb.getUsers(), \"where index(this) = 'gavin'\" ).uniqueResult();\n\t\tLong size = (Long) s.createFilter( hb.getUsers(), \"select count(*)\" ).uniqueResult();\n\t\tassertEquals( new Long(2), size );\n\t\tassertFalse( Hibernate.isInitialized( hb.getUsers() ) );\n\t\ts.delete(hb);\n\t\tt.commit();\n\t\ts.close();\n\t\t\n\t}\n\t\n\t@Test\n\tpublic void testJoinFetchManyToMany() {\n\t\tSession s = openSession();\n\t\tTransaction t = s.beginTransaction();\n\t\tGroup hb = new Group(\"hibernate\");\n\t\tUser gavin = new User(\"gavin\");\n\t\tUser max = new User(\"max\");\n\t\thb.getUsers().put(\"gavin\", gavin);\n\t\thb.getUsers().put(\"max\", max);\n\t\tgavin.getGroups().put(\"hibernate\", hb);\n\t\tmax.getGroups().put(\"hibernate\", hb);\n\t\ts.persist(hb);\n\t\tt.commit();\n\t\ts.close();\n\t\t\n\t\ts = openSession();\n\t\tt = s.beginTransaction();\n\t\thb = (Group) s.get(Group.class, \"hibernate\");\n\t\tassertTrue( Hibernate.isInitialized( hb.getUsers() ) );\n\t\tgavin = (User) hb.getUsers().get(\"gavin\");\n\t\tassertFalse( Hibernate.isInitialized( gavin.getGroups() ) );\n\t\tmax = (User) s.get(User.class, \"max\");\n\t\tassertFalse( Hibernate.isInitialized( max.getGroups() ) );\n\t\tt.commit();\n\t\ts.close();\n\n\t\ts = openSession();\n\t\tt = s.beginTransaction();\n\t\thb = (Group) s.createCriteria(Group.class)\n\t\t\t.setFetchMode(\"users\", FetchMode.JOIN)\n\t\t\t.setFetchMode(\"users.groups\", FetchMode.JOIN)\n\t\t\t.uniqueResult();\n\t\tassertTrue( Hibernate.isInitialized( hb.getUsers() ) );\n\t\tgavin = (User) hb.getUsers().get(\"gavin\");\n\t\tassertTrue( Hibernate.isInitialized( gavin.getGroups() ) );\n\t\tmax = (User) s.get(User.class, \"max\");\n\t\tassertTrue( Hibernate.isInitialized( max.getGroups() ) );\n\t\tt.commit();\n\t\ts.close();\n\n\t\ts = openSession();\n\t\tt = s.beginTransaction();\n\t\ts.delete(hb);\n\t\tt.commit();\n\t\ts.close();\n\t}\n\n}\n\n
===================================================================
--- hibernate-core/src/test/java/org/hibernate/test/joinfetch/JoinFetchTest.java	(revision 461a8db77376c3fd2c8543ca157d08ffbf2987b6)
+++ hibernate-core/src/test/java/org/hibernate/test/joinfetch/JoinFetchTest.java	(revision )
@@ -284,5 +284,28 @@
 		s.close();
 	}
 
+    private static class ItemWrapper
+    {
+        private Item item;
+
+        public ItemWrapper(Item item)
+        {
+            this.item = item;
+        }
+    }
+
+    @Test
+    public void testJoinFetchTypeSafeJavaObject()
+    {
+        Session s = openSession();
+        Transaction t = s.beginTransaction();
+        ItemWrapper iw = (ItemWrapper) s.createQuery(
+                "select new org.hibernate.test.joinfetch.JoinFetchTest$ItemWrapper(i) from Item i left join fetch i.bids left join fetch i.comments")
+                .uniqueResult();
+        assertTrue(Hibernate.isInitialized(iw.item.getBids()));
+        assertTrue(Hibernate.isInitialized(iw.item.getComments()));
+        t.commit();
+        s.close();
+    }
 }
 
