<?xml version="1.0" encoding="UTF-8"?>
<server description="new server">
  <variable name="db.serverName" defaultValue="localhost" />
  <variable name="db.portNumber" defaultValue="5432" />
  <variable name="db.databaseName" defaultValue="postgres" />
  <variable name="db.user" defaultValue="postgres" />
  <variable name="db.password" defaultValue="postgres" />
  <!-- Enable features -->
  <featureManager>
    <feature>javaee-8.0</feature>
    <feature>localConnector-1.0</feature>
    <feature>bells-1.0</feature>
  </featureManager>
  <!-- This template enables security. To get the full use of all the capabilities, a keystore and user registry are required. -->
  <!-- For the keystore, default keys are generated and stored in a keystore. To provide the keystore password, generate an 
         encoded password using bin/securityUtility encode and add it below in the password attribute of the keyStore element. 
         Then uncomment the keyStore element. -->
  <!--
    <keyStore password=""/> 
    -->
  <!--For a user registry configuration, configure your user registry. For example, configure a basic user registry using the
        basicRegistry element. Specify your own user name below in the name attribute of the user element. For the password, 
        generate an encoded password using bin/securityUtility encode and add it in the password attribute of the user element. 
        Then uncomment the user element. -->
  <basicRegistry id="basic" realm="BasicRealm">
    <!-- <user name="yourUserName" password="" />  -->
  </basicRegistry>
  <!-- To access this server from a remote client add a host attribute to the following element, e.g. host="*" -->
  <httpEndpoint id="defaultHttpEndpoint" httpPort="9080" httpsPort="9443" />
  <!-- Automatically expand WAR files and EAR files -->
  <applicationManager autoExpand="true" />
  <!-- Default SSL configuration enables trust for default certificates from the Java runtime -->
  <ssl id="defaultSSLConfig" trustDefaultCerts="true" />
  <applicationMonitor updateTrigger="mbean" />
  <dataSource id="DefaultDS" jndiName="jdbc/DefaultDS" jdbcDriverRef="postgresql-driver" type="javax.sql.XADataSource">
    <properties serverName="${db.serverName}" portNumber="${db.portNumber}" databaseName="${db.databaseName}" user="${db.user}" password="${db.password}" currentSchema="sdb" />
    <connectionManager maxPoolSize="20" minPoolSize="5" connectionTimeout="10s" agedTimeout="30m" />
  </dataSource>
  <library id="postgresql-library" apiTypeVisibility="+third-party">
    <fileset id="PostgreSQLFileset" dir="${server.config.dir}" includes="postgresql-*.jar" />
  </library>
  <library id="hibernate" apiTypeVisibility="+third-party">
    <fileset id="HibernateFileset" dir="${server.config.dir}/hibernate" includes="*.jar" />
  </library>
  <bell libraryRef="hibernate" />
  <jdbcDriver id="postgresql-driver" javax.sql.XADataSource="org.postgresql.xa.PGXADataSource" javax.sql.ConnectionPoolDataSource="org.postgresql.ds.PGConnectionPoolDataSource" libraryRef="postgresql-library" />
  <jpa defaultPersistenceProvider="org.hibernate.jpa.HibernatePersistenceProvider" />
  <application id="demo_1_0_SNAPSHOT_war" location="${server.config.dir}/apps/demo-1.0-SNAPSHOT.war" name="demo" type="war">
    <classloader apiTypeVisibility="+third-party" commonLibraryRef="hibernate" />
  </application>
</server>

