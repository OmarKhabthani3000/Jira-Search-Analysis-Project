Index: core/src/main/java/org/hibernate/engine/JoinHelper.java
===================================================================
--- core/src/main/java/org/hibernate/engine/JoinHelper.java	(revision 20006)
+++ core/src/main/java/org/hibernate/engine/JoinHelper.java	(working copy)
@@ -84,7 +84,7 @@
 			String propertyName = type.getLHSPropertyName();
 			if (propertyName==null) {
 				return ArrayHelper.slice( 
-						lhsPersister.toColumns(alias, property), 
+						property < 0 ? lhsPersister.toIdentifierColumns(alias) : lhsPersister.toColumns(alias, property), 
 						begin, 
 						type.getColumnSpan(mapping) 
 					);
@@ -116,7 +116,7 @@
 				//slice, to get the columns for this component
 				//property
 				return ArrayHelper.slice( 
-						lhsPersister.getSubclassPropertyColumnNames(property),
+						property < 0 ? lhsPersister.getIdentifierColumnNames() : lhsPersister.getSubclassPropertyColumnNames(property),
 						begin, 
 						type.getColumnSpan(mapping) 
 					);
@@ -134,7 +134,7 @@
 		int property, 
 		OuterJoinLoadable lhsPersister
 	) {
-		if ( type.useLHSPrimaryKey() ) {
+		if ( type.useLHSPrimaryKey() || property < 0 ) {
 			return lhsPersister.getTableName();
 		}
 		else {
Index: core/src/main/java/org/hibernate/loader/JoinWalker.java
===================================================================
--- core/src/main/java/org/hibernate/loader/JoinWalker.java	(revision 20006)
+++ core/src/main/java/org/hibernate/loader/JoinWalker.java	(working copy)
@@ -49,8 +49,10 @@
 import org.hibernate.sql.DisjunctionFragment;
 import org.hibernate.sql.InFragment;
 import org.hibernate.sql.JoinFragment;
+import org.hibernate.type.AbstractComponentType;
 import org.hibernate.type.AssociationType;
 import org.hibernate.type.CompositeType;
+import org.hibernate.type.EmbeddedComponentType;
 import org.hibernate.type.EntityType;
 import org.hibernate.type.ForeignKeyDirection;
 import org.hibernate.type.Type;
@@ -511,28 +513,47 @@
 		int n = persister.countSubclassProperties();
 		for ( int i = 0; i < n; i++ ) {
 			Type type = persister.getSubclassPropertyType(i);
-			if ( type.isAssociationType() ) {
-				walkEntityAssociationTree(
-					( AssociationType ) type,
+			walkSingleType(persister, alias, path, currentDepth, i, type);
+		}
+		Type type = persister.getIdentifierType();
+		walkSingleType(persister, alias, path, currentDepth, -1, type);
+	}
+	
+	private void walkSingleType(
+			final OuterJoinLoadable persister,
+			final String alias, 
+			final PropertyPath path, 
+			final int currentDepth,
+			int i, Type type) {
+		if ( type.isAssociationType() ) {
+			walkEntityAssociationTree(
+				( AssociationType ) type, 
+				persister, 
+				i,
+				alias, 
+				path, 
+				persister.isSubclassPropertyNullable(i),
+				currentDepth
+			);
+		} else if ( type.isComponentType() ) {
+			PropertyPath newPath;
+			if ( i < 0 ) {
+				if ( type instanceof EmbeddedComponentType ) {
+					newPath = path;
+				} else {
+					newPath = path.append( persister.getIdentifierPropertyName() );
+				}
+			} else {
+				newPath = path.append( persister.getSubclassPropertyName(i) );
+			}
+			walkComponentTree(
+					( CompositeType ) type, 
+					i, 
+					0, 
 					persister,
-					i,
-					alias,
-					path,
-					persister.isSubclassPropertyNullable(i),
-					currentDepth
-				);
-			}
-			else if ( type.isComponentType() ) {
-				walkComponentTree(
-						( CompositeType ) type,
-						i,
-						0,
-						persister,
-						alias,
-						path.append( persister.getSubclassPropertyName(i) ),
-						currentDepth
-				);
-			}
+					alias, 
+					newPath, 
+					currentDepth);
 		}
 	}
 
Index: core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java
===================================================================
--- core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java	(revision 20006)
+++ core/src/main/java/org/hibernate/persister/entity/AbstractEntityPersister.java	(working copy)
@@ -1547,6 +1547,16 @@
 		}
 		return result;
 	}
+	
+	public String[] toIdentifierColumns(String name) {
+		final String alias = generateTableAlias(name, 0);
+		String[] cols = getIdentifierColumnNames();
+		String[] result = new String[cols.length];
+		for (int j = 0; j < cols.length; j++) {
+			result[j] = StringHelper.qualify(alias, cols[j]);
+		}
+		return result;
+	}
 
 	private int getSubclassPropertyIndex(String propertyName) {
 		return ArrayHelper.indexOf(subclassPropertyNameClosure, propertyName);
Index: core/src/main/java/org/hibernate/persister/entity/OuterJoinLoadable.java
===================================================================
--- core/src/main/java/org/hibernate/persister/entity/OuterJoinLoadable.java	(revision 20006)
+++ core/src/main/java/org/hibernate/persister/entity/OuterJoinLoadable.java	(working copy)
@@ -109,5 +109,10 @@
 	public String getPropertyTableName(String propertyName);
 	
 	public EntityType getEntityType();
+	
+	/**
+	 * return the aliased identifier column names
+	 */
+	public String[] toIdentifierColumns(String alias);
 
 }
