package com.lodh.position.custodian.entity;

import static com.lodh.position.custodian.entity.CustodianAccountEty.CD_CA;
import static javax.persistence.CascadeType.MERGE;
import static javax.persistence.CascadeType.PERSIST;
import static javax.persistence.CascadeType.REFRESH;
import static javax.persistence.InheritanceType.SINGLE_TABLE;

import javax.persistence.Column;
import javax.persistence.DiscriminatorColumn;
import javax.persistence.DiscriminatorValue;
import javax.persistence.Embedded;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.Inheritance;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;

import com.lodh.util.jpa.AbstractEntity;

@Entity
@Table(name = "Tbl_Custodian_Account")
@Inheritance(strategy = SINGLE_TABLE)
@DiscriminatorColumn(name = "Cd_Custodian_Account_Type", length = 4)
@DiscriminatorValue(value = CD_CA)
public class CustodianAccountEty extends AbstractEntity<Long> {

    private static final long serialVersionUID = -6826100127728718326L;

    public static final String CD_CA = "CA";

    public static final String CD_CPCA = "CPCA";

    @Id
    @SequenceGenerator(name = "seqCustAccount", sequenceName = "Sq_Id_Custodian_Account")
    @GeneratedValue(generator = "seqCustAccount")
    @Column(name = "Id_Custodian_Account")
    private Long id;

    @Embedded
    private CustodianAccountRefEty reference;

    @Column(name = "Nm_Custodian_Account", nullable = false)
    private String name;

    @Column(name = "No_External_Reference")
    private String externalReference;

    @Column(name = "Is_Principal")
    private boolean isPrincipal;

    @ManyToOne(cascade = { PERSIST, REFRESH, MERGE })
    @JoinColumn(name = "Id_Custodian", nullable = false)
    private CustodianEty custodian;

    public CustodianAccountEty() {
        super();
    }

    public CustodianAccountEty(CustodianAccountRefEty reference, CustodianEty custodian) {
        super();
        assert custodian != null;
        custodian.addAccount(this);
        this.reference = reference;
    }

    @Override
    public Long getId() {
        return id;
    }

    public String getExternalReference() {
        return externalReference;
    }

    public void setExternalReference(String externalReference) {
        this.externalReference = externalReference;
    }

    public boolean isPrincipal() {
        return isPrincipal;
    }

    public void setPrincipal(boolean isPrincipal) {
        this.isPrincipal = isPrincipal;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public CustodianAccountRefEty getReference() {
        return reference;
    }

    public void setReference(CustodianAccountRefEty reference) {
        this.reference = reference;
    }

    public CustodianEty getCustodian() {
        return custodian;
    }

    public void setCustodian(CustodianEty custodian) {
        assert custodian != null;
        this.custodian = custodian;
    }

}









package com.lodh.position.custodian.entity;

import java.io.Serializable;

import javax.persistence.Column;
import javax.persistence.Embeddable;

import com.lodh.util.ObjectHelper;

@Embeddable
public class CustodianRefEty implements Serializable {

    private static final long serialVersionUID = 5751597244790818611L;

    @Column(name = "NO_CUSTODIAN", nullable = false, unique = true)
    private String noCustodian;

    public CustodianRefEty(String noCustodian) {
        super();
        this.noCustodian = noCustodian;
    }

    public CustodianRefEty() {
        super();
    }

    public String getNoCustodian() {
        return noCustodian;
    }

    public void setNoCustodian(String noCustodian) {
        this.noCustodian = noCustodian;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other)
            return true;
        if (!(other instanceof CustodianRefEty))
            return false;

        final CustodianRefEty o = (CustodianRefEty) other;

        return ObjectHelper.equalsOrNull(noCustodian, o.noCustodian);
    }

    @Override
    public int hashCode() {
        return noCustodian == null ? 0 : noCustodian.hashCode();
    }

    @Override
    public String toString() {
        return "{" + noCustodian + '}';
    }

}







package com.lodh.position.custodian.entity;

import static com.lodh.position.custodian.entity.CustodianAccountEty.CD_CA;
import static javax.persistence.CascadeType.MERGE;
import static javax.persistence.CascadeType.PERSIST;
import static javax.persistence.CascadeType.REFRESH;
import static javax.persistence.InheritanceType.SINGLE_TABLE;

import javax.persistence.Column;
import javax.persistence.DiscriminatorColumn;
import javax.persistence.DiscriminatorValue;
import javax.persistence.Embedded;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.Inheritance;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;

import com.lodh.util.jpa.AbstractEntity;

@Entity
@Table(name = "Tbl_Custodian_Account")
@Inheritance(strategy = SINGLE_TABLE)
@DiscriminatorColumn(name = "Cd_Custodian_Account_Type", length = 4)
@DiscriminatorValue(value = CD_CA)
public class CustodianAccountEty extends AbstractEntity<Long> {

    private static final long serialVersionUID = -6826100127728718326L;

    public static final String CD_CA = "CA";

    public static final String CD_CPCA = "CPCA";

    @Id
    @SequenceGenerator(name = "seqCustAccount", sequenceName = "Sq_Id_Custodian_Account")
    @GeneratedValue(generator = "seqCustAccount")
    @Column(name = "Id_Custodian_Account")
    private Long id;

    @Embedded
    private CustodianAccountRefEty reference;

    @Column(name = "Nm_Custodian_Account", nullable = false)
    private String name;

    @Column(name = "No_External_Reference")
    private String externalReference;

    @Column(name = "Is_Principal")
    private boolean isPrincipal;

    @ManyToOne(cascade = { PERSIST, REFRESH, MERGE })
    @JoinColumn(name = "Id_Custodian", nullable = false)
    private CustodianEty custodian;

    public CustodianAccountEty() {
        super();
    }

    public CustodianAccountEty(CustodianAccountRefEty reference, CustodianEty custodian) {
        super();
        assert custodian != null;
        custodian.addAccount(this);
        this.reference = reference;
    }

    @Override
    public Long getId() {
        return id;
    }

    public String getExternalReference() {
        return externalReference;
    }

    public void setExternalReference(String externalReference) {
        this.externalReference = externalReference;
    }

    public boolean isPrincipal() {
        return isPrincipal;
    }

    public void setPrincipal(boolean isPrincipal) {
        this.isPrincipal = isPrincipal;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public CustodianAccountRefEty getReference() {
        return reference;
    }

    public void setReference(CustodianAccountRefEty reference) {
        this.reference = reference;
    }

    public CustodianEty getCustodian() {
        return custodian;
    }

    public void setCustodian(CustodianEty custodian) {
        assert custodian != null;
        this.custodian = custodian;
    }

}












