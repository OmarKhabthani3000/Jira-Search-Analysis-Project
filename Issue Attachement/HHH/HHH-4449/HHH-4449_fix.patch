Index: src/main/java/org/hibernate/envers/event/AuditEventListener.java
===================================================================
--- src/main/java/org/hibernate/envers/event/AuditEventListener.java	(revision 54556)
+++ src/main/java/org/hibernate/envers/event/AuditEventListener.java	Fri Sep 18 16:44:04 EEST 2009
@@ -105,7 +105,7 @@
                     	    toEntityName = session.bestGuessEntityName(newValue);
                     	    id = hibernateProxy.getHibernateLazyInitializer().getIdentifier();
 							// We've got to initialize the object from the proxy to later read its state.   
-							newValue = Tools.getTargetFromProxy(hibernateProxy);
+							newValue = Tools.getTargetFromProxy(session.getFactory(), hibernateProxy);
                     	} else {
                     		toEntityName =  session.guessEntityName(newValue);
 
@@ -125,7 +125,7 @@
                     	    toEntityName = session.bestGuessEntityName(oldValue);
                     	    id = hibernateProxy.getHibernateLazyInitializer().getIdentifier();
 							// We've got to initialize the object as we'll read it's state anyway.
-							oldValue = Tools.getTargetFromProxy(hibernateProxy);
+							oldValue = Tools.getTargetFromProxy(session.getFactory(), hibernateProxy);
                     	} else {
                     		toEntityName =  session.guessEntityName(oldValue);
 
Index: src/main/java/org/hibernate/envers/tools/Tools.java
===================================================================
--- src/main/java/org/hibernate/envers/tools/Tools.java	(revision 54556)
+++ src/main/java/org/hibernate/envers/tools/Tools.java	Fri Sep 18 17:21:00 EEST 2009
@@ -25,6 +25,7 @@
 
 import org.hibernate.proxy.HibernateProxy;
 import org.hibernate.engine.SessionImplementor;
+import org.hibernate.engine.SessionFactoryImplementor;
 import org.hibernate.Session;
 
 import java.util.*;
@@ -66,20 +67,21 @@
 		return session.getEntityPersister(null, obj).getIdentifier(obj, session.getEntityMode());
 	}
 
-	public static Object getTargetFromProxy(HibernateProxy proxy) {
+    public static Object getTargetFromProxy(SessionFactoryImplementor sessionFactoryImplementor, HibernateProxy proxy) {
-		if (!proxy.getHibernateLazyInitializer().isUninitialized()) {
-			return proxy.getHibernateLazyInitializer().getImplementation();
-		}
+        if (!proxy.getHibernateLazyInitializer().isUninitialized()) {
+            return proxy.getHibernateLazyInitializer().getImplementation();
+        }
 
-		Session tempSession = proxy.getHibernateLazyInitializer().getSession().getFactory().openTemporarySession();
+        SessionImplementor sessionImplementor = proxy.getHibernateLazyInitializer().getSession();
+        Session tempSession = sessionImplementor==null ? sessionFactoryImplementor.openTemporarySession() : sessionImplementor.getFactory().openTemporarySession();
-		try {
-			proxy.getHibernateLazyInitializer().setSession((SessionImplementor) tempSession);
-			proxy.getHibernateLazyInitializer().initialize();
-			return proxy.getHibernateLazyInitializer().getImplementation();
-		} finally {
-			tempSession.close();
-		}
-	}
+        try {
+            proxy.getHibernateLazyInitializer().setSession((SessionImplementor) tempSession);
+            proxy.getHibernateLazyInitializer().initialize();
+            return proxy.getHibernateLazyInitializer().getImplementation();
+        } finally {
+            tempSession.close();
+        }
+    }
 
     public static boolean objectsEqual(Object obj1, Object obj2) {
         if (obj1 == null) {
@@ -113,7 +115,7 @@
     }
 
     /**
-     * Transforms a list of arbitrary elements to a list of index-element pairs. 
+     * Transforms a list of arbitrary elements to a list of index-element pairs.
      * @param list List to transform.
      * @return A list of pairs: ((0, element_at_index_0), (1, element_at_index_1), ...)
      */
