Index: src/org/hibernate/action/EntityInsertAction.java
===================================================================
--- src/org/hibernate/action/EntityInsertAction.java	(revision 9939)
+++ src/org/hibernate/action/EntityInsertAction.java	(working copy)
@@ -11,6 +11,7 @@
 import org.hibernate.engine.SessionFactoryImplementor;
 import org.hibernate.engine.SessionImplementor;
 import org.hibernate.engine.Versioning;
+import org.hibernate.event.EventSource;
 import org.hibernate.event.PostInsertEvent;
 import org.hibernate.event.PostInsertEventListener;
 import org.hibernate.event.PreInsertEvent;
@@ -111,7 +112,7 @@
 		PostInsertEventListener[] postListeners = getSession().getListeners()
 				.getPostInsertEventListeners();
 		if ( postListeners.length > 0 ) {
-			PostInsertEvent postEvent = new PostInsertEvent( getInstance(), getId(), state, getPersister() );
+			PostInsertEvent postEvent = new PostInsertEvent( (EventSource)getSession(), getInstance(), getId(), state, getPersister() );
 			for ( int i = 0; i < postListeners.length; i++ ) {
 				postListeners[i].onPostInsert(postEvent);
 			}
@@ -122,7 +123,7 @@
 		PostInsertEventListener[] postListeners = getSession().getListeners()
 				.getPostCommitInsertEventListeners();
 		if ( postListeners.length > 0 ) {
-			PostInsertEvent postEvent = new PostInsertEvent( getInstance(), getId(), state, getPersister() );
+			PostInsertEvent postEvent = new PostInsertEvent( (EventSource)getSession(), getInstance(), getId(), state, getPersister() );
 			for ( int i = 0; i < postListeners.length; i++ ) {
 				postListeners[i].onPostInsert(postEvent);
 			}
@@ -134,7 +135,7 @@
 				.getPreInsertEventListeners();
 		boolean veto = false;
 		if (preListeners.length>0) {
-			PreInsertEvent preEvent = new PreInsertEvent( getInstance(), getId(), state, getPersister(), getSession() );
+			PreInsertEvent preEvent = new PreInsertEvent( (EventSource)getSession(), getInstance(), getId(), state, getPersister(), getSession() );
 			for ( int i = 0; i < preListeners.length; i++ ) {
 				veto = preListeners[i].onPreInsert(preEvent) || veto;
 			}
Index: src/org/hibernate/action/EntityIdentityInsertAction.java
===================================================================
--- src/org/hibernate/action/EntityIdentityInsertAction.java	(revision 9939)
+++ src/org/hibernate/action/EntityIdentityInsertAction.java	(working copy)
@@ -7,6 +7,7 @@
 import org.hibernate.AssertionFailure;
 import org.hibernate.engine.SessionImplementor;
 import org.hibernate.engine.EntityKey;
+import org.hibernate.event.EventSource;
 import org.hibernate.event.PostInsertEvent;
 import org.hibernate.event.PostInsertEventListener;
 import org.hibernate.event.PreInsertEvent;
@@ -78,7 +79,7 @@
 		PostInsertEventListener[] postListeners = getSession().getListeners()
 				.getPostInsertEventListeners();
 		if (postListeners.length>0) {
-			PostInsertEvent postEvent = new PostInsertEvent( getInstance(), generatedId, state, getPersister() );
+			PostInsertEvent postEvent = new PostInsertEvent( (EventSource)getSession(), getInstance(), generatedId, state, getPersister() );
 			for ( int i = 0; i < postListeners.length; i++ ) {
 				postListeners[i].onPostInsert(postEvent);
 			}
@@ -89,7 +90,7 @@
 		PostInsertEventListener[] postListeners = getSession().getListeners()
 				.getPostCommitInsertEventListeners();
 		if (postListeners.length>0) {
-			PostInsertEvent postEvent = new PostInsertEvent( getInstance(), generatedId, state, getPersister() );
+			PostInsertEvent postEvent = new PostInsertEvent( (EventSource)getSession(), getInstance(), generatedId, state, getPersister() );
 			for ( int i = 0; i < postListeners.length; i++ ) {
 				postListeners[i].onPostInsert(postEvent);
 			}
@@ -101,7 +102,7 @@
 				.getPreInsertEventListeners();
 		boolean veto = false;
 		if (preListeners.length>0) {
-			PreInsertEvent preEvent = new PreInsertEvent( getInstance(), null, state, getPersister(), getSession() );
+			PreInsertEvent preEvent = new PreInsertEvent( (EventSource)getSession(), getInstance(), null, state, getPersister(), getSession() );
 			for ( int i = 0; i < preListeners.length; i++ ) {
 				veto = preListeners[i].onPreInsert(preEvent) || veto;
 			}
Index: src/org/hibernate/action/EntityDeleteAction.java
===================================================================
--- src/org/hibernate/action/EntityDeleteAction.java	(revision 9939)
+++ src/org/hibernate/action/EntityDeleteAction.java	(working copy)
@@ -11,6 +11,7 @@
 import org.hibernate.engine.EntityKey;
 import org.hibernate.engine.PersistenceContext;
 import org.hibernate.engine.SessionImplementor;
+import org.hibernate.event.EventSource;
 import org.hibernate.event.PostDeleteEvent;
 import org.hibernate.event.PostDeleteEventListener;
 import org.hibernate.event.PreDeleteEvent;
@@ -103,7 +104,7 @@
 				.getPreDeleteEventListeners();
 		boolean veto = false;
 		if (preListeners.length>0) {
-			PreDeleteEvent preEvent = new PreDeleteEvent( getInstance(), getId(), state, getPersister() );
+			PreDeleteEvent preEvent = new PreDeleteEvent( (EventSource)getSession(), getInstance(), getId(), state, getPersister() );
 			for ( int i = 0; i < preListeners.length; i++ ) {
 				veto = preListeners[i].onPreDelete(preEvent) || veto;
 			}
@@ -115,7 +116,7 @@
 		PostDeleteEventListener[] postListeners = getSession().getListeners()
 				.getPostDeleteEventListeners();
 		if (postListeners.length>0) {
-			PostDeleteEvent postEvent = new PostDeleteEvent( getInstance(), getId(), state, getPersister() );
+			PostDeleteEvent postEvent = new PostDeleteEvent( (EventSource)getSession(), getInstance(), getId(), state, getPersister() );
 			for ( int i = 0; i < postListeners.length; i++ ) {
 				postListeners[i].onPostDelete(postEvent);
 			}
@@ -126,7 +127,7 @@
 		PostDeleteEventListener[] postListeners = getSession().getListeners()
 				.getPostCommitDeleteEventListeners();
 		if (postListeners.length>0) {
-			PostDeleteEvent postEvent = new PostDeleteEvent( getInstance(), getId(), state, getPersister() );
+			PostDeleteEvent postEvent = new PostDeleteEvent( (EventSource)getSession(), getInstance(), getId(), state, getPersister() );
 			for ( int i = 0; i < postListeners.length; i++ ) {
 				postListeners[i].onPostDelete(postEvent);
 			}
Index: src/org/hibernate/action/EntityUpdateAction.java
===================================================================
--- src/org/hibernate/action/EntityUpdateAction.java	(revision 9939)
+++ src/org/hibernate/action/EntityUpdateAction.java	(working copy)
@@ -14,6 +14,7 @@
 import org.hibernate.engine.SessionImplementor;
 import org.hibernate.engine.Status;
 import org.hibernate.engine.Versioning;
+import org.hibernate.event.EventSource;
 import org.hibernate.event.PostUpdateEvent;
 import org.hibernate.event.PostUpdateEventListener;
 import org.hibernate.event.PreUpdateEvent;
@@ -171,6 +172,7 @@
 				.getPostUpdateEventListeners();
 		if (postListeners.length>0) {
 			PostUpdateEvent postEvent = new PostUpdateEvent( 
+			                (EventSource)getSession(),
 					getInstance(), 
 					getId(), 
 					state, 
@@ -188,6 +190,7 @@
 				.getPostCommitUpdateEventListeners();
 		if (postListeners.length>0) {
 			PostUpdateEvent postEvent = new PostUpdateEvent( 
+			                (EventSource)getSession(),
 					getInstance(), 
 					getId(), 
 					state, 
@@ -206,6 +209,7 @@
 		boolean veto = false;
 		if (preListeners.length>0) {
 			PreUpdateEvent preEvent = new PreUpdateEvent( 
+			                (EventSource)getSession(),
 					getInstance(), 
 					getId(), 
 					state, 
Index: src/org/hibernate/event/PreDeleteEvent.java
===================================================================
--- src/org/hibernate/event/PreDeleteEvent.java	(revision 9939)
+++ src/org/hibernate/event/PreDeleteEvent.java	(working copy)
@@ -10,7 +10,7 @@
  * 
  * @author Gavin King
  */
-public class PreDeleteEvent {
+public class PreDeleteEvent extends AbstractEvent {
 	private Object entity;
 	private EntityPersister persister;
 	private Serializable id;
@@ -30,11 +30,13 @@
 	}
 	
 	public PreDeleteEvent(
+                        EventSource session,
 			Object entity, 
 			Serializable id,
 			Object[] deletedState,
 			EntityPersister persister
 	) {
+	        super(session);
 		this.entity = entity;
 		this.persister = persister;
 		this.id = id;
Index: src/org/hibernate/event/PostInsertEvent.java
===================================================================
--- src/org/hibernate/event/PostInsertEvent.java	(revision 9939)
+++ src/org/hibernate/event/PostInsertEvent.java	(working copy)
@@ -10,18 +10,20 @@
  * 
  * @author Gavin King
  */
-public class PostInsertEvent {
+public class PostInsertEvent extends AbstractEvent {
 	private Object entity;
 	private EntityPersister persister;
 	private Object[] state;
 	private Serializable id;
 	
 	public PostInsertEvent(
+			EventSource session,
 			Object entity, 
 			Serializable id,
 			Object[] state,
 			EntityPersister persister
 	) {
+	        super(session);
 		this.entity = entity;
 		this.id = id;
 		this.state = state;
Index: src/org/hibernate/event/PostUpdateEvent.java
===================================================================
--- src/org/hibernate/event/PostUpdateEvent.java	(revision 9939)
+++ src/org/hibernate/event/PostUpdateEvent.java	(working copy)
@@ -10,7 +10,7 @@
  * 
  * @author Gavin King
  */
-public class PostUpdateEvent {
+public class PostUpdateEvent extends AbstractEvent {
 	private Object entity;
 	private EntityPersister persister;
 	private Object[] state;
@@ -18,12 +18,14 @@
 	private Serializable id;
 	
 	public PostUpdateEvent(
+                        EventSource session,
 			Object entity, 
 			Serializable id,
 			Object[] state,
 			Object[] oldState,
 			EntityPersister persister
 	) {
+	        super(session);
 		this.entity = entity;
 		this.id = id;
 		this.state = state;
Index: src/org/hibernate/event/PostDeleteEvent.java
===================================================================
--- src/org/hibernate/event/PostDeleteEvent.java	(revision 9939)
+++ src/org/hibernate/event/PostDeleteEvent.java	(working copy)
@@ -10,18 +10,20 @@
  * 
  * @author Gavin King
  */
-public class PostDeleteEvent {
+public class PostDeleteEvent extends AbstractEvent {
 	private Object entity;
 	private EntityPersister persister;
 	private Serializable id;
 	private Object[] deletedState;
 	
 	public PostDeleteEvent(
+                        EventSource session,
 			Object entity, 
 			Serializable id,
 			Object[] deletedState,
 			EntityPersister persister
 	) {
+	        super(session);
 		this.entity = entity;
 		this.id = id;
 		this.persister = persister;
Index: src/org/hibernate/event/PreInsertEvent.java
===================================================================
--- src/org/hibernate/event/PreInsertEvent.java	(revision 9939)
+++ src/org/hibernate/event/PreInsertEvent.java	(working copy)
@@ -11,7 +11,7 @@
  * 
  * @author Gavin King
  */
-public class PreInsertEvent {
+public class PreInsertEvent extends AbstractEvent {
 	private Object entity;
 	private EntityPersister persister;
 	private Object[] state;
@@ -19,12 +19,14 @@
 	private SessionImplementor source;
 
 	public PreInsertEvent(
+                        EventSource session,
 			Object entity,
 			Serializable id,
 			Object[] state,
 			EntityPersister persister,
 			SessionImplementor source
 	) {
+	        super(session);
 		this.source = source;
 		this.entity = entity;
 		this.id = id;
Index: src/org/hibernate/event/PreUpdateEvent.java
===================================================================
--- src/org/hibernate/event/PreUpdateEvent.java	(revision 9939)
+++ src/org/hibernate/event/PreUpdateEvent.java	(working copy)
@@ -11,7 +11,7 @@
  * 
  * @author Gavin King
  */
-public class PreUpdateEvent {
+public class PreUpdateEvent extends AbstractEvent {
 	private Object entity;
 	private EntityPersister persister;
 	private Object[] state;
@@ -20,6 +20,7 @@
 	private SessionImplementor source;
 
 	public PreUpdateEvent(
+                        EventSource session,
 			Object entity,
 			Serializable id,
 			Object[] state,
@@ -27,6 +28,7 @@
 			EntityPersister persister,
 			SessionImplementor source
 	) {
+	        super(session);
 		this.source = source;
 		this.entity = entity;
 		this.id = id;
