Index: core/src/main/java/org/hibernate/id/CompositeNestedGeneratedValueGenerator.java
===================================================================
--- core/src/main/java/org/hibernate/id/CompositeNestedGeneratedValueGenerator.java	Mon Jan 18 09:59:58 CST 2010
+++ core/src/main/java/org/hibernate/id/CompositeNestedGeneratedValueGenerator.java	Mon Jan 18 09:59:58 CST 2010
@@ -0,0 +1,118 @@
+/*
+ * Hibernate, Relational Persistence for Idiomatic Java
+ *
+ * Copyright (c) 2010, Red Hat Inc. or third-party contributors as
+ * indicated by the @author tags or express copyright attribution
+ * statements applied by the authors.  All third-party contributions are
+ * distributed under license by Red Hat Inc.
+ *
+ * This copyrighted material is made available to anyone wishing to use, modify,
+ * copy, or redistribute it subject to the terms and conditions of the GNU
+ * Lesser General Public License, as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
+ * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
+ * for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with this distribution; if not, write to:
+ * Free Software Foundation, Inc.
+ * 51 Franklin Street, Fifth Floor
+ * Boston, MA  02110-1301  USA
+ */
+package org.hibernate.id;
+
+import java.io.Serializable;
+import java.lang.reflect.Field;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Member;
+import java.lang.reflect.Method;
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
+
+import org.hibernate.HibernateException;
+import org.hibernate.engine.SessionImplementor;
+import org.hibernate.type.Type;
+
+/**
+ * TODO : javadoc
+ *
+ * @author Steve Ebersole
+ */
+public class CompositeNestedGeneratedValueGenerator implements IdentifierGenerator {
+	private Class pkClass; 	// used as base for injections...
+	private List generationPlans = new ArrayList();
+
+	public void addGeneratedValuePlan(GenerationPlan plan) {
+		generationPlans.add( plan );
+	}
+
+	public Serializable generate(SessionImplementor session, Object object) throws HibernateException {
+		final Serializable injectionTarget;
+		if ( pkClass == null || pkClass.isInstance( object ) ) {
+			// should account for the "embedded composite pk" case
+			injectionTarget = (Serializable) object;
+		}
+		else {
+			// should account for the "separate composite pk class" case
+			try {
+				injectionTarget = (Serializable) pkClass.newInstance(); // too simplistic, ideally use the tuplizer and instantiator
+			}
+			catch ( Exception e ) {
+				throw new HibernateException( "Unable to instantiate given primary key class [" + pkClass.getName() + "]" );
+			}
+		}
+
+		Iterator itr = generationPlans.iterator();
+		while ( itr.hasNext() ) {
+			final GenerationPlan plan = (GenerationPlan) itr.next();
+			plan.execute( session, object, injectionTarget );
+		}
+
+		return injectionTarget;
+	}
+
+	public static class GenerationPlan {
+		private final IdentifierGenerator propertyGenerator;
+		private final Type propertyType;
+		private final Member injectionMember;
+
+		private GenerationPlan(IdentifierGenerator propertyGenerator, Type propertyType, Member injectionMember) {
+			this.propertyGenerator = propertyGenerator;
+			this.propertyType = propertyType;
+			this.injectionMember = injectionMember;
+		}
+
+		public void execute(SessionImplementor session, Object incomingObject, Object injectionTarget) {
+			final Object generatedValue = propertyGenerator.generate( session, incomingObject );
+			try {
+				if ( Field.class.isInstance( injectionMember ) ) {
+					( (Field) injectionMember ).set( injectionTarget, generatedValue );
+				}
+				else {
+					( (Method) injectionMember ).invoke( injectionTarget, new Object[] {generatedValue} );
+				}
+			}
+			catch ( InvocationTargetException e ) {
+				throw new HibernateException( "Unable to inject generated value", e.getTargetException() );
+			}
+			catch ( Exception e ) {
+				throw new HibernateException( "Unable to inject generated value", e );
+			}
+		}
+
+		public IdentifierGenerator getPropertyGenerator() {
+			return propertyGenerator;
+		}
+
+		public Type getPropertyType() {
+			return propertyType;
+		}
+
+		public Member getInjectionMember() {
+			return injectionMember;
+		}
+	}
+}
