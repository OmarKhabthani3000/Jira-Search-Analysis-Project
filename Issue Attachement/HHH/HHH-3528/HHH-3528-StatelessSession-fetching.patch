Index: testsuite/src/test/java/org/hibernate/test/stateless/fetching/User.java
===================================================================
--- testsuite/src/test/java/org/hibernate/test/stateless/fetching/User.java	Wed Mar 04 20:41:45 CST 2009
+++ testsuite/src/test/java/org/hibernate/test/stateless/fetching/User.java	Wed Mar 04 20:41:45 CST 2009
@@ -0,0 +1,55 @@
+/*
+ * Copyright (c) 2009, Red Hat Middleware LLC or third-party contributors as
+ * indicated by the @author tags or express copyright attribution
+ * statements applied by the authors.  All third-party contributions are
+ * distributed under license by Red Hat Middleware LLC.
+ *
+ * This copyrighted material is made available to anyone wishing to use, modify,
+ * copy, or redistribute it subject to the terms and conditions of the GNU
+ * Lesser General Public License, as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
+ * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
+ * for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with this distribution; if not, write to:
+ * Free Software Foundation, Inc.
+ * 51 Franklin Street, Fifth Floor
+ * Boston, MA  02110-1301  USA
+ */
+package org.hibernate.test.stateless.fetching;
+
+/**
+ * TODO : javadoc
+ *
+ * @author Steve Ebersole
+ */
+public class User {
+	private Long id;
+	private String name;
+
+	public User() {
+	}
+
+	public User(String name) {
+		this.name = name;
+	}
+
+	public Long getId() {
+		return id;
+	}
+
+	public void setId(Long id) {
+		this.id = id;
+	}
+
+	public String getName() {
+		return name;
+	}
+
+	public void setName(String name) {
+		this.name = name;
+	}
+}
Index: testsuite/src/test/java/org/hibernate/test/stateless/fetching/Task.java
===================================================================
--- testsuite/src/test/java/org/hibernate/test/stateless/fetching/Task.java	Wed Mar 04 20:54:16 CST 2009
+++ testsuite/src/test/java/org/hibernate/test/stateless/fetching/Task.java	Wed Mar 04 20:54:16 CST 2009
@@ -0,0 +1,111 @@
+/*
+ * Copyright (c) 2009, Red Hat Middleware LLC or third-party contributors as
+ * indicated by the @author tags or express copyright attribution
+ * statements applied by the authors.  All third-party contributions are
+ * distributed under license by Red Hat Middleware LLC.
+ *
+ * This copyrighted material is made available to anyone wishing to use, modify,
+ * copy, or redistribute it subject to the terms and conditions of the GNU
+ * Lesser General Public License, as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
+ * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
+ * for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with this distribution; if not, write to:
+ * Free Software Foundation, Inc.
+ * 51 Franklin Street, Fifth Floor
+ * Boston, MA  02110-1301  USA
+ */
+package org.hibernate.test.stateless.fetching;
+
+import java.util.Date;
+
+/**
+ * TODO : javadoc
+ *
+ * @author Steve Ebersole
+ */
+public class Task {
+	private Long id;
+	private String description;
+	private User user;
+	private Resource resource;
+	private Date dueDate;
+	private Date startDate;
+	private Date completionDate;
+
+	public Task() {
+	}
+
+	public Task(User user, String description, Resource resource, Date dueDate) {
+		this( user, description, resource, dueDate, null, null );
+	}
+
+	public Task(User user, String description, Resource resource, Date dueDate, Date startDate, Date completionDate) {
+		this.user = user;
+		this.resource = resource;
+		this.description = description;
+		this.dueDate = dueDate;
+		this.startDate = startDate;
+		this.completionDate = completionDate;
+	}
+
+	public Long getId() {
+		return id;
+	}
+
+	public void setId(Long id) {
+		this.id = id;
+	}
+
+	public User getUser() {
+		return user;
+	}
+
+	public void setUser(User user) {
+		this.user = user;
+	}
+
+	public Resource getResource() {
+		return resource;
+	}
+
+	public void setResource(Resource resource) {
+		this.resource = resource;
+	}
+
+	public String getDescription() {
+		return description;
+	}
+
+	public void setDescription(String description) {
+		this.description = description;
+	}
+
+	public Date getDueDate() {
+		return dueDate;
+	}
+
+	public void setDueDate(Date dueDate) {
+		this.dueDate = dueDate;
+	}
+
+	public Date getStartDate() {
+		return startDate;
+	}
+
+	public void setStartDate(Date startDate) {
+		this.startDate = startDate;
+	}
+
+	public Date getCompletionDate() {
+		return completionDate;
+	}
+
+	public void setCompletionDate(Date completionDate) {
+		this.completionDate = completionDate;
+	}
+}
Index: testsuite/src/test/java/org/hibernate/test/stateless/fetching/Mappings.hbm.xml
===================================================================
--- testsuite/src/test/java/org/hibernate/test/stateless/fetching/Mappings.hbm.xml	Wed Mar 04 21:01:59 CST 2009
+++ testsuite/src/test/java/org/hibernate/test/stateless/fetching/Mappings.hbm.xml	Wed Mar 04 21:01:59 CST 2009
@@ -0,0 +1,56 @@
+<?xml version="1.0"?>
+<!--
+  ~ Copyright (c) 2009, Red Hat Middleware LLC or third-party contributors as
+  ~ indicated by the @author tags or express copyright attribution
+  ~ statements applied by the authors.  All third-party contributions are
+  ~ distributed under license by Red Hat Middleware LLC.
+  ~
+  ~ This copyrighted material is made available to anyone wishing to use, modify,
+  ~ copy, or redistribute it subject to the terms and conditions of the GNU
+  ~ Lesser General Public License, as published by the Free Software Foundation.
+  ~
+  ~ This program is distributed in the hope that it will be useful,
+  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
+  ~ or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
+  ~ for more details.
+  ~
+  ~ You should have received a copy of the GNU Lesser General Public License
+  ~ along with this distribution; if not, write to:
+  ~ Free Software Foundation, Inc.
+  ~ 51 Franklin Street, Fifth Floor
+  ~ Boston, MA  02110-1301  USA
+  -->
+<!DOCTYPE hibernate-mapping PUBLIC
+	"-//Hibernate/Hibernate Mapping DTD 3.0//EN"
+	"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">
+
+<hibernate-mapping package="org.hibernate.test.stateless.fetching">
+
+	<class name="User">
+		<id name="id" type="long">
+            <generator class="increment" />
+		</id>
+        <property name="name" type="string"/>
+	</class>
+
+    <class name="Resource">
+		<id name="id" type="long">
+            <generator class="increment" />
+		</id>
+        <property name="name" type="string"/>
+        <many-to-one name="owner"/>
+    </class>
+
+    <class name="Task">
+		<id name="id" type="long">
+            <generator class="increment" />
+		</id>
+        <property name="description" type="string"/>
+        <many-to-one name="user"/>
+        <many-to-one name="resource"/>
+        <property name="dueDate" type="timestamp"/>
+        <property name="startDate" type="timestamp"/>
+        <property name="completionDate" type="timestamp"/>
+	</class>
+
+</hibernate-mapping>
\ No newline at end of file
Index: core/src/main/java/org/hibernate/impl/StatelessSessionImpl.java
===================================================================
--- core/src/main/java/org/hibernate/impl/StatelessSessionImpl.java	(revision 15266)
+++ core/src/main/java/org/hibernate/impl/StatelessSessionImpl.java	Thu Mar 05 13:23:22 CST 2009
@@ -1,7 +1,5 @@
 /*
- * Hibernate, Relational Persistence for Idiomatic Java
- *
- * Copyright (c) 2008, Red Hat Middleware LLC or third-party contributors as
+ * Copyright (c) 2009, Red Hat Middleware LLC or third-party contributors as
  * indicated by the @author tags or express copyright attribution
  * statements applied by the authors.  All third-party contributions are
  * distributed under license by Red Hat Middleware LLC.
@@ -20,7 +18,6 @@
  * Free Software Foundation, Inc.
  * 51 Franklin Street, Fifth Floor
  * Boston, MA  02110-1301  USA
- *
  */
 package org.hibernate.impl;
 
@@ -263,13 +260,21 @@
 	        boolean eager,
 	        boolean nullable) throws HibernateException {
 		errorIfClosed();
-		EntityPersister persister = getFactory().getEntityPersister(entityName);
+		EntityPersister persister = getFactory().getEntityPersister( entityName );
+		// first, try to load it from the temp PC associated to this SS
+		Object loaded = temporaryPersistenceContext.getEntity( new EntityKey( id, persister, getEntityMode() ) );
+		if ( loaded != null ) {
+			// we found it in the temp PC.  Should indicate we are in the midst of processing a result set
+			// containing eager fetches via join fetch
+			return loaded;
+		}
 		if ( !eager && persister.hasProxy() ) {
+			// if the metadata allowed proxy creation and caller did not request forceful eager loading,
+			// generate a proxy
-			return persister.createProxy(id, this);
+			return persister.createProxy( id, this );
 		}
-		Object loaded = temporaryPersistenceContext.getEntity( new EntityKey(id, persister, EntityMode.POJO) );
-		//TODO: if not loaded, throw an exception
-		return loaded==null ? get( entityName, id ) : loaded;
+		// otherwise immediately materialize it
+		return get( entityName, id );
 	}
 
 	public Iterator iterate(String query, QueryParameters queryParameters) throws HibernateException {
Index: testsuite/src/test/java/org/hibernate/test/stateless/fetching/Resource.java
===================================================================
--- testsuite/src/test/java/org/hibernate/test/stateless/fetching/Resource.java	Wed Mar 04 16:16:55 CST 2009
+++ testsuite/src/test/java/org/hibernate/test/stateless/fetching/Resource.java	Wed Mar 04 16:16:55 CST 2009
@@ -0,0 +1,65 @@
+/*
+ * Copyright (c) 2009, Red Hat Middleware LLC or third-party contributors as
+ * indicated by the @author tags or express copyright attribution
+ * statements applied by the authors.  All third-party contributions are
+ * distributed under license by Red Hat Middleware LLC.
+ *
+ * This copyrighted material is made available to anyone wishing to use, modify,
+ * copy, or redistribute it subject to the terms and conditions of the GNU
+ * Lesser General Public License, as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
+ * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
+ * for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with this distribution; if not, write to:
+ * Free Software Foundation, Inc.
+ * 51 Franklin Street, Fifth Floor
+ * Boston, MA  02110-1301  USA
+ */
+package org.hibernate.test.stateless.fetching;
+
+/**
+ * TODO : javadoc
+ *
+ * @author Steve Ebersole
+ */
+public class Resource {
+	private Long id;
+	private String name;
+	private User owner;
+
+	public Resource() {
+	}
+
+	public Resource(String name, User owner) {
+		this.name = name;
+		this.owner = owner;
+	}
+
+	public Long getId() {
+		return id;
+	}
+
+	public void setId(Long id) {
+		this.id = id;
+	}
+
+	public String getName() {
+		return name;
+	}
+
+	public void setName(String name) {
+		this.name = name;
+	}
+
+	public User getOwner() {
+		return owner;
+	}
+
+	public void setOwner(User owner) {
+		this.owner = owner;
+	}
+}
Index: testsuite/src/test/java/org/hibernate/test/stateless/fetching/StatelessSessionFetchingTest.java
===================================================================
--- testsuite/src/test/java/org/hibernate/test/stateless/fetching/StatelessSessionFetchingTest.java	Thu Mar 05 13:16:18 CST 2009
+++ testsuite/src/test/java/org/hibernate/test/stateless/fetching/StatelessSessionFetchingTest.java	Thu Mar 05 13:16:18 CST 2009
@@ -0,0 +1,138 @@
+/*
+ * Copyright (c) 2009, Red Hat Middleware LLC or third-party contributors as
+ * indicated by the @author tags or express copyright attribution
+ * statements applied by the authors.  All third-party contributions are
+ * distributed under license by Red Hat Middleware LLC.
+ *
+ * This copyrighted material is made available to anyone wishing to use, modify,
+ * copy, or redistribute it subject to the terms and conditions of the GNU
+ * Lesser General Public License, as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
+ * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
+ * for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with this distribution; if not, write to:
+ * Free Software Foundation, Inc.
+ * 51 Franklin Street, Fifth Floor
+ * Boston, MA  02110-1301  USA
+ */
+package org.hibernate.test.stateless.fetching;
+
+import java.util.Date;
+
+import junit.framework.Test;
+
+import org.hibernate.junit.functional.FunctionalTestCase;
+import org.hibernate.junit.functional.FunctionalTestClassTestSuite;
+import org.hibernate.cfg.Configuration;
+import org.hibernate.cfg.ImprovedNamingStrategy;
+import org.hibernate.cfg.DefaultNamingStrategy;
+import org.hibernate.util.StringHelper;
+import org.hibernate.Session;
+import org.hibernate.StatelessSession;
+import org.hibernate.Hibernate;
+
+/**
+ * TODO : javadoc
+ *
+ * @author Steve Ebersole
+ */
+public class StatelessSessionFetchingTest extends FunctionalTestCase {
+	public StatelessSessionFetchingTest(String name) {
+		super( name );
+	}
+
+	public static Test suite() {
+		return new FunctionalTestClassTestSuite( StatelessSessionFetchingTest.class );
+	}
+
+	public String[] getMappings() {
+		return new String[] { "stateless/fetching/Mappings.hbm.xml" };
+	}
+
+	// trying a new thing here in tests with this naming strategy to help alleviate table name clashes
+
+	private class TestingNamingStrategy extends DefaultNamingStrategy {
+		private final String prefix = determineUniquePrefix();
+
+		@Override
+		public String classToTableName(String className) {
+			String resolvedTableName = prefix + '_' + super.classToTableName( className );
+			System.out.println( "Entity table name : " + className + " -> " + resolvedTableName );
+			return resolvedTableName;
+		}
+
+		@Override
+		public String tableName(String tableName) {
+			String resolvedTableName =  prefix + '_' + super.tableName( tableName );
+			System.out.println( "Qualified table-name : " + tableName + " -> " + resolvedTableName );
+			return resolvedTableName;
+		}
+
+		@Override
+		public String collectionTableName(String ownerEntity, String ownerEntityTable, String associatedEntity, String associatedEntityTable, String propertyName) {
+			String resolvedTableName = prefix + '_' + super.collectionTableName( ownerEntity, ownerEntityTable, associatedEntity, associatedEntityTable, propertyName );
+			System.out.println( "Collection table name : " + ownerEntity + '.' + propertyName + " -> " + resolvedTableName );
+			return resolvedTableName;
+		}
+
+		@Override
+		public String logicalCollectionTableName(String tableName, String ownerEntityTable, String associatedEntityTable, String propertyName) {
+			String resolvedTableName = prefix + '_' + super.logicalCollectionTableName( tableName, ownerEntityTable, associatedEntityTable, propertyName );
+			System.out.println( "Logical collection table name : " + tableName + " -> " + resolvedTableName );
+			return resolvedTableName;
+		}
+
+		private String determineUniquePrefix() {
+			return StringHelper.collapseQualifier( getClass().getName(), false ).toUpperCase();
+		}
+	}
+
+	@Override
+	public void configure(Configuration cfg) {
+		super.configure( cfg );
+		cfg.setNamingStrategy( new TestingNamingStrategy() );
+	}
+
+	public void testDynamicFetch() {
+		Session s = openSession();
+		s.beginTransaction();
+		Date now = new Date();
+		User me = new User( "me" );
+		User you = new User( "you" );
+		Resource yourClock = new Resource( "clock", you );
+		Task task = new Task( me, "clean", yourClock, now ); // :)
+		s.save( me );
+		s.save( you );
+		s.save( yourClock );
+		s.save( task );
+		s.getTransaction().commit();
+		s.close();
+
+		StatelessSession ss = sfi().openStatelessSession();
+		ss.beginTransaction();
+		Task taskRef = ( Task ) ss.createQuery( "from Task t join fetch t.resource join fetch t.user" ).uniqueResult();
+		assertTrue( taskRef != null );
+		assertTrue( Hibernate.isInitialized( taskRef ) );
+		assertTrue( Hibernate.isInitialized( taskRef.getUser() ) );
+		assertTrue( Hibernate.isInitialized( taskRef.getResource() ) );
+		assertFalse( Hibernate.isInitialized( taskRef.getResource().getOwner() ) );
+		ss.getTransaction().commit();
+		ss.close();
+
+		cleanup();
+	}
+
+	private void cleanup() {
+		Session s = openSession();
+		s.beginTransaction();
+		s.createQuery( "delete Task" ).executeUpdate();
+		s.createQuery( "delete Resource" ).executeUpdate();
+		s.createQuery( "delete User" ).executeUpdate();
+		s.getTransaction().commit();
+		s.close();
+	}
+}
