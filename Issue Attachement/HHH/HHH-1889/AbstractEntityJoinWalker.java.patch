Index: D:/eclipse_for_hibernate/workspace/Hibernate-3.2-SVN/src/org/hibernate/loader/AbstractEntityJoinWalker.java
===================================================================
--- D:/eclipse_for_hibernate/workspace/Hibernate-3.2-SVN/src/org/hibernate/loader/AbstractEntityJoinWalker.java	(revision 10842)
+++ D:/eclipse_for_hibernate/workspace/Hibernate-3.2-SVN/src/org/hibernate/loader/AbstractEntityJoinWalker.java	(working copy)
@@ -20,14 +20,14 @@
 /**
  * Abstract walker for walkers which begin at an entity (criteria
  * queries and entity loaders).
- * 
+ *
  * @author Gavin King
  */
 public abstract class AbstractEntityJoinWalker extends JoinWalker {
 
 	private final OuterJoinLoadable persister;
 	private String alias;
-	
+
 	public AbstractEntityJoinWalker(OuterJoinLoadable persister, SessionFactoryImplementor factory, Map enabledFilters) {
 		super( factory, enabledFilters );
 		this.persister = persister;
@@ -39,25 +39,25 @@
 		final String orderByString,
 		final LockMode lockMode)
 	throws MappingException {
-		
+
 		walkEntityTree( persister, getAlias() );
-		
+
 		List allAssociations = new ArrayList();
 		allAssociations.addAll(associations);
-		allAssociations.add( new OuterJoinableAssociation( 
+		allAssociations.add( new OuterJoinableAssociation(
 				persister.getEntityType(),
-				null, 
-				null, 
-				alias, 
-				JoinFragment.LEFT_OUTER_JOIN, 
+				null,
+				null,
+				alias,
+				JoinFragment.LEFT_OUTER_JOIN,
 				getFactory(),
 				CollectionHelper.EMPTY_MAP
 			) );
-		
+
 		initPersisters(allAssociations, lockMode);
 		initStatementString( whereString, orderByString, lockMode);
 	}
-	
+
 	protected final void initProjection(
 		final String projectionString,
 		final String whereString,
@@ -77,7 +77,7 @@
 	throws MappingException {
 		initStatementString(null, condition, orderBy, "", lockMode);
 	}
-	
+
 	private void initStatementString(
 			final String projection,
 			final String condition,
@@ -90,16 +90,16 @@
 		suffixes = BasicLoader.generateSuffixes( joins+1 );
 
 		JoinFragment ojf = mergeOuterJoins( associations );
-		
+
 		Select select = new Select( getDialect() )
 			.setLockMode(lockMode)
 			.setSelectClause(
-					projection==null ? 
-							persister.selectFragment( alias, suffixes[joins] ) + selectString(associations) : 
+					projection==null ?
+							persister.selectFragment( alias, suffixes[joins] ) + selectString(associations) :
 							projection
 			)
 			.setFromClause(
-				persister.fromTableFragment(alias) +
+				getDialect().appendLockHint(lockMode, persister.fromTableFragment(alias)) +
 				persister.fromJoinFragment(alias, true, true)
 			)
 			.setWhereClause(condition)
