Index: C:/workspace/Hibernate3/src/org/hibernate/engine/TwoPhaseLoad.java
===================================================================
--- C:/workspace/Hibernate3/src/org/hibernate/engine/TwoPhaseLoad.java	(revision 10354)
+++ C:/workspace/Hibernate3/src/org/hibernate/engine/TwoPhaseLoad.java	(working copy)
@@ -1,7 +1,17 @@
 //$Id$
 package org.hibernate.engine;
 
+import java.io.BufferedReader;
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.io.PrintWriter;
 import java.io.Serializable;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.Map;
 
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
@@ -273,4 +283,125 @@
 				lazyPropertiesAreUnfetched
 			);
 	}
+	
+	
+	private final static Map usedPersisters = new HashMap();
+
+	/**
+	 * Log used persisters (entity names) on INFO level.
+	 *
+	 */
+	public final static void logUsedPersisters() {
+		log.info("Used persisters: ");
+
+		for (final Iterator it = TwoPhaseLoad.usedPersisters.keySet()
+				.iterator(); it.hasNext();) {
+			final String entityName = (String) it.next();
+			log.info("  " + entityName);
+		}
+	}
+
+	public final static String usedPersistersToXml(final String indent)
+			throws IOException {
+
+		final StringBuffer sb = new StringBuffer("");
+
+		// e.g. <mapping class="mypackage.MyClass"/>
+		for (final Iterator it = TwoPhaseLoad.usedPersisters.keySet()
+				.iterator(); it.hasNext();) {
+			final String entityName = (String) it.next();
+
+			sb.append(indent);
+			sb.append("<mapping class=\"");
+			sb.append(entityName);
+			sb.append("\"/>");
+			sb.append("\n");
+		}
+
+		return sb.toString();
+	}
+
+	/**
+	 * Convenience method for @link #writeUsedPersisters(File, File, String) 
+	 * using an indentation of 4 spaces.
+	 * 
+	 * @param templateFile
+	 * @param outputFile
+	 * @throws IOException
+	 */
+	public final static void writeUsedPersisters(final File templateFile,
+			final File outputFile) throws IOException {
+		writeUsedPersisters(templateFile, outputFile, "    ");
+	}
+
+	/**
+	 * Create a hibernate configuration file with mappings for all used
+	 * persisters (all persisted entities). A template file is given 
+	 * to provide the needed XML to complete the hibernate cfg file.
+	 * 
+	 * <p/>
+	 * 
+	 * Each line in the template file which equals "$ClassMappings$" 
+	 * (trimmed) will be replaced with the actual class mappings.
+	 * 
+	 * <p/>
+	 * 
+	 * Only the class mappings will be added to the XML document, not the
+	 * column mappings.
+	 * 
+	 * @param templateFile
+	 * @param outputFile
+	 * @param indent
+	 * @throws IOException
+	 */
+	public final static void writeUsedPersisters(final File templateFile,
+			final File outputFile, final String indent) throws IOException {
+		FileOutputStream fos = null;
+		PrintWriter pw = null;
+
+		FileInputStream fis = null;
+		InputStreamReader isr = null;
+		BufferedReader br = null;
+
+		try {
+			// template
+			fis = new FileInputStream(templateFile);
+			isr = new InputStreamReader(fis);
+			br = new BufferedReader(isr);
+
+			// output
+			fos = new FileOutputStream(outputFile);
+			pw = new PrintWriter(fos);
+
+			String line;
+			while ((line = br.readLine()) != null) {
+				if (line.trim().equals("$ClassMappings$")) {
+					pw.println(usedPersistersToXml(indent));
+				} else {
+					pw.println(line);
+				}
+			}
+
+		} finally {
+			if (br != null) {
+				br.close();
+			}
+
+			if (isr != null) {
+				isr.close();
+			}
+
+			if (fis != null) {
+				fis.close();
+			}
+
+			if (pw != null) {
+				pw.close();
+			}
+
+			if (fos != null) {
+				fos.close();
+			}
+		}
+	}
 }
