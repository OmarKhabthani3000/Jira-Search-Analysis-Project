Index: core/src/main/java/org/hibernate/dialect/Dialect.java
===================================================================
--- core/src/main/java/org/hibernate/dialect/Dialect.java	(revision 14382)
+++ core/src/main/java/org/hibernate/dialect/Dialect.java	(working copy)
@@ -1364,6 +1364,17 @@
 	}
 
 	/**
+	 * Command used to drop an index.
+	 *
+	 * @param tableName The name of the table to which to drop the index.
+	 * @param indexName The name of the index to drop.
+	 * @return The command used to drop an index.
+	 */
+	public String getDropIndexString(String tableName, String indexName) {
+		return "drop index " + StringHelper.qualify(tableName, indexName);
+	}
+
+	/**
 	 * Does this dialect support the <tt>UNIQUE</tt> column syntax?
 	 *
 	 * @return boolean
Index: core/src/main/java/org/hibernate/dialect/Oracle9Dialect.java
===================================================================
--- core/src/main/java/org/hibernate/dialect/Oracle9Dialect.java	(revision 14382)
+++ core/src/main/java/org/hibernate/dialect/Oracle9Dialect.java	(working copy)
@@ -172,6 +172,10 @@
 		return false;
 	}
 
+	public String getDropIndexString(String tableName, String indexName) {
+		return "drop index " + indexName;
+	}
+
 	public String getForUpdateNowaitString() {
 		return " for update nowait";
 	}
Index: core/src/main/java/org/hibernate/dialect/HSQLDialect.java
===================================================================
--- core/src/main/java/org/hibernate/dialect/HSQLDialect.java	(revision 14382)
+++ core/src/main/java/org/hibernate/dialect/HSQLDialect.java	(working copy)
@@ -210,6 +210,10 @@
 		return "select sequence_name from information_schema.system_sequences";
 	}
 
+	public String getDropIndexString(String tableName, String indexName) {
+		return "drop index " + indexName;
+	}
+
 	public ViolatedConstraintNameExtracter getViolatedConstraintNameExtracter() {
 		return EXTRACTER;
 	}
Index: core/src/main/java/org/hibernate/dialect/MySQLDialect.java
===================================================================
--- core/src/main/java/org/hibernate/dialect/MySQLDialect.java	(revision 14382)
+++ core/src/main/java/org/hibernate/dialect/MySQLDialect.java	(working copy)
@@ -168,6 +168,15 @@
 		return false;
 	}
 
+	public String getDropIndexString(String tableName, String indexName) {
+		return new StringBuffer(indexName.length() + tableName.length() + 15)
+				.append("drop index ")
+				.append( indexName )
+				.append(" on ")
+				.append(tableName)
+				.toString();
+	}
+
 	public boolean supportsIdentityColumns() {
 		return true;
 	}
Index: core/src/main/java/org/hibernate/dialect/Oracle8iDialect.java
===================================================================
--- core/src/main/java/org/hibernate/dialect/Oracle8iDialect.java	(revision 14382)
+++ core/src/main/java/org/hibernate/dialect/Oracle8iDialect.java	(working copy)
@@ -288,6 +288,10 @@
 		return false;
 	}
 
+	public String getDropIndexString(String tableName, String indexName) {
+		return "drop index " + indexName;
+	}
+
 	public String getForUpdateNowaitString() {
 		return " for update nowait";
 	}
Index: core/src/main/java/org/hibernate/mapping/Index.java
===================================================================
--- core/src/main/java/org/hibernate/mapping/Index.java	(revision 14382)
+++ core/src/main/java/org/hibernate/mapping/Index.java	(working copy)
@@ -42,11 +42,9 @@
 			String defaultCatalog,
 			String defaultSchema
 	) {
-		return "drop index " +
-				StringHelper.qualify(
-						table.getQualifiedName( dialect, defaultCatalog, defaultSchema ),
-						name
-				);
+		return dialect.getDropIndexString(
+				table.getQualifiedName( dialect, defaultCatalog, defaultSchema ),
+				name);
 	}
 
 	public static String buildSqlCreateIndexString(
@@ -92,11 +90,9 @@
 	}
 
 	public String sqlDropString(Dialect dialect, String defaultCatalog, String defaultSchema) {
-		return "drop index " +
-				StringHelper.qualify(
-						table.getQualifiedName( dialect, defaultCatalog, defaultSchema ),
-						name
-				);
+		return dialect.getDropIndexString(
+				table.getQualifiedName( dialect, defaultCatalog, defaultSchema ),
+				name);
 	}
 
 	public Table getTable() {
