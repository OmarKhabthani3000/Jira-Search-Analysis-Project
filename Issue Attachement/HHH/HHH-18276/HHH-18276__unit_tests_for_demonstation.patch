Subject: [PATCH] HHH-18276: unit tests for demonstation
---
Index: hibernate-core/src/test/java/org/hibernate/orm/test/id/uuid/annotation/EmbeddedUuid.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/hibernate-core/src/test/java/org/hibernate/orm/test/id/uuid/annotation/EmbeddedUuid.java b/hibernate-core/src/test/java/org/hibernate/orm/test/id/uuid/annotation/EmbeddedUuid.java
new file mode 100644
--- /dev/null	(date 1718633680412)
+++ b/hibernate-core/src/test/java/org/hibernate/orm/test/id/uuid/annotation/EmbeddedUuid.java	(date 1718633680412)
@@ -0,0 +1,47 @@
+package org.hibernate.orm.test.id.uuid.annotation;
+
+import jakarta.persistence.Column;
+import jakarta.persistence.Embeddable;
+import java.io.Serializable;
+import java.util.Objects;
+import java.util.UUID;
+import org.hibernate.annotations.UuidGenerator;
+
+@Embeddable
+public class EmbeddedUuid implements Serializable {
+
+//  @UuidGenerator
+  @Column
+  private UUID id;
+
+  public EmbeddedUuid() {
+    super();
+  }
+
+  public EmbeddedUuid(final UUID id) {
+    this.id = id;
+  }
+
+  public UUID getId() {
+    return id;
+  }
+
+  public void setId(final UUID id) {
+    this.id = id;
+  }
+
+  @Override
+  public boolean equals(Object o) {
+    if (this == o)
+      return true;
+    if (o == null || getClass() != o.getClass())
+      return false;
+    EmbeddedUuid that = (EmbeddedUuid) o;
+    return Objects.equals(id, that.id);
+  }
+
+  @Override
+  public int hashCode() {
+    return Objects.hashCode(id);
+  }
+}
Index: hibernate-core/src/test/java/org/hibernate/orm/test/id/uuid/annotation/TheGenericGeneratorEmbeddingEntity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/hibernate-core/src/test/java/org/hibernate/orm/test/id/uuid/annotation/TheGenericGeneratorEmbeddingEntity.java b/hibernate-core/src/test/java/org/hibernate/orm/test/id/uuid/annotation/TheGenericGeneratorEmbeddingEntity.java
new file mode 100644
--- /dev/null	(date 1718633680419)
+++ b/hibernate-core/src/test/java/org/hibernate/orm/test/id/uuid/annotation/TheGenericGeneratorEmbeddingEntity.java	(date 1718633680419)
@@ -0,0 +1,48 @@
+/*
+ * Hibernate, Relational Persistence for Idiomatic Java
+ *
+ * License: GNU Lesser General Public License (LGPL), version 2.1 or later
+ * See the lgpl.txt file in the root directory or http://www.gnu.org/licenses/lgpl-2.1.html
+ */
+package org.hibernate.orm.test.id.uuid.annotation;
+
+import jakarta.persistence.Basic;
+import jakarta.persistence.EmbeddedId;
+import jakarta.persistence.Entity;
+import jakarta.persistence.GeneratedValue;
+import jakarta.persistence.Table;
+import org.hibernate.annotations.GenericGenerator;
+
+@Entity(name = "TheGenericGeneratorEmbeddingEntity")
+@Table(name = "TheGenericGeneratorEmbeddingEntity")
+public class TheGenericGeneratorEmbeddingEntity {
+
+	@EmbeddedId
+//	@UuidGenerator
+	@GeneratedValue(generator = "generic-embedded-uuidgenerator")
+	@GenericGenerator(name = "generic-embedded-uuidgenerator", type = GenericIdUuidGenerator.class)
+	public EmbeddedUuid id;
+
+	@Basic
+	public String name;
+
+	private TheGenericGeneratorEmbeddingEntity() {
+		// for Hibernate use
+	}
+
+	public TheGenericGeneratorEmbeddingEntity(String name) {
+		this.name = name;
+	}
+
+	public EmbeddedUuid getId() {
+		return id;
+	}
+
+	public String getName() {
+		return name;
+	}
+
+	public void setName(String name) {
+		this.name = name;
+	}
+}
\ No newline at end of file
Index: hibernate-core/src/test/java/org/hibernate/orm/test/id/uuid/annotation/TheGenericGeneratorIdEntity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/hibernate-core/src/test/java/org/hibernate/orm/test/id/uuid/annotation/TheGenericGeneratorIdEntity.java b/hibernate-core/src/test/java/org/hibernate/orm/test/id/uuid/annotation/TheGenericGeneratorIdEntity.java
new file mode 100644
--- /dev/null	(date 1718633680434)
+++ b/hibernate-core/src/test/java/org/hibernate/orm/test/id/uuid/annotation/TheGenericGeneratorIdEntity.java	(date 1718633680434)
@@ -0,0 +1,46 @@
+/*
+ * Hibernate, Relational Persistence for Idiomatic Java
+ *
+ * License: GNU Lesser General Public License (LGPL), version 2.1 or later
+ * See the lgpl.txt file in the root directory or http://www.gnu.org/licenses/lgpl-2.1.html
+ */
+package org.hibernate.orm.test.id.uuid.annotation;
+
+import jakarta.persistence.Basic;
+import jakarta.persistence.Entity;
+import jakarta.persistence.GeneratedValue;
+import jakarta.persistence.Id;
+import jakarta.persistence.Table;
+import java.util.UUID;
+import org.hibernate.annotations.GenericGenerator;
+
+@Entity(name = "TheGenericGeneratorIdEntity")
+@Table(name = "TheGenericGeneratorIdEntity")
+public class TheGenericGeneratorIdEntity {
+	@Id
+	@GeneratedValue(generator = "generic-uuidgenerator")
+	@GenericGenerator(name = "generic-uuidgenerator", type = GenericIdUuidGenerator.class)
+	public UUID id;
+	@Basic
+	public String name;
+
+	private TheGenericGeneratorIdEntity() {
+		// for Hibernate use
+	}
+
+	public TheGenericGeneratorIdEntity(String name) {
+		this.name = name;
+	}
+
+	public UUID getId() {
+		return id;
+	}
+
+	public String getName() {
+		return name;
+	}
+
+	public void setName(String name) {
+		this.name = name;
+	}
+}
\ No newline at end of file
Index: hibernate-core/src/test/java/org/hibernate/orm/test/id/uuid/annotation/GenericIdUuidGenerator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/hibernate-core/src/test/java/org/hibernate/orm/test/id/uuid/annotation/GenericIdUuidGenerator.java b/hibernate-core/src/test/java/org/hibernate/orm/test/id/uuid/annotation/GenericIdUuidGenerator.java
new file mode 100644
--- /dev/null	(date 1718633680419)
+++ b/hibernate-core/src/test/java/org/hibernate/orm/test/id/uuid/annotation/GenericIdUuidGenerator.java	(date 1718633680419)
@@ -0,0 +1,46 @@
+package org.hibernate.orm.test.id.uuid.annotation;
+
+import java.util.Properties;
+import java.util.UUID;
+import org.hibernate.HibernateException;
+import org.hibernate.MappingException;
+import org.hibernate.engine.spi.SharedSessionContractImplementor;
+import org.hibernate.id.IdentifierGenerator;
+import org.hibernate.id.UUIDGenerator;
+import org.hibernate.service.ServiceRegistry;
+import org.hibernate.type.Type;
+import org.hibernate.type.descriptor.java.UUIDJavaType;
+import org.hibernate.type.descriptor.jdbc.UUIDJdbcType;
+import org.hibernate.type.internal.NamedBasicTypeImpl;
+
+public class GenericIdUuidGenerator implements IdentifierGenerator {
+
+  private final UUIDGenerator delegate;
+  private Class<?> returnedClass;
+
+  public GenericIdUuidGenerator() {
+    this.delegate = new UUIDGenerator();
+  }
+
+  @Override
+  public void configure(Type type, Properties parameters, ServiceRegistry serviceRegistry) throws MappingException {
+    this.returnedClass = type.getReturnedClass();
+    if (EmbeddedUuid.class.isAssignableFrom(type.getReturnedClass())) {
+      delegate.configure(
+          new NamedBasicTypeImpl<>(UUIDJavaType.INSTANCE, UUIDJdbcType.INSTANCE, "uuid"),
+          parameters,
+          serviceRegistry);
+    }
+    else {
+      delegate.configure(type, parameters, serviceRegistry);
+    }
+  }
+
+  @Override
+  public Object generate(SharedSessionContractImplementor session, Object object) throws HibernateException {
+    if (EmbeddedUuid.class.isAssignableFrom(returnedClass)) {
+      return new EmbeddedUuid((UUID) delegate.generate(session, object));
+    }
+    return delegate.generate(session, object);
+  }
+}
Index: hibernate-core/src/test/java/org/hibernate/orm/test/id/uuid/annotation/TheEmbeddingEntity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/hibernate-core/src/test/java/org/hibernate/orm/test/id/uuid/annotation/TheEmbeddingEntity.java b/hibernate-core/src/test/java/org/hibernate/orm/test/id/uuid/annotation/TheEmbeddingEntity.java
new file mode 100644
--- /dev/null	(date 1718633680419)
+++ b/hibernate-core/src/test/java/org/hibernate/orm/test/id/uuid/annotation/TheEmbeddingEntity.java	(date 1718633680419)
@@ -0,0 +1,45 @@
+/*
+ * Hibernate, Relational Persistence for Idiomatic Java
+ *
+ * License: GNU Lesser General Public License (LGPL), version 2.1 or later
+ * See the lgpl.txt file in the root directory or http://www.gnu.org/licenses/lgpl-2.1.html
+ */
+package org.hibernate.orm.test.id.uuid.annotation;
+
+import jakarta.persistence.Basic;
+import jakarta.persistence.EmbeddedId;
+import jakarta.persistence.Entity;
+import jakarta.persistence.Table;
+import org.hibernate.annotations.UuidGenerator;
+
+@Entity(name = "TheEmbeddingEntity")
+@Table(name = "TheEmbeddingEntity")
+public class TheEmbeddingEntity {
+
+	@EmbeddedId
+	@UuidGenerator
+	public EmbeddedUuid id;
+
+	@Basic
+	public String name;
+
+	private TheEmbeddingEntity() {
+		// for Hibernate use
+	}
+
+	public TheEmbeddingEntity(String name) {
+		this.name = name;
+	}
+
+	public EmbeddedUuid getId() {
+		return id;
+	}
+
+	public String getName() {
+		return name;
+	}
+
+	public void setName(String name) {
+		this.name = name;
+	}
+}
\ No newline at end of file
Index: hibernate-core/src/test/java/org/hibernate/orm/test/id/uuid/annotation/UuidGeneratorAnnotationTests.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/hibernate-core/src/test/java/org/hibernate/orm/test/id/uuid/annotation/UuidGeneratorAnnotationTests.java b/hibernate-core/src/test/java/org/hibernate/orm/test/id/uuid/annotation/UuidGeneratorAnnotationTests.java
--- a/hibernate-core/src/test/java/org/hibernate/orm/test/id/uuid/annotation/UuidGeneratorAnnotationTests.java	(revision 962729b340190ae1ba35e53aa604620577d3ef94)
+++ b/hibernate-core/src/test/java/org/hibernate/orm/test/id/uuid/annotation/UuidGeneratorAnnotationTests.java	(date 1718633680434)
@@ -15,11 +15,13 @@
 import org.hibernate.testing.orm.junit.SessionFactory;
 import org.hibernate.testing.orm.junit.SessionFactoryScope;
 import org.hibernate.testing.orm.junit.SkipForDialect;
+import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-@DomainModel( annotatedClasses = {TheEntity.class, TheOtherEntity.class} )
+@DomainModel( annotatedClasses = {TheEntity.class, TheOtherEntity.class, TheGenericGeneratorIdEntity.class,
+		TheGenericGeneratorEmbeddingEntity.class, TheEmbeddingEntity.class} )
 @SessionFactory
 @SkipForDialect( dialectClass = SybaseDialect.class, matchSubTypes = true,
 		reason = "Skipped for Sybase to avoid problems with UUIDs potentially ending with a trailing 0 byte")
@@ -56,4 +58,35 @@
 			assertThat( gavin.id ).isNotNull();
 		} );
 	}
+
+	@Test
+	public void genericGeneratorEmbeddedIdUseTest(SessionFactoryScope scope) {
+		scope.inTransaction( (session) -> {
+			TheGenericGeneratorEmbeddingEntity christof = new TheGenericGeneratorEmbeddingEntity("christof");
+			session.persist( christof );
+			session.flush();
+			assertThat( christof.id ).isNotNull();
+		} );
+	}
+
+	@Test
+	public void genericGeneratorUseTest(SessionFactoryScope scope) {
+		scope.inTransaction( (session) -> {
+			TheGenericGeneratorIdEntity alexander = new TheGenericGeneratorIdEntity("alexander");
+			session.persist( alexander );
+			session.flush();
+			assertThat( alexander.id ).isNotNull();
+		} );
+	}
+
+	@Disabled("@UuidGenerator not supported on @EmbeddedId")
+	@Test
+	public void embeddingUseTest(SessionFactoryScope scope) {
+		scope.inTransaction( (session) -> {
+			TheEmbeddingEntity julian = new TheEmbeddingEntity("julian");
+			session.persist( julian );
+			session.flush();
+			assertThat( julian.id ).isNotNull();
+		});
+	}
 }
