Index: src/org/hibernate/persister/entity/BasicEntityPersister.java
===================================================================
RCS file: /cvsroot/hibernate/Hibernate3/src/org/hibernate/persister/entity/BasicEntityPersister.java,v
retrieving revision 1.42
diff -u -r1.42 BasicEntityPersister.java
--- src/org/hibernate/persister/entity/BasicEntityPersister.java	20 Jun 2005 09:16:58 -0000	1.42
+++ src/org/hibernate/persister/entity/BasicEntityPersister.java	21 Jun 2005 13:27:00 -0000
@@ -1821,10 +1821,10 @@
 			throws HibernateException {
 
 		if ( isInverseTable( j ) ) return;
		
 		//note: it is conceptually possible that a UserType could map null to
 		//      a non-null value, so the following is arguable:
-		if ( isNullableTable( j ) && isAllNull( fields, j ) ) return;
+		if ( isNullableTable( j ) && (isAllNull( fields, j ) || !hasInsertableProperties( j )) ) return;
 
 		if ( log.isTraceEnabled() ) {
 			log.trace( "Inserting entity: " + MessageHelper.infoString( this, id, getFactory() ) );
@@ -2494,7 +2494,23 @@
 		}
 		return true;
 	}
	
+    /**
+     * Check if the specified table contains at least one field that is insertable.
+     *
+     * @param tableNumber the number of the table
+     * @return
+     */
+    private boolean hasInsertableProperties(int tableNumber) {
+        boolean[] insertability = getPropertyInsertability();
+
+        for (int i = 0; i < insertability.length; i++) {
+            if ( isPropertyOfTable( i, tableNumber ) && insertability[i] ) return true;
+        }
+
+        return false;
+    }
+
 	public boolean isSubclassPropertyNullable(int i) {
 		return subclassPropertyNullabilityClosure[i];
 	}
