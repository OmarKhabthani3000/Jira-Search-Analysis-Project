Index: src/main/java/org/hibernate/envers/AuditReader.java
===================================================================
--- src/main/java/org/hibernate/envers/AuditReader.java	(revision 20237)
+++ src/main/java/org/hibernate/envers/AuditReader.java	(working copy)
@@ -25,6 +25,7 @@
 
 import java.util.Date;
 import java.util.List;
+import java.util.Set;
 
 import org.hibernate.envers.exception.NotAuditedException;
 import org.hibernate.envers.exception.RevisionDoesNotExistException;
@@ -133,6 +134,25 @@
     <T> T findRevision(Class<T> revisionEntityClass, Number revision) throws IllegalArgumentException,
             RevisionDoesNotExistException, IllegalStateException;
 
+    /**
+	 * Find a list of revisions using the revision numbers specified.
+	 * 
+	 * @param revisionEntityClass
+	 *            Class of the revision entity. Should be annotated with
+	 *            {@link RevisionEntity}.
+	 * @param revisions
+	 *            Revision numbers of the revision for which to get the data.
+	 * @return A list of revisions containing data for the given revision.
+	 * @throws IllegalArgumentException
+	 *             If a revision number is less or equal to 0 or if the class of
+	 *             the revision entity is invalid.
+	 * @throws IllegalStateException
+	 *             If the associated entity manager is closed.
+	 */
+	<T> List<T> findRevisions(Class<T> revisionEntityClass,
+			Set<Number> revisions) throws IllegalArgumentException,
+			IllegalStateException;
+	
 	/**
 	 * Gets an instance of the current revision entity, to which any entries in the audit tables will be bound.
 	 * Please note the if {@code persist} is {@code false}, and no audited entities are modified in this session,
Index: src/main/java/org/hibernate/envers/reader/AuditReaderImpl.java
===================================================================
--- src/main/java/org/hibernate/envers/reader/AuditReaderImpl.java	(revision 20237)
+++ src/main/java/org/hibernate/envers/reader/AuditReaderImpl.java	(working copy)
@@ -23,26 +23,29 @@
  */
 package org.hibernate.envers.reader;
 
+import static org.hibernate.envers.tools.ArgumentsTools.checkNotNull;
+import static org.hibernate.envers.tools.ArgumentsTools.checkPositive;
+
 import java.util.Date;
+import java.util.HashSet;
 import java.util.List;
+import java.util.Set;
+
 import javax.persistence.NoResultException;
 
+import org.hibernate.HibernateException;
+import org.hibernate.NonUniqueResultException;
+import org.hibernate.Query;
+import org.hibernate.Session;
+import org.hibernate.engine.SessionImplementor;
 import org.hibernate.envers.configuration.AuditConfiguration;
+import org.hibernate.envers.exception.AuditException;
 import org.hibernate.envers.exception.NotAuditedException;
 import org.hibernate.envers.exception.RevisionDoesNotExistException;
-import org.hibernate.envers.exception.AuditException;
 import org.hibernate.envers.query.AuditEntity;
 import org.hibernate.envers.query.AuditQueryCreator;
-import static org.hibernate.envers.tools.ArgumentsTools.checkNotNull;
-import static org.hibernate.envers.tools.ArgumentsTools.checkPositive;
-
 import org.hibernate.envers.synchronization.AuditProcess;
-
-import org.hibernate.NonUniqueResultException;
-import org.hibernate.Query;
-import org.hibernate.Session;
 import org.hibernate.event.EventSource;
-import org.hibernate.engine.SessionImplementor;
 
 /**
  * @author Adam Warski (adam at warski dot org)
@@ -190,7 +193,9 @@
         checkPositive(revision, "Entity revision");
         checkSession();
 
-        Query query = verCfg.getRevisionInfoQueryCreator().getRevisionQuery(session, revision);
+        Set<Number> revisions = new HashSet<Number>(1);
+        revisions.add(revision);
+        Query query = verCfg.getRevisionInfoQueryCreator().getRevisionsQuery(session, revisions);
 
         try {
             T revisionData = (T) query.uniqueResult();
@@ -205,6 +210,26 @@
         }
     }
 
+    @SuppressWarnings({"unchecked"})
+    public <T> List<T> findRevisions(Class<T> revisionEntityClass, Set<Number> revisions) throws IllegalArgumentException,
+    IllegalStateException {
+    	for (Number revision : revisions) {
+            checkNotNull(revision, "Entity revision");
+            checkPositive(revision, "Entity revision");
+		}
+        checkSession();
+
+        Query query = verCfg.getRevisionInfoQueryCreator().getRevisionsQuery(session, revisions);
+
+        try {
+            List<T> revisionList = query.list();
+
+            return revisionList;
+        } catch (HibernateException e) {
+            throw new AuditException(e);
+        }
+    }
+
 	@SuppressWarnings({"unchecked"})
 	public <T> T getCurrentRevision(Class<T> revisionEntityClass, boolean persist) {
 		if (!(session instanceof EventSource)) {
Index: src/main/java/org/hibernate/envers/revisioninfo/RevisionInfoQueryCreator.java
===================================================================
--- src/main/java/org/hibernate/envers/revisioninfo/RevisionInfoQueryCreator.java	(revision 20237)
+++ src/main/java/org/hibernate/envers/revisioninfo/RevisionInfoQueryCreator.java	(working copy)
@@ -24,6 +24,7 @@
 package org.hibernate.envers.revisioninfo;
 
 import java.util.Date;
+import java.util.Set;
 
 import org.hibernate.Query;
 import org.hibernate.Session;
@@ -34,7 +35,7 @@
 public class RevisionInfoQueryCreator {
     private final String revisionDateQuery;
     private final String revisionNumberForDateQuery;
-    private final String revisionQuery;
+    private final String revisionsQuery;
     private final boolean timestampAsDate;
 
     public RevisionInfoQueryCreator(String revisionInfoEntityName, String revisionInfoIdName,
@@ -53,10 +54,10 @@
                 .append(" rev where ").append(revisionInfoTimestampName).append(" <= :_revision_date")
                 .toString();
 
-        revisionQuery = new StringBuilder()
+        revisionsQuery = new StringBuilder()
                 .append("select rev from ").append(revisionInfoEntityName)
                 .append(" rev where ").append(revisionInfoIdName)
-                .append(" = :_revision_number")
+                .append(" in (:_revision_numbers)")
                 .toString();
     }
 
@@ -68,7 +69,7 @@
         return session.createQuery(revisionNumberForDateQuery).setParameter("_revision_date", timestampAsDate ? date : date.getTime());
     }
 
-    public Query getRevisionQuery(Session session, Number revision) {
-        return session.createQuery(revisionQuery).setParameter("_revision_number", revision);
+    public Query getRevisionsQuery(Session session, Set<Number> revisions) {
+        return session.createQuery(revisionsQuery).setParameterList("_revision_numbers", revisions);
     }
 }
Index: src/test/java/org/hibernate/envers/test/integration/reventity/Custom.java
===================================================================
--- src/test/java/org/hibernate/envers/test/integration/reventity/Custom.java	(revision 20237)
+++ src/test/java/org/hibernate/envers/test/integration/reventity/Custom.java	(working copy)
@@ -25,8 +25,13 @@
 
 import java.util.Arrays;
 import java.util.Date;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
+
 import javax.persistence.EntityManager;
 
+import org.hibernate.ejb.Ejb3Configuration;
 import org.hibernate.envers.AuditReader;
 import org.hibernate.envers.exception.RevisionDoesNotExistException;
 import org.hibernate.envers.test.AbstractEntityTest;
@@ -35,8 +40,6 @@
 import org.testng.annotations.BeforeClass;
 import org.testng.annotations.Test;
 
-import org.hibernate.ejb.Ejb3Configuration;
-
 /**
  * @author Adam Warski (adam at warski dot org)
  */
@@ -120,6 +123,20 @@
     }
 
     @Test
+    public void testFindRevisions() {
+        AuditReader vr = getAuditReader();
+
+        Set<Number> revNumbers = new HashSet<Number>();
+        revNumbers.add(Integer.valueOf(1));
+        revNumbers.add(Integer.valueOf(2));
+        
+        List<CustomRevEntity> revisions = vr.findRevisions(CustomRevEntity.class, revNumbers);
+        assert(revisions.size() == 2);
+        assert(revisions.contains(vr.findRevision(CustomRevEntity.class, 1)));
+        assert(revisions.contains(vr.findRevision(CustomRevEntity.class, 2)));
+    }
+
+    @Test
     public void testRevisionsCounts() {
         assert Arrays.asList(1, 2).equals(getAuditReader().getRevisions(StrTestEntity.class, id));
     }
Index: src/test/java/org/hibernate/envers/test/integration/reventity/CustomBoxed.java
===================================================================
--- src/test/java/org/hibernate/envers/test/integration/reventity/CustomBoxed.java	(revision 20237)
+++ src/test/java/org/hibernate/envers/test/integration/reventity/CustomBoxed.java	(working copy)
@@ -25,6 +25,10 @@
 
 import java.util.Arrays;
 import java.util.Date;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
+
 import javax.persistence.EntityManager;
 
 import org.hibernate.envers.AuditReader;
@@ -119,6 +123,20 @@
     }
 
     @Test
+    public void testFindRevisions() {
+        AuditReader vr = getAuditReader();
+
+        Set<Number> revNumbers = new HashSet<Number>();
+        revNumbers.add(Integer.valueOf(1));
+        revNumbers.add(Integer.valueOf(2));
+        
+        List<CustomBoxedRevEntity> revisions = vr.findRevisions(CustomBoxedRevEntity.class, revNumbers);
+        assert(revisions.size() == 2);
+        assert(revisions.contains(vr.findRevision(CustomBoxedRevEntity.class, 1)));
+        assert(revisions.contains(vr.findRevision(CustomBoxedRevEntity.class, 2)));
+    }
+
+    @Test
     public void testRevisionsCounts() {
         assert Arrays.asList(1, 2).equals(getAuditReader().getRevisions(StrTestEntity.class, id));
     }
Index: src/test/java/org/hibernate/envers/test/integration/reventity/Inherited.java
===================================================================
--- src/test/java/org/hibernate/envers/test/integration/reventity/Inherited.java	(revision 20237)
+++ src/test/java/org/hibernate/envers/test/integration/reventity/Inherited.java	(working copy)
@@ -25,6 +25,10 @@
 
 import java.util.Arrays;
 import java.util.Date;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
+
 import javax.persistence.EntityManager;
 
 import org.hibernate.envers.AuditReader;
@@ -119,6 +123,20 @@
     }
 
     @Test
+    public void testFindRevisions() {
+        AuditReader vr = getAuditReader();
+
+        Set<Number> revNumbers = new HashSet<Number>();
+        revNumbers.add(Integer.valueOf(1));
+        revNumbers.add(Integer.valueOf(2));
+        
+        List<InheritedRevEntity> revisions = vr.findRevisions(InheritedRevEntity.class, revNumbers);
+        assert(revisions.size() == 2);
+        assert(revisions.contains(vr.findRevision(InheritedRevEntity.class, 1)));
+        assert(revisions.contains(vr.findRevision(InheritedRevEntity.class, 2)));
+    }
+
+    @Test
     public void testRevisionsCounts() {
         assert Arrays.asList(1, 2).equals(getAuditReader().getRevisions(StrTestEntity.class, id));
     }
Index: src/test/java/org/hibernate/envers/test/integration/reventity/Listener.java
===================================================================
--- src/test/java/org/hibernate/envers/test/integration/reventity/Listener.java	(revision 20237)
+++ src/test/java/org/hibernate/envers/test/integration/reventity/Listener.java	(working copy)
@@ -25,6 +25,10 @@
 
 import java.util.Arrays;
 import java.util.Date;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
+
 import javax.persistence.EntityManager;
 
 import org.hibernate.envers.AuditReader;
@@ -132,6 +136,20 @@
     }
 
     @Test
+    public void testFindRevisions() {
+        AuditReader vr = getAuditReader();
+
+        Set<Number> revNumbers = new HashSet<Number>();
+        revNumbers.add(Integer.valueOf(1));
+        revNumbers.add(Integer.valueOf(2));
+        
+        List<ListenerRevEntity> revisions = vr.findRevisions(ListenerRevEntity.class, revNumbers);
+        assert(revisions.size() == 2);
+        assert(revisions.contains(vr.findRevision(ListenerRevEntity.class, 1)));
+        assert(revisions.contains(vr.findRevision(ListenerRevEntity.class, 2)));
+    }
+
+    @Test
     public void testRevisionsCounts() {
         assert Arrays.asList(1, 2).equals(getAuditReader().getRevisions(StrTestEntity.class, id));
     }
Index: src/test/java/org/hibernate/envers/test/integration/reventity/LongRevNumber.java
===================================================================
--- src/test/java/org/hibernate/envers/test/integration/reventity/LongRevNumber.java	(revision 20237)
+++ src/test/java/org/hibernate/envers/test/integration/reventity/LongRevNumber.java	(working copy)
@@ -24,6 +24,10 @@
 package org.hibernate.envers.test.integration.reventity;
 
 import java.util.Arrays;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
+
 import javax.persistence.EntityManager;
 
 import org.hibernate.envers.AuditReader;
@@ -71,6 +75,20 @@
     }
 
     @Test
+    public void testFindRevisions() {
+        AuditReader vr = getAuditReader();
+
+        Set<Number> revNumbers = new HashSet<Number>();
+        revNumbers.add(Long.valueOf(1));
+        revNumbers.add(Long.valueOf(2));
+        
+        List<LongRevNumberRevEntity> revisions = vr.findRevisions(LongRevNumberRevEntity.class, revNumbers);
+        assert(revisions.size() == 2);
+        assert(revisions.contains(vr.findRevision(LongRevNumberRevEntity.class, 1L)));
+        assert(revisions.contains(vr.findRevision(LongRevNumberRevEntity.class, 2L)));
+    }
+
+    @Test
     public void testRevisionsCounts() {
         assert Arrays.asList(1l, 2l).equals(getAuditReader().getRevisions(StrTestEntity.class, id));
     }
